// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kaspawalletd.proto

#include "kaspawalletd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace kaspawalletd {
PROTOBUF_CONSTEXPR GetBalanceRequest::GetBalanceRequest(
    ::_pbi::ConstantInitialized) {}
struct GetBalanceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBalanceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBalanceRequestDefaultTypeInternal() {}
  union {
    GetBalanceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBalanceRequestDefaultTypeInternal _GetBalanceRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBalanceResponse::GetBalanceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addressbalances_)*/{}
  , /*decltype(_impl_.available_)*/uint64_t{0u}
  , /*decltype(_impl_.pending_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBalanceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBalanceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBalanceResponseDefaultTypeInternal() {}
  union {
    GetBalanceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBalanceResponseDefaultTypeInternal _GetBalanceResponse_default_instance_;
PROTOBUF_CONSTEXPR AddressBalances::AddressBalances(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.available_)*/uint64_t{0u}
  , /*decltype(_impl_.pending_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddressBalancesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddressBalancesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddressBalancesDefaultTypeInternal() {}
  union {
    AddressBalances _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddressBalancesDefaultTypeInternal _AddressBalances_default_instance_;
PROTOBUF_CONSTEXPR CreateUnsignedTransactionsRequest::CreateUnsignedTransactionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_)*/{}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateUnsignedTransactionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateUnsignedTransactionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateUnsignedTransactionsRequestDefaultTypeInternal() {}
  union {
    CreateUnsignedTransactionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateUnsignedTransactionsRequestDefaultTypeInternal _CreateUnsignedTransactionsRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateUnsignedTransactionsResponse::CreateUnsignedTransactionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unsignedtransactions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateUnsignedTransactionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateUnsignedTransactionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateUnsignedTransactionsResponseDefaultTypeInternal() {}
  union {
    CreateUnsignedTransactionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateUnsignedTransactionsResponseDefaultTypeInternal _CreateUnsignedTransactionsResponse_default_instance_;
PROTOBUF_CONSTEXPR ShowAddressesRequest::ShowAddressesRequest(
    ::_pbi::ConstantInitialized) {}
struct ShowAddressesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowAddressesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowAddressesRequestDefaultTypeInternal() {}
  union {
    ShowAddressesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowAddressesRequestDefaultTypeInternal _ShowAddressesRequest_default_instance_;
PROTOBUF_CONSTEXPR ShowAddressesResponse::ShowAddressesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShowAddressesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowAddressesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowAddressesResponseDefaultTypeInternal() {}
  union {
    ShowAddressesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowAddressesResponseDefaultTypeInternal _ShowAddressesResponse_default_instance_;
PROTOBUF_CONSTEXPR NewAddressRequest::NewAddressRequest(
    ::_pbi::ConstantInitialized) {}
struct NewAddressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewAddressRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewAddressRequestDefaultTypeInternal() {}
  union {
    NewAddressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewAddressRequestDefaultTypeInternal _NewAddressRequest_default_instance_;
PROTOBUF_CONSTEXPR NewAddressResponse::NewAddressResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewAddressResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewAddressResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewAddressResponseDefaultTypeInternal() {}
  union {
    NewAddressResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewAddressResponseDefaultTypeInternal _NewAddressResponse_default_instance_;
PROTOBUF_CONSTEXPR BroadcastRequest::BroadcastRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transactions_)*/{}
  , /*decltype(_impl_.isdomain_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BroadcastRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastRequestDefaultTypeInternal() {}
  union {
    BroadcastRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastRequestDefaultTypeInternal _BroadcastRequest_default_instance_;
PROTOBUF_CONSTEXPR BroadcastResponse::BroadcastResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BroadcastResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastResponseDefaultTypeInternal() {}
  union {
    BroadcastResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastResponseDefaultTypeInternal _BroadcastResponse_default_instance_;
PROTOBUF_CONSTEXPR ShutdownRequest::ShutdownRequest(
    ::_pbi::ConstantInitialized) {}
struct ShutdownRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShutdownRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShutdownRequestDefaultTypeInternal() {}
  union {
    ShutdownRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShutdownRequestDefaultTypeInternal _ShutdownRequest_default_instance_;
PROTOBUF_CONSTEXPR ShutdownResponse::ShutdownResponse(
    ::_pbi::ConstantInitialized) {}
struct ShutdownResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShutdownResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShutdownResponseDefaultTypeInternal() {}
  union {
    ShutdownResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShutdownResponseDefaultTypeInternal _ShutdownResponse_default_instance_;
PROTOBUF_CONSTEXPR Outpoint::Outpoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transactionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutpointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutpointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutpointDefaultTypeInternal() {}
  union {
    Outpoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutpointDefaultTypeInternal _Outpoint_default_instance_;
PROTOBUF_CONSTEXPR UtxosByAddressesEntry::UtxosByAddressesEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outpoint_)*/nullptr
  , /*decltype(_impl_.utxoentry_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UtxosByAddressesEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UtxosByAddressesEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UtxosByAddressesEntryDefaultTypeInternal() {}
  union {
    UtxosByAddressesEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UtxosByAddressesEntryDefaultTypeInternal _UtxosByAddressesEntry_default_instance_;
PROTOBUF_CONSTEXPR ScriptPublicKey::ScriptPublicKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scriptpublickey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScriptPublicKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScriptPublicKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScriptPublicKeyDefaultTypeInternal() {}
  union {
    ScriptPublicKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScriptPublicKeyDefaultTypeInternal _ScriptPublicKey_default_instance_;
PROTOBUF_CONSTEXPR UtxoEntry::UtxoEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scriptpublickey_)*/nullptr
  , /*decltype(_impl_.amount_)*/uint64_t{0u}
  , /*decltype(_impl_.blockdaascore_)*/uint64_t{0u}
  , /*decltype(_impl_.iscoinbase_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UtxoEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UtxoEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UtxoEntryDefaultTypeInternal() {}
  union {
    UtxoEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UtxoEntryDefaultTypeInternal _UtxoEntry_default_instance_;
PROTOBUF_CONSTEXPR GetExternalSpendableUTXOsRequest::GetExternalSpendableUTXOsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetExternalSpendableUTXOsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetExternalSpendableUTXOsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetExternalSpendableUTXOsRequestDefaultTypeInternal() {}
  union {
    GetExternalSpendableUTXOsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetExternalSpendableUTXOsRequestDefaultTypeInternal _GetExternalSpendableUTXOsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetExternalSpendableUTXOsResponse::GetExternalSpendableUTXOsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetExternalSpendableUTXOsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetExternalSpendableUTXOsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetExternalSpendableUTXOsResponseDefaultTypeInternal() {}
  union {
    GetExternalSpendableUTXOsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetExternalSpendableUTXOsResponseDefaultTypeInternal _GetExternalSpendableUTXOsResponse_default_instance_;
PROTOBUF_CONSTEXPR SendRequest::SendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_)*/{}
  , /*decltype(_impl_.toaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendRequestDefaultTypeInternal() {}
  union {
    SendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendRequestDefaultTypeInternal _SendRequest_default_instance_;
PROTOBUF_CONSTEXPR SendResponse::SendResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendResponseDefaultTypeInternal() {}
  union {
    SendResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendResponseDefaultTypeInternal _SendResponse_default_instance_;
PROTOBUF_CONSTEXPR SignRequest::SignRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unsignedtransactions_)*/{}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignRequestDefaultTypeInternal() {}
  union {
    SignRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignRequestDefaultTypeInternal _SignRequest_default_instance_;
PROTOBUF_CONSTEXPR SignResponse::SignResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signedtransactions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignResponseDefaultTypeInternal() {}
  union {
    SignResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignResponseDefaultTypeInternal _SignResponse_default_instance_;
PROTOBUF_CONSTEXPR IsValidAddress::IsValidAddress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isvalid_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IsValidAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsValidAddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsValidAddressDefaultTypeInternal() {}
  union {
    IsValidAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsValidAddressDefaultTypeInternal _IsValidAddress_default_instance_;
PROTOBUF_CONSTEXPR CheckIfAddressesAreValidRequest::CheckIfAddressesAreValidRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addresses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckIfAddressesAreValidRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckIfAddressesAreValidRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckIfAddressesAreValidRequestDefaultTypeInternal() {}
  union {
    CheckIfAddressesAreValidRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckIfAddressesAreValidRequestDefaultTypeInternal _CheckIfAddressesAreValidRequest_default_instance_;
PROTOBUF_CONSTEXPR CheckIfAddressesAreValidResponse::CheckIfAddressesAreValidResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arevalidaddresses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckIfAddressesAreValidResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckIfAddressesAreValidResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckIfAddressesAreValidResponseDefaultTypeInternal() {}
  union {
    CheckIfAddressesAreValidResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckIfAddressesAreValidResponseDefaultTypeInternal _CheckIfAddressesAreValidResponse_default_instance_;
PROTOBUF_CONSTEXPR CheckIfAddressIsValidRequest::CheckIfAddressIsValidRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckIfAddressIsValidRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckIfAddressIsValidRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckIfAddressIsValidRequestDefaultTypeInternal() {}
  union {
    CheckIfAddressIsValidRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckIfAddressIsValidRequestDefaultTypeInternal _CheckIfAddressIsValidRequest_default_instance_;
PROTOBUF_CONSTEXPR CheckIfAddressIsValidResponse::CheckIfAddressIsValidResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isvalid_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckIfAddressIsValidResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckIfAddressIsValidResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckIfAddressIsValidResponseDefaultTypeInternal() {}
  union {
    CheckIfAddressIsValidResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckIfAddressIsValidResponseDefaultTypeInternal _CheckIfAddressIsValidResponse_default_instance_;
}  // namespace kaspawalletd
static ::_pb::Metadata file_level_metadata_kaspawalletd_2eproto[28];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_kaspawalletd_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_kaspawalletd_2eproto = nullptr;

const uint32_t TableStruct_kaspawalletd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetBalanceResponse, _impl_.available_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetBalanceResponse, _impl_.pending_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetBalanceResponse, _impl_.addressbalances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::AddressBalances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::AddressBalances, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::AddressBalances, _impl_.available_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::AddressBalances, _impl_.pending_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CreateUnsignedTransactionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CreateUnsignedTransactionsRequest, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CreateUnsignedTransactionsRequest, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CreateUnsignedTransactionsRequest, _impl_.from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CreateUnsignedTransactionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CreateUnsignedTransactionsResponse, _impl_.unsignedtransactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ShowAddressesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ShowAddressesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ShowAddressesResponse, _impl_.address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::NewAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::NewAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::NewAddressResponse, _impl_.address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::BroadcastRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::BroadcastRequest, _impl_.isdomain_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::BroadcastRequest, _impl_.transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::BroadcastResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::BroadcastResponse, _impl_.txids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ShutdownRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ShutdownResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::Outpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::Outpoint, _impl_.transactionid_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::Outpoint, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxosByAddressesEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxosByAddressesEntry, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxosByAddressesEntry, _impl_.outpoint_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxosByAddressesEntry, _impl_.utxoentry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ScriptPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ScriptPublicKey, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ScriptPublicKey, _impl_.scriptpublickey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxoEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxoEntry, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxoEntry, _impl_.scriptpublickey_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxoEntry, _impl_.blockdaascore_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxoEntry, _impl_.iscoinbase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetExternalSpendableUTXOsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetExternalSpendableUTXOsRequest, _impl_.address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetExternalSpendableUTXOsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetExternalSpendableUTXOsResponse, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendRequest, _impl_.toaddress_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendRequest, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendRequest, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendRequest, _impl_.from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendResponse, _impl_.txids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SignRequest, _impl_.unsignedtransactions_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SignRequest, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SignResponse, _impl_.signedtransactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::IsValidAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::IsValidAddress, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::IsValidAddress, _impl_.isvalid_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::IsValidAddress, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressesAreValidRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressesAreValidRequest, _impl_.addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressesAreValidResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressesAreValidResponse, _impl_.arevalidaddresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressIsValidRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressIsValidRequest, _impl_.address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressIsValidResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressIsValidResponse, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressIsValidResponse, _impl_.isvalid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kaspawalletd::GetBalanceRequest)},
  { 6, -1, -1, sizeof(::kaspawalletd::GetBalanceResponse)},
  { 15, -1, -1, sizeof(::kaspawalletd::AddressBalances)},
  { 24, -1, -1, sizeof(::kaspawalletd::CreateUnsignedTransactionsRequest)},
  { 33, -1, -1, sizeof(::kaspawalletd::CreateUnsignedTransactionsResponse)},
  { 40, -1, -1, sizeof(::kaspawalletd::ShowAddressesRequest)},
  { 46, -1, -1, sizeof(::kaspawalletd::ShowAddressesResponse)},
  { 53, -1, -1, sizeof(::kaspawalletd::NewAddressRequest)},
  { 59, -1, -1, sizeof(::kaspawalletd::NewAddressResponse)},
  { 66, -1, -1, sizeof(::kaspawalletd::BroadcastRequest)},
  { 74, -1, -1, sizeof(::kaspawalletd::BroadcastResponse)},
  { 81, -1, -1, sizeof(::kaspawalletd::ShutdownRequest)},
  { 87, -1, -1, sizeof(::kaspawalletd::ShutdownResponse)},
  { 93, -1, -1, sizeof(::kaspawalletd::Outpoint)},
  { 101, -1, -1, sizeof(::kaspawalletd::UtxosByAddressesEntry)},
  { 110, -1, -1, sizeof(::kaspawalletd::ScriptPublicKey)},
  { 118, -1, -1, sizeof(::kaspawalletd::UtxoEntry)},
  { 128, -1, -1, sizeof(::kaspawalletd::GetExternalSpendableUTXOsRequest)},
  { 135, -1, -1, sizeof(::kaspawalletd::GetExternalSpendableUTXOsResponse)},
  { 142, -1, -1, sizeof(::kaspawalletd::SendRequest)},
  { 152, -1, -1, sizeof(::kaspawalletd::SendResponse)},
  { 159, -1, -1, sizeof(::kaspawalletd::SignRequest)},
  { 167, -1, -1, sizeof(::kaspawalletd::SignResponse)},
  { 174, -1, -1, sizeof(::kaspawalletd::IsValidAddress)},
  { 183, -1, -1, sizeof(::kaspawalletd::CheckIfAddressesAreValidRequest)},
  { 190, -1, -1, sizeof(::kaspawalletd::CheckIfAddressesAreValidResponse)},
  { 197, -1, -1, sizeof(::kaspawalletd::CheckIfAddressIsValidRequest)},
  { 204, -1, -1, sizeof(::kaspawalletd::CheckIfAddressIsValidResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::kaspawalletd::_GetBalanceRequest_default_instance_._instance,
  &::kaspawalletd::_GetBalanceResponse_default_instance_._instance,
  &::kaspawalletd::_AddressBalances_default_instance_._instance,
  &::kaspawalletd::_CreateUnsignedTransactionsRequest_default_instance_._instance,
  &::kaspawalletd::_CreateUnsignedTransactionsResponse_default_instance_._instance,
  &::kaspawalletd::_ShowAddressesRequest_default_instance_._instance,
  &::kaspawalletd::_ShowAddressesResponse_default_instance_._instance,
  &::kaspawalletd::_NewAddressRequest_default_instance_._instance,
  &::kaspawalletd::_NewAddressResponse_default_instance_._instance,
  &::kaspawalletd::_BroadcastRequest_default_instance_._instance,
  &::kaspawalletd::_BroadcastResponse_default_instance_._instance,
  &::kaspawalletd::_ShutdownRequest_default_instance_._instance,
  &::kaspawalletd::_ShutdownResponse_default_instance_._instance,
  &::kaspawalletd::_Outpoint_default_instance_._instance,
  &::kaspawalletd::_UtxosByAddressesEntry_default_instance_._instance,
  &::kaspawalletd::_ScriptPublicKey_default_instance_._instance,
  &::kaspawalletd::_UtxoEntry_default_instance_._instance,
  &::kaspawalletd::_GetExternalSpendableUTXOsRequest_default_instance_._instance,
  &::kaspawalletd::_GetExternalSpendableUTXOsResponse_default_instance_._instance,
  &::kaspawalletd::_SendRequest_default_instance_._instance,
  &::kaspawalletd::_SendResponse_default_instance_._instance,
  &::kaspawalletd::_SignRequest_default_instance_._instance,
  &::kaspawalletd::_SignResponse_default_instance_._instance,
  &::kaspawalletd::_IsValidAddress_default_instance_._instance,
  &::kaspawalletd::_CheckIfAddressesAreValidRequest_default_instance_._instance,
  &::kaspawalletd::_CheckIfAddressesAreValidResponse_default_instance_._instance,
  &::kaspawalletd::_CheckIfAddressIsValidRequest_default_instance_._instance,
  &::kaspawalletd::_CheckIfAddressIsValidResponse_default_instance_._instance,
};

const char descriptor_table_protodef_kaspawalletd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022kaspawalletd.proto\022\014kaspawalletd\"\023\n\021Ge"
  "tBalanceRequest\"p\n\022GetBalanceResponse\022\021\n"
  "\tavailable\030\001 \001(\004\022\017\n\007pending\030\002 \001(\004\0226\n\017add"
  "ressBalances\030\003 \003(\0132\035.kaspawalletd.Addres"
  "sBalances\"F\n\017AddressBalances\022\017\n\007address\030"
  "\001 \001(\t\022\021\n\tavailable\030\002 \001(\004\022\017\n\007pending\030\003 \001("
  "\004\"R\n!CreateUnsignedTransactionsRequest\022\017"
  "\n\007address\030\001 \001(\t\022\016\n\006amount\030\002 \001(\004\022\014\n\004from\030"
  "\003 \003(\t\"B\n\"CreateUnsignedTransactionsRespo"
  "nse\022\034\n\024unsignedTransactions\030\001 \003(\014\"\026\n\024Sho"
  "wAddressesRequest\"(\n\025ShowAddressesRespon"
  "se\022\017\n\007address\030\001 \003(\t\"\023\n\021NewAddressRequest"
  "\"%\n\022NewAddressResponse\022\017\n\007address\030\001 \001(\t\""
  ":\n\020BroadcastRequest\022\020\n\010isDomain\030\001 \001(\010\022\024\n"
  "\014transactions\030\002 \003(\014\"\"\n\021BroadcastResponse"
  "\022\r\n\005txIDs\030\001 \003(\t\"\021\n\017ShutdownRequest\"\022\n\020Sh"
  "utdownResponse\"0\n\010Outpoint\022\025\n\rtransactio"
  "nId\030\001 \001(\t\022\r\n\005index\030\002 \001(\r\"~\n\025UtxosByAddre"
  "ssesEntry\022\017\n\007address\030\001 \001(\t\022(\n\010outpoint\030\002"
  " \001(\0132\026.kaspawalletd.Outpoint\022*\n\tutxoEntr"
  "y\030\003 \001(\0132\027.kaspawalletd.UtxoEntry\";\n\017Scri"
  "ptPublicKey\022\017\n\007version\030\001 \001(\r\022\027\n\017scriptPu"
  "blicKey\030\002 \001(\t\"~\n\tUtxoEntry\022\016\n\006amount\030\001 \001"
  "(\004\0226\n\017scriptPublicKey\030\002 \001(\0132\035.kaspawalle"
  "td.ScriptPublicKey\022\025\n\rblockDaaScore\030\003 \001("
  "\004\022\022\n\nisCoinbase\030\004 \001(\010\"3\n GetExternalSpen"
  "dableUTXOsRequest\022\017\n\007address\030\001 \001(\t\"Y\n!Ge"
  "tExternalSpendableUTXOsResponse\0224\n\007Entri"
  "es\030\001 \003(\0132#.kaspawalletd.UtxosByAddresses"
  "Entry\"P\n\013SendRequest\022\021\n\ttoAddress\030\001 \001(\t\022"
  "\016\n\006amount\030\002 \001(\004\022\020\n\010password\030\003 \001(\t\022\014\n\004fro"
  "m\030\004 \003(\t\"\035\n\014SendResponse\022\r\n\005txIDs\030\001 \003(\t\"="
  "\n\013SignRequest\022\034\n\024unsignedTransactions\030\001 "
  "\003(\014\022\020\n\010password\030\002 \001(\t\"*\n\014SignResponse\022\032\n"
  "\022signedTransactions\030\001 \003(\014\"A\n\016IsValidAddr"
  "ess\022\017\n\007address\030\001 \001(\t\022\017\n\007isValid\030\002 \001(\010\022\r\n"
  "\005error\030\003 \001(\t\"4\n\037CheckIfAddressesAreValid"
  "Request\022\021\n\taddresses\030\001 \003(\t\"[\n CheckIfAdd"
  "ressesAreValidResponse\0227\n\021areValidAddres"
  "ses\030\001 \003(\0132\034.kaspawalletd.IsValidAddress\""
  "/\n\034CheckIfAddressIsValidRequest\022\017\n\007addre"
  "ss\030\001 \001(\t\"A\n\035CheckIfAddressIsValidRespons"
  "e\022\017\n\007address\030\001 \001(\t\022\017\n\007isValid\030\002 \001(\0102\244\010\n\014"
  "kaspawalletd\022Q\n\nGetBalance\022\037.kaspawallet"
  "d.GetBalanceRequest\032 .kaspawalletd.GetBa"
  "lanceResponse\"\000\022~\n\031GetExternalSpendableU"
  "TXOs\022..kaspawalletd.GetExternalSpendable"
  "UTXOsRequest\032/.kaspawalletd.GetExternalS"
  "pendableUTXOsResponse\"\000\022\201\001\n\032CreateUnsign"
  "edTransactions\022/.kaspawalletd.CreateUnsi"
  "gnedTransactionsRequest\0320.kaspawalletd.C"
  "reateUnsignedTransactionsResponse\"\000\022Z\n\rS"
  "howAddresses\022\".kaspawalletd.ShowAddresse"
  "sRequest\032#.kaspawalletd.ShowAddressesRes"
  "ponse\"\000\022Q\n\nNewAddress\022\037.kaspawalletd.New"
  "AddressRequest\032 .kaspawalletd.NewAddress"
  "Response\"\000\022K\n\010Shutdown\022\035.kaspawalletd.Sh"
  "utdownRequest\032\036.kaspawalletd.ShutdownRes"
  "ponse\"\000\022N\n\tBroadcast\022\036.kaspawalletd.Broa"
  "dcastRequest\032\037.kaspawalletd.BroadcastRes"
  "ponse\"\000\022\?\n\004Send\022\031.kaspawalletd.SendReque"
  "st\032\032.kaspawalletd.SendResponse\"\000\022\?\n\004Sign"
  "\022\031.kaspawalletd.SignRequest\032\032.kaspawalle"
  "td.SignResponse\"\000\022{\n\030CheckIfAddressesAre"
  "Valid\022-.kaspawalletd.CheckIfAddressesAre"
  "ValidRequest\032..kaspawalletd.CheckIfAddre"
  "ssesAreValidResponse\"\000\022r\n\025CheckIfAddress"
  "IsValid\022*.kaspawalletd.CheckIfAddressIsV"
  "alidRequest\032+.kaspawalletd.CheckIfAddres"
  "sIsValidResponse\"\000B&Z$github.com/kaspane"
  "t/kaspad/protowireb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_kaspawalletd_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_kaspawalletd_2eproto = {
    false, false, 2826, descriptor_table_protodef_kaspawalletd_2eproto,
    "kaspawalletd.proto",
    &descriptor_table_kaspawalletd_2eproto_once, nullptr, 0, 28,
    schemas, file_default_instances, TableStruct_kaspawalletd_2eproto::offsets,
    file_level_metadata_kaspawalletd_2eproto, file_level_enum_descriptors_kaspawalletd_2eproto,
    file_level_service_descriptors_kaspawalletd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_kaspawalletd_2eproto_getter() {
  return &descriptor_table_kaspawalletd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_kaspawalletd_2eproto(&descriptor_table_kaspawalletd_2eproto);
namespace kaspawalletd {

// ===================================================================

class GetBalanceRequest::_Internal {
 public:
};

GetBalanceRequest::GetBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.GetBalanceRequest)
}
GetBalanceRequest::GetBalanceRequest(const GetBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetBalanceRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.GetBalanceRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBalanceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBalanceRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetBalanceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[0]);
}

// ===================================================================

class GetBalanceResponse::_Internal {
 public:
};

GetBalanceResponse::GetBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.GetBalanceResponse)
}
GetBalanceResponse::GetBalanceResponse(const GetBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBalanceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addressbalances_){from._impl_.addressbalances_}
    , decltype(_impl_.available_){}
    , decltype(_impl_.pending_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.available_, &from._impl_.available_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pending_) -
    reinterpret_cast<char*>(&_impl_.available_)) + sizeof(_impl_.pending_));
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.GetBalanceResponse)
}

inline void GetBalanceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addressbalances_){arena}
    , decltype(_impl_.available_){uint64_t{0u}}
    , decltype(_impl_.pending_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBalanceResponse::~GetBalanceResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.GetBalanceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBalanceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addressbalances_.~RepeatedPtrField();
}

void GetBalanceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.GetBalanceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addressbalances_.Clear();
  ::memset(&_impl_.available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pending_) -
      reinterpret_cast<char*>(&_impl_.available_)) + sizeof(_impl_.pending_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBalanceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kaspawalletd.AddressBalances addressBalances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addressbalances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBalanceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.GetBalanceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 available = 1;
  if (this->_internal_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_available(), target);
  }

  // uint64 pending = 2;
  if (this->_internal_pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pending(), target);
  }

  // repeated .kaspawalletd.AddressBalances addressBalances = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_addressbalances_size()); i < n; i++) {
    const auto& repfield = this->_internal_addressbalances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.GetBalanceResponse)
  return target;
}

size_t GetBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.GetBalanceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaspawalletd.AddressBalances addressBalances = 3;
  total_size += 1UL * this->_internal_addressbalances_size();
  for (const auto& msg : this->_impl_.addressbalances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 available = 1;
  if (this->_internal_available() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_available());
  }

  // uint64 pending = 2;
  if (this->_internal_pending() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pending());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBalanceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBalanceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBalanceResponse::GetClassData() const { return &_class_data_; }


void GetBalanceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBalanceResponse*>(&to_msg);
  auto& from = static_cast<const GetBalanceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.GetBalanceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.addressbalances_.MergeFrom(from._impl_.addressbalances_);
  if (from._internal_available() != 0) {
    _this->_internal_set_available(from._internal_available());
  }
  if (from._internal_pending() != 0) {
    _this->_internal_set_pending(from._internal_pending());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBalanceResponse::CopyFrom(const GetBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.GetBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalanceResponse::IsInitialized() const {
  return true;
}

void GetBalanceResponse::InternalSwap(GetBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.addressbalances_.InternalSwap(&other->_impl_.addressbalances_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBalanceResponse, _impl_.pending_)
      + sizeof(GetBalanceResponse::_impl_.pending_)
      - PROTOBUF_FIELD_OFFSET(GetBalanceResponse, _impl_.available_)>(
          reinterpret_cast<char*>(&_impl_.available_),
          reinterpret_cast<char*>(&other->_impl_.available_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBalanceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[1]);
}

// ===================================================================

class AddressBalances::_Internal {
 public:
};

AddressBalances::AddressBalances(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.AddressBalances)
}
AddressBalances::AddressBalances(const AddressBalances& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddressBalances* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.available_){}
    , decltype(_impl_.pending_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.available_, &from._impl_.available_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pending_) -
    reinterpret_cast<char*>(&_impl_.available_)) + sizeof(_impl_.pending_));
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.AddressBalances)
}

inline void AddressBalances::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.available_){uint64_t{0u}}
    , decltype(_impl_.pending_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddressBalances::~AddressBalances() {
  // @@protoc_insertion_point(destructor:kaspawalletd.AddressBalances)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddressBalances::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void AddressBalances::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddressBalances::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.AddressBalances)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  ::memset(&_impl_.available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pending_) -
      reinterpret_cast<char*>(&_impl_.available_)) + sizeof(_impl_.pending_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressBalances::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.AddressBalances.address"));
        } else
          goto handle_unusual;
        continue;
      // uint64 available = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddressBalances::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.AddressBalances)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.AddressBalances.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 available = 2;
  if (this->_internal_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_available(), target);
  }

  // uint64 pending = 3;
  if (this->_internal_pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pending(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.AddressBalances)
  return target;
}

size_t AddressBalances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.AddressBalances)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint64 available = 2;
  if (this->_internal_available() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_available());
  }

  // uint64 pending = 3;
  if (this->_internal_pending() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pending());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressBalances::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddressBalances::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressBalances::GetClassData() const { return &_class_data_; }


void AddressBalances::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddressBalances*>(&to_msg);
  auto& from = static_cast<const AddressBalances&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.AddressBalances)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_available() != 0) {
    _this->_internal_set_available(from._internal_available());
  }
  if (from._internal_pending() != 0) {
    _this->_internal_set_pending(from._internal_pending());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressBalances::CopyFrom(const AddressBalances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.AddressBalances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressBalances::IsInitialized() const {
  return true;
}

void AddressBalances::InternalSwap(AddressBalances* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddressBalances, _impl_.pending_)
      + sizeof(AddressBalances::_impl_.pending_)
      - PROTOBUF_FIELD_OFFSET(AddressBalances, _impl_.available_)>(
          reinterpret_cast<char*>(&_impl_.available_),
          reinterpret_cast<char*>(&other->_impl_.available_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressBalances::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[2]);
}

// ===================================================================

class CreateUnsignedTransactionsRequest::_Internal {
 public:
};

CreateUnsignedTransactionsRequest::CreateUnsignedTransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.CreateUnsignedTransactionsRequest)
}
CreateUnsignedTransactionsRequest::CreateUnsignedTransactionsRequest(const CreateUnsignedTransactionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateUnsignedTransactionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){from._impl_.from_}
    , decltype(_impl_.address_){}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.CreateUnsignedTransactionsRequest)
}

inline void CreateUnsignedTransactionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){arena}
    , decltype(_impl_.address_){}
    , decltype(_impl_.amount_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateUnsignedTransactionsRequest::~CreateUnsignedTransactionsRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.CreateUnsignedTransactionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateUnsignedTransactionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_.~RepeatedPtrField();
  _impl_.address_.Destroy();
}

void CreateUnsignedTransactionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateUnsignedTransactionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.CreateUnsignedTransactionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.from_.Clear();
  _impl_.address_.ClearToEmpty();
  _impl_.amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUnsignedTransactionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.CreateUnsignedTransactionsRequest.address"));
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_from();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.CreateUnsignedTransactionsRequest.from"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateUnsignedTransactionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.CreateUnsignedTransactionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.CreateUnsignedTransactionsRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  // repeated string from = 3;
  for (int i = 0, n = this->_internal_from_size(); i < n; i++) {
    const auto& s = this->_internal_from(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.CreateUnsignedTransactionsRequest.from");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.CreateUnsignedTransactionsRequest)
  return target;
}

size_t CreateUnsignedTransactionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.CreateUnsignedTransactionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string from = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.from_.size());
  for (int i = 0, n = _impl_.from_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.from_.Get(i));
  }

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateUnsignedTransactionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateUnsignedTransactionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateUnsignedTransactionsRequest::GetClassData() const { return &_class_data_; }


void CreateUnsignedTransactionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateUnsignedTransactionsRequest*>(&to_msg);
  auto& from = static_cast<const CreateUnsignedTransactionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.CreateUnsignedTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.from_.MergeFrom(from._impl_.from_);
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateUnsignedTransactionsRequest::CopyFrom(const CreateUnsignedTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.CreateUnsignedTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUnsignedTransactionsRequest::IsInitialized() const {
  return true;
}

void CreateUnsignedTransactionsRequest::InternalSwap(CreateUnsignedTransactionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.from_.InternalSwap(&other->_impl_.from_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUnsignedTransactionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[3]);
}

// ===================================================================

class CreateUnsignedTransactionsResponse::_Internal {
 public:
};

CreateUnsignedTransactionsResponse::CreateUnsignedTransactionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.CreateUnsignedTransactionsResponse)
}
CreateUnsignedTransactionsResponse::CreateUnsignedTransactionsResponse(const CreateUnsignedTransactionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateUnsignedTransactionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unsignedtransactions_){from._impl_.unsignedtransactions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.CreateUnsignedTransactionsResponse)
}

inline void CreateUnsignedTransactionsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unsignedtransactions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateUnsignedTransactionsResponse::~CreateUnsignedTransactionsResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.CreateUnsignedTransactionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateUnsignedTransactionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unsignedtransactions_.~RepeatedPtrField();
}

void CreateUnsignedTransactionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateUnsignedTransactionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.CreateUnsignedTransactionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unsignedtransactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUnsignedTransactionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes unsignedTransactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unsignedtransactions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateUnsignedTransactionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.CreateUnsignedTransactionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes unsignedTransactions = 1;
  for (int i = 0, n = this->_internal_unsignedtransactions_size(); i < n; i++) {
    const auto& s = this->_internal_unsignedtransactions(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.CreateUnsignedTransactionsResponse)
  return target;
}

size_t CreateUnsignedTransactionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.CreateUnsignedTransactionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes unsignedTransactions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.unsignedtransactions_.size());
  for (int i = 0, n = _impl_.unsignedtransactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.unsignedtransactions_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateUnsignedTransactionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateUnsignedTransactionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateUnsignedTransactionsResponse::GetClassData() const { return &_class_data_; }


void CreateUnsignedTransactionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateUnsignedTransactionsResponse*>(&to_msg);
  auto& from = static_cast<const CreateUnsignedTransactionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.CreateUnsignedTransactionsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unsignedtransactions_.MergeFrom(from._impl_.unsignedtransactions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateUnsignedTransactionsResponse::CopyFrom(const CreateUnsignedTransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.CreateUnsignedTransactionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUnsignedTransactionsResponse::IsInitialized() const {
  return true;
}

void CreateUnsignedTransactionsResponse::InternalSwap(CreateUnsignedTransactionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.unsignedtransactions_.InternalSwap(&other->_impl_.unsignedtransactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUnsignedTransactionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[4]);
}

// ===================================================================

class ShowAddressesRequest::_Internal {
 public:
};

ShowAddressesRequest::ShowAddressesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.ShowAddressesRequest)
}
ShowAddressesRequest::ShowAddressesRequest(const ShowAddressesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ShowAddressesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.ShowAddressesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowAddressesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowAddressesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ShowAddressesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[5]);
}

// ===================================================================

class ShowAddressesResponse::_Internal {
 public:
};

ShowAddressesResponse::ShowAddressesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.ShowAddressesResponse)
}
ShowAddressesResponse::ShowAddressesResponse(const ShowAddressesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShowAddressesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){from._impl_.address_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.ShowAddressesResponse)
}

inline void ShowAddressesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShowAddressesResponse::~ShowAddressesResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.ShowAddressesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowAddressesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.~RepeatedPtrField();
}

void ShowAddressesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowAddressesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.ShowAddressesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowAddressesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_address();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.ShowAddressesResponse.address"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShowAddressesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.ShowAddressesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string address = 1;
  for (int i = 0, n = this->_internal_address_size(); i < n; i++) {
    const auto& s = this->_internal_address(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.ShowAddressesResponse.address");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.ShowAddressesResponse)
  return target;
}

size_t ShowAddressesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.ShowAddressesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string address = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.address_.size());
  for (int i = 0, n = _impl_.address_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.address_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowAddressesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShowAddressesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowAddressesResponse::GetClassData() const { return &_class_data_; }


void ShowAddressesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShowAddressesResponse*>(&to_msg);
  auto& from = static_cast<const ShowAddressesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.ShowAddressesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.address_.MergeFrom(from._impl_.address_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShowAddressesResponse::CopyFrom(const ShowAddressesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.ShowAddressesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowAddressesResponse::IsInitialized() const {
  return true;
}

void ShowAddressesResponse::InternalSwap(ShowAddressesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.address_.InternalSwap(&other->_impl_.address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowAddressesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[6]);
}

// ===================================================================

class NewAddressRequest::_Internal {
 public:
};

NewAddressRequest::NewAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.NewAddressRequest)
}
NewAddressRequest::NewAddressRequest(const NewAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  NewAddressRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.NewAddressRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewAddressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewAddressRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NewAddressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[7]);
}

// ===================================================================

class NewAddressResponse::_Internal {
 public:
};

NewAddressResponse::NewAddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.NewAddressResponse)
}
NewAddressResponse::NewAddressResponse(const NewAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewAddressResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.NewAddressResponse)
}

inline void NewAddressResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewAddressResponse::~NewAddressResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.NewAddressResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewAddressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void NewAddressResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.NewAddressResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewAddressResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.NewAddressResponse.address"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewAddressResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.NewAddressResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.NewAddressResponse.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.NewAddressResponse)
  return target;
}

size_t NewAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.NewAddressResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewAddressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewAddressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewAddressResponse::GetClassData() const { return &_class_data_; }


void NewAddressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewAddressResponse*>(&to_msg);
  auto& from = static_cast<const NewAddressResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.NewAddressResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewAddressResponse::CopyFrom(const NewAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.NewAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewAddressResponse::IsInitialized() const {
  return true;
}

void NewAddressResponse::InternalSwap(NewAddressResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NewAddressResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[8]);
}

// ===================================================================

class BroadcastRequest::_Internal {
 public:
};

BroadcastRequest::BroadcastRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.BroadcastRequest)
}
BroadcastRequest::BroadcastRequest(const BroadcastRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){from._impl_.transactions_}
    , decltype(_impl_.isdomain_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.isdomain_ = from._impl_.isdomain_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.BroadcastRequest)
}

inline void BroadcastRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){arena}
    , decltype(_impl_.isdomain_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BroadcastRequest::~BroadcastRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.BroadcastRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transactions_.~RepeatedPtrField();
}

void BroadcastRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.BroadcastRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transactions_.Clear();
  _impl_.isdomain_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isDomain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isdomain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes transactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.BroadcastRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isDomain = 1;
  if (this->_internal_isdomain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isdomain(), target);
  }

  // repeated bytes transactions = 2;
  for (int i = 0, n = this->_internal_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_transactions(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.BroadcastRequest)
  return target;
}

size_t BroadcastRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.BroadcastRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transactions = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.transactions_.size());
  for (int i = 0, n = _impl_.transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.transactions_.Get(i));
  }

  // bool isDomain = 1;
  if (this->_internal_isdomain() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastRequest::GetClassData() const { return &_class_data_; }


void BroadcastRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastRequest*>(&to_msg);
  auto& from = static_cast<const BroadcastRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.BroadcastRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transactions_.MergeFrom(from._impl_.transactions_);
  if (from._internal_isdomain() != 0) {
    _this->_internal_set_isdomain(from._internal_isdomain());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastRequest::CopyFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRequest::IsInitialized() const {
  return true;
}

void BroadcastRequest::InternalSwap(BroadcastRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transactions_.InternalSwap(&other->_impl_.transactions_);
  swap(_impl_.isdomain_, other->_impl_.isdomain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[9]);
}

// ===================================================================

class BroadcastResponse::_Internal {
 public:
};

BroadcastResponse::BroadcastResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.BroadcastResponse)
}
BroadcastResponse::BroadcastResponse(const BroadcastResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txids_){from._impl_.txids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.BroadcastResponse)
}

inline void BroadcastResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BroadcastResponse::~BroadcastResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.BroadcastResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txids_.~RepeatedPtrField();
}

void BroadcastResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.BroadcastResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string txIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.BroadcastResponse.txIDs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.BroadcastResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string txIDs = 1;
  for (int i = 0, n = this->_internal_txids_size(); i < n; i++) {
    const auto& s = this->_internal_txids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.BroadcastResponse.txIDs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.BroadcastResponse)
  return target;
}

size_t BroadcastResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.BroadcastResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string txIDs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.txids_.size());
  for (int i = 0, n = _impl_.txids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.txids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastResponse::GetClassData() const { return &_class_data_; }


void BroadcastResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastResponse*>(&to_msg);
  auto& from = static_cast<const BroadcastResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.BroadcastResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.txids_.MergeFrom(from._impl_.txids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastResponse::CopyFrom(const BroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.BroadcastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastResponse::IsInitialized() const {
  return true;
}

void BroadcastResponse::InternalSwap(BroadcastResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.txids_.InternalSwap(&other->_impl_.txids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[10]);
}

// ===================================================================

class ShutdownRequest::_Internal {
 public:
};

ShutdownRequest::ShutdownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.ShutdownRequest)
}
ShutdownRequest::ShutdownRequest(const ShutdownRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ShutdownRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.ShutdownRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShutdownRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShutdownRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ShutdownRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[11]);
}

// ===================================================================

class ShutdownResponse::_Internal {
 public:
};

ShutdownResponse::ShutdownResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.ShutdownResponse)
}
ShutdownResponse::ShutdownResponse(const ShutdownResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ShutdownResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.ShutdownResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShutdownResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShutdownResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ShutdownResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[12]);
}

// ===================================================================

class Outpoint::_Internal {
 public:
};

Outpoint::Outpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.Outpoint)
}
Outpoint::Outpoint(const Outpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Outpoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transactionid_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.transactionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transactionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transactionid().empty()) {
    _this->_impl_.transactionid_.Set(from._internal_transactionid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.Outpoint)
}

inline void Outpoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transactionid_){}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.transactionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transactionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Outpoint::~Outpoint() {
  // @@protoc_insertion_point(destructor:kaspawalletd.Outpoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Outpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transactionid_.Destroy();
}

void Outpoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Outpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.Outpoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transactionid_.ClearToEmpty();
  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Outpoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string transactionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transactionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.Outpoint.transactionId"));
        } else
          goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Outpoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.Outpoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string transactionId = 1;
  if (!this->_internal_transactionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transactionid().data(), static_cast<int>(this->_internal_transactionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.Outpoint.transactionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transactionid(), target);
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.Outpoint)
  return target;
}

size_t Outpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.Outpoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transactionId = 1;
  if (!this->_internal_transactionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transactionid());
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Outpoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Outpoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Outpoint::GetClassData() const { return &_class_data_; }


void Outpoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Outpoint*>(&to_msg);
  auto& from = static_cast<const Outpoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.Outpoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transactionid().empty()) {
    _this->_internal_set_transactionid(from._internal_transactionid());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Outpoint::CopyFrom(const Outpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.Outpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Outpoint::IsInitialized() const {
  return true;
}

void Outpoint::InternalSwap(Outpoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transactionid_, lhs_arena,
      &other->_impl_.transactionid_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Outpoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[13]);
}

// ===================================================================

class UtxosByAddressesEntry::_Internal {
 public:
  static const ::kaspawalletd::Outpoint& outpoint(const UtxosByAddressesEntry* msg);
  static const ::kaspawalletd::UtxoEntry& utxoentry(const UtxosByAddressesEntry* msg);
};

const ::kaspawalletd::Outpoint&
UtxosByAddressesEntry::_Internal::outpoint(const UtxosByAddressesEntry* msg) {
  return *msg->_impl_.outpoint_;
}
const ::kaspawalletd::UtxoEntry&
UtxosByAddressesEntry::_Internal::utxoentry(const UtxosByAddressesEntry* msg) {
  return *msg->_impl_.utxoentry_;
}
UtxosByAddressesEntry::UtxosByAddressesEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.UtxosByAddressesEntry)
}
UtxosByAddressesEntry::UtxosByAddressesEntry(const UtxosByAddressesEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UtxosByAddressesEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.outpoint_){nullptr}
    , decltype(_impl_.utxoentry_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_outpoint()) {
    _this->_impl_.outpoint_ = new ::kaspawalletd::Outpoint(*from._impl_.outpoint_);
  }
  if (from._internal_has_utxoentry()) {
    _this->_impl_.utxoentry_ = new ::kaspawalletd::UtxoEntry(*from._impl_.utxoentry_);
  }
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.UtxosByAddressesEntry)
}

inline void UtxosByAddressesEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.outpoint_){nullptr}
    , decltype(_impl_.utxoentry_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UtxosByAddressesEntry::~UtxosByAddressesEntry() {
  // @@protoc_insertion_point(destructor:kaspawalletd.UtxosByAddressesEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UtxosByAddressesEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.outpoint_;
  if (this != internal_default_instance()) delete _impl_.utxoentry_;
}

void UtxosByAddressesEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UtxosByAddressesEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.UtxosByAddressesEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.outpoint_ != nullptr) {
    delete _impl_.outpoint_;
  }
  _impl_.outpoint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.utxoentry_ != nullptr) {
    delete _impl_.utxoentry_;
  }
  _impl_.utxoentry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtxosByAddressesEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.UtxosByAddressesEntry.address"));
        } else
          goto handle_unusual;
        continue;
      // .kaspawalletd.Outpoint outpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_outpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaspawalletd.UtxoEntry utxoEntry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_utxoentry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UtxosByAddressesEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.UtxosByAddressesEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.UtxosByAddressesEntry.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // .kaspawalletd.Outpoint outpoint = 2;
  if (this->_internal_has_outpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::outpoint(this),
        _Internal::outpoint(this).GetCachedSize(), target, stream);
  }

  // .kaspawalletd.UtxoEntry utxoEntry = 3;
  if (this->_internal_has_utxoentry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::utxoentry(this),
        _Internal::utxoentry(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.UtxosByAddressesEntry)
  return target;
}

size_t UtxosByAddressesEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.UtxosByAddressesEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .kaspawalletd.Outpoint outpoint = 2;
  if (this->_internal_has_outpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.outpoint_);
  }

  // .kaspawalletd.UtxoEntry utxoEntry = 3;
  if (this->_internal_has_utxoentry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.utxoentry_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UtxosByAddressesEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UtxosByAddressesEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UtxosByAddressesEntry::GetClassData() const { return &_class_data_; }


void UtxosByAddressesEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UtxosByAddressesEntry*>(&to_msg);
  auto& from = static_cast<const UtxosByAddressesEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.UtxosByAddressesEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_has_outpoint()) {
    _this->_internal_mutable_outpoint()->::kaspawalletd::Outpoint::MergeFrom(
        from._internal_outpoint());
  }
  if (from._internal_has_utxoentry()) {
    _this->_internal_mutable_utxoentry()->::kaspawalletd::UtxoEntry::MergeFrom(
        from._internal_utxoentry());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UtxosByAddressesEntry::CopyFrom(const UtxosByAddressesEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.UtxosByAddressesEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtxosByAddressesEntry::IsInitialized() const {
  return true;
}

void UtxosByAddressesEntry::InternalSwap(UtxosByAddressesEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UtxosByAddressesEntry, _impl_.utxoentry_)
      + sizeof(UtxosByAddressesEntry::_impl_.utxoentry_)
      - PROTOBUF_FIELD_OFFSET(UtxosByAddressesEntry, _impl_.outpoint_)>(
          reinterpret_cast<char*>(&_impl_.outpoint_),
          reinterpret_cast<char*>(&other->_impl_.outpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UtxosByAddressesEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[14]);
}

// ===================================================================

class ScriptPublicKey::_Internal {
 public:
};

ScriptPublicKey::ScriptPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.ScriptPublicKey)
}
ScriptPublicKey::ScriptPublicKey(const ScriptPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScriptPublicKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scriptpublickey_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.scriptpublickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scriptpublickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scriptpublickey().empty()) {
    _this->_impl_.scriptpublickey_.Set(from._internal_scriptpublickey(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.ScriptPublicKey)
}

inline void ScriptPublicKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scriptpublickey_){}
    , decltype(_impl_.version_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.scriptpublickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scriptpublickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScriptPublicKey::~ScriptPublicKey() {
  // @@protoc_insertion_point(destructor:kaspawalletd.ScriptPublicKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScriptPublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scriptpublickey_.Destroy();
}

void ScriptPublicKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScriptPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.ScriptPublicKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scriptpublickey_.ClearToEmpty();
  _impl_.version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScriptPublicKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string scriptPublicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_scriptpublickey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.ScriptPublicKey.scriptPublicKey"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScriptPublicKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.ScriptPublicKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // string scriptPublicKey = 2;
  if (!this->_internal_scriptpublickey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scriptpublickey().data(), static_cast<int>(this->_internal_scriptpublickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.ScriptPublicKey.scriptPublicKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_scriptpublickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.ScriptPublicKey)
  return target;
}

size_t ScriptPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.ScriptPublicKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string scriptPublicKey = 2;
  if (!this->_internal_scriptpublickey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scriptpublickey());
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScriptPublicKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScriptPublicKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScriptPublicKey::GetClassData() const { return &_class_data_; }


void ScriptPublicKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScriptPublicKey*>(&to_msg);
  auto& from = static_cast<const ScriptPublicKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.ScriptPublicKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_scriptpublickey().empty()) {
    _this->_internal_set_scriptpublickey(from._internal_scriptpublickey());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScriptPublicKey::CopyFrom(const ScriptPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.ScriptPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScriptPublicKey::IsInitialized() const {
  return true;
}

void ScriptPublicKey::InternalSwap(ScriptPublicKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scriptpublickey_, lhs_arena,
      &other->_impl_.scriptpublickey_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScriptPublicKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[15]);
}

// ===================================================================

class UtxoEntry::_Internal {
 public:
  static const ::kaspawalletd::ScriptPublicKey& scriptpublickey(const UtxoEntry* msg);
};

const ::kaspawalletd::ScriptPublicKey&
UtxoEntry::_Internal::scriptpublickey(const UtxoEntry* msg) {
  return *msg->_impl_.scriptpublickey_;
}
UtxoEntry::UtxoEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.UtxoEntry)
}
UtxoEntry::UtxoEntry(const UtxoEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UtxoEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scriptpublickey_){nullptr}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.blockdaascore_){}
    , decltype(_impl_.iscoinbase_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scriptpublickey()) {
    _this->_impl_.scriptpublickey_ = new ::kaspawalletd::ScriptPublicKey(*from._impl_.scriptpublickey_);
  }
  ::memcpy(&_impl_.amount_, &from._impl_.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.iscoinbase_) -
    reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.iscoinbase_));
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.UtxoEntry)
}

inline void UtxoEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scriptpublickey_){nullptr}
    , decltype(_impl_.amount_){uint64_t{0u}}
    , decltype(_impl_.blockdaascore_){uint64_t{0u}}
    , decltype(_impl_.iscoinbase_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UtxoEntry::~UtxoEntry() {
  // @@protoc_insertion_point(destructor:kaspawalletd.UtxoEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UtxoEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.scriptpublickey_;
}

void UtxoEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UtxoEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.UtxoEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.scriptpublickey_ != nullptr) {
    delete _impl_.scriptpublickey_;
  }
  _impl_.scriptpublickey_ = nullptr;
  ::memset(&_impl_.amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.iscoinbase_) -
      reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.iscoinbase_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtxoEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaspawalletd.ScriptPublicKey scriptPublicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scriptpublickey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 blockDaaScore = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.blockdaascore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isCoinbase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.iscoinbase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UtxoEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.UtxoEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  // .kaspawalletd.ScriptPublicKey scriptPublicKey = 2;
  if (this->_internal_has_scriptpublickey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scriptpublickey(this),
        _Internal::scriptpublickey(this).GetCachedSize(), target, stream);
  }

  // uint64 blockDaaScore = 3;
  if (this->_internal_blockdaascore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_blockdaascore(), target);
  }

  // bool isCoinbase = 4;
  if (this->_internal_iscoinbase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_iscoinbase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.UtxoEntry)
  return target;
}

size_t UtxoEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.UtxoEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kaspawalletd.ScriptPublicKey scriptPublicKey = 2;
  if (this->_internal_has_scriptpublickey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scriptpublickey_);
  }

  // uint64 amount = 1;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  // uint64 blockDaaScore = 3;
  if (this->_internal_blockdaascore() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_blockdaascore());
  }

  // bool isCoinbase = 4;
  if (this->_internal_iscoinbase() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UtxoEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UtxoEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UtxoEntry::GetClassData() const { return &_class_data_; }


void UtxoEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UtxoEntry*>(&to_msg);
  auto& from = static_cast<const UtxoEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.UtxoEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_scriptpublickey()) {
    _this->_internal_mutable_scriptpublickey()->::kaspawalletd::ScriptPublicKey::MergeFrom(
        from._internal_scriptpublickey());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_blockdaascore() != 0) {
    _this->_internal_set_blockdaascore(from._internal_blockdaascore());
  }
  if (from._internal_iscoinbase() != 0) {
    _this->_internal_set_iscoinbase(from._internal_iscoinbase());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UtxoEntry::CopyFrom(const UtxoEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.UtxoEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtxoEntry::IsInitialized() const {
  return true;
}

void UtxoEntry::InternalSwap(UtxoEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UtxoEntry, _impl_.iscoinbase_)
      + sizeof(UtxoEntry::_impl_.iscoinbase_)
      - PROTOBUF_FIELD_OFFSET(UtxoEntry, _impl_.scriptpublickey_)>(
          reinterpret_cast<char*>(&_impl_.scriptpublickey_),
          reinterpret_cast<char*>(&other->_impl_.scriptpublickey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UtxoEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[16]);
}

// ===================================================================

class GetExternalSpendableUTXOsRequest::_Internal {
 public:
};

GetExternalSpendableUTXOsRequest::GetExternalSpendableUTXOsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.GetExternalSpendableUTXOsRequest)
}
GetExternalSpendableUTXOsRequest::GetExternalSpendableUTXOsRequest(const GetExternalSpendableUTXOsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetExternalSpendableUTXOsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.GetExternalSpendableUTXOsRequest)
}

inline void GetExternalSpendableUTXOsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetExternalSpendableUTXOsRequest::~GetExternalSpendableUTXOsRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.GetExternalSpendableUTXOsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetExternalSpendableUTXOsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void GetExternalSpendableUTXOsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetExternalSpendableUTXOsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.GetExternalSpendableUTXOsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExternalSpendableUTXOsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.GetExternalSpendableUTXOsRequest.address"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetExternalSpendableUTXOsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.GetExternalSpendableUTXOsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.GetExternalSpendableUTXOsRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.GetExternalSpendableUTXOsRequest)
  return target;
}

size_t GetExternalSpendableUTXOsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.GetExternalSpendableUTXOsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExternalSpendableUTXOsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetExternalSpendableUTXOsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExternalSpendableUTXOsRequest::GetClassData() const { return &_class_data_; }


void GetExternalSpendableUTXOsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetExternalSpendableUTXOsRequest*>(&to_msg);
  auto& from = static_cast<const GetExternalSpendableUTXOsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.GetExternalSpendableUTXOsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExternalSpendableUTXOsRequest::CopyFrom(const GetExternalSpendableUTXOsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.GetExternalSpendableUTXOsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExternalSpendableUTXOsRequest::IsInitialized() const {
  return true;
}

void GetExternalSpendableUTXOsRequest::InternalSwap(GetExternalSpendableUTXOsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExternalSpendableUTXOsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[17]);
}

// ===================================================================

class GetExternalSpendableUTXOsResponse::_Internal {
 public:
};

GetExternalSpendableUTXOsResponse::GetExternalSpendableUTXOsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.GetExternalSpendableUTXOsResponse)
}
GetExternalSpendableUTXOsResponse::GetExternalSpendableUTXOsResponse(const GetExternalSpendableUTXOsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetExternalSpendableUTXOsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.GetExternalSpendableUTXOsResponse)
}

inline void GetExternalSpendableUTXOsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetExternalSpendableUTXOsResponse::~GetExternalSpendableUTXOsResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.GetExternalSpendableUTXOsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetExternalSpendableUTXOsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void GetExternalSpendableUTXOsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetExternalSpendableUTXOsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.GetExternalSpendableUTXOsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExternalSpendableUTXOsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kaspawalletd.UtxosByAddressesEntry Entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetExternalSpendableUTXOsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.GetExternalSpendableUTXOsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kaspawalletd.UtxosByAddressesEntry Entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.GetExternalSpendableUTXOsResponse)
  return target;
}

size_t GetExternalSpendableUTXOsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.GetExternalSpendableUTXOsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaspawalletd.UtxosByAddressesEntry Entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExternalSpendableUTXOsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetExternalSpendableUTXOsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExternalSpendableUTXOsResponse::GetClassData() const { return &_class_data_; }


void GetExternalSpendableUTXOsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetExternalSpendableUTXOsResponse*>(&to_msg);
  auto& from = static_cast<const GetExternalSpendableUTXOsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.GetExternalSpendableUTXOsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExternalSpendableUTXOsResponse::CopyFrom(const GetExternalSpendableUTXOsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.GetExternalSpendableUTXOsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExternalSpendableUTXOsResponse::IsInitialized() const {
  return true;
}

void GetExternalSpendableUTXOsResponse::InternalSwap(GetExternalSpendableUTXOsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExternalSpendableUTXOsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[18]);
}

// ===================================================================

class SendRequest::_Internal {
 public:
};

SendRequest::SendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.SendRequest)
}
SendRequest::SendRequest(const SendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){from._impl_.from_}
    , decltype(_impl_.toaddress_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.toaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_toaddress().empty()) {
    _this->_impl_.toaddress_.Set(from._internal_toaddress(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.SendRequest)
}

inline void SendRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){arena}
    , decltype(_impl_.toaddress_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.amount_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.toaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendRequest::~SendRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.SendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_.~RepeatedPtrField();
  _impl_.toaddress_.Destroy();
  _impl_.password_.Destroy();
}

void SendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.SendRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.from_.Clear();
  _impl_.toaddress_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string toAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_toaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.SendRequest.toAddress"));
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.SendRequest.password"));
        } else
          goto handle_unusual;
        continue;
      // repeated string from = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_from();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.SendRequest.from"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.SendRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string toAddress = 1;
  if (!this->_internal_toaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_toaddress().data(), static_cast<int>(this->_internal_toaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.SendRequest.toAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_toaddress(), target);
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.SendRequest.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // repeated string from = 4;
  for (int i = 0, n = this->_internal_from_size(); i < n; i++) {
    const auto& s = this->_internal_from(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.SendRequest.from");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.SendRequest)
  return target;
}

size_t SendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.SendRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string from = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.from_.size());
  for (int i = 0, n = _impl_.from_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.from_.Get(i));
  }

  // string toAddress = 1;
  if (!this->_internal_toaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_toaddress());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendRequest::GetClassData() const { return &_class_data_; }


void SendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendRequest*>(&to_msg);
  auto& from = static_cast<const SendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.SendRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.from_.MergeFrom(from._impl_.from_);
  if (!from._internal_toaddress().empty()) {
    _this->_internal_set_toaddress(from._internal_toaddress());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendRequest::CopyFrom(const SendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.SendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRequest::IsInitialized() const {
  return true;
}

void SendRequest::InternalSwap(SendRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.from_.InternalSwap(&other->_impl_.from_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.toaddress_, lhs_arena,
      &other->_impl_.toaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[19]);
}

// ===================================================================

class SendResponse::_Internal {
 public:
};

SendResponse::SendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.SendResponse)
}
SendResponse::SendResponse(const SendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txids_){from._impl_.txids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.SendResponse)
}

inline void SendResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SendResponse::~SendResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.SendResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txids_.~RepeatedPtrField();
}

void SendResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.SendResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string txIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.SendResponse.txIDs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.SendResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string txIDs = 1;
  for (int i = 0, n = this->_internal_txids_size(); i < n; i++) {
    const auto& s = this->_internal_txids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.SendResponse.txIDs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.SendResponse)
  return target;
}

size_t SendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.SendResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string txIDs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.txids_.size());
  for (int i = 0, n = _impl_.txids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.txids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendResponse::GetClassData() const { return &_class_data_; }


void SendResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendResponse*>(&to_msg);
  auto& from = static_cast<const SendResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.SendResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.txids_.MergeFrom(from._impl_.txids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendResponse::CopyFrom(const SendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.SendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendResponse::IsInitialized() const {
  return true;
}

void SendResponse::InternalSwap(SendResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.txids_.InternalSwap(&other->_impl_.txids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[20]);
}

// ===================================================================

class SignRequest::_Internal {
 public:
};

SignRequest::SignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.SignRequest)
}
SignRequest::SignRequest(const SignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unsignedtransactions_){from._impl_.unsignedtransactions_}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.SignRequest)
}

inline void SignRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unsignedtransactions_){arena}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignRequest::~SignRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.SignRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unsignedtransactions_.~RepeatedPtrField();
  _impl_.password_.Destroy();
}

void SignRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.SignRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unsignedtransactions_.Clear();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes unsignedTransactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unsignedtransactions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.SignRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.SignRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes unsignedTransactions = 1;
  for (int i = 0, n = this->_internal_unsignedtransactions_size(); i < n; i++) {
    const auto& s = this->_internal_unsignedtransactions(i);
    target = stream->WriteBytes(1, s, target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.SignRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.SignRequest)
  return target;
}

size_t SignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.SignRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes unsignedTransactions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.unsignedtransactions_.size());
  for (int i = 0, n = _impl_.unsignedtransactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.unsignedtransactions_.Get(i));
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignRequest::GetClassData() const { return &_class_data_; }


void SignRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignRequest*>(&to_msg);
  auto& from = static_cast<const SignRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.SignRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unsignedtransactions_.MergeFrom(from._impl_.unsignedtransactions_);
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignRequest::CopyFrom(const SignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.SignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignRequest::IsInitialized() const {
  return true;
}

void SignRequest::InternalSwap(SignRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.unsignedtransactions_.InternalSwap(&other->_impl_.unsignedtransactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SignRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[21]);
}

// ===================================================================

class SignResponse::_Internal {
 public:
};

SignResponse::SignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.SignResponse)
}
SignResponse::SignResponse(const SignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signedtransactions_){from._impl_.signedtransactions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.SignResponse)
}

inline void SignResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signedtransactions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SignResponse::~SignResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.SignResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signedtransactions_.~RepeatedPtrField();
}

void SignResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.SignResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signedtransactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes signedTransactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signedtransactions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.SignResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes signedTransactions = 1;
  for (int i = 0, n = this->_internal_signedtransactions_size(); i < n; i++) {
    const auto& s = this->_internal_signedtransactions(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.SignResponse)
  return target;
}

size_t SignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.SignResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signedTransactions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.signedtransactions_.size());
  for (int i = 0, n = _impl_.signedtransactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.signedtransactions_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignResponse::GetClassData() const { return &_class_data_; }


void SignResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignResponse*>(&to_msg);
  auto& from = static_cast<const SignResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.SignResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.signedtransactions_.MergeFrom(from._impl_.signedtransactions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignResponse::CopyFrom(const SignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.SignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignResponse::IsInitialized() const {
  return true;
}

void SignResponse::InternalSwap(SignResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signedtransactions_.InternalSwap(&other->_impl_.signedtransactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[22]);
}

// ===================================================================

class IsValidAddress::_Internal {
 public:
};

IsValidAddress::IsValidAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.IsValidAddress)
}
IsValidAddress::IsValidAddress(const IsValidAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsValidAddress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.isvalid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.isvalid_ = from._impl_.isvalid_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.IsValidAddress)
}

inline void IsValidAddress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.isvalid_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IsValidAddress::~IsValidAddress() {
  // @@protoc_insertion_point(destructor:kaspawalletd.IsValidAddress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsValidAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.error_.Destroy();
}

void IsValidAddress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsValidAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.IsValidAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.error_.ClearToEmpty();
  _impl_.isvalid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsValidAddress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.IsValidAddress.address"));
        } else
          goto handle_unusual;
        continue;
      // bool isValid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.IsValidAddress.error"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsValidAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.IsValidAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.IsValidAddress.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bool isValid = 2;
  if (this->_internal_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isvalid(), target);
  }

  // string error = 3;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.IsValidAddress.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.IsValidAddress)
  return target;
}

size_t IsValidAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.IsValidAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string error = 3;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool isValid = 2;
  if (this->_internal_isvalid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsValidAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsValidAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsValidAddress::GetClassData() const { return &_class_data_; }


void IsValidAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsValidAddress*>(&to_msg);
  auto& from = static_cast<const IsValidAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.IsValidAddress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_isvalid() != 0) {
    _this->_internal_set_isvalid(from._internal_isvalid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsValidAddress::CopyFrom(const IsValidAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.IsValidAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsValidAddress::IsInitialized() const {
  return true;
}

void IsValidAddress::InternalSwap(IsValidAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.isvalid_, other->_impl_.isvalid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsValidAddress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[23]);
}

// ===================================================================

class CheckIfAddressesAreValidRequest::_Internal {
 public:
};

CheckIfAddressesAreValidRequest::CheckIfAddressesAreValidRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.CheckIfAddressesAreValidRequest)
}
CheckIfAddressesAreValidRequest::CheckIfAddressesAreValidRequest(const CheckIfAddressesAreValidRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckIfAddressesAreValidRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addresses_){from._impl_.addresses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.CheckIfAddressesAreValidRequest)
}

inline void CheckIfAddressesAreValidRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addresses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CheckIfAddressesAreValidRequest::~CheckIfAddressesAreValidRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.CheckIfAddressesAreValidRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckIfAddressesAreValidRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addresses_.~RepeatedPtrField();
}

void CheckIfAddressesAreValidRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckIfAddressesAreValidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.CheckIfAddressesAreValidRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addresses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckIfAddressesAreValidRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string addresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.CheckIfAddressesAreValidRequest.addresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckIfAddressesAreValidRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.CheckIfAddressesAreValidRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string addresses = 1;
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.CheckIfAddressesAreValidRequest.addresses");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.CheckIfAddressesAreValidRequest)
  return target;
}

size_t CheckIfAddressesAreValidRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.CheckIfAddressesAreValidRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.addresses_.size());
  for (int i = 0, n = _impl_.addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.addresses_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckIfAddressesAreValidRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckIfAddressesAreValidRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckIfAddressesAreValidRequest::GetClassData() const { return &_class_data_; }


void CheckIfAddressesAreValidRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckIfAddressesAreValidRequest*>(&to_msg);
  auto& from = static_cast<const CheckIfAddressesAreValidRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.CheckIfAddressesAreValidRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.addresses_.MergeFrom(from._impl_.addresses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckIfAddressesAreValidRequest::CopyFrom(const CheckIfAddressesAreValidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.CheckIfAddressesAreValidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIfAddressesAreValidRequest::IsInitialized() const {
  return true;
}

void CheckIfAddressesAreValidRequest::InternalSwap(CheckIfAddressesAreValidRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.addresses_.InternalSwap(&other->_impl_.addresses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckIfAddressesAreValidRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[24]);
}

// ===================================================================

class CheckIfAddressesAreValidResponse::_Internal {
 public:
};

CheckIfAddressesAreValidResponse::CheckIfAddressesAreValidResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.CheckIfAddressesAreValidResponse)
}
CheckIfAddressesAreValidResponse::CheckIfAddressesAreValidResponse(const CheckIfAddressesAreValidResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckIfAddressesAreValidResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arevalidaddresses_){from._impl_.arevalidaddresses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.CheckIfAddressesAreValidResponse)
}

inline void CheckIfAddressesAreValidResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arevalidaddresses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CheckIfAddressesAreValidResponse::~CheckIfAddressesAreValidResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.CheckIfAddressesAreValidResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckIfAddressesAreValidResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arevalidaddresses_.~RepeatedPtrField();
}

void CheckIfAddressesAreValidResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckIfAddressesAreValidResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.CheckIfAddressesAreValidResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arevalidaddresses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckIfAddressesAreValidResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kaspawalletd.IsValidAddress areValidAddresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arevalidaddresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckIfAddressesAreValidResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.CheckIfAddressesAreValidResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kaspawalletd.IsValidAddress areValidAddresses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arevalidaddresses_size()); i < n; i++) {
    const auto& repfield = this->_internal_arevalidaddresses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.CheckIfAddressesAreValidResponse)
  return target;
}

size_t CheckIfAddressesAreValidResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.CheckIfAddressesAreValidResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaspawalletd.IsValidAddress areValidAddresses = 1;
  total_size += 1UL * this->_internal_arevalidaddresses_size();
  for (const auto& msg : this->_impl_.arevalidaddresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckIfAddressesAreValidResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckIfAddressesAreValidResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckIfAddressesAreValidResponse::GetClassData() const { return &_class_data_; }


void CheckIfAddressesAreValidResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckIfAddressesAreValidResponse*>(&to_msg);
  auto& from = static_cast<const CheckIfAddressesAreValidResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.CheckIfAddressesAreValidResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arevalidaddresses_.MergeFrom(from._impl_.arevalidaddresses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckIfAddressesAreValidResponse::CopyFrom(const CheckIfAddressesAreValidResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.CheckIfAddressesAreValidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIfAddressesAreValidResponse::IsInitialized() const {
  return true;
}

void CheckIfAddressesAreValidResponse::InternalSwap(CheckIfAddressesAreValidResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arevalidaddresses_.InternalSwap(&other->_impl_.arevalidaddresses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckIfAddressesAreValidResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[25]);
}

// ===================================================================

class CheckIfAddressIsValidRequest::_Internal {
 public:
};

CheckIfAddressIsValidRequest::CheckIfAddressIsValidRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.CheckIfAddressIsValidRequest)
}
CheckIfAddressIsValidRequest::CheckIfAddressIsValidRequest(const CheckIfAddressIsValidRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckIfAddressIsValidRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.CheckIfAddressIsValidRequest)
}

inline void CheckIfAddressIsValidRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CheckIfAddressIsValidRequest::~CheckIfAddressIsValidRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.CheckIfAddressIsValidRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckIfAddressIsValidRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void CheckIfAddressIsValidRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckIfAddressIsValidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.CheckIfAddressIsValidRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckIfAddressIsValidRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.CheckIfAddressIsValidRequest.address"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckIfAddressIsValidRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.CheckIfAddressIsValidRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.CheckIfAddressIsValidRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.CheckIfAddressIsValidRequest)
  return target;
}

size_t CheckIfAddressIsValidRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.CheckIfAddressIsValidRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckIfAddressIsValidRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckIfAddressIsValidRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckIfAddressIsValidRequest::GetClassData() const { return &_class_data_; }


void CheckIfAddressIsValidRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckIfAddressIsValidRequest*>(&to_msg);
  auto& from = static_cast<const CheckIfAddressIsValidRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.CheckIfAddressIsValidRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckIfAddressIsValidRequest::CopyFrom(const CheckIfAddressIsValidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.CheckIfAddressIsValidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIfAddressIsValidRequest::IsInitialized() const {
  return true;
}

void CheckIfAddressIsValidRequest::InternalSwap(CheckIfAddressIsValidRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckIfAddressIsValidRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[26]);
}

// ===================================================================

class CheckIfAddressIsValidResponse::_Internal {
 public:
};

CheckIfAddressIsValidResponse::CheckIfAddressIsValidResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.CheckIfAddressIsValidResponse)
}
CheckIfAddressIsValidResponse::CheckIfAddressIsValidResponse(const CheckIfAddressIsValidResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckIfAddressIsValidResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.isvalid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.isvalid_ = from._impl_.isvalid_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.CheckIfAddressIsValidResponse)
}

inline void CheckIfAddressIsValidResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.isvalid_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CheckIfAddressIsValidResponse::~CheckIfAddressIsValidResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.CheckIfAddressIsValidResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckIfAddressIsValidResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void CheckIfAddressIsValidResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckIfAddressIsValidResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.CheckIfAddressIsValidResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.isvalid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckIfAddressIsValidResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaspawalletd.CheckIfAddressIsValidResponse.address"));
        } else
          goto handle_unusual;
        continue;
      // bool isValid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckIfAddressIsValidResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.CheckIfAddressIsValidResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.CheckIfAddressIsValidResponse.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bool isValid = 2;
  if (this->_internal_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isvalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.CheckIfAddressIsValidResponse)
  return target;
}

size_t CheckIfAddressIsValidResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.CheckIfAddressIsValidResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool isValid = 2;
  if (this->_internal_isvalid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckIfAddressIsValidResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckIfAddressIsValidResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckIfAddressIsValidResponse::GetClassData() const { return &_class_data_; }


void CheckIfAddressIsValidResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckIfAddressIsValidResponse*>(&to_msg);
  auto& from = static_cast<const CheckIfAddressIsValidResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.CheckIfAddressIsValidResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_isvalid() != 0) {
    _this->_internal_set_isvalid(from._internal_isvalid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckIfAddressIsValidResponse::CopyFrom(const CheckIfAddressIsValidResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.CheckIfAddressIsValidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIfAddressIsValidResponse::IsInitialized() const {
  return true;
}

void CheckIfAddressIsValidResponse::InternalSwap(CheckIfAddressIsValidResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  swap(_impl_.isvalid_, other->_impl_.isvalid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckIfAddressIsValidResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kaspawalletd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kaspawalletd::GetBalanceRequest*
Arena::CreateMaybeMessage< ::kaspawalletd::GetBalanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::GetBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::GetBalanceResponse*
Arena::CreateMaybeMessage< ::kaspawalletd::GetBalanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::GetBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::AddressBalances*
Arena::CreateMaybeMessage< ::kaspawalletd::AddressBalances >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::AddressBalances >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::CreateUnsignedTransactionsRequest*
Arena::CreateMaybeMessage< ::kaspawalletd::CreateUnsignedTransactionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::CreateUnsignedTransactionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::CreateUnsignedTransactionsResponse*
Arena::CreateMaybeMessage< ::kaspawalletd::CreateUnsignedTransactionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::CreateUnsignedTransactionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::ShowAddressesRequest*
Arena::CreateMaybeMessage< ::kaspawalletd::ShowAddressesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::ShowAddressesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::ShowAddressesResponse*
Arena::CreateMaybeMessage< ::kaspawalletd::ShowAddressesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::ShowAddressesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::NewAddressRequest*
Arena::CreateMaybeMessage< ::kaspawalletd::NewAddressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::NewAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::NewAddressResponse*
Arena::CreateMaybeMessage< ::kaspawalletd::NewAddressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::NewAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::BroadcastRequest*
Arena::CreateMaybeMessage< ::kaspawalletd::BroadcastRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::BroadcastRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::BroadcastResponse*
Arena::CreateMaybeMessage< ::kaspawalletd::BroadcastResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::BroadcastResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::ShutdownRequest*
Arena::CreateMaybeMessage< ::kaspawalletd::ShutdownRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::ShutdownRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::ShutdownResponse*
Arena::CreateMaybeMessage< ::kaspawalletd::ShutdownResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::ShutdownResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::Outpoint*
Arena::CreateMaybeMessage< ::kaspawalletd::Outpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::Outpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::UtxosByAddressesEntry*
Arena::CreateMaybeMessage< ::kaspawalletd::UtxosByAddressesEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::UtxosByAddressesEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::ScriptPublicKey*
Arena::CreateMaybeMessage< ::kaspawalletd::ScriptPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::ScriptPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::UtxoEntry*
Arena::CreateMaybeMessage< ::kaspawalletd::UtxoEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::UtxoEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::GetExternalSpendableUTXOsRequest*
Arena::CreateMaybeMessage< ::kaspawalletd::GetExternalSpendableUTXOsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::GetExternalSpendableUTXOsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::GetExternalSpendableUTXOsResponse*
Arena::CreateMaybeMessage< ::kaspawalletd::GetExternalSpendableUTXOsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::GetExternalSpendableUTXOsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::SendRequest*
Arena::CreateMaybeMessage< ::kaspawalletd::SendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::SendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::SendResponse*
Arena::CreateMaybeMessage< ::kaspawalletd::SendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::SendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::SignRequest*
Arena::CreateMaybeMessage< ::kaspawalletd::SignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::SignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::SignResponse*
Arena::CreateMaybeMessage< ::kaspawalletd::SignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::SignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::IsValidAddress*
Arena::CreateMaybeMessage< ::kaspawalletd::IsValidAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::IsValidAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::CheckIfAddressesAreValidRequest*
Arena::CreateMaybeMessage< ::kaspawalletd::CheckIfAddressesAreValidRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::CheckIfAddressesAreValidRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::CheckIfAddressesAreValidResponse*
Arena::CreateMaybeMessage< ::kaspawalletd::CheckIfAddressesAreValidResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::CheckIfAddressesAreValidResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::CheckIfAddressIsValidRequest*
Arena::CreateMaybeMessage< ::kaspawalletd::CheckIfAddressIsValidRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::CheckIfAddressIsValidRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::CheckIfAddressIsValidResponse*
Arena::CreateMaybeMessage< ::kaspawalletd::CheckIfAddressIsValidResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::CheckIfAddressIsValidResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
