// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messages.proto

#include "messages.pb.h"
#include "messages.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace protowire {

static const char* P2P_method_names[] = {
  "/protowire.P2P/MessageStream",
};

std::unique_ptr< P2P::Stub> P2P::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< P2P::Stub> stub(new P2P::Stub(channel, options));
  return stub;
}

P2P::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_MessageStream_(P2P_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::protowire::KaspadMessage, ::protowire::KaspadMessage>* P2P::Stub::MessageStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::protowire::KaspadMessage, ::protowire::KaspadMessage>::Create(channel_.get(), rpcmethod_MessageStream_, context);
}

void P2P::Stub::async::MessageStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::protowire::KaspadMessage,::protowire::KaspadMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::protowire::KaspadMessage,::protowire::KaspadMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_MessageStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::protowire::KaspadMessage, ::protowire::KaspadMessage>* P2P::Stub::AsyncMessageStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::protowire::KaspadMessage, ::protowire::KaspadMessage>::Create(channel_.get(), cq, rpcmethod_MessageStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::protowire::KaspadMessage, ::protowire::KaspadMessage>* P2P::Stub::PrepareAsyncMessageStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::protowire::KaspadMessage, ::protowire::KaspadMessage>::Create(channel_.get(), cq, rpcmethod_MessageStream_, context, false, nullptr);
}

P2P::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      P2P_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< P2P::Service, ::protowire::KaspadMessage, ::protowire::KaspadMessage>(
          [](P2P::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::protowire::KaspadMessage,
             ::protowire::KaspadMessage>* stream) {
               return service->MessageStream(ctx, stream);
             }, this)));
}

P2P::Service::~Service() {
}

::grpc::Status P2P::Service::MessageStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::protowire::KaspadMessage, ::protowire::KaspadMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* RPC_method_names[] = {
  "/protowire.RPC/MessageStream",
};

std::unique_ptr< RPC::Stub> RPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RPC::Stub> stub(new RPC::Stub(channel, options));
  return stub;
}

RPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_MessageStream_(RPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::protowire::KaspadMessage, ::protowire::KaspadMessage>* RPC::Stub::MessageStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::protowire::KaspadMessage, ::protowire::KaspadMessage>::Create(channel_.get(), rpcmethod_MessageStream_, context);
}

void RPC::Stub::async::MessageStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::protowire::KaspadMessage,::protowire::KaspadMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::protowire::KaspadMessage,::protowire::KaspadMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_MessageStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::protowire::KaspadMessage, ::protowire::KaspadMessage>* RPC::Stub::AsyncMessageStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::protowire::KaspadMessage, ::protowire::KaspadMessage>::Create(channel_.get(), cq, rpcmethod_MessageStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::protowire::KaspadMessage, ::protowire::KaspadMessage>* RPC::Stub::PrepareAsyncMessageStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::protowire::KaspadMessage, ::protowire::KaspadMessage>::Create(channel_.get(), cq, rpcmethod_MessageStream_, context, false, nullptr);
}

RPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RPC::Service, ::protowire::KaspadMessage, ::protowire::KaspadMessage>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::protowire::KaspadMessage,
             ::protowire::KaspadMessage>* stream) {
               return service->MessageStream(ctx, stream);
             }, this)));
}

RPC::Service::~Service() {
}

::grpc::Status RPC::Service::MessageStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::protowire::KaspadMessage, ::protowire::KaspadMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace protowire

