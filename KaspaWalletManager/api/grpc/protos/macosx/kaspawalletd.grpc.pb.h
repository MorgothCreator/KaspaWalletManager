// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kaspawalletd.proto
#ifndef GRPC_kaspawalletd_2eproto__INCLUDED
#define GRPC_kaspawalletd_2eproto__INCLUDED

#include "kaspawalletd.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace kaspawalletd {

class kaspawalletd final {
 public:
  static constexpr char const* service_full_name() {
    return "kaspawalletd.kaspawalletd";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetBalance(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest& request, ::kaspawalletd::GetBalanceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::GetBalanceResponse>> AsyncGetBalance(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::GetBalanceResponse>>(AsyncGetBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::GetBalanceResponse>> PrepareAsyncGetBalance(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::GetBalanceResponse>>(PrepareAsyncGetBalanceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetExternalSpendableUTXOs(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest& request, ::kaspawalletd::GetExternalSpendableUTXOsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::GetExternalSpendableUTXOsResponse>> AsyncGetExternalSpendableUTXOs(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::GetExternalSpendableUTXOsResponse>>(AsyncGetExternalSpendableUTXOsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::GetExternalSpendableUTXOsResponse>> PrepareAsyncGetExternalSpendableUTXOs(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::GetExternalSpendableUTXOsResponse>>(PrepareAsyncGetExternalSpendableUTXOsRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateUnsignedTransactions(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest& request, ::kaspawalletd::CreateUnsignedTransactionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CreateUnsignedTransactionsResponse>> AsyncCreateUnsignedTransactions(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CreateUnsignedTransactionsResponse>>(AsyncCreateUnsignedTransactionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CreateUnsignedTransactionsResponse>> PrepareAsyncCreateUnsignedTransactions(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CreateUnsignedTransactionsResponse>>(PrepareAsyncCreateUnsignedTransactionsRaw(context, request, cq));
    }
    virtual ::grpc::Status ShowAddresses(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest& request, ::kaspawalletd::ShowAddressesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::ShowAddressesResponse>> AsyncShowAddresses(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::ShowAddressesResponse>>(AsyncShowAddressesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::ShowAddressesResponse>> PrepareAsyncShowAddresses(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::ShowAddressesResponse>>(PrepareAsyncShowAddressesRaw(context, request, cq));
    }
    virtual ::grpc::Status NewAddress(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest& request, ::kaspawalletd::NewAddressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::NewAddressResponse>> AsyncNewAddress(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::NewAddressResponse>>(AsyncNewAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::NewAddressResponse>> PrepareAsyncNewAddress(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::NewAddressResponse>>(PrepareAsyncNewAddressRaw(context, request, cq));
    }
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest& request, ::kaspawalletd::ShutdownResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::ShutdownResponse>> AsyncShutdown(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::ShutdownResponse>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::ShutdownResponse>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::ShutdownResponse>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status Broadcast(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest& request, ::kaspawalletd::BroadcastResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::BroadcastResponse>> AsyncBroadcast(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::BroadcastResponse>>(AsyncBroadcastRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::BroadcastResponse>> PrepareAsyncBroadcast(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::BroadcastResponse>>(PrepareAsyncBroadcastRaw(context, request, cq));
    }
    // Since SendRequest contains a password - this command should only be used on a trusted or secure connection
    virtual ::grpc::Status Send(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest& request, ::kaspawalletd::SendResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::SendResponse>> AsyncSend(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::SendResponse>>(AsyncSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::SendResponse>> PrepareAsyncSend(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::SendResponse>>(PrepareAsyncSendRaw(context, request, cq));
    }
    // Since SignRequest contains a password - this command should only be used on a trusted or secure connection
    virtual ::grpc::Status Sign(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest& request, ::kaspawalletd::SignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::SignResponse>> AsyncSign(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::SignResponse>>(AsyncSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::SignResponse>> PrepareAsyncSign(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::SignResponse>>(PrepareAsyncSignRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckIfAddressesAreValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest& request, ::kaspawalletd::CheckIfAddressesAreValidResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CheckIfAddressesAreValidResponse>> AsyncCheckIfAddressesAreValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CheckIfAddressesAreValidResponse>>(AsyncCheckIfAddressesAreValidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CheckIfAddressesAreValidResponse>> PrepareAsyncCheckIfAddressesAreValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CheckIfAddressesAreValidResponse>>(PrepareAsyncCheckIfAddressesAreValidRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckIfAddressIsValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest& request, ::kaspawalletd::CheckIfAddressIsValidResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CheckIfAddressIsValidResponse>> AsyncCheckIfAddressIsValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CheckIfAddressIsValidResponse>>(AsyncCheckIfAddressIsValidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CheckIfAddressIsValidResponse>> PrepareAsyncCheckIfAddressIsValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CheckIfAddressIsValidResponse>>(PrepareAsyncCheckIfAddressIsValidRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetBalance(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest* request, ::kaspawalletd::GetBalanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBalance(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest* request, ::kaspawalletd::GetBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetExternalSpendableUTXOs(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* request, ::kaspawalletd::GetExternalSpendableUTXOsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExternalSpendableUTXOs(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* request, ::kaspawalletd::GetExternalSpendableUTXOsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateUnsignedTransactions(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest* request, ::kaspawalletd::CreateUnsignedTransactionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateUnsignedTransactions(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest* request, ::kaspawalletd::CreateUnsignedTransactionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ShowAddresses(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest* request, ::kaspawalletd::ShowAddressesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShowAddresses(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest* request, ::kaspawalletd::ShowAddressesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NewAddress(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest* request, ::kaspawalletd::NewAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewAddress(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest* request, ::kaspawalletd::NewAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest* request, ::kaspawalletd::ShutdownResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest* request, ::kaspawalletd::ShutdownResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Broadcast(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest* request, ::kaspawalletd::BroadcastResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Broadcast(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest* request, ::kaspawalletd::BroadcastResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Since SendRequest contains a password - this command should only be used on a trusted or secure connection
      virtual void Send(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest* request, ::kaspawalletd::SendResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Send(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest* request, ::kaspawalletd::SendResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Since SignRequest contains a password - this command should only be used on a trusted or secure connection
      virtual void Sign(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest* request, ::kaspawalletd::SignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Sign(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest* request, ::kaspawalletd::SignResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckIfAddressesAreValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest* request, ::kaspawalletd::CheckIfAddressesAreValidResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckIfAddressesAreValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest* request, ::kaspawalletd::CheckIfAddressesAreValidResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckIfAddressIsValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest* request, ::kaspawalletd::CheckIfAddressIsValidResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckIfAddressIsValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest* request, ::kaspawalletd::CheckIfAddressIsValidResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::GetBalanceResponse>* AsyncGetBalanceRaw(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::GetBalanceResponse>* PrepareAsyncGetBalanceRaw(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::GetExternalSpendableUTXOsResponse>* AsyncGetExternalSpendableUTXOsRaw(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::GetExternalSpendableUTXOsResponse>* PrepareAsyncGetExternalSpendableUTXOsRaw(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CreateUnsignedTransactionsResponse>* AsyncCreateUnsignedTransactionsRaw(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CreateUnsignedTransactionsResponse>* PrepareAsyncCreateUnsignedTransactionsRaw(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::ShowAddressesResponse>* AsyncShowAddressesRaw(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::ShowAddressesResponse>* PrepareAsyncShowAddressesRaw(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::NewAddressResponse>* AsyncNewAddressRaw(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::NewAddressResponse>* PrepareAsyncNewAddressRaw(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::ShutdownResponse>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::ShutdownResponse>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::BroadcastResponse>* AsyncBroadcastRaw(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::BroadcastResponse>* PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::SendResponse>* AsyncSendRaw(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::SendResponse>* PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::SignResponse>* AsyncSignRaw(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::SignResponse>* PrepareAsyncSignRaw(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CheckIfAddressesAreValidResponse>* AsyncCheckIfAddressesAreValidRaw(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CheckIfAddressesAreValidResponse>* PrepareAsyncCheckIfAddressesAreValidRaw(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CheckIfAddressIsValidResponse>* AsyncCheckIfAddressIsValidRaw(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kaspawalletd::CheckIfAddressIsValidResponse>* PrepareAsyncCheckIfAddressIsValidRaw(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetBalance(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest& request, ::kaspawalletd::GetBalanceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetBalanceResponse>> AsyncGetBalance(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetBalanceResponse>>(AsyncGetBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetBalanceResponse>> PrepareAsyncGetBalance(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetBalanceResponse>>(PrepareAsyncGetBalanceRaw(context, request, cq));
    }
    ::grpc::Status GetExternalSpendableUTXOs(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest& request, ::kaspawalletd::GetExternalSpendableUTXOsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetExternalSpendableUTXOsResponse>> AsyncGetExternalSpendableUTXOs(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetExternalSpendableUTXOsResponse>>(AsyncGetExternalSpendableUTXOsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetExternalSpendableUTXOsResponse>> PrepareAsyncGetExternalSpendableUTXOs(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetExternalSpendableUTXOsResponse>>(PrepareAsyncGetExternalSpendableUTXOsRaw(context, request, cq));
    }
    ::grpc::Status CreateUnsignedTransactions(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest& request, ::kaspawalletd::CreateUnsignedTransactionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CreateUnsignedTransactionsResponse>> AsyncCreateUnsignedTransactions(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CreateUnsignedTransactionsResponse>>(AsyncCreateUnsignedTransactionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CreateUnsignedTransactionsResponse>> PrepareAsyncCreateUnsignedTransactions(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CreateUnsignedTransactionsResponse>>(PrepareAsyncCreateUnsignedTransactionsRaw(context, request, cq));
    }
    ::grpc::Status ShowAddresses(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest& request, ::kaspawalletd::ShowAddressesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShowAddressesResponse>> AsyncShowAddresses(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShowAddressesResponse>>(AsyncShowAddressesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShowAddressesResponse>> PrepareAsyncShowAddresses(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShowAddressesResponse>>(PrepareAsyncShowAddressesRaw(context, request, cq));
    }
    ::grpc::Status NewAddress(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest& request, ::kaspawalletd::NewAddressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::NewAddressResponse>> AsyncNewAddress(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::NewAddressResponse>>(AsyncNewAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::NewAddressResponse>> PrepareAsyncNewAddress(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::NewAddressResponse>>(PrepareAsyncNewAddressRaw(context, request, cq));
    }
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest& request, ::kaspawalletd::ShutdownResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShutdownResponse>> AsyncShutdown(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShutdownResponse>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShutdownResponse>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShutdownResponse>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    ::grpc::Status Broadcast(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest& request, ::kaspawalletd::BroadcastResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::BroadcastResponse>> AsyncBroadcast(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::BroadcastResponse>>(AsyncBroadcastRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::BroadcastResponse>> PrepareAsyncBroadcast(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::BroadcastResponse>>(PrepareAsyncBroadcastRaw(context, request, cq));
    }
    ::grpc::Status Send(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest& request, ::kaspawalletd::SendResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::SendResponse>> AsyncSend(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::SendResponse>>(AsyncSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::SendResponse>> PrepareAsyncSend(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::SendResponse>>(PrepareAsyncSendRaw(context, request, cq));
    }
    ::grpc::Status Sign(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest& request, ::kaspawalletd::SignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::SignResponse>> AsyncSign(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::SignResponse>>(AsyncSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::SignResponse>> PrepareAsyncSign(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::SignResponse>>(PrepareAsyncSignRaw(context, request, cq));
    }
    ::grpc::Status CheckIfAddressesAreValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest& request, ::kaspawalletd::CheckIfAddressesAreValidResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressesAreValidResponse>> AsyncCheckIfAddressesAreValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressesAreValidResponse>>(AsyncCheckIfAddressesAreValidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressesAreValidResponse>> PrepareAsyncCheckIfAddressesAreValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressesAreValidResponse>>(PrepareAsyncCheckIfAddressesAreValidRaw(context, request, cq));
    }
    ::grpc::Status CheckIfAddressIsValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest& request, ::kaspawalletd::CheckIfAddressIsValidResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressIsValidResponse>> AsyncCheckIfAddressIsValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressIsValidResponse>>(AsyncCheckIfAddressIsValidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressIsValidResponse>> PrepareAsyncCheckIfAddressIsValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressIsValidResponse>>(PrepareAsyncCheckIfAddressIsValidRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetBalance(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest* request, ::kaspawalletd::GetBalanceResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBalance(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest* request, ::kaspawalletd::GetBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetExternalSpendableUTXOs(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* request, ::kaspawalletd::GetExternalSpendableUTXOsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetExternalSpendableUTXOs(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* request, ::kaspawalletd::GetExternalSpendableUTXOsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateUnsignedTransactions(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest* request, ::kaspawalletd::CreateUnsignedTransactionsResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateUnsignedTransactions(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest* request, ::kaspawalletd::CreateUnsignedTransactionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ShowAddresses(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest* request, ::kaspawalletd::ShowAddressesResponse* response, std::function<void(::grpc::Status)>) override;
      void ShowAddresses(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest* request, ::kaspawalletd::ShowAddressesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NewAddress(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest* request, ::kaspawalletd::NewAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void NewAddress(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest* request, ::kaspawalletd::NewAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Shutdown(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest* request, ::kaspawalletd::ShutdownResponse* response, std::function<void(::grpc::Status)>) override;
      void Shutdown(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest* request, ::kaspawalletd::ShutdownResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Broadcast(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest* request, ::kaspawalletd::BroadcastResponse* response, std::function<void(::grpc::Status)>) override;
      void Broadcast(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest* request, ::kaspawalletd::BroadcastResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Send(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest* request, ::kaspawalletd::SendResponse* response, std::function<void(::grpc::Status)>) override;
      void Send(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest* request, ::kaspawalletd::SendResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Sign(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest* request, ::kaspawalletd::SignResponse* response, std::function<void(::grpc::Status)>) override;
      void Sign(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest* request, ::kaspawalletd::SignResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckIfAddressesAreValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest* request, ::kaspawalletd::CheckIfAddressesAreValidResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckIfAddressesAreValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest* request, ::kaspawalletd::CheckIfAddressesAreValidResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckIfAddressIsValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest* request, ::kaspawalletd::CheckIfAddressIsValidResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckIfAddressIsValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest* request, ::kaspawalletd::CheckIfAddressIsValidResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetBalanceResponse>* AsyncGetBalanceRaw(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetBalanceResponse>* PrepareAsyncGetBalanceRaw(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetExternalSpendableUTXOsResponse>* AsyncGetExternalSpendableUTXOsRaw(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetExternalSpendableUTXOsResponse>* PrepareAsyncGetExternalSpendableUTXOsRaw(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CreateUnsignedTransactionsResponse>* AsyncCreateUnsignedTransactionsRaw(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CreateUnsignedTransactionsResponse>* PrepareAsyncCreateUnsignedTransactionsRaw(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShowAddressesResponse>* AsyncShowAddressesRaw(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShowAddressesResponse>* PrepareAsyncShowAddressesRaw(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::NewAddressResponse>* AsyncNewAddressRaw(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::NewAddressResponse>* PrepareAsyncNewAddressRaw(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShutdownResponse>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShutdownResponse>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::BroadcastResponse>* AsyncBroadcastRaw(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::BroadcastResponse>* PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::SendResponse>* AsyncSendRaw(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::SendResponse>* PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::SignResponse>* AsyncSignRaw(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::SignResponse>* PrepareAsyncSignRaw(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressesAreValidResponse>* AsyncCheckIfAddressesAreValidRaw(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressesAreValidResponse>* PrepareAsyncCheckIfAddressesAreValidRaw(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressIsValidResponse>* AsyncCheckIfAddressIsValidRaw(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressIsValidResponse>* PrepareAsyncCheckIfAddressIsValidRaw(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetBalance_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExternalSpendableUTXOs_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateUnsignedTransactions_;
    const ::grpc::internal::RpcMethod rpcmethod_ShowAddresses_;
    const ::grpc::internal::RpcMethod rpcmethod_NewAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_Shutdown_;
    const ::grpc::internal::RpcMethod rpcmethod_Broadcast_;
    const ::grpc::internal::RpcMethod rpcmethod_Send_;
    const ::grpc::internal::RpcMethod rpcmethod_Sign_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckIfAddressesAreValid_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckIfAddressIsValid_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetBalance(::grpc::ServerContext* context, const ::kaspawalletd::GetBalanceRequest* request, ::kaspawalletd::GetBalanceResponse* response);
    virtual ::grpc::Status GetExternalSpendableUTXOs(::grpc::ServerContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* request, ::kaspawalletd::GetExternalSpendableUTXOsResponse* response);
    virtual ::grpc::Status CreateUnsignedTransactions(::grpc::ServerContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest* request, ::kaspawalletd::CreateUnsignedTransactionsResponse* response);
    virtual ::grpc::Status ShowAddresses(::grpc::ServerContext* context, const ::kaspawalletd::ShowAddressesRequest* request, ::kaspawalletd::ShowAddressesResponse* response);
    virtual ::grpc::Status NewAddress(::grpc::ServerContext* context, const ::kaspawalletd::NewAddressRequest* request, ::kaspawalletd::NewAddressResponse* response);
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::kaspawalletd::ShutdownRequest* request, ::kaspawalletd::ShutdownResponse* response);
    virtual ::grpc::Status Broadcast(::grpc::ServerContext* context, const ::kaspawalletd::BroadcastRequest* request, ::kaspawalletd::BroadcastResponse* response);
    // Since SendRequest contains a password - this command should only be used on a trusted or secure connection
    virtual ::grpc::Status Send(::grpc::ServerContext* context, const ::kaspawalletd::SendRequest* request, ::kaspawalletd::SendResponse* response);
    // Since SignRequest contains a password - this command should only be used on a trusted or secure connection
    virtual ::grpc::Status Sign(::grpc::ServerContext* context, const ::kaspawalletd::SignRequest* request, ::kaspawalletd::SignResponse* response);
    virtual ::grpc::Status CheckIfAddressesAreValid(::grpc::ServerContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest* request, ::kaspawalletd::CheckIfAddressesAreValidResponse* response);
    virtual ::grpc::Status CheckIfAddressIsValid(::grpc::ServerContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest* request, ::kaspawalletd::CheckIfAddressIsValidResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBalance() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* /*context*/, const ::kaspawalletd::GetBalanceRequest* /*request*/, ::kaspawalletd::GetBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBalance(::grpc::ServerContext* context, ::kaspawalletd::GetBalanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::kaspawalletd::GetBalanceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExternalSpendableUTXOs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExternalSpendableUTXOs() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetExternalSpendableUTXOs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExternalSpendableUTXOs(::grpc::ServerContext* /*context*/, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* /*request*/, ::kaspawalletd::GetExternalSpendableUTXOsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExternalSpendableUTXOs(::grpc::ServerContext* context, ::kaspawalletd::GetExternalSpendableUTXOsRequest* request, ::grpc::ServerAsyncResponseWriter< ::kaspawalletd::GetExternalSpendableUTXOsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateUnsignedTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateUnsignedTransactions() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateUnsignedTransactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUnsignedTransactions(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CreateUnsignedTransactionsRequest* /*request*/, ::kaspawalletd::CreateUnsignedTransactionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUnsignedTransactions(::grpc::ServerContext* context, ::kaspawalletd::CreateUnsignedTransactionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::kaspawalletd::CreateUnsignedTransactionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShowAddresses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShowAddresses() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ShowAddresses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowAddresses(::grpc::ServerContext* /*context*/, const ::kaspawalletd::ShowAddressesRequest* /*request*/, ::kaspawalletd::ShowAddressesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShowAddresses(::grpc::ServerContext* context, ::kaspawalletd::ShowAddressesRequest* request, ::grpc::ServerAsyncResponseWriter< ::kaspawalletd::ShowAddressesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewAddress() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_NewAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewAddress(::grpc::ServerContext* /*context*/, const ::kaspawalletd::NewAddressRequest* /*request*/, ::kaspawalletd::NewAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewAddress(::grpc::ServerContext* context, ::kaspawalletd::NewAddressRequest* request, ::grpc::ServerAsyncResponseWriter< ::kaspawalletd::NewAddressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::kaspawalletd::ShutdownRequest* /*request*/, ::kaspawalletd::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::kaspawalletd::ShutdownRequest* request, ::grpc::ServerAsyncResponseWriter< ::kaspawalletd::ShutdownResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Broadcast() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::kaspawalletd::BroadcastRequest* /*request*/, ::kaspawalletd::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcast(::grpc::ServerContext* context, ::kaspawalletd::BroadcastRequest* request, ::grpc::ServerAsyncResponseWriter< ::kaspawalletd::BroadcastResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Send() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::kaspawalletd::SendRequest* /*request*/, ::kaspawalletd::SendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend(::grpc::ServerContext* context, ::kaspawalletd::SendRequest* request, ::grpc::ServerAsyncResponseWriter< ::kaspawalletd::SendResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Sign() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::kaspawalletd::SignRequest* /*request*/, ::kaspawalletd::SignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSign(::grpc::ServerContext* context, ::kaspawalletd::SignRequest* request, ::grpc::ServerAsyncResponseWriter< ::kaspawalletd::SignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckIfAddressesAreValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckIfAddressesAreValid() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CheckIfAddressesAreValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfAddressesAreValid(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressesAreValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressesAreValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckIfAddressesAreValid(::grpc::ServerContext* context, ::kaspawalletd::CheckIfAddressesAreValidRequest* request, ::grpc::ServerAsyncResponseWriter< ::kaspawalletd::CheckIfAddressesAreValidResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckIfAddressIsValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckIfAddressIsValid() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_CheckIfAddressIsValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfAddressIsValid(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressIsValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressIsValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckIfAddressIsValid(::grpc::ServerContext* context, ::kaspawalletd::CheckIfAddressIsValidRequest* request, ::grpc::ServerAsyncResponseWriter< ::kaspawalletd::CheckIfAddressIsValidResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetBalance<WithAsyncMethod_GetExternalSpendableUTXOs<WithAsyncMethod_CreateUnsignedTransactions<WithAsyncMethod_ShowAddresses<WithAsyncMethod_NewAddress<WithAsyncMethod_Shutdown<WithAsyncMethod_Broadcast<WithAsyncMethod_Send<WithAsyncMethod_Sign<WithAsyncMethod_CheckIfAddressesAreValid<WithAsyncMethod_CheckIfAddressIsValid<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBalance() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::GetBalanceRequest, ::kaspawalletd::GetBalanceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaspawalletd::GetBalanceRequest* request, ::kaspawalletd::GetBalanceResponse* response) { return this->GetBalance(context, request, response); }));}
    void SetMessageAllocatorFor_GetBalance(
        ::grpc::MessageAllocator< ::kaspawalletd::GetBalanceRequest, ::kaspawalletd::GetBalanceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::GetBalanceRequest, ::kaspawalletd::GetBalanceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* /*context*/, const ::kaspawalletd::GetBalanceRequest* /*request*/, ::kaspawalletd::GetBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::kaspawalletd::GetBalanceRequest* /*request*/, ::kaspawalletd::GetBalanceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetExternalSpendableUTXOs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetExternalSpendableUTXOs() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::GetExternalSpendableUTXOsRequest, ::kaspawalletd::GetExternalSpendableUTXOsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* request, ::kaspawalletd::GetExternalSpendableUTXOsResponse* response) { return this->GetExternalSpendableUTXOs(context, request, response); }));}
    void SetMessageAllocatorFor_GetExternalSpendableUTXOs(
        ::grpc::MessageAllocator< ::kaspawalletd::GetExternalSpendableUTXOsRequest, ::kaspawalletd::GetExternalSpendableUTXOsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::GetExternalSpendableUTXOsRequest, ::kaspawalletd::GetExternalSpendableUTXOsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetExternalSpendableUTXOs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExternalSpendableUTXOs(::grpc::ServerContext* /*context*/, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* /*request*/, ::kaspawalletd::GetExternalSpendableUTXOsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExternalSpendableUTXOs(
      ::grpc::CallbackServerContext* /*context*/, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* /*request*/, ::kaspawalletd::GetExternalSpendableUTXOsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateUnsignedTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateUnsignedTransactions() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::CreateUnsignedTransactionsRequest, ::kaspawalletd::CreateUnsignedTransactionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest* request, ::kaspawalletd::CreateUnsignedTransactionsResponse* response) { return this->CreateUnsignedTransactions(context, request, response); }));}
    void SetMessageAllocatorFor_CreateUnsignedTransactions(
        ::grpc::MessageAllocator< ::kaspawalletd::CreateUnsignedTransactionsRequest, ::kaspawalletd::CreateUnsignedTransactionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::CreateUnsignedTransactionsRequest, ::kaspawalletd::CreateUnsignedTransactionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateUnsignedTransactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUnsignedTransactions(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CreateUnsignedTransactionsRequest* /*request*/, ::kaspawalletd::CreateUnsignedTransactionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateUnsignedTransactions(
      ::grpc::CallbackServerContext* /*context*/, const ::kaspawalletd::CreateUnsignedTransactionsRequest* /*request*/, ::kaspawalletd::CreateUnsignedTransactionsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ShowAddresses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ShowAddresses() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::ShowAddressesRequest, ::kaspawalletd::ShowAddressesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaspawalletd::ShowAddressesRequest* request, ::kaspawalletd::ShowAddressesResponse* response) { return this->ShowAddresses(context, request, response); }));}
    void SetMessageAllocatorFor_ShowAddresses(
        ::grpc::MessageAllocator< ::kaspawalletd::ShowAddressesRequest, ::kaspawalletd::ShowAddressesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::ShowAddressesRequest, ::kaspawalletd::ShowAddressesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ShowAddresses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowAddresses(::grpc::ServerContext* /*context*/, const ::kaspawalletd::ShowAddressesRequest* /*request*/, ::kaspawalletd::ShowAddressesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShowAddresses(
      ::grpc::CallbackServerContext* /*context*/, const ::kaspawalletd::ShowAddressesRequest* /*request*/, ::kaspawalletd::ShowAddressesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NewAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewAddress() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::NewAddressRequest, ::kaspawalletd::NewAddressResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaspawalletd::NewAddressRequest* request, ::kaspawalletd::NewAddressResponse* response) { return this->NewAddress(context, request, response); }));}
    void SetMessageAllocatorFor_NewAddress(
        ::grpc::MessageAllocator< ::kaspawalletd::NewAddressRequest, ::kaspawalletd::NewAddressResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::NewAddressRequest, ::kaspawalletd::NewAddressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewAddress(::grpc::ServerContext* /*context*/, const ::kaspawalletd::NewAddressRequest* /*request*/, ::kaspawalletd::NewAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::kaspawalletd::NewAddressRequest* /*request*/, ::kaspawalletd::NewAddressResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Shutdown() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::ShutdownRequest, ::kaspawalletd::ShutdownResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaspawalletd::ShutdownRequest* request, ::kaspawalletd::ShutdownResponse* response) { return this->Shutdown(context, request, response); }));}
    void SetMessageAllocatorFor_Shutdown(
        ::grpc::MessageAllocator< ::kaspawalletd::ShutdownRequest, ::kaspawalletd::ShutdownResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::ShutdownRequest, ::kaspawalletd::ShutdownResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::kaspawalletd::ShutdownRequest* /*request*/, ::kaspawalletd::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::kaspawalletd::ShutdownRequest* /*request*/, ::kaspawalletd::ShutdownResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Broadcast() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::BroadcastRequest, ::kaspawalletd::BroadcastResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaspawalletd::BroadcastRequest* request, ::kaspawalletd::BroadcastResponse* response) { return this->Broadcast(context, request, response); }));}
    void SetMessageAllocatorFor_Broadcast(
        ::grpc::MessageAllocator< ::kaspawalletd::BroadcastRequest, ::kaspawalletd::BroadcastResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::BroadcastRequest, ::kaspawalletd::BroadcastResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::kaspawalletd::BroadcastRequest* /*request*/, ::kaspawalletd::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Broadcast(
      ::grpc::CallbackServerContext* /*context*/, const ::kaspawalletd::BroadcastRequest* /*request*/, ::kaspawalletd::BroadcastResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Send() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::SendRequest, ::kaspawalletd::SendResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaspawalletd::SendRequest* request, ::kaspawalletd::SendResponse* response) { return this->Send(context, request, response); }));}
    void SetMessageAllocatorFor_Send(
        ::grpc::MessageAllocator< ::kaspawalletd::SendRequest, ::kaspawalletd::SendResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::SendRequest, ::kaspawalletd::SendResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::kaspawalletd::SendRequest* /*request*/, ::kaspawalletd::SendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send(
      ::grpc::CallbackServerContext* /*context*/, const ::kaspawalletd::SendRequest* /*request*/, ::kaspawalletd::SendResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Sign() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::SignRequest, ::kaspawalletd::SignResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaspawalletd::SignRequest* request, ::kaspawalletd::SignResponse* response) { return this->Sign(context, request, response); }));}
    void SetMessageAllocatorFor_Sign(
        ::grpc::MessageAllocator< ::kaspawalletd::SignRequest, ::kaspawalletd::SignResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::SignRequest, ::kaspawalletd::SignResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::kaspawalletd::SignRequest* /*request*/, ::kaspawalletd::SignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Sign(
      ::grpc::CallbackServerContext* /*context*/, const ::kaspawalletd::SignRequest* /*request*/, ::kaspawalletd::SignResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckIfAddressesAreValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckIfAddressesAreValid() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::CheckIfAddressesAreValidRequest, ::kaspawalletd::CheckIfAddressesAreValidResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest* request, ::kaspawalletd::CheckIfAddressesAreValidResponse* response) { return this->CheckIfAddressesAreValid(context, request, response); }));}
    void SetMessageAllocatorFor_CheckIfAddressesAreValid(
        ::grpc::MessageAllocator< ::kaspawalletd::CheckIfAddressesAreValidRequest, ::kaspawalletd::CheckIfAddressesAreValidResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::CheckIfAddressesAreValidRequest, ::kaspawalletd::CheckIfAddressesAreValidResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckIfAddressesAreValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfAddressesAreValid(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressesAreValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressesAreValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckIfAddressesAreValid(
      ::grpc::CallbackServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressesAreValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressesAreValidResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckIfAddressIsValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckIfAddressIsValid() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::CheckIfAddressIsValidRequest, ::kaspawalletd::CheckIfAddressIsValidResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest* request, ::kaspawalletd::CheckIfAddressIsValidResponse* response) { return this->CheckIfAddressIsValid(context, request, response); }));}
    void SetMessageAllocatorFor_CheckIfAddressIsValid(
        ::grpc::MessageAllocator< ::kaspawalletd::CheckIfAddressIsValidRequest, ::kaspawalletd::CheckIfAddressIsValidResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kaspawalletd::CheckIfAddressIsValidRequest, ::kaspawalletd::CheckIfAddressIsValidResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckIfAddressIsValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfAddressIsValid(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressIsValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressIsValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckIfAddressIsValid(
      ::grpc::CallbackServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressIsValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressIsValidResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetBalance<WithCallbackMethod_GetExternalSpendableUTXOs<WithCallbackMethod_CreateUnsignedTransactions<WithCallbackMethod_ShowAddresses<WithCallbackMethod_NewAddress<WithCallbackMethod_Shutdown<WithCallbackMethod_Broadcast<WithCallbackMethod_Send<WithCallbackMethod_Sign<WithCallbackMethod_CheckIfAddressesAreValid<WithCallbackMethod_CheckIfAddressIsValid<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBalance() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* /*context*/, const ::kaspawalletd::GetBalanceRequest* /*request*/, ::kaspawalletd::GetBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExternalSpendableUTXOs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExternalSpendableUTXOs() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetExternalSpendableUTXOs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExternalSpendableUTXOs(::grpc::ServerContext* /*context*/, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* /*request*/, ::kaspawalletd::GetExternalSpendableUTXOsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateUnsignedTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateUnsignedTransactions() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateUnsignedTransactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUnsignedTransactions(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CreateUnsignedTransactionsRequest* /*request*/, ::kaspawalletd::CreateUnsignedTransactionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShowAddresses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShowAddresses() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ShowAddresses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowAddresses(::grpc::ServerContext* /*context*/, const ::kaspawalletd::ShowAddressesRequest* /*request*/, ::kaspawalletd::ShowAddressesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewAddress() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_NewAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewAddress(::grpc::ServerContext* /*context*/, const ::kaspawalletd::NewAddressRequest* /*request*/, ::kaspawalletd::NewAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::kaspawalletd::ShutdownRequest* /*request*/, ::kaspawalletd::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Broadcast() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::kaspawalletd::BroadcastRequest* /*request*/, ::kaspawalletd::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Send() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::kaspawalletd::SendRequest* /*request*/, ::kaspawalletd::SendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Sign() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::kaspawalletd::SignRequest* /*request*/, ::kaspawalletd::SignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckIfAddressesAreValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckIfAddressesAreValid() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CheckIfAddressesAreValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfAddressesAreValid(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressesAreValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressesAreValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckIfAddressIsValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckIfAddressIsValid() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_CheckIfAddressIsValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfAddressIsValid(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressIsValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressIsValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBalance() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* /*context*/, const ::kaspawalletd::GetBalanceRequest* /*request*/, ::kaspawalletd::GetBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBalance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExternalSpendableUTXOs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExternalSpendableUTXOs() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetExternalSpendableUTXOs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExternalSpendableUTXOs(::grpc::ServerContext* /*context*/, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* /*request*/, ::kaspawalletd::GetExternalSpendableUTXOsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExternalSpendableUTXOs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateUnsignedTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateUnsignedTransactions() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateUnsignedTransactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUnsignedTransactions(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CreateUnsignedTransactionsRequest* /*request*/, ::kaspawalletd::CreateUnsignedTransactionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUnsignedTransactions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShowAddresses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShowAddresses() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ShowAddresses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowAddresses(::grpc::ServerContext* /*context*/, const ::kaspawalletd::ShowAddressesRequest* /*request*/, ::kaspawalletd::ShowAddressesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShowAddresses(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewAddress() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_NewAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewAddress(::grpc::ServerContext* /*context*/, const ::kaspawalletd::NewAddressRequest* /*request*/, ::kaspawalletd::NewAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Shutdown() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::kaspawalletd::ShutdownRequest* /*request*/, ::kaspawalletd::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Broadcast() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::kaspawalletd::BroadcastRequest* /*request*/, ::kaspawalletd::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcast(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Send() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::kaspawalletd::SendRequest* /*request*/, ::kaspawalletd::SendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Sign() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::kaspawalletd::SignRequest* /*request*/, ::kaspawalletd::SignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckIfAddressesAreValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckIfAddressesAreValid() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CheckIfAddressesAreValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfAddressesAreValid(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressesAreValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressesAreValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckIfAddressesAreValid(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckIfAddressIsValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckIfAddressIsValid() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_CheckIfAddressIsValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfAddressIsValid(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressIsValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressIsValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckIfAddressIsValid(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBalance() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBalance(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* /*context*/, const ::kaspawalletd::GetBalanceRequest* /*request*/, ::kaspawalletd::GetBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetExternalSpendableUTXOs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetExternalSpendableUTXOs() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExternalSpendableUTXOs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetExternalSpendableUTXOs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExternalSpendableUTXOs(::grpc::ServerContext* /*context*/, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* /*request*/, ::kaspawalletd::GetExternalSpendableUTXOsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetExternalSpendableUTXOs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateUnsignedTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateUnsignedTransactions() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateUnsignedTransactions(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateUnsignedTransactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUnsignedTransactions(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CreateUnsignedTransactionsRequest* /*request*/, ::kaspawalletd::CreateUnsignedTransactionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateUnsignedTransactions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ShowAddresses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ShowAddresses() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShowAddresses(context, request, response); }));
    }
    ~WithRawCallbackMethod_ShowAddresses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowAddresses(::grpc::ServerContext* /*context*/, const ::kaspawalletd::ShowAddressesRequest* /*request*/, ::kaspawalletd::ShowAddressesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShowAddresses(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewAddress() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewAddress(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewAddress(::grpc::ServerContext* /*context*/, const ::kaspawalletd::NewAddressRequest* /*request*/, ::kaspawalletd::NewAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Shutdown() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Shutdown(context, request, response); }));
    }
    ~WithRawCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::kaspawalletd::ShutdownRequest* /*request*/, ::kaspawalletd::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Broadcast() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Broadcast(context, request, response); }));
    }
    ~WithRawCallbackMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::kaspawalletd::BroadcastRequest* /*request*/, ::kaspawalletd::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Broadcast(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Send() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Send(context, request, response); }));
    }
    ~WithRawCallbackMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::kaspawalletd::SendRequest* /*request*/, ::kaspawalletd::SendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Sign() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Sign(context, request, response); }));
    }
    ~WithRawCallbackMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::kaspawalletd::SignRequest* /*request*/, ::kaspawalletd::SignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Sign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckIfAddressesAreValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckIfAddressesAreValid() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckIfAddressesAreValid(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckIfAddressesAreValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfAddressesAreValid(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressesAreValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressesAreValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckIfAddressesAreValid(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckIfAddressIsValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckIfAddressIsValid() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckIfAddressIsValid(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckIfAddressIsValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIfAddressIsValid(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressIsValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressIsValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckIfAddressIsValid(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBalance() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kaspawalletd::GetBalanceRequest, ::kaspawalletd::GetBalanceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kaspawalletd::GetBalanceRequest, ::kaspawalletd::GetBalanceResponse>* streamer) {
                       return this->StreamedGetBalance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* /*context*/, const ::kaspawalletd::GetBalanceRequest* /*request*/, ::kaspawalletd::GetBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kaspawalletd::GetBalanceRequest,::kaspawalletd::GetBalanceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExternalSpendableUTXOs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExternalSpendableUTXOs() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kaspawalletd::GetExternalSpendableUTXOsRequest, ::kaspawalletd::GetExternalSpendableUTXOsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kaspawalletd::GetExternalSpendableUTXOsRequest, ::kaspawalletd::GetExternalSpendableUTXOsResponse>* streamer) {
                       return this->StreamedGetExternalSpendableUTXOs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExternalSpendableUTXOs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExternalSpendableUTXOs(::grpc::ServerContext* /*context*/, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* /*request*/, ::kaspawalletd::GetExternalSpendableUTXOsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExternalSpendableUTXOs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kaspawalletd::GetExternalSpendableUTXOsRequest,::kaspawalletd::GetExternalSpendableUTXOsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateUnsignedTransactions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateUnsignedTransactions() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kaspawalletd::CreateUnsignedTransactionsRequest, ::kaspawalletd::CreateUnsignedTransactionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kaspawalletd::CreateUnsignedTransactionsRequest, ::kaspawalletd::CreateUnsignedTransactionsResponse>* streamer) {
                       return this->StreamedCreateUnsignedTransactions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateUnsignedTransactions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateUnsignedTransactions(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CreateUnsignedTransactionsRequest* /*request*/, ::kaspawalletd::CreateUnsignedTransactionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateUnsignedTransactions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kaspawalletd::CreateUnsignedTransactionsRequest,::kaspawalletd::CreateUnsignedTransactionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShowAddresses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShowAddresses() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kaspawalletd::ShowAddressesRequest, ::kaspawalletd::ShowAddressesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kaspawalletd::ShowAddressesRequest, ::kaspawalletd::ShowAddressesResponse>* streamer) {
                       return this->StreamedShowAddresses(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShowAddresses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShowAddresses(::grpc::ServerContext* /*context*/, const ::kaspawalletd::ShowAddressesRequest* /*request*/, ::kaspawalletd::ShowAddressesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShowAddresses(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kaspawalletd::ShowAddressesRequest,::kaspawalletd::ShowAddressesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewAddress() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kaspawalletd::NewAddressRequest, ::kaspawalletd::NewAddressResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kaspawalletd::NewAddressRequest, ::kaspawalletd::NewAddressResponse>* streamer) {
                       return this->StreamedNewAddress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewAddress(::grpc::ServerContext* /*context*/, const ::kaspawalletd::NewAddressRequest* /*request*/, ::kaspawalletd::NewAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kaspawalletd::NewAddressRequest,::kaspawalletd::NewAddressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kaspawalletd::ShutdownRequest, ::kaspawalletd::ShutdownResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kaspawalletd::ShutdownRequest, ::kaspawalletd::ShutdownResponse>* streamer) {
                       return this->StreamedShutdown(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::kaspawalletd::ShutdownRequest* /*request*/, ::kaspawalletd::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kaspawalletd::ShutdownRequest,::kaspawalletd::ShutdownResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Broadcast() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kaspawalletd::BroadcastRequest, ::kaspawalletd::BroadcastResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kaspawalletd::BroadcastRequest, ::kaspawalletd::BroadcastResponse>* streamer) {
                       return this->StreamedBroadcast(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::kaspawalletd::BroadcastRequest* /*request*/, ::kaspawalletd::BroadcastResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBroadcast(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kaspawalletd::BroadcastRequest,::kaspawalletd::BroadcastResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Send() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kaspawalletd::SendRequest, ::kaspawalletd::SendResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kaspawalletd::SendRequest, ::kaspawalletd::SendResponse>* streamer) {
                       return this->StreamedSend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::kaspawalletd::SendRequest* /*request*/, ::kaspawalletd::SendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kaspawalletd::SendRequest,::kaspawalletd::SendResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Sign() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kaspawalletd::SignRequest, ::kaspawalletd::SignResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kaspawalletd::SignRequest, ::kaspawalletd::SignResponse>* streamer) {
                       return this->StreamedSign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Sign(::grpc::ServerContext* /*context*/, const ::kaspawalletd::SignRequest* /*request*/, ::kaspawalletd::SignResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kaspawalletd::SignRequest,::kaspawalletd::SignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckIfAddressesAreValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckIfAddressesAreValid() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kaspawalletd::CheckIfAddressesAreValidRequest, ::kaspawalletd::CheckIfAddressesAreValidResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kaspawalletd::CheckIfAddressesAreValidRequest, ::kaspawalletd::CheckIfAddressesAreValidResponse>* streamer) {
                       return this->StreamedCheckIfAddressesAreValid(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckIfAddressesAreValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckIfAddressesAreValid(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressesAreValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressesAreValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckIfAddressesAreValid(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kaspawalletd::CheckIfAddressesAreValidRequest,::kaspawalletd::CheckIfAddressesAreValidResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckIfAddressIsValid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckIfAddressIsValid() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kaspawalletd::CheckIfAddressIsValidRequest, ::kaspawalletd::CheckIfAddressIsValidResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kaspawalletd::CheckIfAddressIsValidRequest, ::kaspawalletd::CheckIfAddressIsValidResponse>* streamer) {
                       return this->StreamedCheckIfAddressIsValid(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckIfAddressIsValid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckIfAddressIsValid(::grpc::ServerContext* /*context*/, const ::kaspawalletd::CheckIfAddressIsValidRequest* /*request*/, ::kaspawalletd::CheckIfAddressIsValidResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckIfAddressIsValid(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kaspawalletd::CheckIfAddressIsValidRequest,::kaspawalletd::CheckIfAddressIsValidResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetBalance<WithStreamedUnaryMethod_GetExternalSpendableUTXOs<WithStreamedUnaryMethod_CreateUnsignedTransactions<WithStreamedUnaryMethod_ShowAddresses<WithStreamedUnaryMethod_NewAddress<WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_Broadcast<WithStreamedUnaryMethod_Send<WithStreamedUnaryMethod_Sign<WithStreamedUnaryMethod_CheckIfAddressesAreValid<WithStreamedUnaryMethod_CheckIfAddressIsValid<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetBalance<WithStreamedUnaryMethod_GetExternalSpendableUTXOs<WithStreamedUnaryMethod_CreateUnsignedTransactions<WithStreamedUnaryMethod_ShowAddresses<WithStreamedUnaryMethod_NewAddress<WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_Broadcast<WithStreamedUnaryMethod_Send<WithStreamedUnaryMethod_Sign<WithStreamedUnaryMethod_CheckIfAddressesAreValid<WithStreamedUnaryMethod_CheckIfAddressIsValid<Service > > > > > > > > > > > StreamedService;
};

}  // namespace kaspawalletd


#endif  // GRPC_kaspawalletd_2eproto__INCLUDED
