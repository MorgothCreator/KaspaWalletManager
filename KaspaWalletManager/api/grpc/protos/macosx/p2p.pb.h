// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2p.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_p2p_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_p2p_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_p2p_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_p2p_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[60]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p2p_2eproto;
namespace protowire {
class AddressesMessage;
struct AddressesMessageDefaultTypeInternal;
extern AddressesMessageDefaultTypeInternal _AddressesMessage_default_instance_;
class BlockGhostdagDataHashPair;
struct BlockGhostdagDataHashPairDefaultTypeInternal;
extern BlockGhostdagDataHashPairDefaultTypeInternal _BlockGhostdagDataHashPair_default_instance_;
class BlockHeader;
struct BlockHeaderDefaultTypeInternal;
extern BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
class BlockHeadersMessage;
struct BlockHeadersMessageDefaultTypeInternal;
extern BlockHeadersMessageDefaultTypeInternal _BlockHeadersMessage_default_instance_;
class BlockLevelParents;
struct BlockLevelParentsDefaultTypeInternal;
extern BlockLevelParentsDefaultTypeInternal _BlockLevelParents_default_instance_;
class BlockLocatorMessage;
struct BlockLocatorMessageDefaultTypeInternal;
extern BlockLocatorMessageDefaultTypeInternal _BlockLocatorMessage_default_instance_;
class BlockMessage;
struct BlockMessageDefaultTypeInternal;
extern BlockMessageDefaultTypeInternal _BlockMessage_default_instance_;
class BlockWithTrustedDataMessage;
struct BlockWithTrustedDataMessageDefaultTypeInternal;
extern BlockWithTrustedDataMessageDefaultTypeInternal _BlockWithTrustedDataMessage_default_instance_;
class BlockWithTrustedDataV4Message;
struct BlockWithTrustedDataV4MessageDefaultTypeInternal;
extern BlockWithTrustedDataV4MessageDefaultTypeInternal _BlockWithTrustedDataV4Message_default_instance_;
class BluesAnticoneSizes;
struct BluesAnticoneSizesDefaultTypeInternal;
extern BluesAnticoneSizesDefaultTypeInternal _BluesAnticoneSizes_default_instance_;
class DaaBlock;
struct DaaBlockDefaultTypeInternal;
extern DaaBlockDefaultTypeInternal _DaaBlock_default_instance_;
class DaaBlockV4;
struct DaaBlockV4DefaultTypeInternal;
extern DaaBlockV4DefaultTypeInternal _DaaBlockV4_default_instance_;
class DoneBlocksWithTrustedDataMessage;
struct DoneBlocksWithTrustedDataMessageDefaultTypeInternal;
extern DoneBlocksWithTrustedDataMessageDefaultTypeInternal _DoneBlocksWithTrustedDataMessage_default_instance_;
class DoneHeadersMessage;
struct DoneHeadersMessageDefaultTypeInternal;
extern DoneHeadersMessageDefaultTypeInternal _DoneHeadersMessage_default_instance_;
class DonePruningPointUtxoSetChunksMessage;
struct DonePruningPointUtxoSetChunksMessageDefaultTypeInternal;
extern DonePruningPointUtxoSetChunksMessageDefaultTypeInternal _DonePruningPointUtxoSetChunksMessage_default_instance_;
class GhostdagData;
struct GhostdagDataDefaultTypeInternal;
extern GhostdagDataDefaultTypeInternal _GhostdagData_default_instance_;
class Hash;
struct HashDefaultTypeInternal;
extern HashDefaultTypeInternal _Hash_default_instance_;
class IbdBlockLocatorHighestHashMessage;
struct IbdBlockLocatorHighestHashMessageDefaultTypeInternal;
extern IbdBlockLocatorHighestHashMessageDefaultTypeInternal _IbdBlockLocatorHighestHashMessage_default_instance_;
class IbdBlockLocatorHighestHashNotFoundMessage;
struct IbdBlockLocatorHighestHashNotFoundMessageDefaultTypeInternal;
extern IbdBlockLocatorHighestHashNotFoundMessageDefaultTypeInternal _IbdBlockLocatorHighestHashNotFoundMessage_default_instance_;
class IbdBlockLocatorMessage;
struct IbdBlockLocatorMessageDefaultTypeInternal;
extern IbdBlockLocatorMessageDefaultTypeInternal _IbdBlockLocatorMessage_default_instance_;
class IbdChainBlockLocatorMessage;
struct IbdChainBlockLocatorMessageDefaultTypeInternal;
extern IbdChainBlockLocatorMessageDefaultTypeInternal _IbdChainBlockLocatorMessage_default_instance_;
class InvRelayBlockMessage;
struct InvRelayBlockMessageDefaultTypeInternal;
extern InvRelayBlockMessageDefaultTypeInternal _InvRelayBlockMessage_default_instance_;
class InvTransactionsMessage;
struct InvTransactionsMessageDefaultTypeInternal;
extern InvTransactionsMessageDefaultTypeInternal _InvTransactionsMessage_default_instance_;
class NetAddress;
struct NetAddressDefaultTypeInternal;
extern NetAddressDefaultTypeInternal _NetAddress_default_instance_;
class Outpoint;
struct OutpointDefaultTypeInternal;
extern OutpointDefaultTypeInternal _Outpoint_default_instance_;
class OutpointAndUtxoEntryPair;
struct OutpointAndUtxoEntryPairDefaultTypeInternal;
extern OutpointAndUtxoEntryPairDefaultTypeInternal _OutpointAndUtxoEntryPair_default_instance_;
class PingMessage;
struct PingMessageDefaultTypeInternal;
extern PingMessageDefaultTypeInternal _PingMessage_default_instance_;
class PongMessage;
struct PongMessageDefaultTypeInternal;
extern PongMessageDefaultTypeInternal _PongMessage_default_instance_;
class PruningPointProofHeaderArray;
struct PruningPointProofHeaderArrayDefaultTypeInternal;
extern PruningPointProofHeaderArrayDefaultTypeInternal _PruningPointProofHeaderArray_default_instance_;
class PruningPointProofMessage;
struct PruningPointProofMessageDefaultTypeInternal;
extern PruningPointProofMessageDefaultTypeInternal _PruningPointProofMessage_default_instance_;
class PruningPointUtxoSetChunkMessage;
struct PruningPointUtxoSetChunkMessageDefaultTypeInternal;
extern PruningPointUtxoSetChunkMessageDefaultTypeInternal _PruningPointUtxoSetChunkMessage_default_instance_;
class PruningPointsMessage;
struct PruningPointsMessageDefaultTypeInternal;
extern PruningPointsMessageDefaultTypeInternal _PruningPointsMessage_default_instance_;
class ReadyMessage;
struct ReadyMessageDefaultTypeInternal;
extern ReadyMessageDefaultTypeInternal _ReadyMessage_default_instance_;
class RejectMessage;
struct RejectMessageDefaultTypeInternal;
extern RejectMessageDefaultTypeInternal _RejectMessage_default_instance_;
class RequestAddressesMessage;
struct RequestAddressesMessageDefaultTypeInternal;
extern RequestAddressesMessageDefaultTypeInternal _RequestAddressesMessage_default_instance_;
class RequestAnticoneMessage;
struct RequestAnticoneMessageDefaultTypeInternal;
extern RequestAnticoneMessageDefaultTypeInternal _RequestAnticoneMessage_default_instance_;
class RequestBlockLocatorMessage;
struct RequestBlockLocatorMessageDefaultTypeInternal;
extern RequestBlockLocatorMessageDefaultTypeInternal _RequestBlockLocatorMessage_default_instance_;
class RequestHeadersMessage;
struct RequestHeadersMessageDefaultTypeInternal;
extern RequestHeadersMessageDefaultTypeInternal _RequestHeadersMessage_default_instance_;
class RequestIBDBlocksMessage;
struct RequestIBDBlocksMessageDefaultTypeInternal;
extern RequestIBDBlocksMessageDefaultTypeInternal _RequestIBDBlocksMessage_default_instance_;
class RequestIBDChainBlockLocatorMessage;
struct RequestIBDChainBlockLocatorMessageDefaultTypeInternal;
extern RequestIBDChainBlockLocatorMessageDefaultTypeInternal _RequestIBDChainBlockLocatorMessage_default_instance_;
class RequestNextHeadersMessage;
struct RequestNextHeadersMessageDefaultTypeInternal;
extern RequestNextHeadersMessageDefaultTypeInternal _RequestNextHeadersMessage_default_instance_;
class RequestNextPruningPointAndItsAnticoneBlocksMessage;
struct RequestNextPruningPointAndItsAnticoneBlocksMessageDefaultTypeInternal;
extern RequestNextPruningPointAndItsAnticoneBlocksMessageDefaultTypeInternal _RequestNextPruningPointAndItsAnticoneBlocksMessage_default_instance_;
class RequestNextPruningPointUtxoSetChunkMessage;
struct RequestNextPruningPointUtxoSetChunkMessageDefaultTypeInternal;
extern RequestNextPruningPointUtxoSetChunkMessageDefaultTypeInternal _RequestNextPruningPointUtxoSetChunkMessage_default_instance_;
class RequestPruningPointAndItsAnticoneMessage;
struct RequestPruningPointAndItsAnticoneMessageDefaultTypeInternal;
extern RequestPruningPointAndItsAnticoneMessageDefaultTypeInternal _RequestPruningPointAndItsAnticoneMessage_default_instance_;
class RequestPruningPointProofMessage;
struct RequestPruningPointProofMessageDefaultTypeInternal;
extern RequestPruningPointProofMessageDefaultTypeInternal _RequestPruningPointProofMessage_default_instance_;
class RequestPruningPointUTXOSetMessage;
struct RequestPruningPointUTXOSetMessageDefaultTypeInternal;
extern RequestPruningPointUTXOSetMessageDefaultTypeInternal _RequestPruningPointUTXOSetMessage_default_instance_;
class RequestRelayBlocksMessage;
struct RequestRelayBlocksMessageDefaultTypeInternal;
extern RequestRelayBlocksMessageDefaultTypeInternal _RequestRelayBlocksMessage_default_instance_;
class RequestTransactionsMessage;
struct RequestTransactionsMessageDefaultTypeInternal;
extern RequestTransactionsMessageDefaultTypeInternal _RequestTransactionsMessage_default_instance_;
class ScriptPublicKey;
struct ScriptPublicKeyDefaultTypeInternal;
extern ScriptPublicKeyDefaultTypeInternal _ScriptPublicKey_default_instance_;
class SubnetworkId;
struct SubnetworkIdDefaultTypeInternal;
extern SubnetworkIdDefaultTypeInternal _SubnetworkId_default_instance_;
class TransactionId;
struct TransactionIdDefaultTypeInternal;
extern TransactionIdDefaultTypeInternal _TransactionId_default_instance_;
class TransactionInput;
struct TransactionInputDefaultTypeInternal;
extern TransactionInputDefaultTypeInternal _TransactionInput_default_instance_;
class TransactionMessage;
struct TransactionMessageDefaultTypeInternal;
extern TransactionMessageDefaultTypeInternal _TransactionMessage_default_instance_;
class TransactionNotFoundMessage;
struct TransactionNotFoundMessageDefaultTypeInternal;
extern TransactionNotFoundMessageDefaultTypeInternal _TransactionNotFoundMessage_default_instance_;
class TransactionOutput;
struct TransactionOutputDefaultTypeInternal;
extern TransactionOutputDefaultTypeInternal _TransactionOutput_default_instance_;
class TrustedDataMessage;
struct TrustedDataMessageDefaultTypeInternal;
extern TrustedDataMessageDefaultTypeInternal _TrustedDataMessage_default_instance_;
class UnexpectedPruningPointMessage;
struct UnexpectedPruningPointMessageDefaultTypeInternal;
extern UnexpectedPruningPointMessageDefaultTypeInternal _UnexpectedPruningPointMessage_default_instance_;
class UtxoEntry;
struct UtxoEntryDefaultTypeInternal;
extern UtxoEntryDefaultTypeInternal _UtxoEntry_default_instance_;
class VerackMessage;
struct VerackMessageDefaultTypeInternal;
extern VerackMessageDefaultTypeInternal _VerackMessage_default_instance_;
class VersionMessage;
struct VersionMessageDefaultTypeInternal;
extern VersionMessageDefaultTypeInternal _VersionMessage_default_instance_;
}  // namespace protowire
PROTOBUF_NAMESPACE_OPEN
template<> ::protowire::AddressesMessage* Arena::CreateMaybeMessage<::protowire::AddressesMessage>(Arena*);
template<> ::protowire::BlockGhostdagDataHashPair* Arena::CreateMaybeMessage<::protowire::BlockGhostdagDataHashPair>(Arena*);
template<> ::protowire::BlockHeader* Arena::CreateMaybeMessage<::protowire::BlockHeader>(Arena*);
template<> ::protowire::BlockHeadersMessage* Arena::CreateMaybeMessage<::protowire::BlockHeadersMessage>(Arena*);
template<> ::protowire::BlockLevelParents* Arena::CreateMaybeMessage<::protowire::BlockLevelParents>(Arena*);
template<> ::protowire::BlockLocatorMessage* Arena::CreateMaybeMessage<::protowire::BlockLocatorMessage>(Arena*);
template<> ::protowire::BlockMessage* Arena::CreateMaybeMessage<::protowire::BlockMessage>(Arena*);
template<> ::protowire::BlockWithTrustedDataMessage* Arena::CreateMaybeMessage<::protowire::BlockWithTrustedDataMessage>(Arena*);
template<> ::protowire::BlockWithTrustedDataV4Message* Arena::CreateMaybeMessage<::protowire::BlockWithTrustedDataV4Message>(Arena*);
template<> ::protowire::BluesAnticoneSizes* Arena::CreateMaybeMessage<::protowire::BluesAnticoneSizes>(Arena*);
template<> ::protowire::DaaBlock* Arena::CreateMaybeMessage<::protowire::DaaBlock>(Arena*);
template<> ::protowire::DaaBlockV4* Arena::CreateMaybeMessage<::protowire::DaaBlockV4>(Arena*);
template<> ::protowire::DoneBlocksWithTrustedDataMessage* Arena::CreateMaybeMessage<::protowire::DoneBlocksWithTrustedDataMessage>(Arena*);
template<> ::protowire::DoneHeadersMessage* Arena::CreateMaybeMessage<::protowire::DoneHeadersMessage>(Arena*);
template<> ::protowire::DonePruningPointUtxoSetChunksMessage* Arena::CreateMaybeMessage<::protowire::DonePruningPointUtxoSetChunksMessage>(Arena*);
template<> ::protowire::GhostdagData* Arena::CreateMaybeMessage<::protowire::GhostdagData>(Arena*);
template<> ::protowire::Hash* Arena::CreateMaybeMessage<::protowire::Hash>(Arena*);
template<> ::protowire::IbdBlockLocatorHighestHashMessage* Arena::CreateMaybeMessage<::protowire::IbdBlockLocatorHighestHashMessage>(Arena*);
template<> ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* Arena::CreateMaybeMessage<::protowire::IbdBlockLocatorHighestHashNotFoundMessage>(Arena*);
template<> ::protowire::IbdBlockLocatorMessage* Arena::CreateMaybeMessage<::protowire::IbdBlockLocatorMessage>(Arena*);
template<> ::protowire::IbdChainBlockLocatorMessage* Arena::CreateMaybeMessage<::protowire::IbdChainBlockLocatorMessage>(Arena*);
template<> ::protowire::InvRelayBlockMessage* Arena::CreateMaybeMessage<::protowire::InvRelayBlockMessage>(Arena*);
template<> ::protowire::InvTransactionsMessage* Arena::CreateMaybeMessage<::protowire::InvTransactionsMessage>(Arena*);
template<> ::protowire::NetAddress* Arena::CreateMaybeMessage<::protowire::NetAddress>(Arena*);
template<> ::protowire::Outpoint* Arena::CreateMaybeMessage<::protowire::Outpoint>(Arena*);
template<> ::protowire::OutpointAndUtxoEntryPair* Arena::CreateMaybeMessage<::protowire::OutpointAndUtxoEntryPair>(Arena*);
template<> ::protowire::PingMessage* Arena::CreateMaybeMessage<::protowire::PingMessage>(Arena*);
template<> ::protowire::PongMessage* Arena::CreateMaybeMessage<::protowire::PongMessage>(Arena*);
template<> ::protowire::PruningPointProofHeaderArray* Arena::CreateMaybeMessage<::protowire::PruningPointProofHeaderArray>(Arena*);
template<> ::protowire::PruningPointProofMessage* Arena::CreateMaybeMessage<::protowire::PruningPointProofMessage>(Arena*);
template<> ::protowire::PruningPointUtxoSetChunkMessage* Arena::CreateMaybeMessage<::protowire::PruningPointUtxoSetChunkMessage>(Arena*);
template<> ::protowire::PruningPointsMessage* Arena::CreateMaybeMessage<::protowire::PruningPointsMessage>(Arena*);
template<> ::protowire::ReadyMessage* Arena::CreateMaybeMessage<::protowire::ReadyMessage>(Arena*);
template<> ::protowire::RejectMessage* Arena::CreateMaybeMessage<::protowire::RejectMessage>(Arena*);
template<> ::protowire::RequestAddressesMessage* Arena::CreateMaybeMessage<::protowire::RequestAddressesMessage>(Arena*);
template<> ::protowire::RequestAnticoneMessage* Arena::CreateMaybeMessage<::protowire::RequestAnticoneMessage>(Arena*);
template<> ::protowire::RequestBlockLocatorMessage* Arena::CreateMaybeMessage<::protowire::RequestBlockLocatorMessage>(Arena*);
template<> ::protowire::RequestHeadersMessage* Arena::CreateMaybeMessage<::protowire::RequestHeadersMessage>(Arena*);
template<> ::protowire::RequestIBDBlocksMessage* Arena::CreateMaybeMessage<::protowire::RequestIBDBlocksMessage>(Arena*);
template<> ::protowire::RequestIBDChainBlockLocatorMessage* Arena::CreateMaybeMessage<::protowire::RequestIBDChainBlockLocatorMessage>(Arena*);
template<> ::protowire::RequestNextHeadersMessage* Arena::CreateMaybeMessage<::protowire::RequestNextHeadersMessage>(Arena*);
template<> ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* Arena::CreateMaybeMessage<::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage>(Arena*);
template<> ::protowire::RequestNextPruningPointUtxoSetChunkMessage* Arena::CreateMaybeMessage<::protowire::RequestNextPruningPointUtxoSetChunkMessage>(Arena*);
template<> ::protowire::RequestPruningPointAndItsAnticoneMessage* Arena::CreateMaybeMessage<::protowire::RequestPruningPointAndItsAnticoneMessage>(Arena*);
template<> ::protowire::RequestPruningPointProofMessage* Arena::CreateMaybeMessage<::protowire::RequestPruningPointProofMessage>(Arena*);
template<> ::protowire::RequestPruningPointUTXOSetMessage* Arena::CreateMaybeMessage<::protowire::RequestPruningPointUTXOSetMessage>(Arena*);
template<> ::protowire::RequestRelayBlocksMessage* Arena::CreateMaybeMessage<::protowire::RequestRelayBlocksMessage>(Arena*);
template<> ::protowire::RequestTransactionsMessage* Arena::CreateMaybeMessage<::protowire::RequestTransactionsMessage>(Arena*);
template<> ::protowire::ScriptPublicKey* Arena::CreateMaybeMessage<::protowire::ScriptPublicKey>(Arena*);
template<> ::protowire::SubnetworkId* Arena::CreateMaybeMessage<::protowire::SubnetworkId>(Arena*);
template<> ::protowire::TransactionId* Arena::CreateMaybeMessage<::protowire::TransactionId>(Arena*);
template<> ::protowire::TransactionInput* Arena::CreateMaybeMessage<::protowire::TransactionInput>(Arena*);
template<> ::protowire::TransactionMessage* Arena::CreateMaybeMessage<::protowire::TransactionMessage>(Arena*);
template<> ::protowire::TransactionNotFoundMessage* Arena::CreateMaybeMessage<::protowire::TransactionNotFoundMessage>(Arena*);
template<> ::protowire::TransactionOutput* Arena::CreateMaybeMessage<::protowire::TransactionOutput>(Arena*);
template<> ::protowire::TrustedDataMessage* Arena::CreateMaybeMessage<::protowire::TrustedDataMessage>(Arena*);
template<> ::protowire::UnexpectedPruningPointMessage* Arena::CreateMaybeMessage<::protowire::UnexpectedPruningPointMessage>(Arena*);
template<> ::protowire::UtxoEntry* Arena::CreateMaybeMessage<::protowire::UtxoEntry>(Arena*);
template<> ::protowire::VerackMessage* Arena::CreateMaybeMessage<::protowire::VerackMessage>(Arena*);
template<> ::protowire::VersionMessage* Arena::CreateMaybeMessage<::protowire::VersionMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protowire {

// ===================================================================

class RequestAddressesMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RequestAddressesMessage) */ {
 public:
  inline RequestAddressesMessage() : RequestAddressesMessage(nullptr) {}
  ~RequestAddressesMessage() override;
  explicit constexpr RequestAddressesMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestAddressesMessage(const RequestAddressesMessage& from);
  RequestAddressesMessage(RequestAddressesMessage&& from) noexcept
    : RequestAddressesMessage() {
    *this = ::std::move(from);
  }

  inline RequestAddressesMessage& operator=(const RequestAddressesMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAddressesMessage& operator=(RequestAddressesMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestAddressesMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestAddressesMessage* internal_default_instance() {
    return reinterpret_cast<const RequestAddressesMessage*>(
               &_RequestAddressesMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestAddressesMessage& a, RequestAddressesMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAddressesMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestAddressesMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestAddressesMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestAddressesMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestAddressesMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestAddressesMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAddressesMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestAddressesMessage";
  }
  protected:
  explicit RequestAddressesMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubnetworkIdFieldNumber = 2,
    kIncludeAllSubnetworksFieldNumber = 1,
  };
  // .protowire.SubnetworkId subnetworkId = 2;
  bool has_subnetworkid() const;
  private:
  bool _internal_has_subnetworkid() const;
  public:
  void clear_subnetworkid();
  const ::protowire::SubnetworkId& subnetworkid() const;
  PROTOBUF_NODISCARD ::protowire::SubnetworkId* release_subnetworkid();
  ::protowire::SubnetworkId* mutable_subnetworkid();
  void set_allocated_subnetworkid(::protowire::SubnetworkId* subnetworkid);
  private:
  const ::protowire::SubnetworkId& _internal_subnetworkid() const;
  ::protowire::SubnetworkId* _internal_mutable_subnetworkid();
  public:
  void unsafe_arena_set_allocated_subnetworkid(
      ::protowire::SubnetworkId* subnetworkid);
  ::protowire::SubnetworkId* unsafe_arena_release_subnetworkid();

  // bool includeAllSubnetworks = 1;
  void clear_includeallsubnetworks();
  bool includeallsubnetworks() const;
  void set_includeallsubnetworks(bool value);
  private:
  bool _internal_includeallsubnetworks() const;
  void _internal_set_includeallsubnetworks(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.RequestAddressesMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::SubnetworkId* subnetworkid_;
  bool includeallsubnetworks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class AddressesMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.AddressesMessage) */ {
 public:
  inline AddressesMessage() : AddressesMessage(nullptr) {}
  ~AddressesMessage() override;
  explicit constexpr AddressesMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressesMessage(const AddressesMessage& from);
  AddressesMessage(AddressesMessage&& from) noexcept
    : AddressesMessage() {
    *this = ::std::move(from);
  }

  inline AddressesMessage& operator=(const AddressesMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressesMessage& operator=(AddressesMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressesMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressesMessage* internal_default_instance() {
    return reinterpret_cast<const AddressesMessage*>(
               &_AddressesMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddressesMessage& a, AddressesMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressesMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressesMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddressesMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddressesMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressesMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddressesMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressesMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.AddressesMessage";
  }
  protected:
  explicit AddressesMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressListFieldNumber = 1,
  };
  // repeated .protowire.NetAddress addressList = 1;
  int addresslist_size() const;
  private:
  int _internal_addresslist_size() const;
  public:
  void clear_addresslist();
  ::protowire::NetAddress* mutable_addresslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::NetAddress >*
      mutable_addresslist();
  private:
  const ::protowire::NetAddress& _internal_addresslist(int index) const;
  ::protowire::NetAddress* _internal_add_addresslist();
  public:
  const ::protowire::NetAddress& addresslist(int index) const;
  ::protowire::NetAddress* add_addresslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::NetAddress >&
      addresslist() const;

  // @@protoc_insertion_point(class_scope:protowire.AddressesMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::NetAddress > addresslist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class NetAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.NetAddress) */ {
 public:
  inline NetAddress() : NetAddress(nullptr) {}
  ~NetAddress() override;
  explicit constexpr NetAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetAddress(const NetAddress& from);
  NetAddress(NetAddress&& from) noexcept
    : NetAddress() {
    *this = ::std::move(from);
  }

  inline NetAddress& operator=(const NetAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetAddress& operator=(NetAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetAddress* internal_default_instance() {
    return reinterpret_cast<const NetAddress*>(
               &_NetAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetAddress& a, NetAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(NetAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetAddress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NetAddress";
  }
  protected:
  explicit NetAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kPortFieldNumber = 4,
  };
  // bytes ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // uint32 port = 4;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.NetAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int64_t timestamp_;
  uint32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class SubnetworkId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.SubnetworkId) */ {
 public:
  inline SubnetworkId() : SubnetworkId(nullptr) {}
  ~SubnetworkId() override;
  explicit constexpr SubnetworkId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubnetworkId(const SubnetworkId& from);
  SubnetworkId(SubnetworkId&& from) noexcept
    : SubnetworkId() {
    *this = ::std::move(from);
  }

  inline SubnetworkId& operator=(const SubnetworkId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubnetworkId& operator=(SubnetworkId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubnetworkId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubnetworkId* internal_default_instance() {
    return reinterpret_cast<const SubnetworkId*>(
               &_SubnetworkId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SubnetworkId& a, SubnetworkId& b) {
    a.Swap(&b);
  }
  inline void Swap(SubnetworkId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubnetworkId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubnetworkId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubnetworkId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubnetworkId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubnetworkId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubnetworkId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.SubnetworkId";
  }
  protected:
  explicit SubnetworkId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 1,
  };
  // bytes bytes = 1;
  void clear_bytes();
  const std::string& bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // @@protoc_insertion_point(class_scope:protowire.SubnetworkId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class TransactionMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.TransactionMessage) */ {
 public:
  inline TransactionMessage() : TransactionMessage(nullptr) {}
  ~TransactionMessage() override;
  explicit constexpr TransactionMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionMessage(const TransactionMessage& from);
  TransactionMessage(TransactionMessage&& from) noexcept
    : TransactionMessage() {
    *this = ::std::move(from);
  }

  inline TransactionMessage& operator=(const TransactionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionMessage& operator=(TransactionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionMessage* internal_default_instance() {
    return reinterpret_cast<const TransactionMessage*>(
               &_TransactionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransactionMessage& a, TransactionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.TransactionMessage";
  }
  protected:
  explicit TransactionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kOutputsFieldNumber = 3,
    kPayloadFieldNumber = 8,
    kSubnetworkIdFieldNumber = 5,
    kLockTimeFieldNumber = 4,
    kGasFieldNumber = 6,
    kVersionFieldNumber = 1,
  };
  // repeated .protowire.TransactionInput inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::protowire::TransactionInput* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionInput >*
      mutable_inputs();
  private:
  const ::protowire::TransactionInput& _internal_inputs(int index) const;
  ::protowire::TransactionInput* _internal_add_inputs();
  public:
  const ::protowire::TransactionInput& inputs(int index) const;
  ::protowire::TransactionInput* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionInput >&
      inputs() const;

  // repeated .protowire.TransactionOutput outputs = 3;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::protowire::TransactionOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionOutput >*
      mutable_outputs();
  private:
  const ::protowire::TransactionOutput& _internal_outputs(int index) const;
  ::protowire::TransactionOutput* _internal_add_outputs();
  public:
  const ::protowire::TransactionOutput& outputs(int index) const;
  ::protowire::TransactionOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionOutput >&
      outputs() const;

  // bytes payload = 8;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .protowire.SubnetworkId subnetworkId = 5;
  bool has_subnetworkid() const;
  private:
  bool _internal_has_subnetworkid() const;
  public:
  void clear_subnetworkid();
  const ::protowire::SubnetworkId& subnetworkid() const;
  PROTOBUF_NODISCARD ::protowire::SubnetworkId* release_subnetworkid();
  ::protowire::SubnetworkId* mutable_subnetworkid();
  void set_allocated_subnetworkid(::protowire::SubnetworkId* subnetworkid);
  private:
  const ::protowire::SubnetworkId& _internal_subnetworkid() const;
  ::protowire::SubnetworkId* _internal_mutable_subnetworkid();
  public:
  void unsafe_arena_set_allocated_subnetworkid(
      ::protowire::SubnetworkId* subnetworkid);
  ::protowire::SubnetworkId* unsafe_arena_release_subnetworkid();

  // uint64 lockTime = 4;
  void clear_locktime();
  uint64_t locktime() const;
  void set_locktime(uint64_t value);
  private:
  uint64_t _internal_locktime() const;
  void _internal_set_locktime(uint64_t value);
  public:

  // uint64 gas = 6;
  void clear_gas();
  uint64_t gas() const;
  void set_gas(uint64_t value);
  private:
  uint64_t _internal_gas() const;
  void _internal_set_gas(uint64_t value);
  public:

  // uint32 version = 1;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.TransactionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionInput > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionOutput > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::protowire::SubnetworkId* subnetworkid_;
  uint64_t locktime_;
  uint64_t gas_;
  uint32_t version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class TransactionInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.TransactionInput) */ {
 public:
  inline TransactionInput() : TransactionInput(nullptr) {}
  ~TransactionInput() override;
  explicit constexpr TransactionInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionInput(const TransactionInput& from);
  TransactionInput(TransactionInput&& from) noexcept
    : TransactionInput() {
    *this = ::std::move(from);
  }

  inline TransactionInput& operator=(const TransactionInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionInput& operator=(TransactionInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionInput* internal_default_instance() {
    return reinterpret_cast<const TransactionInput*>(
               &_TransactionInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransactionInput& a, TransactionInput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.TransactionInput";
  }
  protected:
  explicit TransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureScriptFieldNumber = 2,
    kPreviousOutpointFieldNumber = 1,
    kSequenceFieldNumber = 3,
    kSigOpCountFieldNumber = 4,
  };
  // bytes signatureScript = 2;
  void clear_signaturescript();
  const std::string& signaturescript() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signaturescript(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signaturescript();
  PROTOBUF_NODISCARD std::string* release_signaturescript();
  void set_allocated_signaturescript(std::string* signaturescript);
  private:
  const std::string& _internal_signaturescript() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signaturescript(const std::string& value);
  std::string* _internal_mutable_signaturescript();
  public:

  // .protowire.Outpoint previousOutpoint = 1;
  bool has_previousoutpoint() const;
  private:
  bool _internal_has_previousoutpoint() const;
  public:
  void clear_previousoutpoint();
  const ::protowire::Outpoint& previousoutpoint() const;
  PROTOBUF_NODISCARD ::protowire::Outpoint* release_previousoutpoint();
  ::protowire::Outpoint* mutable_previousoutpoint();
  void set_allocated_previousoutpoint(::protowire::Outpoint* previousoutpoint);
  private:
  const ::protowire::Outpoint& _internal_previousoutpoint() const;
  ::protowire::Outpoint* _internal_mutable_previousoutpoint();
  public:
  void unsafe_arena_set_allocated_previousoutpoint(
      ::protowire::Outpoint* previousoutpoint);
  ::protowire::Outpoint* unsafe_arena_release_previousoutpoint();

  // uint64 sequence = 3;
  void clear_sequence();
  uint64_t sequence() const;
  void set_sequence(uint64_t value);
  private:
  uint64_t _internal_sequence() const;
  void _internal_set_sequence(uint64_t value);
  public:

  // uint32 sigOpCount = 4;
  void clear_sigopcount();
  uint32_t sigopcount() const;
  void set_sigopcount(uint32_t value);
  private:
  uint32_t _internal_sigopcount() const;
  void _internal_set_sigopcount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.TransactionInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signaturescript_;
  ::protowire::Outpoint* previousoutpoint_;
  uint64_t sequence_;
  uint32_t sigopcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class Outpoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.Outpoint) */ {
 public:
  inline Outpoint() : Outpoint(nullptr) {}
  ~Outpoint() override;
  explicit constexpr Outpoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Outpoint(const Outpoint& from);
  Outpoint(Outpoint&& from) noexcept
    : Outpoint() {
    *this = ::std::move(from);
  }

  inline Outpoint& operator=(const Outpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Outpoint& operator=(Outpoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Outpoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Outpoint* internal_default_instance() {
    return reinterpret_cast<const Outpoint*>(
               &_Outpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Outpoint& a, Outpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Outpoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Outpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Outpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Outpoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Outpoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Outpoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Outpoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.Outpoint";
  }
  protected:
  explicit Outpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // .protowire.TransactionId transactionId = 1;
  bool has_transactionid() const;
  private:
  bool _internal_has_transactionid() const;
  public:
  void clear_transactionid();
  const ::protowire::TransactionId& transactionid() const;
  PROTOBUF_NODISCARD ::protowire::TransactionId* release_transactionid();
  ::protowire::TransactionId* mutable_transactionid();
  void set_allocated_transactionid(::protowire::TransactionId* transactionid);
  private:
  const ::protowire::TransactionId& _internal_transactionid() const;
  ::protowire::TransactionId* _internal_mutable_transactionid();
  public:
  void unsafe_arena_set_allocated_transactionid(
      ::protowire::TransactionId* transactionid);
  ::protowire::TransactionId* unsafe_arena_release_transactionid();

  // uint32 index = 2;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.Outpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::TransactionId* transactionid_;
  uint32_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class TransactionId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.TransactionId) */ {
 public:
  inline TransactionId() : TransactionId(nullptr) {}
  ~TransactionId() override;
  explicit constexpr TransactionId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionId(const TransactionId& from);
  TransactionId(TransactionId&& from) noexcept
    : TransactionId() {
    *this = ::std::move(from);
  }

  inline TransactionId& operator=(const TransactionId& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionId& operator=(TransactionId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionId& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionId* internal_default_instance() {
    return reinterpret_cast<const TransactionId*>(
               &_TransactionId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TransactionId& a, TransactionId& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.TransactionId";
  }
  protected:
  explicit TransactionId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 1,
  };
  // bytes bytes = 1;
  void clear_bytes();
  const std::string& bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // @@protoc_insertion_point(class_scope:protowire.TransactionId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class ScriptPublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.ScriptPublicKey) */ {
 public:
  inline ScriptPublicKey() : ScriptPublicKey(nullptr) {}
  ~ScriptPublicKey() override;
  explicit constexpr ScriptPublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScriptPublicKey(const ScriptPublicKey& from);
  ScriptPublicKey(ScriptPublicKey&& from) noexcept
    : ScriptPublicKey() {
    *this = ::std::move(from);
  }

  inline ScriptPublicKey& operator=(const ScriptPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScriptPublicKey& operator=(ScriptPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScriptPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScriptPublicKey* internal_default_instance() {
    return reinterpret_cast<const ScriptPublicKey*>(
               &_ScriptPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ScriptPublicKey& a, ScriptPublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(ScriptPublicKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScriptPublicKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScriptPublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScriptPublicKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScriptPublicKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScriptPublicKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScriptPublicKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.ScriptPublicKey";
  }
  protected:
  explicit ScriptPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // bytes script = 1;
  void clear_script();
  const std::string& script() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script();
  PROTOBUF_NODISCARD std::string* release_script();
  void set_allocated_script(std::string* script);
  private:
  const std::string& _internal_script() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script(const std::string& value);
  std::string* _internal_mutable_script();
  public:

  // uint32 version = 2;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.ScriptPublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
  uint32_t version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class TransactionOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.TransactionOutput) */ {
 public:
  inline TransactionOutput() : TransactionOutput(nullptr) {}
  ~TransactionOutput() override;
  explicit constexpr TransactionOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionOutput(const TransactionOutput& from);
  TransactionOutput(TransactionOutput&& from) noexcept
    : TransactionOutput() {
    *this = ::std::move(from);
  }

  inline TransactionOutput& operator=(const TransactionOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOutput& operator=(TransactionOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionOutput* internal_default_instance() {
    return reinterpret_cast<const TransactionOutput*>(
               &_TransactionOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TransactionOutput& a, TransactionOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.TransactionOutput";
  }
  protected:
  explicit TransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptPublicKeyFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // .protowire.ScriptPublicKey scriptPublicKey = 2;
  bool has_scriptpublickey() const;
  private:
  bool _internal_has_scriptpublickey() const;
  public:
  void clear_scriptpublickey();
  const ::protowire::ScriptPublicKey& scriptpublickey() const;
  PROTOBUF_NODISCARD ::protowire::ScriptPublicKey* release_scriptpublickey();
  ::protowire::ScriptPublicKey* mutable_scriptpublickey();
  void set_allocated_scriptpublickey(::protowire::ScriptPublicKey* scriptpublickey);
  private:
  const ::protowire::ScriptPublicKey& _internal_scriptpublickey() const;
  ::protowire::ScriptPublicKey* _internal_mutable_scriptpublickey();
  public:
  void unsafe_arena_set_allocated_scriptpublickey(
      ::protowire::ScriptPublicKey* scriptpublickey);
  ::protowire::ScriptPublicKey* unsafe_arena_release_scriptpublickey();

  // uint64 value = 1;
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.TransactionOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::ScriptPublicKey* scriptpublickey_;
  uint64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class BlockMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.BlockMessage) */ {
 public:
  inline BlockMessage() : BlockMessage(nullptr) {}
  ~BlockMessage() override;
  explicit constexpr BlockMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockMessage(const BlockMessage& from);
  BlockMessage(BlockMessage&& from) noexcept
    : BlockMessage() {
    *this = ::std::move(from);
  }

  inline BlockMessage& operator=(const BlockMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockMessage& operator=(BlockMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockMessage* internal_default_instance() {
    return reinterpret_cast<const BlockMessage*>(
               &_BlockMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BlockMessage& a, BlockMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.BlockMessage";
  }
  protected:
  explicit BlockMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .protowire.TransactionMessage transactions = 2;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::protowire::TransactionMessage* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionMessage >*
      mutable_transactions();
  private:
  const ::protowire::TransactionMessage& _internal_transactions(int index) const;
  ::protowire::TransactionMessage* _internal_add_transactions();
  public:
  const ::protowire::TransactionMessage& transactions(int index) const;
  ::protowire::TransactionMessage* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionMessage >&
      transactions() const;

  // .protowire.BlockHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protowire::BlockHeader& header() const;
  PROTOBUF_NODISCARD ::protowire::BlockHeader* release_header();
  ::protowire::BlockHeader* mutable_header();
  void set_allocated_header(::protowire::BlockHeader* header);
  private:
  const ::protowire::BlockHeader& _internal_header() const;
  ::protowire::BlockHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::protowire::BlockHeader* header);
  ::protowire::BlockHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:protowire.BlockMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionMessage > transactions_;
  ::protowire::BlockHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class BlockHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.BlockHeader) */ {
 public:
  inline BlockHeader() : BlockHeader(nullptr) {}
  ~BlockHeader() override;
  explicit constexpr BlockHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockHeader(const BlockHeader& from);
  BlockHeader(BlockHeader&& from) noexcept
    : BlockHeader() {
    *this = ::std::move(from);
  }

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockHeader& operator=(BlockHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockHeader* internal_default_instance() {
    return reinterpret_cast<const BlockHeader*>(
               &_BlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BlockHeader& a, BlockHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.BlockHeader";
  }
  protected:
  explicit BlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentsFieldNumber = 12,
    kBlueWorkFieldNumber = 10,
    kHashMerkleRootFieldNumber = 3,
    kAcceptedIdMerkleRootFieldNumber = 4,
    kUtxoCommitmentFieldNumber = 5,
    kPruningPointFieldNumber = 14,
    kVersionFieldNumber = 1,
    kBitsFieldNumber = 7,
    kTimestampFieldNumber = 6,
    kNonceFieldNumber = 8,
    kDaaScoreFieldNumber = 9,
    kBlueScoreFieldNumber = 13,
  };
  // repeated .protowire.BlockLevelParents parents = 12;
  int parents_size() const;
  private:
  int _internal_parents_size() const;
  public:
  void clear_parents();
  ::protowire::BlockLevelParents* mutable_parents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockLevelParents >*
      mutable_parents();
  private:
  const ::protowire::BlockLevelParents& _internal_parents(int index) const;
  ::protowire::BlockLevelParents* _internal_add_parents();
  public:
  const ::protowire::BlockLevelParents& parents(int index) const;
  ::protowire::BlockLevelParents* add_parents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockLevelParents >&
      parents() const;

  // bytes blueWork = 10;
  void clear_bluework();
  const std::string& bluework() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bluework(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bluework();
  PROTOBUF_NODISCARD std::string* release_bluework();
  void set_allocated_bluework(std::string* bluework);
  private:
  const std::string& _internal_bluework() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bluework(const std::string& value);
  std::string* _internal_mutable_bluework();
  public:

  // .protowire.Hash hashMerkleRoot = 3;
  bool has_hashmerkleroot() const;
  private:
  bool _internal_has_hashmerkleroot() const;
  public:
  void clear_hashmerkleroot();
  const ::protowire::Hash& hashmerkleroot() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_hashmerkleroot();
  ::protowire::Hash* mutable_hashmerkleroot();
  void set_allocated_hashmerkleroot(::protowire::Hash* hashmerkleroot);
  private:
  const ::protowire::Hash& _internal_hashmerkleroot() const;
  ::protowire::Hash* _internal_mutable_hashmerkleroot();
  public:
  void unsafe_arena_set_allocated_hashmerkleroot(
      ::protowire::Hash* hashmerkleroot);
  ::protowire::Hash* unsafe_arena_release_hashmerkleroot();

  // .protowire.Hash acceptedIdMerkleRoot = 4;
  bool has_acceptedidmerkleroot() const;
  private:
  bool _internal_has_acceptedidmerkleroot() const;
  public:
  void clear_acceptedidmerkleroot();
  const ::protowire::Hash& acceptedidmerkleroot() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_acceptedidmerkleroot();
  ::protowire::Hash* mutable_acceptedidmerkleroot();
  void set_allocated_acceptedidmerkleroot(::protowire::Hash* acceptedidmerkleroot);
  private:
  const ::protowire::Hash& _internal_acceptedidmerkleroot() const;
  ::protowire::Hash* _internal_mutable_acceptedidmerkleroot();
  public:
  void unsafe_arena_set_allocated_acceptedidmerkleroot(
      ::protowire::Hash* acceptedidmerkleroot);
  ::protowire::Hash* unsafe_arena_release_acceptedidmerkleroot();

  // .protowire.Hash utxoCommitment = 5;
  bool has_utxocommitment() const;
  private:
  bool _internal_has_utxocommitment() const;
  public:
  void clear_utxocommitment();
  const ::protowire::Hash& utxocommitment() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_utxocommitment();
  ::protowire::Hash* mutable_utxocommitment();
  void set_allocated_utxocommitment(::protowire::Hash* utxocommitment);
  private:
  const ::protowire::Hash& _internal_utxocommitment() const;
  ::protowire::Hash* _internal_mutable_utxocommitment();
  public:
  void unsafe_arena_set_allocated_utxocommitment(
      ::protowire::Hash* utxocommitment);
  ::protowire::Hash* unsafe_arena_release_utxocommitment();

  // .protowire.Hash pruningPoint = 14;
  bool has_pruningpoint() const;
  private:
  bool _internal_has_pruningpoint() const;
  public:
  void clear_pruningpoint();
  const ::protowire::Hash& pruningpoint() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_pruningpoint();
  ::protowire::Hash* mutable_pruningpoint();
  void set_allocated_pruningpoint(::protowire::Hash* pruningpoint);
  private:
  const ::protowire::Hash& _internal_pruningpoint() const;
  ::protowire::Hash* _internal_mutable_pruningpoint();
  public:
  void unsafe_arena_set_allocated_pruningpoint(
      ::protowire::Hash* pruningpoint);
  ::protowire::Hash* unsafe_arena_release_pruningpoint();

  // uint32 version = 1;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // uint32 bits = 7;
  void clear_bits();
  uint32_t bits() const;
  void set_bits(uint32_t value);
  private:
  uint32_t _internal_bits() const;
  void _internal_set_bits(uint32_t value);
  public:

  // int64 timestamp = 6;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // uint64 nonce = 8;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // uint64 daaScore = 9;
  void clear_daascore();
  uint64_t daascore() const;
  void set_daascore(uint64_t value);
  private:
  uint64_t _internal_daascore() const;
  void _internal_set_daascore(uint64_t value);
  public:

  // uint64 blueScore = 13;
  void clear_bluescore();
  uint64_t bluescore() const;
  void set_bluescore(uint64_t value);
  private:
  uint64_t _internal_bluescore() const;
  void _internal_set_bluescore(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.BlockHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockLevelParents > parents_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bluework_;
  ::protowire::Hash* hashmerkleroot_;
  ::protowire::Hash* acceptedidmerkleroot_;
  ::protowire::Hash* utxocommitment_;
  ::protowire::Hash* pruningpoint_;
  uint32_t version_;
  uint32_t bits_;
  int64_t timestamp_;
  uint64_t nonce_;
  uint64_t daascore_;
  uint64_t bluescore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class BlockLevelParents final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.BlockLevelParents) */ {
 public:
  inline BlockLevelParents() : BlockLevelParents(nullptr) {}
  ~BlockLevelParents() override;
  explicit constexpr BlockLevelParents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockLevelParents(const BlockLevelParents& from);
  BlockLevelParents(BlockLevelParents&& from) noexcept
    : BlockLevelParents() {
    *this = ::std::move(from);
  }

  inline BlockLevelParents& operator=(const BlockLevelParents& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockLevelParents& operator=(BlockLevelParents&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockLevelParents& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockLevelParents* internal_default_instance() {
    return reinterpret_cast<const BlockLevelParents*>(
               &_BlockLevelParents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BlockLevelParents& a, BlockLevelParents& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockLevelParents* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockLevelParents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockLevelParents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockLevelParents>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockLevelParents& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockLevelParents& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockLevelParents* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.BlockLevelParents";
  }
  protected:
  explicit BlockLevelParents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentHashesFieldNumber = 1,
  };
  // repeated .protowire.Hash parentHashes = 1;
  int parenthashes_size() const;
  private:
  int _internal_parenthashes_size() const;
  public:
  void clear_parenthashes();
  ::protowire::Hash* mutable_parenthashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
      mutable_parenthashes();
  private:
  const ::protowire::Hash& _internal_parenthashes(int index) const;
  ::protowire::Hash* _internal_add_parenthashes();
  public:
  const ::protowire::Hash& parenthashes(int index) const;
  ::protowire::Hash* add_parenthashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
      parenthashes() const;

  // @@protoc_insertion_point(class_scope:protowire.BlockLevelParents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash > parenthashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class Hash final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.Hash) */ {
 public:
  inline Hash() : Hash(nullptr) {}
  ~Hash() override;
  explicit constexpr Hash(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Hash(const Hash& from);
  Hash(Hash&& from) noexcept
    : Hash() {
    *this = ::std::move(from);
  }

  inline Hash& operator=(const Hash& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hash& operator=(Hash&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hash& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hash* internal_default_instance() {
    return reinterpret_cast<const Hash*>(
               &_Hash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Hash& a, Hash& b) {
    a.Swap(&b);
  }
  inline void Swap(Hash* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hash* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Hash>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Hash& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Hash& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hash* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.Hash";
  }
  protected:
  explicit Hash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 1,
  };
  // bytes bytes = 1;
  void clear_bytes();
  const std::string& bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // @@protoc_insertion_point(class_scope:protowire.Hash)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RequestBlockLocatorMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RequestBlockLocatorMessage) */ {
 public:
  inline RequestBlockLocatorMessage() : RequestBlockLocatorMessage(nullptr) {}
  ~RequestBlockLocatorMessage() override;
  explicit constexpr RequestBlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestBlockLocatorMessage(const RequestBlockLocatorMessage& from);
  RequestBlockLocatorMessage(RequestBlockLocatorMessage&& from) noexcept
    : RequestBlockLocatorMessage() {
    *this = ::std::move(from);
  }

  inline RequestBlockLocatorMessage& operator=(const RequestBlockLocatorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestBlockLocatorMessage& operator=(RequestBlockLocatorMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestBlockLocatorMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestBlockLocatorMessage* internal_default_instance() {
    return reinterpret_cast<const RequestBlockLocatorMessage*>(
               &_RequestBlockLocatorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RequestBlockLocatorMessage& a, RequestBlockLocatorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestBlockLocatorMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestBlockLocatorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestBlockLocatorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestBlockLocatorMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestBlockLocatorMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestBlockLocatorMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestBlockLocatorMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestBlockLocatorMessage";
  }
  protected:
  explicit RequestBlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighHashFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // .protowire.Hash highHash = 1;
  bool has_highhash() const;
  private:
  bool _internal_has_highhash() const;
  public:
  void clear_highhash();
  const ::protowire::Hash& highhash() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_highhash();
  ::protowire::Hash* mutable_highhash();
  void set_allocated_highhash(::protowire::Hash* highhash);
  private:
  const ::protowire::Hash& _internal_highhash() const;
  ::protowire::Hash* _internal_mutable_highhash();
  public:
  void unsafe_arena_set_allocated_highhash(
      ::protowire::Hash* highhash);
  ::protowire::Hash* unsafe_arena_release_highhash();

  // uint32 limit = 2;
  void clear_limit();
  uint32_t limit() const;
  void set_limit(uint32_t value);
  private:
  uint32_t _internal_limit() const;
  void _internal_set_limit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.RequestBlockLocatorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::Hash* highhash_;
  uint32_t limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class BlockLocatorMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.BlockLocatorMessage) */ {
 public:
  inline BlockLocatorMessage() : BlockLocatorMessage(nullptr) {}
  ~BlockLocatorMessage() override;
  explicit constexpr BlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockLocatorMessage(const BlockLocatorMessage& from);
  BlockLocatorMessage(BlockLocatorMessage&& from) noexcept
    : BlockLocatorMessage() {
    *this = ::std::move(from);
  }

  inline BlockLocatorMessage& operator=(const BlockLocatorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockLocatorMessage& operator=(BlockLocatorMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockLocatorMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockLocatorMessage* internal_default_instance() {
    return reinterpret_cast<const BlockLocatorMessage*>(
               &_BlockLocatorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BlockLocatorMessage& a, BlockLocatorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockLocatorMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockLocatorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockLocatorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockLocatorMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockLocatorMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockLocatorMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockLocatorMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.BlockLocatorMessage";
  }
  protected:
  explicit BlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 1,
  };
  // repeated .protowire.Hash hashes = 1;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;
  public:
  void clear_hashes();
  ::protowire::Hash* mutable_hashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
      mutable_hashes();
  private:
  const ::protowire::Hash& _internal_hashes(int index) const;
  ::protowire::Hash* _internal_add_hashes();
  public:
  const ::protowire::Hash& hashes(int index) const;
  ::protowire::Hash* add_hashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
      hashes() const;

  // @@protoc_insertion_point(class_scope:protowire.BlockLocatorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash > hashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RequestHeadersMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RequestHeadersMessage) */ {
 public:
  inline RequestHeadersMessage() : RequestHeadersMessage(nullptr) {}
  ~RequestHeadersMessage() override;
  explicit constexpr RequestHeadersMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestHeadersMessage(const RequestHeadersMessage& from);
  RequestHeadersMessage(RequestHeadersMessage&& from) noexcept
    : RequestHeadersMessage() {
    *this = ::std::move(from);
  }

  inline RequestHeadersMessage& operator=(const RequestHeadersMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestHeadersMessage& operator=(RequestHeadersMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestHeadersMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestHeadersMessage* internal_default_instance() {
    return reinterpret_cast<const RequestHeadersMessage*>(
               &_RequestHeadersMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RequestHeadersMessage& a, RequestHeadersMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestHeadersMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestHeadersMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestHeadersMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestHeadersMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestHeadersMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestHeadersMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHeadersMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestHeadersMessage";
  }
  protected:
  explicit RequestHeadersMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowHashFieldNumber = 1,
    kHighHashFieldNumber = 2,
  };
  // .protowire.Hash lowHash = 1;
  bool has_lowhash() const;
  private:
  bool _internal_has_lowhash() const;
  public:
  void clear_lowhash();
  const ::protowire::Hash& lowhash() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_lowhash();
  ::protowire::Hash* mutable_lowhash();
  void set_allocated_lowhash(::protowire::Hash* lowhash);
  private:
  const ::protowire::Hash& _internal_lowhash() const;
  ::protowire::Hash* _internal_mutable_lowhash();
  public:
  void unsafe_arena_set_allocated_lowhash(
      ::protowire::Hash* lowhash);
  ::protowire::Hash* unsafe_arena_release_lowhash();

  // .protowire.Hash highHash = 2;
  bool has_highhash() const;
  private:
  bool _internal_has_highhash() const;
  public:
  void clear_highhash();
  const ::protowire::Hash& highhash() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_highhash();
  ::protowire::Hash* mutable_highhash();
  void set_allocated_highhash(::protowire::Hash* highhash);
  private:
  const ::protowire::Hash& _internal_highhash() const;
  ::protowire::Hash* _internal_mutable_highhash();
  public:
  void unsafe_arena_set_allocated_highhash(
      ::protowire::Hash* highhash);
  ::protowire::Hash* unsafe_arena_release_highhash();

  // @@protoc_insertion_point(class_scope:protowire.RequestHeadersMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::Hash* lowhash_;
  ::protowire::Hash* highhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RequestNextHeadersMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.RequestNextHeadersMessage) */ {
 public:
  inline RequestNextHeadersMessage() : RequestNextHeadersMessage(nullptr) {}
  explicit constexpr RequestNextHeadersMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestNextHeadersMessage(const RequestNextHeadersMessage& from);
  RequestNextHeadersMessage(RequestNextHeadersMessage&& from) noexcept
    : RequestNextHeadersMessage() {
    *this = ::std::move(from);
  }

  inline RequestNextHeadersMessage& operator=(const RequestNextHeadersMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestNextHeadersMessage& operator=(RequestNextHeadersMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestNextHeadersMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestNextHeadersMessage* internal_default_instance() {
    return reinterpret_cast<const RequestNextHeadersMessage*>(
               &_RequestNextHeadersMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RequestNextHeadersMessage& a, RequestNextHeadersMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestNextHeadersMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestNextHeadersMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestNextHeadersMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestNextHeadersMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestNextHeadersMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestNextHeadersMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestNextHeadersMessage";
  }
  protected:
  explicit RequestNextHeadersMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.RequestNextHeadersMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class DoneHeadersMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.DoneHeadersMessage) */ {
 public:
  inline DoneHeadersMessage() : DoneHeadersMessage(nullptr) {}
  explicit constexpr DoneHeadersMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoneHeadersMessage(const DoneHeadersMessage& from);
  DoneHeadersMessage(DoneHeadersMessage&& from) noexcept
    : DoneHeadersMessage() {
    *this = ::std::move(from);
  }

  inline DoneHeadersMessage& operator=(const DoneHeadersMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoneHeadersMessage& operator=(DoneHeadersMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoneHeadersMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoneHeadersMessage* internal_default_instance() {
    return reinterpret_cast<const DoneHeadersMessage*>(
               &_DoneHeadersMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DoneHeadersMessage& a, DoneHeadersMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DoneHeadersMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoneHeadersMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoneHeadersMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoneHeadersMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DoneHeadersMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DoneHeadersMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.DoneHeadersMessage";
  }
  protected:
  explicit DoneHeadersMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.DoneHeadersMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RequestRelayBlocksMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RequestRelayBlocksMessage) */ {
 public:
  inline RequestRelayBlocksMessage() : RequestRelayBlocksMessage(nullptr) {}
  ~RequestRelayBlocksMessage() override;
  explicit constexpr RequestRelayBlocksMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestRelayBlocksMessage(const RequestRelayBlocksMessage& from);
  RequestRelayBlocksMessage(RequestRelayBlocksMessage&& from) noexcept
    : RequestRelayBlocksMessage() {
    *this = ::std::move(from);
  }

  inline RequestRelayBlocksMessage& operator=(const RequestRelayBlocksMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestRelayBlocksMessage& operator=(RequestRelayBlocksMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestRelayBlocksMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestRelayBlocksMessage* internal_default_instance() {
    return reinterpret_cast<const RequestRelayBlocksMessage*>(
               &_RequestRelayBlocksMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RequestRelayBlocksMessage& a, RequestRelayBlocksMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestRelayBlocksMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestRelayBlocksMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestRelayBlocksMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestRelayBlocksMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestRelayBlocksMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestRelayBlocksMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestRelayBlocksMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestRelayBlocksMessage";
  }
  protected:
  explicit RequestRelayBlocksMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 1,
  };
  // repeated .protowire.Hash hashes = 1;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;
  public:
  void clear_hashes();
  ::protowire::Hash* mutable_hashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
      mutable_hashes();
  private:
  const ::protowire::Hash& _internal_hashes(int index) const;
  ::protowire::Hash* _internal_add_hashes();
  public:
  const ::protowire::Hash& hashes(int index) const;
  ::protowire::Hash* add_hashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
      hashes() const;

  // @@protoc_insertion_point(class_scope:protowire.RequestRelayBlocksMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash > hashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RequestTransactionsMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RequestTransactionsMessage) */ {
 public:
  inline RequestTransactionsMessage() : RequestTransactionsMessage(nullptr) {}
  ~RequestTransactionsMessage() override;
  explicit constexpr RequestTransactionsMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestTransactionsMessage(const RequestTransactionsMessage& from);
  RequestTransactionsMessage(RequestTransactionsMessage&& from) noexcept
    : RequestTransactionsMessage() {
    *this = ::std::move(from);
  }

  inline RequestTransactionsMessage& operator=(const RequestTransactionsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestTransactionsMessage& operator=(RequestTransactionsMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestTransactionsMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestTransactionsMessage* internal_default_instance() {
    return reinterpret_cast<const RequestTransactionsMessage*>(
               &_RequestTransactionsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RequestTransactionsMessage& a, RequestTransactionsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestTransactionsMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestTransactionsMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestTransactionsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestTransactionsMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestTransactionsMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestTransactionsMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestTransactionsMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestTransactionsMessage";
  }
  protected:
  explicit RequestTransactionsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated .protowire.TransactionId ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  ::protowire::TransactionId* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionId >*
      mutable_ids();
  private:
  const ::protowire::TransactionId& _internal_ids(int index) const;
  ::protowire::TransactionId* _internal_add_ids();
  public:
  const ::protowire::TransactionId& ids(int index) const;
  ::protowire::TransactionId* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionId >&
      ids() const;

  // @@protoc_insertion_point(class_scope:protowire.RequestTransactionsMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionId > ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class TransactionNotFoundMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.TransactionNotFoundMessage) */ {
 public:
  inline TransactionNotFoundMessage() : TransactionNotFoundMessage(nullptr) {}
  ~TransactionNotFoundMessage() override;
  explicit constexpr TransactionNotFoundMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionNotFoundMessage(const TransactionNotFoundMessage& from);
  TransactionNotFoundMessage(TransactionNotFoundMessage&& from) noexcept
    : TransactionNotFoundMessage() {
    *this = ::std::move(from);
  }

  inline TransactionNotFoundMessage& operator=(const TransactionNotFoundMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionNotFoundMessage& operator=(TransactionNotFoundMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionNotFoundMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionNotFoundMessage* internal_default_instance() {
    return reinterpret_cast<const TransactionNotFoundMessage*>(
               &_TransactionNotFoundMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TransactionNotFoundMessage& a, TransactionNotFoundMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionNotFoundMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionNotFoundMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionNotFoundMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionNotFoundMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionNotFoundMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionNotFoundMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionNotFoundMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.TransactionNotFoundMessage";
  }
  protected:
  explicit TransactionNotFoundMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .protowire.TransactionId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::protowire::TransactionId& id() const;
  PROTOBUF_NODISCARD ::protowire::TransactionId* release_id();
  ::protowire::TransactionId* mutable_id();
  void set_allocated_id(::protowire::TransactionId* id);
  private:
  const ::protowire::TransactionId& _internal_id() const;
  ::protowire::TransactionId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::protowire::TransactionId* id);
  ::protowire::TransactionId* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:protowire.TransactionNotFoundMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::TransactionId* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class InvRelayBlockMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.InvRelayBlockMessage) */ {
 public:
  inline InvRelayBlockMessage() : InvRelayBlockMessage(nullptr) {}
  ~InvRelayBlockMessage() override;
  explicit constexpr InvRelayBlockMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvRelayBlockMessage(const InvRelayBlockMessage& from);
  InvRelayBlockMessage(InvRelayBlockMessage&& from) noexcept
    : InvRelayBlockMessage() {
    *this = ::std::move(from);
  }

  inline InvRelayBlockMessage& operator=(const InvRelayBlockMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvRelayBlockMessage& operator=(InvRelayBlockMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvRelayBlockMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvRelayBlockMessage* internal_default_instance() {
    return reinterpret_cast<const InvRelayBlockMessage*>(
               &_InvRelayBlockMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(InvRelayBlockMessage& a, InvRelayBlockMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InvRelayBlockMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvRelayBlockMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvRelayBlockMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvRelayBlockMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvRelayBlockMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvRelayBlockMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvRelayBlockMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.InvRelayBlockMessage";
  }
  protected:
  explicit InvRelayBlockMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
  };
  // .protowire.Hash hash = 1;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const ::protowire::Hash& hash() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_hash();
  ::protowire::Hash* mutable_hash();
  void set_allocated_hash(::protowire::Hash* hash);
  private:
  const ::protowire::Hash& _internal_hash() const;
  ::protowire::Hash* _internal_mutable_hash();
  public:
  void unsafe_arena_set_allocated_hash(
      ::protowire::Hash* hash);
  ::protowire::Hash* unsafe_arena_release_hash();

  // @@protoc_insertion_point(class_scope:protowire.InvRelayBlockMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::Hash* hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class InvTransactionsMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.InvTransactionsMessage) */ {
 public:
  inline InvTransactionsMessage() : InvTransactionsMessage(nullptr) {}
  ~InvTransactionsMessage() override;
  explicit constexpr InvTransactionsMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvTransactionsMessage(const InvTransactionsMessage& from);
  InvTransactionsMessage(InvTransactionsMessage&& from) noexcept
    : InvTransactionsMessage() {
    *this = ::std::move(from);
  }

  inline InvTransactionsMessage& operator=(const InvTransactionsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvTransactionsMessage& operator=(InvTransactionsMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvTransactionsMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvTransactionsMessage* internal_default_instance() {
    return reinterpret_cast<const InvTransactionsMessage*>(
               &_InvTransactionsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(InvTransactionsMessage& a, InvTransactionsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InvTransactionsMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvTransactionsMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvTransactionsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvTransactionsMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvTransactionsMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvTransactionsMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvTransactionsMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.InvTransactionsMessage";
  }
  protected:
  explicit InvTransactionsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated .protowire.TransactionId ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  ::protowire::TransactionId* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionId >*
      mutable_ids();
  private:
  const ::protowire::TransactionId& _internal_ids(int index) const;
  ::protowire::TransactionId* _internal_add_ids();
  public:
  const ::protowire::TransactionId& ids(int index) const;
  ::protowire::TransactionId* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionId >&
      ids() const;

  // @@protoc_insertion_point(class_scope:protowire.InvTransactionsMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionId > ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class PingMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.PingMessage) */ {
 public:
  inline PingMessage() : PingMessage(nullptr) {}
  ~PingMessage() override;
  explicit constexpr PingMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingMessage(const PingMessage& from);
  PingMessage(PingMessage&& from) noexcept
    : PingMessage() {
    *this = ::std::move(from);
  }

  inline PingMessage& operator=(const PingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingMessage& operator=(PingMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingMessage* internal_default_instance() {
    return reinterpret_cast<const PingMessage*>(
               &_PingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PingMessage& a, PingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PingMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PingMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.PingMessage";
  }
  protected:
  explicit PingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceFieldNumber = 1,
  };
  // uint64 nonce = 1;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.PingMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class PongMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.PongMessage) */ {
 public:
  inline PongMessage() : PongMessage(nullptr) {}
  ~PongMessage() override;
  explicit constexpr PongMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PongMessage(const PongMessage& from);
  PongMessage(PongMessage&& from) noexcept
    : PongMessage() {
    *this = ::std::move(from);
  }

  inline PongMessage& operator=(const PongMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PongMessage& operator=(PongMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PongMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PongMessage* internal_default_instance() {
    return reinterpret_cast<const PongMessage*>(
               &_PongMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PongMessage& a, PongMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PongMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PongMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PongMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PongMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PongMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PongMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PongMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.PongMessage";
  }
  protected:
  explicit PongMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceFieldNumber = 1,
  };
  // uint64 nonce = 1;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.PongMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class VerackMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.VerackMessage) */ {
 public:
  inline VerackMessage() : VerackMessage(nullptr) {}
  explicit constexpr VerackMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerackMessage(const VerackMessage& from);
  VerackMessage(VerackMessage&& from) noexcept
    : VerackMessage() {
    *this = ::std::move(from);
  }

  inline VerackMessage& operator=(const VerackMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerackMessage& operator=(VerackMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerackMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerackMessage* internal_default_instance() {
    return reinterpret_cast<const VerackMessage*>(
               &_VerackMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(VerackMessage& a, VerackMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(VerackMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerackMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerackMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerackMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VerackMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VerackMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.VerackMessage";
  }
  protected:
  explicit VerackMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.VerackMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class VersionMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.VersionMessage) */ {
 public:
  inline VersionMessage() : VersionMessage(nullptr) {}
  ~VersionMessage() override;
  explicit constexpr VersionMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionMessage(const VersionMessage& from);
  VersionMessage(VersionMessage&& from) noexcept
    : VersionMessage() {
    *this = ::std::move(from);
  }

  inline VersionMessage& operator=(const VersionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionMessage& operator=(VersionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionMessage* internal_default_instance() {
    return reinterpret_cast<const VersionMessage*>(
               &_VersionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(VersionMessage& a, VersionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VersionMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.VersionMessage";
  }
  protected:
  explicit VersionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 5,
    kUserAgentFieldNumber = 6,
    kNetworkFieldNumber = 10,
    kAddressFieldNumber = 4,
    kSubnetworkIdFieldNumber = 9,
    kServicesFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kProtocolVersionFieldNumber = 1,
    kDisableRelayTxFieldNumber = 8,
  };
  // bytes id = 5;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string userAgent = 6;
  void clear_useragent();
  const std::string& useragent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_useragent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_useragent();
  PROTOBUF_NODISCARD std::string* release_useragent();
  void set_allocated_useragent(std::string* useragent);
  private:
  const std::string& _internal_useragent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_useragent(const std::string& value);
  std::string* _internal_mutable_useragent();
  public:

  // string network = 10;
  void clear_network();
  const std::string& network() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_network(ArgT0&& arg0, ArgT... args);
  std::string* mutable_network();
  PROTOBUF_NODISCARD std::string* release_network();
  void set_allocated_network(std::string* network);
  private:
  const std::string& _internal_network() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network(const std::string& value);
  std::string* _internal_mutable_network();
  public:

  // .protowire.NetAddress address = 4;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::protowire::NetAddress& address() const;
  PROTOBUF_NODISCARD ::protowire::NetAddress* release_address();
  ::protowire::NetAddress* mutable_address();
  void set_allocated_address(::protowire::NetAddress* address);
  private:
  const ::protowire::NetAddress& _internal_address() const;
  ::protowire::NetAddress* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::protowire::NetAddress* address);
  ::protowire::NetAddress* unsafe_arena_release_address();

  // .protowire.SubnetworkId subnetworkId = 9;
  bool has_subnetworkid() const;
  private:
  bool _internal_has_subnetworkid() const;
  public:
  void clear_subnetworkid();
  const ::protowire::SubnetworkId& subnetworkid() const;
  PROTOBUF_NODISCARD ::protowire::SubnetworkId* release_subnetworkid();
  ::protowire::SubnetworkId* mutable_subnetworkid();
  void set_allocated_subnetworkid(::protowire::SubnetworkId* subnetworkid);
  private:
  const ::protowire::SubnetworkId& _internal_subnetworkid() const;
  ::protowire::SubnetworkId* _internal_mutable_subnetworkid();
  public:
  void unsafe_arena_set_allocated_subnetworkid(
      ::protowire::SubnetworkId* subnetworkid);
  ::protowire::SubnetworkId* unsafe_arena_release_subnetworkid();

  // uint64 services = 2;
  void clear_services();
  uint64_t services() const;
  void set_services(uint64_t value);
  private:
  uint64_t _internal_services() const;
  void _internal_set_services(uint64_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // uint32 protocolVersion = 1;
  void clear_protocolversion();
  uint32_t protocolversion() const;
  void set_protocolversion(uint32_t value);
  private:
  uint32_t _internal_protocolversion() const;
  void _internal_set_protocolversion(uint32_t value);
  public:

  // bool disableRelayTx = 8;
  void clear_disablerelaytx();
  bool disablerelaytx() const;
  void set_disablerelaytx(bool value);
  private:
  bool _internal_disablerelaytx() const;
  void _internal_set_disablerelaytx(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.VersionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr useragent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_;
  ::protowire::NetAddress* address_;
  ::protowire::SubnetworkId* subnetworkid_;
  uint64_t services_;
  int64_t timestamp_;
  uint32_t protocolversion_;
  bool disablerelaytx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RejectMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RejectMessage) */ {
 public:
  inline RejectMessage() : RejectMessage(nullptr) {}
  ~RejectMessage() override;
  explicit constexpr RejectMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RejectMessage(const RejectMessage& from);
  RejectMessage(RejectMessage&& from) noexcept
    : RejectMessage() {
    *this = ::std::move(from);
  }

  inline RejectMessage& operator=(const RejectMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RejectMessage& operator=(RejectMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RejectMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RejectMessage* internal_default_instance() {
    return reinterpret_cast<const RejectMessage*>(
               &_RejectMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(RejectMessage& a, RejectMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RejectMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RejectMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RejectMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RejectMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RejectMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RejectMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RejectMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RejectMessage";
  }
  protected:
  explicit RejectMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // string reason = 1;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // @@protoc_insertion_point(class_scope:protowire.RejectMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RequestPruningPointUTXOSetMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RequestPruningPointUTXOSetMessage) */ {
 public:
  inline RequestPruningPointUTXOSetMessage() : RequestPruningPointUTXOSetMessage(nullptr) {}
  ~RequestPruningPointUTXOSetMessage() override;
  explicit constexpr RequestPruningPointUTXOSetMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestPruningPointUTXOSetMessage(const RequestPruningPointUTXOSetMessage& from);
  RequestPruningPointUTXOSetMessage(RequestPruningPointUTXOSetMessage&& from) noexcept
    : RequestPruningPointUTXOSetMessage() {
    *this = ::std::move(from);
  }

  inline RequestPruningPointUTXOSetMessage& operator=(const RequestPruningPointUTXOSetMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPruningPointUTXOSetMessage& operator=(RequestPruningPointUTXOSetMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestPruningPointUTXOSetMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestPruningPointUTXOSetMessage* internal_default_instance() {
    return reinterpret_cast<const RequestPruningPointUTXOSetMessage*>(
               &_RequestPruningPointUTXOSetMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(RequestPruningPointUTXOSetMessage& a, RequestPruningPointUTXOSetMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestPruningPointUTXOSetMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestPruningPointUTXOSetMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestPruningPointUTXOSetMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestPruningPointUTXOSetMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestPruningPointUTXOSetMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestPruningPointUTXOSetMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestPruningPointUTXOSetMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestPruningPointUTXOSetMessage";
  }
  protected:
  explicit RequestPruningPointUTXOSetMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPruningPointHashFieldNumber = 1,
  };
  // .protowire.Hash pruningPointHash = 1;
  bool has_pruningpointhash() const;
  private:
  bool _internal_has_pruningpointhash() const;
  public:
  void clear_pruningpointhash();
  const ::protowire::Hash& pruningpointhash() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_pruningpointhash();
  ::protowire::Hash* mutable_pruningpointhash();
  void set_allocated_pruningpointhash(::protowire::Hash* pruningpointhash);
  private:
  const ::protowire::Hash& _internal_pruningpointhash() const;
  ::protowire::Hash* _internal_mutable_pruningpointhash();
  public:
  void unsafe_arena_set_allocated_pruningpointhash(
      ::protowire::Hash* pruningpointhash);
  ::protowire::Hash* unsafe_arena_release_pruningpointhash();

  // @@protoc_insertion_point(class_scope:protowire.RequestPruningPointUTXOSetMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::Hash* pruningpointhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class PruningPointUtxoSetChunkMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.PruningPointUtxoSetChunkMessage) */ {
 public:
  inline PruningPointUtxoSetChunkMessage() : PruningPointUtxoSetChunkMessage(nullptr) {}
  ~PruningPointUtxoSetChunkMessage() override;
  explicit constexpr PruningPointUtxoSetChunkMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PruningPointUtxoSetChunkMessage(const PruningPointUtxoSetChunkMessage& from);
  PruningPointUtxoSetChunkMessage(PruningPointUtxoSetChunkMessage&& from) noexcept
    : PruningPointUtxoSetChunkMessage() {
    *this = ::std::move(from);
  }

  inline PruningPointUtxoSetChunkMessage& operator=(const PruningPointUtxoSetChunkMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PruningPointUtxoSetChunkMessage& operator=(PruningPointUtxoSetChunkMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PruningPointUtxoSetChunkMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PruningPointUtxoSetChunkMessage* internal_default_instance() {
    return reinterpret_cast<const PruningPointUtxoSetChunkMessage*>(
               &_PruningPointUtxoSetChunkMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PruningPointUtxoSetChunkMessage& a, PruningPointUtxoSetChunkMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PruningPointUtxoSetChunkMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PruningPointUtxoSetChunkMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PruningPointUtxoSetChunkMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PruningPointUtxoSetChunkMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PruningPointUtxoSetChunkMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PruningPointUtxoSetChunkMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PruningPointUtxoSetChunkMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.PruningPointUtxoSetChunkMessage";
  }
  protected:
  explicit PruningPointUtxoSetChunkMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutpointAndUtxoEntryPairsFieldNumber = 1,
  };
  // repeated .protowire.OutpointAndUtxoEntryPair outpointAndUtxoEntryPairs = 1;
  int outpointandutxoentrypairs_size() const;
  private:
  int _internal_outpointandutxoentrypairs_size() const;
  public:
  void clear_outpointandutxoentrypairs();
  ::protowire::OutpointAndUtxoEntryPair* mutable_outpointandutxoentrypairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::OutpointAndUtxoEntryPair >*
      mutable_outpointandutxoentrypairs();
  private:
  const ::protowire::OutpointAndUtxoEntryPair& _internal_outpointandutxoentrypairs(int index) const;
  ::protowire::OutpointAndUtxoEntryPair* _internal_add_outpointandutxoentrypairs();
  public:
  const ::protowire::OutpointAndUtxoEntryPair& outpointandutxoentrypairs(int index) const;
  ::protowire::OutpointAndUtxoEntryPair* add_outpointandutxoentrypairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::OutpointAndUtxoEntryPair >&
      outpointandutxoentrypairs() const;

  // @@protoc_insertion_point(class_scope:protowire.PruningPointUtxoSetChunkMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::OutpointAndUtxoEntryPair > outpointandutxoentrypairs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class OutpointAndUtxoEntryPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.OutpointAndUtxoEntryPair) */ {
 public:
  inline OutpointAndUtxoEntryPair() : OutpointAndUtxoEntryPair(nullptr) {}
  ~OutpointAndUtxoEntryPair() override;
  explicit constexpr OutpointAndUtxoEntryPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutpointAndUtxoEntryPair(const OutpointAndUtxoEntryPair& from);
  OutpointAndUtxoEntryPair(OutpointAndUtxoEntryPair&& from) noexcept
    : OutpointAndUtxoEntryPair() {
    *this = ::std::move(from);
  }

  inline OutpointAndUtxoEntryPair& operator=(const OutpointAndUtxoEntryPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutpointAndUtxoEntryPair& operator=(OutpointAndUtxoEntryPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutpointAndUtxoEntryPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutpointAndUtxoEntryPair* internal_default_instance() {
    return reinterpret_cast<const OutpointAndUtxoEntryPair*>(
               &_OutpointAndUtxoEntryPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(OutpointAndUtxoEntryPair& a, OutpointAndUtxoEntryPair& b) {
    a.Swap(&b);
  }
  inline void Swap(OutpointAndUtxoEntryPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutpointAndUtxoEntryPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutpointAndUtxoEntryPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutpointAndUtxoEntryPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutpointAndUtxoEntryPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OutpointAndUtxoEntryPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutpointAndUtxoEntryPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.OutpointAndUtxoEntryPair";
  }
  protected:
  explicit OutpointAndUtxoEntryPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutpointFieldNumber = 1,
    kUtxoEntryFieldNumber = 2,
  };
  // .protowire.Outpoint outpoint = 1;
  bool has_outpoint() const;
  private:
  bool _internal_has_outpoint() const;
  public:
  void clear_outpoint();
  const ::protowire::Outpoint& outpoint() const;
  PROTOBUF_NODISCARD ::protowire::Outpoint* release_outpoint();
  ::protowire::Outpoint* mutable_outpoint();
  void set_allocated_outpoint(::protowire::Outpoint* outpoint);
  private:
  const ::protowire::Outpoint& _internal_outpoint() const;
  ::protowire::Outpoint* _internal_mutable_outpoint();
  public:
  void unsafe_arena_set_allocated_outpoint(
      ::protowire::Outpoint* outpoint);
  ::protowire::Outpoint* unsafe_arena_release_outpoint();

  // .protowire.UtxoEntry utxoEntry = 2;
  bool has_utxoentry() const;
  private:
  bool _internal_has_utxoentry() const;
  public:
  void clear_utxoentry();
  const ::protowire::UtxoEntry& utxoentry() const;
  PROTOBUF_NODISCARD ::protowire::UtxoEntry* release_utxoentry();
  ::protowire::UtxoEntry* mutable_utxoentry();
  void set_allocated_utxoentry(::protowire::UtxoEntry* utxoentry);
  private:
  const ::protowire::UtxoEntry& _internal_utxoentry() const;
  ::protowire::UtxoEntry* _internal_mutable_utxoentry();
  public:
  void unsafe_arena_set_allocated_utxoentry(
      ::protowire::UtxoEntry* utxoentry);
  ::protowire::UtxoEntry* unsafe_arena_release_utxoentry();

  // @@protoc_insertion_point(class_scope:protowire.OutpointAndUtxoEntryPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::Outpoint* outpoint_;
  ::protowire::UtxoEntry* utxoentry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class UtxoEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.UtxoEntry) */ {
 public:
  inline UtxoEntry() : UtxoEntry(nullptr) {}
  ~UtxoEntry() override;
  explicit constexpr UtxoEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UtxoEntry(const UtxoEntry& from);
  UtxoEntry(UtxoEntry&& from) noexcept
    : UtxoEntry() {
    *this = ::std::move(from);
  }

  inline UtxoEntry& operator=(const UtxoEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtxoEntry& operator=(UtxoEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UtxoEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const UtxoEntry* internal_default_instance() {
    return reinterpret_cast<const UtxoEntry*>(
               &_UtxoEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(UtxoEntry& a, UtxoEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(UtxoEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UtxoEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UtxoEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UtxoEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UtxoEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UtxoEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtxoEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.UtxoEntry";
  }
  protected:
  explicit UtxoEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptPublicKeyFieldNumber = 2,
    kAmountFieldNumber = 1,
    kBlockDaaScoreFieldNumber = 3,
    kIsCoinbaseFieldNumber = 4,
  };
  // .protowire.ScriptPublicKey scriptPublicKey = 2;
  bool has_scriptpublickey() const;
  private:
  bool _internal_has_scriptpublickey() const;
  public:
  void clear_scriptpublickey();
  const ::protowire::ScriptPublicKey& scriptpublickey() const;
  PROTOBUF_NODISCARD ::protowire::ScriptPublicKey* release_scriptpublickey();
  ::protowire::ScriptPublicKey* mutable_scriptpublickey();
  void set_allocated_scriptpublickey(::protowire::ScriptPublicKey* scriptpublickey);
  private:
  const ::protowire::ScriptPublicKey& _internal_scriptpublickey() const;
  ::protowire::ScriptPublicKey* _internal_mutable_scriptpublickey();
  public:
  void unsafe_arena_set_allocated_scriptpublickey(
      ::protowire::ScriptPublicKey* scriptpublickey);
  ::protowire::ScriptPublicKey* unsafe_arena_release_scriptpublickey();

  // uint64 amount = 1;
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // uint64 blockDaaScore = 3;
  void clear_blockdaascore();
  uint64_t blockdaascore() const;
  void set_blockdaascore(uint64_t value);
  private:
  uint64_t _internal_blockdaascore() const;
  void _internal_set_blockdaascore(uint64_t value);
  public:

  // bool isCoinbase = 4;
  void clear_iscoinbase();
  bool iscoinbase() const;
  void set_iscoinbase(bool value);
  private:
  bool _internal_iscoinbase() const;
  void _internal_set_iscoinbase(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.UtxoEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::ScriptPublicKey* scriptpublickey_;
  uint64_t amount_;
  uint64_t blockdaascore_;
  bool iscoinbase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RequestNextPruningPointUtxoSetChunkMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.RequestNextPruningPointUtxoSetChunkMessage) */ {
 public:
  inline RequestNextPruningPointUtxoSetChunkMessage() : RequestNextPruningPointUtxoSetChunkMessage(nullptr) {}
  explicit constexpr RequestNextPruningPointUtxoSetChunkMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestNextPruningPointUtxoSetChunkMessage(const RequestNextPruningPointUtxoSetChunkMessage& from);
  RequestNextPruningPointUtxoSetChunkMessage(RequestNextPruningPointUtxoSetChunkMessage&& from) noexcept
    : RequestNextPruningPointUtxoSetChunkMessage() {
    *this = ::std::move(from);
  }

  inline RequestNextPruningPointUtxoSetChunkMessage& operator=(const RequestNextPruningPointUtxoSetChunkMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestNextPruningPointUtxoSetChunkMessage& operator=(RequestNextPruningPointUtxoSetChunkMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestNextPruningPointUtxoSetChunkMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestNextPruningPointUtxoSetChunkMessage* internal_default_instance() {
    return reinterpret_cast<const RequestNextPruningPointUtxoSetChunkMessage*>(
               &_RequestNextPruningPointUtxoSetChunkMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(RequestNextPruningPointUtxoSetChunkMessage& a, RequestNextPruningPointUtxoSetChunkMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestNextPruningPointUtxoSetChunkMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestNextPruningPointUtxoSetChunkMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestNextPruningPointUtxoSetChunkMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestNextPruningPointUtxoSetChunkMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestNextPruningPointUtxoSetChunkMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestNextPruningPointUtxoSetChunkMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestNextPruningPointUtxoSetChunkMessage";
  }
  protected:
  explicit RequestNextPruningPointUtxoSetChunkMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.RequestNextPruningPointUtxoSetChunkMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class DonePruningPointUtxoSetChunksMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.DonePruningPointUtxoSetChunksMessage) */ {
 public:
  inline DonePruningPointUtxoSetChunksMessage() : DonePruningPointUtxoSetChunksMessage(nullptr) {}
  explicit constexpr DonePruningPointUtxoSetChunksMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DonePruningPointUtxoSetChunksMessage(const DonePruningPointUtxoSetChunksMessage& from);
  DonePruningPointUtxoSetChunksMessage(DonePruningPointUtxoSetChunksMessage&& from) noexcept
    : DonePruningPointUtxoSetChunksMessage() {
    *this = ::std::move(from);
  }

  inline DonePruningPointUtxoSetChunksMessage& operator=(const DonePruningPointUtxoSetChunksMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DonePruningPointUtxoSetChunksMessage& operator=(DonePruningPointUtxoSetChunksMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DonePruningPointUtxoSetChunksMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DonePruningPointUtxoSetChunksMessage* internal_default_instance() {
    return reinterpret_cast<const DonePruningPointUtxoSetChunksMessage*>(
               &_DonePruningPointUtxoSetChunksMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(DonePruningPointUtxoSetChunksMessage& a, DonePruningPointUtxoSetChunksMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DonePruningPointUtxoSetChunksMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DonePruningPointUtxoSetChunksMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DonePruningPointUtxoSetChunksMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DonePruningPointUtxoSetChunksMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DonePruningPointUtxoSetChunksMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DonePruningPointUtxoSetChunksMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.DonePruningPointUtxoSetChunksMessage";
  }
  protected:
  explicit DonePruningPointUtxoSetChunksMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.DonePruningPointUtxoSetChunksMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RequestIBDBlocksMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RequestIBDBlocksMessage) */ {
 public:
  inline RequestIBDBlocksMessage() : RequestIBDBlocksMessage(nullptr) {}
  ~RequestIBDBlocksMessage() override;
  explicit constexpr RequestIBDBlocksMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestIBDBlocksMessage(const RequestIBDBlocksMessage& from);
  RequestIBDBlocksMessage(RequestIBDBlocksMessage&& from) noexcept
    : RequestIBDBlocksMessage() {
    *this = ::std::move(from);
  }

  inline RequestIBDBlocksMessage& operator=(const RequestIBDBlocksMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestIBDBlocksMessage& operator=(RequestIBDBlocksMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestIBDBlocksMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestIBDBlocksMessage* internal_default_instance() {
    return reinterpret_cast<const RequestIBDBlocksMessage*>(
               &_RequestIBDBlocksMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(RequestIBDBlocksMessage& a, RequestIBDBlocksMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestIBDBlocksMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestIBDBlocksMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestIBDBlocksMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestIBDBlocksMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestIBDBlocksMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestIBDBlocksMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestIBDBlocksMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestIBDBlocksMessage";
  }
  protected:
  explicit RequestIBDBlocksMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 1,
  };
  // repeated .protowire.Hash hashes = 1;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;
  public:
  void clear_hashes();
  ::protowire::Hash* mutable_hashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
      mutable_hashes();
  private:
  const ::protowire::Hash& _internal_hashes(int index) const;
  ::protowire::Hash* _internal_add_hashes();
  public:
  const ::protowire::Hash& hashes(int index) const;
  ::protowire::Hash* add_hashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
      hashes() const;

  // @@protoc_insertion_point(class_scope:protowire.RequestIBDBlocksMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash > hashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class UnexpectedPruningPointMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.UnexpectedPruningPointMessage) */ {
 public:
  inline UnexpectedPruningPointMessage() : UnexpectedPruningPointMessage(nullptr) {}
  explicit constexpr UnexpectedPruningPointMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnexpectedPruningPointMessage(const UnexpectedPruningPointMessage& from);
  UnexpectedPruningPointMessage(UnexpectedPruningPointMessage&& from) noexcept
    : UnexpectedPruningPointMessage() {
    *this = ::std::move(from);
  }

  inline UnexpectedPruningPointMessage& operator=(const UnexpectedPruningPointMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnexpectedPruningPointMessage& operator=(UnexpectedPruningPointMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnexpectedPruningPointMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnexpectedPruningPointMessage* internal_default_instance() {
    return reinterpret_cast<const UnexpectedPruningPointMessage*>(
               &_UnexpectedPruningPointMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(UnexpectedPruningPointMessage& a, UnexpectedPruningPointMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnexpectedPruningPointMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnexpectedPruningPointMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnexpectedPruningPointMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnexpectedPruningPointMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UnexpectedPruningPointMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UnexpectedPruningPointMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.UnexpectedPruningPointMessage";
  }
  protected:
  explicit UnexpectedPruningPointMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.UnexpectedPruningPointMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class IbdBlockLocatorMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.IbdBlockLocatorMessage) */ {
 public:
  inline IbdBlockLocatorMessage() : IbdBlockLocatorMessage(nullptr) {}
  ~IbdBlockLocatorMessage() override;
  explicit constexpr IbdBlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IbdBlockLocatorMessage(const IbdBlockLocatorMessage& from);
  IbdBlockLocatorMessage(IbdBlockLocatorMessage&& from) noexcept
    : IbdBlockLocatorMessage() {
    *this = ::std::move(from);
  }

  inline IbdBlockLocatorMessage& operator=(const IbdBlockLocatorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline IbdBlockLocatorMessage& operator=(IbdBlockLocatorMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IbdBlockLocatorMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const IbdBlockLocatorMessage* internal_default_instance() {
    return reinterpret_cast<const IbdBlockLocatorMessage*>(
               &_IbdBlockLocatorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(IbdBlockLocatorMessage& a, IbdBlockLocatorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(IbdBlockLocatorMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IbdBlockLocatorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IbdBlockLocatorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IbdBlockLocatorMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IbdBlockLocatorMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IbdBlockLocatorMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IbdBlockLocatorMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.IbdBlockLocatorMessage";
  }
  protected:
  explicit IbdBlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockLocatorHashesFieldNumber = 2,
    kTargetHashFieldNumber = 1,
  };
  // repeated .protowire.Hash blockLocatorHashes = 2;
  int blocklocatorhashes_size() const;
  private:
  int _internal_blocklocatorhashes_size() const;
  public:
  void clear_blocklocatorhashes();
  ::protowire::Hash* mutable_blocklocatorhashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
      mutable_blocklocatorhashes();
  private:
  const ::protowire::Hash& _internal_blocklocatorhashes(int index) const;
  ::protowire::Hash* _internal_add_blocklocatorhashes();
  public:
  const ::protowire::Hash& blocklocatorhashes(int index) const;
  ::protowire::Hash* add_blocklocatorhashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
      blocklocatorhashes() const;

  // .protowire.Hash targetHash = 1;
  bool has_targethash() const;
  private:
  bool _internal_has_targethash() const;
  public:
  void clear_targethash();
  const ::protowire::Hash& targethash() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_targethash();
  ::protowire::Hash* mutable_targethash();
  void set_allocated_targethash(::protowire::Hash* targethash);
  private:
  const ::protowire::Hash& _internal_targethash() const;
  ::protowire::Hash* _internal_mutable_targethash();
  public:
  void unsafe_arena_set_allocated_targethash(
      ::protowire::Hash* targethash);
  ::protowire::Hash* unsafe_arena_release_targethash();

  // @@protoc_insertion_point(class_scope:protowire.IbdBlockLocatorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash > blocklocatorhashes_;
  ::protowire::Hash* targethash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RequestIBDChainBlockLocatorMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RequestIBDChainBlockLocatorMessage) */ {
 public:
  inline RequestIBDChainBlockLocatorMessage() : RequestIBDChainBlockLocatorMessage(nullptr) {}
  ~RequestIBDChainBlockLocatorMessage() override;
  explicit constexpr RequestIBDChainBlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestIBDChainBlockLocatorMessage(const RequestIBDChainBlockLocatorMessage& from);
  RequestIBDChainBlockLocatorMessage(RequestIBDChainBlockLocatorMessage&& from) noexcept
    : RequestIBDChainBlockLocatorMessage() {
    *this = ::std::move(from);
  }

  inline RequestIBDChainBlockLocatorMessage& operator=(const RequestIBDChainBlockLocatorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestIBDChainBlockLocatorMessage& operator=(RequestIBDChainBlockLocatorMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestIBDChainBlockLocatorMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestIBDChainBlockLocatorMessage* internal_default_instance() {
    return reinterpret_cast<const RequestIBDChainBlockLocatorMessage*>(
               &_RequestIBDChainBlockLocatorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(RequestIBDChainBlockLocatorMessage& a, RequestIBDChainBlockLocatorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestIBDChainBlockLocatorMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestIBDChainBlockLocatorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestIBDChainBlockLocatorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestIBDChainBlockLocatorMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestIBDChainBlockLocatorMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestIBDChainBlockLocatorMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestIBDChainBlockLocatorMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestIBDChainBlockLocatorMessage";
  }
  protected:
  explicit RequestIBDChainBlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowHashFieldNumber = 1,
    kHighHashFieldNumber = 2,
  };
  // .protowire.Hash lowHash = 1;
  bool has_lowhash() const;
  private:
  bool _internal_has_lowhash() const;
  public:
  void clear_lowhash();
  const ::protowire::Hash& lowhash() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_lowhash();
  ::protowire::Hash* mutable_lowhash();
  void set_allocated_lowhash(::protowire::Hash* lowhash);
  private:
  const ::protowire::Hash& _internal_lowhash() const;
  ::protowire::Hash* _internal_mutable_lowhash();
  public:
  void unsafe_arena_set_allocated_lowhash(
      ::protowire::Hash* lowhash);
  ::protowire::Hash* unsafe_arena_release_lowhash();

  // .protowire.Hash highHash = 2;
  bool has_highhash() const;
  private:
  bool _internal_has_highhash() const;
  public:
  void clear_highhash();
  const ::protowire::Hash& highhash() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_highhash();
  ::protowire::Hash* mutable_highhash();
  void set_allocated_highhash(::protowire::Hash* highhash);
  private:
  const ::protowire::Hash& _internal_highhash() const;
  ::protowire::Hash* _internal_mutable_highhash();
  public:
  void unsafe_arena_set_allocated_highhash(
      ::protowire::Hash* highhash);
  ::protowire::Hash* unsafe_arena_release_highhash();

  // @@protoc_insertion_point(class_scope:protowire.RequestIBDChainBlockLocatorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::Hash* lowhash_;
  ::protowire::Hash* highhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class IbdChainBlockLocatorMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.IbdChainBlockLocatorMessage) */ {
 public:
  inline IbdChainBlockLocatorMessage() : IbdChainBlockLocatorMessage(nullptr) {}
  ~IbdChainBlockLocatorMessage() override;
  explicit constexpr IbdChainBlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IbdChainBlockLocatorMessage(const IbdChainBlockLocatorMessage& from);
  IbdChainBlockLocatorMessage(IbdChainBlockLocatorMessage&& from) noexcept
    : IbdChainBlockLocatorMessage() {
    *this = ::std::move(from);
  }

  inline IbdChainBlockLocatorMessage& operator=(const IbdChainBlockLocatorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline IbdChainBlockLocatorMessage& operator=(IbdChainBlockLocatorMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IbdChainBlockLocatorMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const IbdChainBlockLocatorMessage* internal_default_instance() {
    return reinterpret_cast<const IbdChainBlockLocatorMessage*>(
               &_IbdChainBlockLocatorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(IbdChainBlockLocatorMessage& a, IbdChainBlockLocatorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(IbdChainBlockLocatorMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IbdChainBlockLocatorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IbdChainBlockLocatorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IbdChainBlockLocatorMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IbdChainBlockLocatorMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IbdChainBlockLocatorMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IbdChainBlockLocatorMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.IbdChainBlockLocatorMessage";
  }
  protected:
  explicit IbdChainBlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockLocatorHashesFieldNumber = 1,
  };
  // repeated .protowire.Hash blockLocatorHashes = 1;
  int blocklocatorhashes_size() const;
  private:
  int _internal_blocklocatorhashes_size() const;
  public:
  void clear_blocklocatorhashes();
  ::protowire::Hash* mutable_blocklocatorhashes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
      mutable_blocklocatorhashes();
  private:
  const ::protowire::Hash& _internal_blocklocatorhashes(int index) const;
  ::protowire::Hash* _internal_add_blocklocatorhashes();
  public:
  const ::protowire::Hash& blocklocatorhashes(int index) const;
  ::protowire::Hash* add_blocklocatorhashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
      blocklocatorhashes() const;

  // @@protoc_insertion_point(class_scope:protowire.IbdChainBlockLocatorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash > blocklocatorhashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RequestAnticoneMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RequestAnticoneMessage) */ {
 public:
  inline RequestAnticoneMessage() : RequestAnticoneMessage(nullptr) {}
  ~RequestAnticoneMessage() override;
  explicit constexpr RequestAnticoneMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestAnticoneMessage(const RequestAnticoneMessage& from);
  RequestAnticoneMessage(RequestAnticoneMessage&& from) noexcept
    : RequestAnticoneMessage() {
    *this = ::std::move(from);
  }

  inline RequestAnticoneMessage& operator=(const RequestAnticoneMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAnticoneMessage& operator=(RequestAnticoneMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestAnticoneMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestAnticoneMessage* internal_default_instance() {
    return reinterpret_cast<const RequestAnticoneMessage*>(
               &_RequestAnticoneMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(RequestAnticoneMessage& a, RequestAnticoneMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAnticoneMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestAnticoneMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestAnticoneMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestAnticoneMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestAnticoneMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestAnticoneMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAnticoneMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestAnticoneMessage";
  }
  protected:
  explicit RequestAnticoneMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockHashFieldNumber = 1,
    kContextHashFieldNumber = 2,
  };
  // .protowire.Hash blockHash = 1;
  bool has_blockhash() const;
  private:
  bool _internal_has_blockhash() const;
  public:
  void clear_blockhash();
  const ::protowire::Hash& blockhash() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_blockhash();
  ::protowire::Hash* mutable_blockhash();
  void set_allocated_blockhash(::protowire::Hash* blockhash);
  private:
  const ::protowire::Hash& _internal_blockhash() const;
  ::protowire::Hash* _internal_mutable_blockhash();
  public:
  void unsafe_arena_set_allocated_blockhash(
      ::protowire::Hash* blockhash);
  ::protowire::Hash* unsafe_arena_release_blockhash();

  // .protowire.Hash contextHash = 2;
  bool has_contexthash() const;
  private:
  bool _internal_has_contexthash() const;
  public:
  void clear_contexthash();
  const ::protowire::Hash& contexthash() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_contexthash();
  ::protowire::Hash* mutable_contexthash();
  void set_allocated_contexthash(::protowire::Hash* contexthash);
  private:
  const ::protowire::Hash& _internal_contexthash() const;
  ::protowire::Hash* _internal_mutable_contexthash();
  public:
  void unsafe_arena_set_allocated_contexthash(
      ::protowire::Hash* contexthash);
  ::protowire::Hash* unsafe_arena_release_contexthash();

  // @@protoc_insertion_point(class_scope:protowire.RequestAnticoneMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::Hash* blockhash_;
  ::protowire::Hash* contexthash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class IbdBlockLocatorHighestHashMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.IbdBlockLocatorHighestHashMessage) */ {
 public:
  inline IbdBlockLocatorHighestHashMessage() : IbdBlockLocatorHighestHashMessage(nullptr) {}
  ~IbdBlockLocatorHighestHashMessage() override;
  explicit constexpr IbdBlockLocatorHighestHashMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IbdBlockLocatorHighestHashMessage(const IbdBlockLocatorHighestHashMessage& from);
  IbdBlockLocatorHighestHashMessage(IbdBlockLocatorHighestHashMessage&& from) noexcept
    : IbdBlockLocatorHighestHashMessage() {
    *this = ::std::move(from);
  }

  inline IbdBlockLocatorHighestHashMessage& operator=(const IbdBlockLocatorHighestHashMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline IbdBlockLocatorHighestHashMessage& operator=(IbdBlockLocatorHighestHashMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IbdBlockLocatorHighestHashMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const IbdBlockLocatorHighestHashMessage* internal_default_instance() {
    return reinterpret_cast<const IbdBlockLocatorHighestHashMessage*>(
               &_IbdBlockLocatorHighestHashMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(IbdBlockLocatorHighestHashMessage& a, IbdBlockLocatorHighestHashMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(IbdBlockLocatorHighestHashMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IbdBlockLocatorHighestHashMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IbdBlockLocatorHighestHashMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IbdBlockLocatorHighestHashMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IbdBlockLocatorHighestHashMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IbdBlockLocatorHighestHashMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IbdBlockLocatorHighestHashMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.IbdBlockLocatorHighestHashMessage";
  }
  protected:
  explicit IbdBlockLocatorHighestHashMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighestHashFieldNumber = 1,
  };
  // .protowire.Hash highestHash = 1;
  bool has_highesthash() const;
  private:
  bool _internal_has_highesthash() const;
  public:
  void clear_highesthash();
  const ::protowire::Hash& highesthash() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_highesthash();
  ::protowire::Hash* mutable_highesthash();
  void set_allocated_highesthash(::protowire::Hash* highesthash);
  private:
  const ::protowire::Hash& _internal_highesthash() const;
  ::protowire::Hash* _internal_mutable_highesthash();
  public:
  void unsafe_arena_set_allocated_highesthash(
      ::protowire::Hash* highesthash);
  ::protowire::Hash* unsafe_arena_release_highesthash();

  // @@protoc_insertion_point(class_scope:protowire.IbdBlockLocatorHighestHashMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::Hash* highesthash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class IbdBlockLocatorHighestHashNotFoundMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.IbdBlockLocatorHighestHashNotFoundMessage) */ {
 public:
  inline IbdBlockLocatorHighestHashNotFoundMessage() : IbdBlockLocatorHighestHashNotFoundMessage(nullptr) {}
  explicit constexpr IbdBlockLocatorHighestHashNotFoundMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IbdBlockLocatorHighestHashNotFoundMessage(const IbdBlockLocatorHighestHashNotFoundMessage& from);
  IbdBlockLocatorHighestHashNotFoundMessage(IbdBlockLocatorHighestHashNotFoundMessage&& from) noexcept
    : IbdBlockLocatorHighestHashNotFoundMessage() {
    *this = ::std::move(from);
  }

  inline IbdBlockLocatorHighestHashNotFoundMessage& operator=(const IbdBlockLocatorHighestHashNotFoundMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline IbdBlockLocatorHighestHashNotFoundMessage& operator=(IbdBlockLocatorHighestHashNotFoundMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IbdBlockLocatorHighestHashNotFoundMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const IbdBlockLocatorHighestHashNotFoundMessage* internal_default_instance() {
    return reinterpret_cast<const IbdBlockLocatorHighestHashNotFoundMessage*>(
               &_IbdBlockLocatorHighestHashNotFoundMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(IbdBlockLocatorHighestHashNotFoundMessage& a, IbdBlockLocatorHighestHashNotFoundMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(IbdBlockLocatorHighestHashNotFoundMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IbdBlockLocatorHighestHashNotFoundMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IbdBlockLocatorHighestHashNotFoundMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IbdBlockLocatorHighestHashNotFoundMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IbdBlockLocatorHighestHashNotFoundMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IbdBlockLocatorHighestHashNotFoundMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.IbdBlockLocatorHighestHashNotFoundMessage";
  }
  protected:
  explicit IbdBlockLocatorHighestHashNotFoundMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.IbdBlockLocatorHighestHashNotFoundMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class BlockHeadersMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.BlockHeadersMessage) */ {
 public:
  inline BlockHeadersMessage() : BlockHeadersMessage(nullptr) {}
  ~BlockHeadersMessage() override;
  explicit constexpr BlockHeadersMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockHeadersMessage(const BlockHeadersMessage& from);
  BlockHeadersMessage(BlockHeadersMessage&& from) noexcept
    : BlockHeadersMessage() {
    *this = ::std::move(from);
  }

  inline BlockHeadersMessage& operator=(const BlockHeadersMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockHeadersMessage& operator=(BlockHeadersMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockHeadersMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockHeadersMessage* internal_default_instance() {
    return reinterpret_cast<const BlockHeadersMessage*>(
               &_BlockHeadersMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(BlockHeadersMessage& a, BlockHeadersMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockHeadersMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockHeadersMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockHeadersMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockHeadersMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockHeadersMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockHeadersMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeadersMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.BlockHeadersMessage";
  }
  protected:
  explicit BlockHeadersMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockHeadersFieldNumber = 1,
  };
  // repeated .protowire.BlockHeader blockHeaders = 1;
  int blockheaders_size() const;
  private:
  int _internal_blockheaders_size() const;
  public:
  void clear_blockheaders();
  ::protowire::BlockHeader* mutable_blockheaders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader >*
      mutable_blockheaders();
  private:
  const ::protowire::BlockHeader& _internal_blockheaders(int index) const;
  ::protowire::BlockHeader* _internal_add_blockheaders();
  public:
  const ::protowire::BlockHeader& blockheaders(int index) const;
  ::protowire::BlockHeader* add_blockheaders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader >&
      blockheaders() const;

  // @@protoc_insertion_point(class_scope:protowire.BlockHeadersMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader > blockheaders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RequestPruningPointAndItsAnticoneMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.RequestPruningPointAndItsAnticoneMessage) */ {
 public:
  inline RequestPruningPointAndItsAnticoneMessage() : RequestPruningPointAndItsAnticoneMessage(nullptr) {}
  explicit constexpr RequestPruningPointAndItsAnticoneMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestPruningPointAndItsAnticoneMessage(const RequestPruningPointAndItsAnticoneMessage& from);
  RequestPruningPointAndItsAnticoneMessage(RequestPruningPointAndItsAnticoneMessage&& from) noexcept
    : RequestPruningPointAndItsAnticoneMessage() {
    *this = ::std::move(from);
  }

  inline RequestPruningPointAndItsAnticoneMessage& operator=(const RequestPruningPointAndItsAnticoneMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPruningPointAndItsAnticoneMessage& operator=(RequestPruningPointAndItsAnticoneMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestPruningPointAndItsAnticoneMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestPruningPointAndItsAnticoneMessage* internal_default_instance() {
    return reinterpret_cast<const RequestPruningPointAndItsAnticoneMessage*>(
               &_RequestPruningPointAndItsAnticoneMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(RequestPruningPointAndItsAnticoneMessage& a, RequestPruningPointAndItsAnticoneMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestPruningPointAndItsAnticoneMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestPruningPointAndItsAnticoneMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestPruningPointAndItsAnticoneMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestPruningPointAndItsAnticoneMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestPruningPointAndItsAnticoneMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestPruningPointAndItsAnticoneMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestPruningPointAndItsAnticoneMessage";
  }
  protected:
  explicit RequestPruningPointAndItsAnticoneMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.RequestPruningPointAndItsAnticoneMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RequestNextPruningPointAndItsAnticoneBlocksMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.RequestNextPruningPointAndItsAnticoneBlocksMessage) */ {
 public:
  inline RequestNextPruningPointAndItsAnticoneBlocksMessage() : RequestNextPruningPointAndItsAnticoneBlocksMessage(nullptr) {}
  explicit constexpr RequestNextPruningPointAndItsAnticoneBlocksMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestNextPruningPointAndItsAnticoneBlocksMessage(const RequestNextPruningPointAndItsAnticoneBlocksMessage& from);
  RequestNextPruningPointAndItsAnticoneBlocksMessage(RequestNextPruningPointAndItsAnticoneBlocksMessage&& from) noexcept
    : RequestNextPruningPointAndItsAnticoneBlocksMessage() {
    *this = ::std::move(from);
  }

  inline RequestNextPruningPointAndItsAnticoneBlocksMessage& operator=(const RequestNextPruningPointAndItsAnticoneBlocksMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestNextPruningPointAndItsAnticoneBlocksMessage& operator=(RequestNextPruningPointAndItsAnticoneBlocksMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestNextPruningPointAndItsAnticoneBlocksMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestNextPruningPointAndItsAnticoneBlocksMessage* internal_default_instance() {
    return reinterpret_cast<const RequestNextPruningPointAndItsAnticoneBlocksMessage*>(
               &_RequestNextPruningPointAndItsAnticoneBlocksMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(RequestNextPruningPointAndItsAnticoneBlocksMessage& a, RequestNextPruningPointAndItsAnticoneBlocksMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestNextPruningPointAndItsAnticoneBlocksMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestNextPruningPointAndItsAnticoneBlocksMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestNextPruningPointAndItsAnticoneBlocksMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestNextPruningPointAndItsAnticoneBlocksMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestNextPruningPointAndItsAnticoneBlocksMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestNextPruningPointAndItsAnticoneBlocksMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestNextPruningPointAndItsAnticoneBlocksMessage";
  }
  protected:
  explicit RequestNextPruningPointAndItsAnticoneBlocksMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.RequestNextPruningPointAndItsAnticoneBlocksMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class BlockWithTrustedDataMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.BlockWithTrustedDataMessage) */ {
 public:
  inline BlockWithTrustedDataMessage() : BlockWithTrustedDataMessage(nullptr) {}
  ~BlockWithTrustedDataMessage() override;
  explicit constexpr BlockWithTrustedDataMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockWithTrustedDataMessage(const BlockWithTrustedDataMessage& from);
  BlockWithTrustedDataMessage(BlockWithTrustedDataMessage&& from) noexcept
    : BlockWithTrustedDataMessage() {
    *this = ::std::move(from);
  }

  inline BlockWithTrustedDataMessage& operator=(const BlockWithTrustedDataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockWithTrustedDataMessage& operator=(BlockWithTrustedDataMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockWithTrustedDataMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockWithTrustedDataMessage* internal_default_instance() {
    return reinterpret_cast<const BlockWithTrustedDataMessage*>(
               &_BlockWithTrustedDataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(BlockWithTrustedDataMessage& a, BlockWithTrustedDataMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockWithTrustedDataMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockWithTrustedDataMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockWithTrustedDataMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockWithTrustedDataMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockWithTrustedDataMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockWithTrustedDataMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockWithTrustedDataMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.BlockWithTrustedDataMessage";
  }
  protected:
  explicit BlockWithTrustedDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDaaWindowFieldNumber = 3,
    kGhostdagDataFieldNumber = 4,
    kBlockFieldNumber = 1,
    kDaaScoreFieldNumber = 2,
  };
  // repeated .protowire.DaaBlock daaWindow = 3;
  int daawindow_size() const;
  private:
  int _internal_daawindow_size() const;
  public:
  void clear_daawindow();
  ::protowire::DaaBlock* mutable_daawindow(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::DaaBlock >*
      mutable_daawindow();
  private:
  const ::protowire::DaaBlock& _internal_daawindow(int index) const;
  ::protowire::DaaBlock* _internal_add_daawindow();
  public:
  const ::protowire::DaaBlock& daawindow(int index) const;
  ::protowire::DaaBlock* add_daawindow();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::DaaBlock >&
      daawindow() const;

  // repeated .protowire.BlockGhostdagDataHashPair ghostdagData = 4;
  int ghostdagdata_size() const;
  private:
  int _internal_ghostdagdata_size() const;
  public:
  void clear_ghostdagdata();
  ::protowire::BlockGhostdagDataHashPair* mutable_ghostdagdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockGhostdagDataHashPair >*
      mutable_ghostdagdata();
  private:
  const ::protowire::BlockGhostdagDataHashPair& _internal_ghostdagdata(int index) const;
  ::protowire::BlockGhostdagDataHashPair* _internal_add_ghostdagdata();
  public:
  const ::protowire::BlockGhostdagDataHashPair& ghostdagdata(int index) const;
  ::protowire::BlockGhostdagDataHashPair* add_ghostdagdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockGhostdagDataHashPair >&
      ghostdagdata() const;

  // .protowire.BlockMessage block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::protowire::BlockMessage& block() const;
  PROTOBUF_NODISCARD ::protowire::BlockMessage* release_block();
  ::protowire::BlockMessage* mutable_block();
  void set_allocated_block(::protowire::BlockMessage* block);
  private:
  const ::protowire::BlockMessage& _internal_block() const;
  ::protowire::BlockMessage* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::protowire::BlockMessage* block);
  ::protowire::BlockMessage* unsafe_arena_release_block();

  // uint64 daaScore = 2;
  void clear_daascore();
  uint64_t daascore() const;
  void set_daascore(uint64_t value);
  private:
  uint64_t _internal_daascore() const;
  void _internal_set_daascore(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.BlockWithTrustedDataMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::DaaBlock > daawindow_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockGhostdagDataHashPair > ghostdagdata_;
  ::protowire::BlockMessage* block_;
  uint64_t daascore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class DaaBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.DaaBlock) */ {
 public:
  inline DaaBlock() : DaaBlock(nullptr) {}
  ~DaaBlock() override;
  explicit constexpr DaaBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DaaBlock(const DaaBlock& from);
  DaaBlock(DaaBlock&& from) noexcept
    : DaaBlock() {
    *this = ::std::move(from);
  }

  inline DaaBlock& operator=(const DaaBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline DaaBlock& operator=(DaaBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DaaBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const DaaBlock* internal_default_instance() {
    return reinterpret_cast<const DaaBlock*>(
               &_DaaBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(DaaBlock& a, DaaBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(DaaBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DaaBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DaaBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DaaBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DaaBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DaaBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaaBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.DaaBlock";
  }
  protected:
  explicit DaaBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGhostdagDataFieldNumber = 2,
    kBlockFieldNumber = 3,
  };
  // .protowire.GhostdagData ghostdagData = 2;
  bool has_ghostdagdata() const;
  private:
  bool _internal_has_ghostdagdata() const;
  public:
  void clear_ghostdagdata();
  const ::protowire::GhostdagData& ghostdagdata() const;
  PROTOBUF_NODISCARD ::protowire::GhostdagData* release_ghostdagdata();
  ::protowire::GhostdagData* mutable_ghostdagdata();
  void set_allocated_ghostdagdata(::protowire::GhostdagData* ghostdagdata);
  private:
  const ::protowire::GhostdagData& _internal_ghostdagdata() const;
  ::protowire::GhostdagData* _internal_mutable_ghostdagdata();
  public:
  void unsafe_arena_set_allocated_ghostdagdata(
      ::protowire::GhostdagData* ghostdagdata);
  ::protowire::GhostdagData* unsafe_arena_release_ghostdagdata();

  // .protowire.BlockMessage block = 3;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::protowire::BlockMessage& block() const;
  PROTOBUF_NODISCARD ::protowire::BlockMessage* release_block();
  ::protowire::BlockMessage* mutable_block();
  void set_allocated_block(::protowire::BlockMessage* block);
  private:
  const ::protowire::BlockMessage& _internal_block() const;
  ::protowire::BlockMessage* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::protowire::BlockMessage* block);
  ::protowire::BlockMessage* unsafe_arena_release_block();

  // @@protoc_insertion_point(class_scope:protowire.DaaBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::GhostdagData* ghostdagdata_;
  ::protowire::BlockMessage* block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class DaaBlockV4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.DaaBlockV4) */ {
 public:
  inline DaaBlockV4() : DaaBlockV4(nullptr) {}
  ~DaaBlockV4() override;
  explicit constexpr DaaBlockV4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DaaBlockV4(const DaaBlockV4& from);
  DaaBlockV4(DaaBlockV4&& from) noexcept
    : DaaBlockV4() {
    *this = ::std::move(from);
  }

  inline DaaBlockV4& operator=(const DaaBlockV4& from) {
    CopyFrom(from);
    return *this;
  }
  inline DaaBlockV4& operator=(DaaBlockV4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DaaBlockV4& default_instance() {
    return *internal_default_instance();
  }
  static inline const DaaBlockV4* internal_default_instance() {
    return reinterpret_cast<const DaaBlockV4*>(
               &_DaaBlockV4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(DaaBlockV4& a, DaaBlockV4& b) {
    a.Swap(&b);
  }
  inline void Swap(DaaBlockV4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DaaBlockV4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DaaBlockV4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DaaBlockV4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DaaBlockV4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DaaBlockV4& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaaBlockV4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.DaaBlockV4";
  }
  protected:
  explicit DaaBlockV4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kGhostdagDataFieldNumber = 2,
  };
  // .protowire.BlockHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protowire::BlockHeader& header() const;
  PROTOBUF_NODISCARD ::protowire::BlockHeader* release_header();
  ::protowire::BlockHeader* mutable_header();
  void set_allocated_header(::protowire::BlockHeader* header);
  private:
  const ::protowire::BlockHeader& _internal_header() const;
  ::protowire::BlockHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::protowire::BlockHeader* header);
  ::protowire::BlockHeader* unsafe_arena_release_header();

  // .protowire.GhostdagData ghostdagData = 2;
  bool has_ghostdagdata() const;
  private:
  bool _internal_has_ghostdagdata() const;
  public:
  void clear_ghostdagdata();
  const ::protowire::GhostdagData& ghostdagdata() const;
  PROTOBUF_NODISCARD ::protowire::GhostdagData* release_ghostdagdata();
  ::protowire::GhostdagData* mutable_ghostdagdata();
  void set_allocated_ghostdagdata(::protowire::GhostdagData* ghostdagdata);
  private:
  const ::protowire::GhostdagData& _internal_ghostdagdata() const;
  ::protowire::GhostdagData* _internal_mutable_ghostdagdata();
  public:
  void unsafe_arena_set_allocated_ghostdagdata(
      ::protowire::GhostdagData* ghostdagdata);
  ::protowire::GhostdagData* unsafe_arena_release_ghostdagdata();

  // @@protoc_insertion_point(class_scope:protowire.DaaBlockV4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::BlockHeader* header_;
  ::protowire::GhostdagData* ghostdagdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class BlockGhostdagDataHashPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.BlockGhostdagDataHashPair) */ {
 public:
  inline BlockGhostdagDataHashPair() : BlockGhostdagDataHashPair(nullptr) {}
  ~BlockGhostdagDataHashPair() override;
  explicit constexpr BlockGhostdagDataHashPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockGhostdagDataHashPair(const BlockGhostdagDataHashPair& from);
  BlockGhostdagDataHashPair(BlockGhostdagDataHashPair&& from) noexcept
    : BlockGhostdagDataHashPair() {
    *this = ::std::move(from);
  }

  inline BlockGhostdagDataHashPair& operator=(const BlockGhostdagDataHashPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockGhostdagDataHashPair& operator=(BlockGhostdagDataHashPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockGhostdagDataHashPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockGhostdagDataHashPair* internal_default_instance() {
    return reinterpret_cast<const BlockGhostdagDataHashPair*>(
               &_BlockGhostdagDataHashPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(BlockGhostdagDataHashPair& a, BlockGhostdagDataHashPair& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockGhostdagDataHashPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockGhostdagDataHashPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockGhostdagDataHashPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockGhostdagDataHashPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockGhostdagDataHashPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockGhostdagDataHashPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockGhostdagDataHashPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.BlockGhostdagDataHashPair";
  }
  protected:
  explicit BlockGhostdagDataHashPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kGhostdagDataFieldNumber = 2,
  };
  // .protowire.Hash hash = 1;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const ::protowire::Hash& hash() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_hash();
  ::protowire::Hash* mutable_hash();
  void set_allocated_hash(::protowire::Hash* hash);
  private:
  const ::protowire::Hash& _internal_hash() const;
  ::protowire::Hash* _internal_mutable_hash();
  public:
  void unsafe_arena_set_allocated_hash(
      ::protowire::Hash* hash);
  ::protowire::Hash* unsafe_arena_release_hash();

  // .protowire.GhostdagData ghostdagData = 2;
  bool has_ghostdagdata() const;
  private:
  bool _internal_has_ghostdagdata() const;
  public:
  void clear_ghostdagdata();
  const ::protowire::GhostdagData& ghostdagdata() const;
  PROTOBUF_NODISCARD ::protowire::GhostdagData* release_ghostdagdata();
  ::protowire::GhostdagData* mutable_ghostdagdata();
  void set_allocated_ghostdagdata(::protowire::GhostdagData* ghostdagdata);
  private:
  const ::protowire::GhostdagData& _internal_ghostdagdata() const;
  ::protowire::GhostdagData* _internal_mutable_ghostdagdata();
  public:
  void unsafe_arena_set_allocated_ghostdagdata(
      ::protowire::GhostdagData* ghostdagdata);
  ::protowire::GhostdagData* unsafe_arena_release_ghostdagdata();

  // @@protoc_insertion_point(class_scope:protowire.BlockGhostdagDataHashPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::Hash* hash_;
  ::protowire::GhostdagData* ghostdagdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class GhostdagData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GhostdagData) */ {
 public:
  inline GhostdagData() : GhostdagData(nullptr) {}
  ~GhostdagData() override;
  explicit constexpr GhostdagData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GhostdagData(const GhostdagData& from);
  GhostdagData(GhostdagData&& from) noexcept
    : GhostdagData() {
    *this = ::std::move(from);
  }

  inline GhostdagData& operator=(const GhostdagData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GhostdagData& operator=(GhostdagData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GhostdagData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GhostdagData* internal_default_instance() {
    return reinterpret_cast<const GhostdagData*>(
               &_GhostdagData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GhostdagData& a, GhostdagData& b) {
    a.Swap(&b);
  }
  inline void Swap(GhostdagData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GhostdagData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GhostdagData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GhostdagData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GhostdagData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GhostdagData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GhostdagData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GhostdagData";
  }
  protected:
  explicit GhostdagData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMergeSetBluesFieldNumber = 4,
    kMergeSetRedsFieldNumber = 5,
    kBluesAnticoneSizesFieldNumber = 6,
    kBlueWorkFieldNumber = 2,
    kSelectedParentFieldNumber = 3,
    kBlueScoreFieldNumber = 1,
  };
  // repeated .protowire.Hash mergeSetBlues = 4;
  int mergesetblues_size() const;
  private:
  int _internal_mergesetblues_size() const;
  public:
  void clear_mergesetblues();
  ::protowire::Hash* mutable_mergesetblues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
      mutable_mergesetblues();
  private:
  const ::protowire::Hash& _internal_mergesetblues(int index) const;
  ::protowire::Hash* _internal_add_mergesetblues();
  public:
  const ::protowire::Hash& mergesetblues(int index) const;
  ::protowire::Hash* add_mergesetblues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
      mergesetblues() const;

  // repeated .protowire.Hash mergeSetReds = 5;
  int mergesetreds_size() const;
  private:
  int _internal_mergesetreds_size() const;
  public:
  void clear_mergesetreds();
  ::protowire::Hash* mutable_mergesetreds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
      mutable_mergesetreds();
  private:
  const ::protowire::Hash& _internal_mergesetreds(int index) const;
  ::protowire::Hash* _internal_add_mergesetreds();
  public:
  const ::protowire::Hash& mergesetreds(int index) const;
  ::protowire::Hash* add_mergesetreds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
      mergesetreds() const;

  // repeated .protowire.BluesAnticoneSizes bluesAnticoneSizes = 6;
  int bluesanticonesizes_size() const;
  private:
  int _internal_bluesanticonesizes_size() const;
  public:
  void clear_bluesanticonesizes();
  ::protowire::BluesAnticoneSizes* mutable_bluesanticonesizes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BluesAnticoneSizes >*
      mutable_bluesanticonesizes();
  private:
  const ::protowire::BluesAnticoneSizes& _internal_bluesanticonesizes(int index) const;
  ::protowire::BluesAnticoneSizes* _internal_add_bluesanticonesizes();
  public:
  const ::protowire::BluesAnticoneSizes& bluesanticonesizes(int index) const;
  ::protowire::BluesAnticoneSizes* add_bluesanticonesizes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BluesAnticoneSizes >&
      bluesanticonesizes() const;

  // bytes blueWork = 2;
  void clear_bluework();
  const std::string& bluework() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bluework(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bluework();
  PROTOBUF_NODISCARD std::string* release_bluework();
  void set_allocated_bluework(std::string* bluework);
  private:
  const std::string& _internal_bluework() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bluework(const std::string& value);
  std::string* _internal_mutable_bluework();
  public:

  // .protowire.Hash selectedParent = 3;
  bool has_selectedparent() const;
  private:
  bool _internal_has_selectedparent() const;
  public:
  void clear_selectedparent();
  const ::protowire::Hash& selectedparent() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_selectedparent();
  ::protowire::Hash* mutable_selectedparent();
  void set_allocated_selectedparent(::protowire::Hash* selectedparent);
  private:
  const ::protowire::Hash& _internal_selectedparent() const;
  ::protowire::Hash* _internal_mutable_selectedparent();
  public:
  void unsafe_arena_set_allocated_selectedparent(
      ::protowire::Hash* selectedparent);
  ::protowire::Hash* unsafe_arena_release_selectedparent();

  // uint64 blueScore = 1;
  void clear_bluescore();
  uint64_t bluescore() const;
  void set_bluescore(uint64_t value);
  private:
  uint64_t _internal_bluescore() const;
  void _internal_set_bluescore(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GhostdagData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash > mergesetblues_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash > mergesetreds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BluesAnticoneSizes > bluesanticonesizes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bluework_;
  ::protowire::Hash* selectedparent_;
  uint64_t bluescore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class BluesAnticoneSizes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.BluesAnticoneSizes) */ {
 public:
  inline BluesAnticoneSizes() : BluesAnticoneSizes(nullptr) {}
  ~BluesAnticoneSizes() override;
  explicit constexpr BluesAnticoneSizes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BluesAnticoneSizes(const BluesAnticoneSizes& from);
  BluesAnticoneSizes(BluesAnticoneSizes&& from) noexcept
    : BluesAnticoneSizes() {
    *this = ::std::move(from);
  }

  inline BluesAnticoneSizes& operator=(const BluesAnticoneSizes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluesAnticoneSizes& operator=(BluesAnticoneSizes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BluesAnticoneSizes& default_instance() {
    return *internal_default_instance();
  }
  static inline const BluesAnticoneSizes* internal_default_instance() {
    return reinterpret_cast<const BluesAnticoneSizes*>(
               &_BluesAnticoneSizes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(BluesAnticoneSizes& a, BluesAnticoneSizes& b) {
    a.Swap(&b);
  }
  inline void Swap(BluesAnticoneSizes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BluesAnticoneSizes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BluesAnticoneSizes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BluesAnticoneSizes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BluesAnticoneSizes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BluesAnticoneSizes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluesAnticoneSizes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.BluesAnticoneSizes";
  }
  protected:
  explicit BluesAnticoneSizes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlueHashFieldNumber = 1,
    kAnticoneSizeFieldNumber = 2,
  };
  // .protowire.Hash blueHash = 1;
  bool has_bluehash() const;
  private:
  bool _internal_has_bluehash() const;
  public:
  void clear_bluehash();
  const ::protowire::Hash& bluehash() const;
  PROTOBUF_NODISCARD ::protowire::Hash* release_bluehash();
  ::protowire::Hash* mutable_bluehash();
  void set_allocated_bluehash(::protowire::Hash* bluehash);
  private:
  const ::protowire::Hash& _internal_bluehash() const;
  ::protowire::Hash* _internal_mutable_bluehash();
  public:
  void unsafe_arena_set_allocated_bluehash(
      ::protowire::Hash* bluehash);
  ::protowire::Hash* unsafe_arena_release_bluehash();

  // uint32 anticoneSize = 2;
  void clear_anticonesize();
  uint32_t anticonesize() const;
  void set_anticonesize(uint32_t value);
  private:
  uint32_t _internal_anticonesize() const;
  void _internal_set_anticonesize(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.BluesAnticoneSizes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::Hash* bluehash_;
  uint32_t anticonesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class DoneBlocksWithTrustedDataMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.DoneBlocksWithTrustedDataMessage) */ {
 public:
  inline DoneBlocksWithTrustedDataMessage() : DoneBlocksWithTrustedDataMessage(nullptr) {}
  explicit constexpr DoneBlocksWithTrustedDataMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoneBlocksWithTrustedDataMessage(const DoneBlocksWithTrustedDataMessage& from);
  DoneBlocksWithTrustedDataMessage(DoneBlocksWithTrustedDataMessage&& from) noexcept
    : DoneBlocksWithTrustedDataMessage() {
    *this = ::std::move(from);
  }

  inline DoneBlocksWithTrustedDataMessage& operator=(const DoneBlocksWithTrustedDataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoneBlocksWithTrustedDataMessage& operator=(DoneBlocksWithTrustedDataMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoneBlocksWithTrustedDataMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoneBlocksWithTrustedDataMessage* internal_default_instance() {
    return reinterpret_cast<const DoneBlocksWithTrustedDataMessage*>(
               &_DoneBlocksWithTrustedDataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(DoneBlocksWithTrustedDataMessage& a, DoneBlocksWithTrustedDataMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DoneBlocksWithTrustedDataMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoneBlocksWithTrustedDataMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoneBlocksWithTrustedDataMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoneBlocksWithTrustedDataMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DoneBlocksWithTrustedDataMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DoneBlocksWithTrustedDataMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.DoneBlocksWithTrustedDataMessage";
  }
  protected:
  explicit DoneBlocksWithTrustedDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.DoneBlocksWithTrustedDataMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class PruningPointsMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.PruningPointsMessage) */ {
 public:
  inline PruningPointsMessage() : PruningPointsMessage(nullptr) {}
  ~PruningPointsMessage() override;
  explicit constexpr PruningPointsMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PruningPointsMessage(const PruningPointsMessage& from);
  PruningPointsMessage(PruningPointsMessage&& from) noexcept
    : PruningPointsMessage() {
    *this = ::std::move(from);
  }

  inline PruningPointsMessage& operator=(const PruningPointsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PruningPointsMessage& operator=(PruningPointsMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PruningPointsMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PruningPointsMessage* internal_default_instance() {
    return reinterpret_cast<const PruningPointsMessage*>(
               &_PruningPointsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(PruningPointsMessage& a, PruningPointsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PruningPointsMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PruningPointsMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PruningPointsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PruningPointsMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PruningPointsMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PruningPointsMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PruningPointsMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.PruningPointsMessage";
  }
  protected:
  explicit PruningPointsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 1,
  };
  // repeated .protowire.BlockHeader headers = 1;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::protowire::BlockHeader* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader >*
      mutable_headers();
  private:
  const ::protowire::BlockHeader& _internal_headers(int index) const;
  ::protowire::BlockHeader* _internal_add_headers();
  public:
  const ::protowire::BlockHeader& headers(int index) const;
  ::protowire::BlockHeader* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader >&
      headers() const;

  // @@protoc_insertion_point(class_scope:protowire.PruningPointsMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader > headers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class RequestPruningPointProofMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.RequestPruningPointProofMessage) */ {
 public:
  inline RequestPruningPointProofMessage() : RequestPruningPointProofMessage(nullptr) {}
  explicit constexpr RequestPruningPointProofMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestPruningPointProofMessage(const RequestPruningPointProofMessage& from);
  RequestPruningPointProofMessage(RequestPruningPointProofMessage&& from) noexcept
    : RequestPruningPointProofMessage() {
    *this = ::std::move(from);
  }

  inline RequestPruningPointProofMessage& operator=(const RequestPruningPointProofMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPruningPointProofMessage& operator=(RequestPruningPointProofMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestPruningPointProofMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestPruningPointProofMessage* internal_default_instance() {
    return reinterpret_cast<const RequestPruningPointProofMessage*>(
               &_RequestPruningPointProofMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(RequestPruningPointProofMessage& a, RequestPruningPointProofMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestPruningPointProofMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestPruningPointProofMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestPruningPointProofMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestPruningPointProofMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestPruningPointProofMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestPruningPointProofMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RequestPruningPointProofMessage";
  }
  protected:
  explicit RequestPruningPointProofMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.RequestPruningPointProofMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class PruningPointProofMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.PruningPointProofMessage) */ {
 public:
  inline PruningPointProofMessage() : PruningPointProofMessage(nullptr) {}
  ~PruningPointProofMessage() override;
  explicit constexpr PruningPointProofMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PruningPointProofMessage(const PruningPointProofMessage& from);
  PruningPointProofMessage(PruningPointProofMessage&& from) noexcept
    : PruningPointProofMessage() {
    *this = ::std::move(from);
  }

  inline PruningPointProofMessage& operator=(const PruningPointProofMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PruningPointProofMessage& operator=(PruningPointProofMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PruningPointProofMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PruningPointProofMessage* internal_default_instance() {
    return reinterpret_cast<const PruningPointProofMessage*>(
               &_PruningPointProofMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(PruningPointProofMessage& a, PruningPointProofMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PruningPointProofMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PruningPointProofMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PruningPointProofMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PruningPointProofMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PruningPointProofMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PruningPointProofMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PruningPointProofMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.PruningPointProofMessage";
  }
  protected:
  explicit PruningPointProofMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 1,
  };
  // repeated .protowire.PruningPointProofHeaderArray headers = 1;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::protowire::PruningPointProofHeaderArray* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::PruningPointProofHeaderArray >*
      mutable_headers();
  private:
  const ::protowire::PruningPointProofHeaderArray& _internal_headers(int index) const;
  ::protowire::PruningPointProofHeaderArray* _internal_add_headers();
  public:
  const ::protowire::PruningPointProofHeaderArray& headers(int index) const;
  ::protowire::PruningPointProofHeaderArray* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::PruningPointProofHeaderArray >&
      headers() const;

  // @@protoc_insertion_point(class_scope:protowire.PruningPointProofMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::PruningPointProofHeaderArray > headers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class PruningPointProofHeaderArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.PruningPointProofHeaderArray) */ {
 public:
  inline PruningPointProofHeaderArray() : PruningPointProofHeaderArray(nullptr) {}
  ~PruningPointProofHeaderArray() override;
  explicit constexpr PruningPointProofHeaderArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PruningPointProofHeaderArray(const PruningPointProofHeaderArray& from);
  PruningPointProofHeaderArray(PruningPointProofHeaderArray&& from) noexcept
    : PruningPointProofHeaderArray() {
    *this = ::std::move(from);
  }

  inline PruningPointProofHeaderArray& operator=(const PruningPointProofHeaderArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline PruningPointProofHeaderArray& operator=(PruningPointProofHeaderArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PruningPointProofHeaderArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const PruningPointProofHeaderArray* internal_default_instance() {
    return reinterpret_cast<const PruningPointProofHeaderArray*>(
               &_PruningPointProofHeaderArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(PruningPointProofHeaderArray& a, PruningPointProofHeaderArray& b) {
    a.Swap(&b);
  }
  inline void Swap(PruningPointProofHeaderArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PruningPointProofHeaderArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PruningPointProofHeaderArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PruningPointProofHeaderArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PruningPointProofHeaderArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PruningPointProofHeaderArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PruningPointProofHeaderArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.PruningPointProofHeaderArray";
  }
  protected:
  explicit PruningPointProofHeaderArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 1,
  };
  // repeated .protowire.BlockHeader headers = 1;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::protowire::BlockHeader* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader >*
      mutable_headers();
  private:
  const ::protowire::BlockHeader& _internal_headers(int index) const;
  ::protowire::BlockHeader* _internal_add_headers();
  public:
  const ::protowire::BlockHeader& headers(int index) const;
  ::protowire::BlockHeader* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader >&
      headers() const;

  // @@protoc_insertion_point(class_scope:protowire.PruningPointProofHeaderArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader > headers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class ReadyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.ReadyMessage) */ {
 public:
  inline ReadyMessage() : ReadyMessage(nullptr) {}
  explicit constexpr ReadyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadyMessage(const ReadyMessage& from);
  ReadyMessage(ReadyMessage&& from) noexcept
    : ReadyMessage() {
    *this = ::std::move(from);
  }

  inline ReadyMessage& operator=(const ReadyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadyMessage& operator=(ReadyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadyMessage* internal_default_instance() {
    return reinterpret_cast<const ReadyMessage*>(
               &_ReadyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ReadyMessage& a, ReadyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReadyMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReadyMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.ReadyMessage";
  }
  protected:
  explicit ReadyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.ReadyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class BlockWithTrustedDataV4Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.BlockWithTrustedDataV4Message) */ {
 public:
  inline BlockWithTrustedDataV4Message() : BlockWithTrustedDataV4Message(nullptr) {}
  ~BlockWithTrustedDataV4Message() override;
  explicit constexpr BlockWithTrustedDataV4Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockWithTrustedDataV4Message(const BlockWithTrustedDataV4Message& from);
  BlockWithTrustedDataV4Message(BlockWithTrustedDataV4Message&& from) noexcept
    : BlockWithTrustedDataV4Message() {
    *this = ::std::move(from);
  }

  inline BlockWithTrustedDataV4Message& operator=(const BlockWithTrustedDataV4Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockWithTrustedDataV4Message& operator=(BlockWithTrustedDataV4Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockWithTrustedDataV4Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockWithTrustedDataV4Message* internal_default_instance() {
    return reinterpret_cast<const BlockWithTrustedDataV4Message*>(
               &_BlockWithTrustedDataV4Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(BlockWithTrustedDataV4Message& a, BlockWithTrustedDataV4Message& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockWithTrustedDataV4Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockWithTrustedDataV4Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockWithTrustedDataV4Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockWithTrustedDataV4Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockWithTrustedDataV4Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockWithTrustedDataV4Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockWithTrustedDataV4Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.BlockWithTrustedDataV4Message";
  }
  protected:
  explicit BlockWithTrustedDataV4Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDaaWindowIndicesFieldNumber = 2,
    kGhostdagDataIndicesFieldNumber = 3,
    kBlockFieldNumber = 1,
  };
  // repeated uint64 daaWindowIndices = 2;
  int daawindowindices_size() const;
  private:
  int _internal_daawindowindices_size() const;
  public:
  void clear_daawindowindices();
  private:
  uint64_t _internal_daawindowindices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_daawindowindices() const;
  void _internal_add_daawindowindices(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_daawindowindices();
  public:
  uint64_t daawindowindices(int index) const;
  void set_daawindowindices(int index, uint64_t value);
  void add_daawindowindices(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      daawindowindices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_daawindowindices();

  // repeated uint64 ghostdagDataIndices = 3;
  int ghostdagdataindices_size() const;
  private:
  int _internal_ghostdagdataindices_size() const;
  public:
  void clear_ghostdagdataindices();
  private:
  uint64_t _internal_ghostdagdataindices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_ghostdagdataindices() const;
  void _internal_add_ghostdagdataindices(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_ghostdagdataindices();
  public:
  uint64_t ghostdagdataindices(int index) const;
  void set_ghostdagdataindices(int index, uint64_t value);
  void add_ghostdagdataindices(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      ghostdagdataindices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_ghostdagdataindices();

  // .protowire.BlockMessage block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::protowire::BlockMessage& block() const;
  PROTOBUF_NODISCARD ::protowire::BlockMessage* release_block();
  ::protowire::BlockMessage* mutable_block();
  void set_allocated_block(::protowire::BlockMessage* block);
  private:
  const ::protowire::BlockMessage& _internal_block() const;
  ::protowire::BlockMessage* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::protowire::BlockMessage* block);
  ::protowire::BlockMessage* unsafe_arena_release_block();

  // @@protoc_insertion_point(class_scope:protowire.BlockWithTrustedDataV4Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > daawindowindices_;
  mutable std::atomic<int> _daawindowindices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > ghostdagdataindices_;
  mutable std::atomic<int> _ghostdagdataindices_cached_byte_size_;
  ::protowire::BlockMessage* block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// -------------------------------------------------------------------

class TrustedDataMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.TrustedDataMessage) */ {
 public:
  inline TrustedDataMessage() : TrustedDataMessage(nullptr) {}
  ~TrustedDataMessage() override;
  explicit constexpr TrustedDataMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustedDataMessage(const TrustedDataMessage& from);
  TrustedDataMessage(TrustedDataMessage&& from) noexcept
    : TrustedDataMessage() {
    *this = ::std::move(from);
  }

  inline TrustedDataMessage& operator=(const TrustedDataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustedDataMessage& operator=(TrustedDataMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustedDataMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustedDataMessage* internal_default_instance() {
    return reinterpret_cast<const TrustedDataMessage*>(
               &_TrustedDataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(TrustedDataMessage& a, TrustedDataMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustedDataMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustedDataMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustedDataMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustedDataMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustedDataMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrustedDataMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustedDataMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.TrustedDataMessage";
  }
  protected:
  explicit TrustedDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDaaWindowFieldNumber = 1,
    kGhostdagDataFieldNumber = 2,
  };
  // repeated .protowire.DaaBlockV4 daaWindow = 1;
  int daawindow_size() const;
  private:
  int _internal_daawindow_size() const;
  public:
  void clear_daawindow();
  ::protowire::DaaBlockV4* mutable_daawindow(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::DaaBlockV4 >*
      mutable_daawindow();
  private:
  const ::protowire::DaaBlockV4& _internal_daawindow(int index) const;
  ::protowire::DaaBlockV4* _internal_add_daawindow();
  public:
  const ::protowire::DaaBlockV4& daawindow(int index) const;
  ::protowire::DaaBlockV4* add_daawindow();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::DaaBlockV4 >&
      daawindow() const;

  // repeated .protowire.BlockGhostdagDataHashPair ghostdagData = 2;
  int ghostdagdata_size() const;
  private:
  int _internal_ghostdagdata_size() const;
  public:
  void clear_ghostdagdata();
  ::protowire::BlockGhostdagDataHashPair* mutable_ghostdagdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockGhostdagDataHashPair >*
      mutable_ghostdagdata();
  private:
  const ::protowire::BlockGhostdagDataHashPair& _internal_ghostdagdata(int index) const;
  ::protowire::BlockGhostdagDataHashPair* _internal_add_ghostdagdata();
  public:
  const ::protowire::BlockGhostdagDataHashPair& ghostdagdata(int index) const;
  ::protowire::BlockGhostdagDataHashPair* add_ghostdagdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockGhostdagDataHashPair >&
      ghostdagdata() const;

  // @@protoc_insertion_point(class_scope:protowire.TrustedDataMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::DaaBlockV4 > daawindow_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockGhostdagDataHashPair > ghostdagdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2p_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestAddressesMessage

// bool includeAllSubnetworks = 1;
inline void RequestAddressesMessage::clear_includeallsubnetworks() {
  includeallsubnetworks_ = false;
}
inline bool RequestAddressesMessage::_internal_includeallsubnetworks() const {
  return includeallsubnetworks_;
}
inline bool RequestAddressesMessage::includeallsubnetworks() const {
  // @@protoc_insertion_point(field_get:protowire.RequestAddressesMessage.includeAllSubnetworks)
  return _internal_includeallsubnetworks();
}
inline void RequestAddressesMessage::_internal_set_includeallsubnetworks(bool value) {
  
  includeallsubnetworks_ = value;
}
inline void RequestAddressesMessage::set_includeallsubnetworks(bool value) {
  _internal_set_includeallsubnetworks(value);
  // @@protoc_insertion_point(field_set:protowire.RequestAddressesMessage.includeAllSubnetworks)
}

// .protowire.SubnetworkId subnetworkId = 2;
inline bool RequestAddressesMessage::_internal_has_subnetworkid() const {
  return this != internal_default_instance() && subnetworkid_ != nullptr;
}
inline bool RequestAddressesMessage::has_subnetworkid() const {
  return _internal_has_subnetworkid();
}
inline void RequestAddressesMessage::clear_subnetworkid() {
  if (GetArenaForAllocation() == nullptr && subnetworkid_ != nullptr) {
    delete subnetworkid_;
  }
  subnetworkid_ = nullptr;
}
inline const ::protowire::SubnetworkId& RequestAddressesMessage::_internal_subnetworkid() const {
  const ::protowire::SubnetworkId* p = subnetworkid_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::SubnetworkId&>(
      ::protowire::_SubnetworkId_default_instance_);
}
inline const ::protowire::SubnetworkId& RequestAddressesMessage::subnetworkid() const {
  // @@protoc_insertion_point(field_get:protowire.RequestAddressesMessage.subnetworkId)
  return _internal_subnetworkid();
}
inline void RequestAddressesMessage::unsafe_arena_set_allocated_subnetworkid(
    ::protowire::SubnetworkId* subnetworkid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subnetworkid_);
  }
  subnetworkid_ = subnetworkid;
  if (subnetworkid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RequestAddressesMessage.subnetworkId)
}
inline ::protowire::SubnetworkId* RequestAddressesMessage::release_subnetworkid() {
  
  ::protowire::SubnetworkId* temp = subnetworkid_;
  subnetworkid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::SubnetworkId* RequestAddressesMessage::unsafe_arena_release_subnetworkid() {
  // @@protoc_insertion_point(field_release:protowire.RequestAddressesMessage.subnetworkId)
  
  ::protowire::SubnetworkId* temp = subnetworkid_;
  subnetworkid_ = nullptr;
  return temp;
}
inline ::protowire::SubnetworkId* RequestAddressesMessage::_internal_mutable_subnetworkid() {
  
  if (subnetworkid_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::SubnetworkId>(GetArenaForAllocation());
    subnetworkid_ = p;
  }
  return subnetworkid_;
}
inline ::protowire::SubnetworkId* RequestAddressesMessage::mutable_subnetworkid() {
  ::protowire::SubnetworkId* _msg = _internal_mutable_subnetworkid();
  // @@protoc_insertion_point(field_mutable:protowire.RequestAddressesMessage.subnetworkId)
  return _msg;
}
inline void RequestAddressesMessage::set_allocated_subnetworkid(::protowire::SubnetworkId* subnetworkid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete subnetworkid_;
  }
  if (subnetworkid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::SubnetworkId>::GetOwningArena(subnetworkid);
    if (message_arena != submessage_arena) {
      subnetworkid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subnetworkid, submessage_arena);
    }
    
  } else {
    
  }
  subnetworkid_ = subnetworkid;
  // @@protoc_insertion_point(field_set_allocated:protowire.RequestAddressesMessage.subnetworkId)
}

// -------------------------------------------------------------------

// AddressesMessage

// repeated .protowire.NetAddress addressList = 1;
inline int AddressesMessage::_internal_addresslist_size() const {
  return addresslist_.size();
}
inline int AddressesMessage::addresslist_size() const {
  return _internal_addresslist_size();
}
inline void AddressesMessage::clear_addresslist() {
  addresslist_.Clear();
}
inline ::protowire::NetAddress* AddressesMessage::mutable_addresslist(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.AddressesMessage.addressList)
  return addresslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::NetAddress >*
AddressesMessage::mutable_addresslist() {
  // @@protoc_insertion_point(field_mutable_list:protowire.AddressesMessage.addressList)
  return &addresslist_;
}
inline const ::protowire::NetAddress& AddressesMessage::_internal_addresslist(int index) const {
  return addresslist_.Get(index);
}
inline const ::protowire::NetAddress& AddressesMessage::addresslist(int index) const {
  // @@protoc_insertion_point(field_get:protowire.AddressesMessage.addressList)
  return _internal_addresslist(index);
}
inline ::protowire::NetAddress* AddressesMessage::_internal_add_addresslist() {
  return addresslist_.Add();
}
inline ::protowire::NetAddress* AddressesMessage::add_addresslist() {
  ::protowire::NetAddress* _add = _internal_add_addresslist();
  // @@protoc_insertion_point(field_add:protowire.AddressesMessage.addressList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::NetAddress >&
AddressesMessage::addresslist() const {
  // @@protoc_insertion_point(field_list:protowire.AddressesMessage.addressList)
  return addresslist_;
}

// -------------------------------------------------------------------

// NetAddress

// int64 timestamp = 1;
inline void NetAddress::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t NetAddress::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t NetAddress::timestamp() const {
  // @@protoc_insertion_point(field_get:protowire.NetAddress.timestamp)
  return _internal_timestamp();
}
inline void NetAddress::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void NetAddress::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protowire.NetAddress.timestamp)
}

// bytes ip = 3;
inline void NetAddress::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& NetAddress::ip() const {
  // @@protoc_insertion_point(field_get:protowire.NetAddress.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetAddress::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.NetAddress.ip)
}
inline std::string* NetAddress::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:protowire.NetAddress.ip)
  return _s;
}
inline const std::string& NetAddress::_internal_ip() const {
  return ip_.Get();
}
inline void NetAddress::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NetAddress::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NetAddress::release_ip() {
  // @@protoc_insertion_point(field_release:protowire.NetAddress.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NetAddress::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.NetAddress.ip)
}

// uint32 port = 4;
inline void NetAddress::clear_port() {
  port_ = 0u;
}
inline uint32_t NetAddress::_internal_port() const {
  return port_;
}
inline uint32_t NetAddress::port() const {
  // @@protoc_insertion_point(field_get:protowire.NetAddress.port)
  return _internal_port();
}
inline void NetAddress::_internal_set_port(uint32_t value) {
  
  port_ = value;
}
inline void NetAddress::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:protowire.NetAddress.port)
}

// -------------------------------------------------------------------

// SubnetworkId

// bytes bytes = 1;
inline void SubnetworkId::clear_bytes() {
  bytes_.ClearToEmpty();
}
inline const std::string& SubnetworkId::bytes() const {
  // @@protoc_insertion_point(field_get:protowire.SubnetworkId.bytes)
  return _internal_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubnetworkId::set_bytes(ArgT0&& arg0, ArgT... args) {
 
 bytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.SubnetworkId.bytes)
}
inline std::string* SubnetworkId::mutable_bytes() {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:protowire.SubnetworkId.bytes)
  return _s;
}
inline const std::string& SubnetworkId::_internal_bytes() const {
  return bytes_.Get();
}
inline void SubnetworkId::_internal_set_bytes(const std::string& value) {
  
  bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SubnetworkId::_internal_mutable_bytes() {
  
  return bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SubnetworkId::release_bytes() {
  // @@protoc_insertion_point(field_release:protowire.SubnetworkId.bytes)
  return bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SubnetworkId::set_allocated_bytes(std::string* bytes) {
  if (bytes != nullptr) {
    
  } else {
    
  }
  bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bytes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.SubnetworkId.bytes)
}

// -------------------------------------------------------------------

// TransactionMessage

// uint32 version = 1;
inline void TransactionMessage::clear_version() {
  version_ = 0u;
}
inline uint32_t TransactionMessage::_internal_version() const {
  return version_;
}
inline uint32_t TransactionMessage::version() const {
  // @@protoc_insertion_point(field_get:protowire.TransactionMessage.version)
  return _internal_version();
}
inline void TransactionMessage::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void TransactionMessage::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:protowire.TransactionMessage.version)
}

// repeated .protowire.TransactionInput inputs = 2;
inline int TransactionMessage::_internal_inputs_size() const {
  return inputs_.size();
}
inline int TransactionMessage::inputs_size() const {
  return _internal_inputs_size();
}
inline void TransactionMessage::clear_inputs() {
  inputs_.Clear();
}
inline ::protowire::TransactionInput* TransactionMessage::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.TransactionMessage.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionInput >*
TransactionMessage::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:protowire.TransactionMessage.inputs)
  return &inputs_;
}
inline const ::protowire::TransactionInput& TransactionMessage::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::protowire::TransactionInput& TransactionMessage::inputs(int index) const {
  // @@protoc_insertion_point(field_get:protowire.TransactionMessage.inputs)
  return _internal_inputs(index);
}
inline ::protowire::TransactionInput* TransactionMessage::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::protowire::TransactionInput* TransactionMessage::add_inputs() {
  ::protowire::TransactionInput* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:protowire.TransactionMessage.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionInput >&
TransactionMessage::inputs() const {
  // @@protoc_insertion_point(field_list:protowire.TransactionMessage.inputs)
  return inputs_;
}

// repeated .protowire.TransactionOutput outputs = 3;
inline int TransactionMessage::_internal_outputs_size() const {
  return outputs_.size();
}
inline int TransactionMessage::outputs_size() const {
  return _internal_outputs_size();
}
inline void TransactionMessage::clear_outputs() {
  outputs_.Clear();
}
inline ::protowire::TransactionOutput* TransactionMessage::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.TransactionMessage.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionOutput >*
TransactionMessage::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:protowire.TransactionMessage.outputs)
  return &outputs_;
}
inline const ::protowire::TransactionOutput& TransactionMessage::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::protowire::TransactionOutput& TransactionMessage::outputs(int index) const {
  // @@protoc_insertion_point(field_get:protowire.TransactionMessage.outputs)
  return _internal_outputs(index);
}
inline ::protowire::TransactionOutput* TransactionMessage::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::protowire::TransactionOutput* TransactionMessage::add_outputs() {
  ::protowire::TransactionOutput* _add = _internal_add_outputs();
  // @@protoc_insertion_point(field_add:protowire.TransactionMessage.outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionOutput >&
TransactionMessage::outputs() const {
  // @@protoc_insertion_point(field_list:protowire.TransactionMessage.outputs)
  return outputs_;
}

// uint64 lockTime = 4;
inline void TransactionMessage::clear_locktime() {
  locktime_ = uint64_t{0u};
}
inline uint64_t TransactionMessage::_internal_locktime() const {
  return locktime_;
}
inline uint64_t TransactionMessage::locktime() const {
  // @@protoc_insertion_point(field_get:protowire.TransactionMessage.lockTime)
  return _internal_locktime();
}
inline void TransactionMessage::_internal_set_locktime(uint64_t value) {
  
  locktime_ = value;
}
inline void TransactionMessage::set_locktime(uint64_t value) {
  _internal_set_locktime(value);
  // @@protoc_insertion_point(field_set:protowire.TransactionMessage.lockTime)
}

// .protowire.SubnetworkId subnetworkId = 5;
inline bool TransactionMessage::_internal_has_subnetworkid() const {
  return this != internal_default_instance() && subnetworkid_ != nullptr;
}
inline bool TransactionMessage::has_subnetworkid() const {
  return _internal_has_subnetworkid();
}
inline void TransactionMessage::clear_subnetworkid() {
  if (GetArenaForAllocation() == nullptr && subnetworkid_ != nullptr) {
    delete subnetworkid_;
  }
  subnetworkid_ = nullptr;
}
inline const ::protowire::SubnetworkId& TransactionMessage::_internal_subnetworkid() const {
  const ::protowire::SubnetworkId* p = subnetworkid_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::SubnetworkId&>(
      ::protowire::_SubnetworkId_default_instance_);
}
inline const ::protowire::SubnetworkId& TransactionMessage::subnetworkid() const {
  // @@protoc_insertion_point(field_get:protowire.TransactionMessage.subnetworkId)
  return _internal_subnetworkid();
}
inline void TransactionMessage::unsafe_arena_set_allocated_subnetworkid(
    ::protowire::SubnetworkId* subnetworkid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subnetworkid_);
  }
  subnetworkid_ = subnetworkid;
  if (subnetworkid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.TransactionMessage.subnetworkId)
}
inline ::protowire::SubnetworkId* TransactionMessage::release_subnetworkid() {
  
  ::protowire::SubnetworkId* temp = subnetworkid_;
  subnetworkid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::SubnetworkId* TransactionMessage::unsafe_arena_release_subnetworkid() {
  // @@protoc_insertion_point(field_release:protowire.TransactionMessage.subnetworkId)
  
  ::protowire::SubnetworkId* temp = subnetworkid_;
  subnetworkid_ = nullptr;
  return temp;
}
inline ::protowire::SubnetworkId* TransactionMessage::_internal_mutable_subnetworkid() {
  
  if (subnetworkid_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::SubnetworkId>(GetArenaForAllocation());
    subnetworkid_ = p;
  }
  return subnetworkid_;
}
inline ::protowire::SubnetworkId* TransactionMessage::mutable_subnetworkid() {
  ::protowire::SubnetworkId* _msg = _internal_mutable_subnetworkid();
  // @@protoc_insertion_point(field_mutable:protowire.TransactionMessage.subnetworkId)
  return _msg;
}
inline void TransactionMessage::set_allocated_subnetworkid(::protowire::SubnetworkId* subnetworkid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete subnetworkid_;
  }
  if (subnetworkid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::SubnetworkId>::GetOwningArena(subnetworkid);
    if (message_arena != submessage_arena) {
      subnetworkid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subnetworkid, submessage_arena);
    }
    
  } else {
    
  }
  subnetworkid_ = subnetworkid;
  // @@protoc_insertion_point(field_set_allocated:protowire.TransactionMessage.subnetworkId)
}

// uint64 gas = 6;
inline void TransactionMessage::clear_gas() {
  gas_ = uint64_t{0u};
}
inline uint64_t TransactionMessage::_internal_gas() const {
  return gas_;
}
inline uint64_t TransactionMessage::gas() const {
  // @@protoc_insertion_point(field_get:protowire.TransactionMessage.gas)
  return _internal_gas();
}
inline void TransactionMessage::_internal_set_gas(uint64_t value) {
  
  gas_ = value;
}
inline void TransactionMessage::set_gas(uint64_t value) {
  _internal_set_gas(value);
  // @@protoc_insertion_point(field_set:protowire.TransactionMessage.gas)
}

// bytes payload = 8;
inline void TransactionMessage::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& TransactionMessage::payload() const {
  // @@protoc_insertion_point(field_get:protowire.TransactionMessage.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionMessage::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.TransactionMessage.payload)
}
inline std::string* TransactionMessage::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:protowire.TransactionMessage.payload)
  return _s;
}
inline const std::string& TransactionMessage::_internal_payload() const {
  return payload_.Get();
}
inline void TransactionMessage::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionMessage::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionMessage::release_payload() {
  // @@protoc_insertion_point(field_release:protowire.TransactionMessage.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.TransactionMessage.payload)
}

// -------------------------------------------------------------------

// TransactionInput

// .protowire.Outpoint previousOutpoint = 1;
inline bool TransactionInput::_internal_has_previousoutpoint() const {
  return this != internal_default_instance() && previousoutpoint_ != nullptr;
}
inline bool TransactionInput::has_previousoutpoint() const {
  return _internal_has_previousoutpoint();
}
inline void TransactionInput::clear_previousoutpoint() {
  if (GetArenaForAllocation() == nullptr && previousoutpoint_ != nullptr) {
    delete previousoutpoint_;
  }
  previousoutpoint_ = nullptr;
}
inline const ::protowire::Outpoint& TransactionInput::_internal_previousoutpoint() const {
  const ::protowire::Outpoint* p = previousoutpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Outpoint&>(
      ::protowire::_Outpoint_default_instance_);
}
inline const ::protowire::Outpoint& TransactionInput::previousoutpoint() const {
  // @@protoc_insertion_point(field_get:protowire.TransactionInput.previousOutpoint)
  return _internal_previousoutpoint();
}
inline void TransactionInput::unsafe_arena_set_allocated_previousoutpoint(
    ::protowire::Outpoint* previousoutpoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previousoutpoint_);
  }
  previousoutpoint_ = previousoutpoint;
  if (previousoutpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.TransactionInput.previousOutpoint)
}
inline ::protowire::Outpoint* TransactionInput::release_previousoutpoint() {
  
  ::protowire::Outpoint* temp = previousoutpoint_;
  previousoutpoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Outpoint* TransactionInput::unsafe_arena_release_previousoutpoint() {
  // @@protoc_insertion_point(field_release:protowire.TransactionInput.previousOutpoint)
  
  ::protowire::Outpoint* temp = previousoutpoint_;
  previousoutpoint_ = nullptr;
  return temp;
}
inline ::protowire::Outpoint* TransactionInput::_internal_mutable_previousoutpoint() {
  
  if (previousoutpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Outpoint>(GetArenaForAllocation());
    previousoutpoint_ = p;
  }
  return previousoutpoint_;
}
inline ::protowire::Outpoint* TransactionInput::mutable_previousoutpoint() {
  ::protowire::Outpoint* _msg = _internal_mutable_previousoutpoint();
  // @@protoc_insertion_point(field_mutable:protowire.TransactionInput.previousOutpoint)
  return _msg;
}
inline void TransactionInput::set_allocated_previousoutpoint(::protowire::Outpoint* previousoutpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete previousoutpoint_;
  }
  if (previousoutpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Outpoint>::GetOwningArena(previousoutpoint);
    if (message_arena != submessage_arena) {
      previousoutpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previousoutpoint, submessage_arena);
    }
    
  } else {
    
  }
  previousoutpoint_ = previousoutpoint;
  // @@protoc_insertion_point(field_set_allocated:protowire.TransactionInput.previousOutpoint)
}

// bytes signatureScript = 2;
inline void TransactionInput::clear_signaturescript() {
  signaturescript_.ClearToEmpty();
}
inline const std::string& TransactionInput::signaturescript() const {
  // @@protoc_insertion_point(field_get:protowire.TransactionInput.signatureScript)
  return _internal_signaturescript();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionInput::set_signaturescript(ArgT0&& arg0, ArgT... args) {
 
 signaturescript_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.TransactionInput.signatureScript)
}
inline std::string* TransactionInput::mutable_signaturescript() {
  std::string* _s = _internal_mutable_signaturescript();
  // @@protoc_insertion_point(field_mutable:protowire.TransactionInput.signatureScript)
  return _s;
}
inline const std::string& TransactionInput::_internal_signaturescript() const {
  return signaturescript_.Get();
}
inline void TransactionInput::_internal_set_signaturescript(const std::string& value) {
  
  signaturescript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionInput::_internal_mutable_signaturescript() {
  
  return signaturescript_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionInput::release_signaturescript() {
  // @@protoc_insertion_point(field_release:protowire.TransactionInput.signatureScript)
  return signaturescript_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionInput::set_allocated_signaturescript(std::string* signaturescript) {
  if (signaturescript != nullptr) {
    
  } else {
    
  }
  signaturescript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signaturescript,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signaturescript_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signaturescript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.TransactionInput.signatureScript)
}

// uint64 sequence = 3;
inline void TransactionInput::clear_sequence() {
  sequence_ = uint64_t{0u};
}
inline uint64_t TransactionInput::_internal_sequence() const {
  return sequence_;
}
inline uint64_t TransactionInput::sequence() const {
  // @@protoc_insertion_point(field_get:protowire.TransactionInput.sequence)
  return _internal_sequence();
}
inline void TransactionInput::_internal_set_sequence(uint64_t value) {
  
  sequence_ = value;
}
inline void TransactionInput::set_sequence(uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:protowire.TransactionInput.sequence)
}

// uint32 sigOpCount = 4;
inline void TransactionInput::clear_sigopcount() {
  sigopcount_ = 0u;
}
inline uint32_t TransactionInput::_internal_sigopcount() const {
  return sigopcount_;
}
inline uint32_t TransactionInput::sigopcount() const {
  // @@protoc_insertion_point(field_get:protowire.TransactionInput.sigOpCount)
  return _internal_sigopcount();
}
inline void TransactionInput::_internal_set_sigopcount(uint32_t value) {
  
  sigopcount_ = value;
}
inline void TransactionInput::set_sigopcount(uint32_t value) {
  _internal_set_sigopcount(value);
  // @@protoc_insertion_point(field_set:protowire.TransactionInput.sigOpCount)
}

// -------------------------------------------------------------------

// Outpoint

// .protowire.TransactionId transactionId = 1;
inline bool Outpoint::_internal_has_transactionid() const {
  return this != internal_default_instance() && transactionid_ != nullptr;
}
inline bool Outpoint::has_transactionid() const {
  return _internal_has_transactionid();
}
inline void Outpoint::clear_transactionid() {
  if (GetArenaForAllocation() == nullptr && transactionid_ != nullptr) {
    delete transactionid_;
  }
  transactionid_ = nullptr;
}
inline const ::protowire::TransactionId& Outpoint::_internal_transactionid() const {
  const ::protowire::TransactionId* p = transactionid_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::TransactionId&>(
      ::protowire::_TransactionId_default_instance_);
}
inline const ::protowire::TransactionId& Outpoint::transactionid() const {
  // @@protoc_insertion_point(field_get:protowire.Outpoint.transactionId)
  return _internal_transactionid();
}
inline void Outpoint::unsafe_arena_set_allocated_transactionid(
    ::protowire::TransactionId* transactionid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactionid_);
  }
  transactionid_ = transactionid;
  if (transactionid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.Outpoint.transactionId)
}
inline ::protowire::TransactionId* Outpoint::release_transactionid() {
  
  ::protowire::TransactionId* temp = transactionid_;
  transactionid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::TransactionId* Outpoint::unsafe_arena_release_transactionid() {
  // @@protoc_insertion_point(field_release:protowire.Outpoint.transactionId)
  
  ::protowire::TransactionId* temp = transactionid_;
  transactionid_ = nullptr;
  return temp;
}
inline ::protowire::TransactionId* Outpoint::_internal_mutable_transactionid() {
  
  if (transactionid_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::TransactionId>(GetArenaForAllocation());
    transactionid_ = p;
  }
  return transactionid_;
}
inline ::protowire::TransactionId* Outpoint::mutable_transactionid() {
  ::protowire::TransactionId* _msg = _internal_mutable_transactionid();
  // @@protoc_insertion_point(field_mutable:protowire.Outpoint.transactionId)
  return _msg;
}
inline void Outpoint::set_allocated_transactionid(::protowire::TransactionId* transactionid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transactionid_;
  }
  if (transactionid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::TransactionId>::GetOwningArena(transactionid);
    if (message_arena != submessage_arena) {
      transactionid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactionid, submessage_arena);
    }
    
  } else {
    
  }
  transactionid_ = transactionid;
  // @@protoc_insertion_point(field_set_allocated:protowire.Outpoint.transactionId)
}

// uint32 index = 2;
inline void Outpoint::clear_index() {
  index_ = 0u;
}
inline uint32_t Outpoint::_internal_index() const {
  return index_;
}
inline uint32_t Outpoint::index() const {
  // @@protoc_insertion_point(field_get:protowire.Outpoint.index)
  return _internal_index();
}
inline void Outpoint::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void Outpoint::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:protowire.Outpoint.index)
}

// -------------------------------------------------------------------

// TransactionId

// bytes bytes = 1;
inline void TransactionId::clear_bytes() {
  bytes_.ClearToEmpty();
}
inline const std::string& TransactionId::bytes() const {
  // @@protoc_insertion_point(field_get:protowire.TransactionId.bytes)
  return _internal_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionId::set_bytes(ArgT0&& arg0, ArgT... args) {
 
 bytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.TransactionId.bytes)
}
inline std::string* TransactionId::mutable_bytes() {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:protowire.TransactionId.bytes)
  return _s;
}
inline const std::string& TransactionId::_internal_bytes() const {
  return bytes_.Get();
}
inline void TransactionId::_internal_set_bytes(const std::string& value) {
  
  bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionId::_internal_mutable_bytes() {
  
  return bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionId::release_bytes() {
  // @@protoc_insertion_point(field_release:protowire.TransactionId.bytes)
  return bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionId::set_allocated_bytes(std::string* bytes) {
  if (bytes != nullptr) {
    
  } else {
    
  }
  bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bytes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.TransactionId.bytes)
}

// -------------------------------------------------------------------

// ScriptPublicKey

// bytes script = 1;
inline void ScriptPublicKey::clear_script() {
  script_.ClearToEmpty();
}
inline const std::string& ScriptPublicKey::script() const {
  // @@protoc_insertion_point(field_get:protowire.ScriptPublicKey.script)
  return _internal_script();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScriptPublicKey::set_script(ArgT0&& arg0, ArgT... args) {
 
 script_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.ScriptPublicKey.script)
}
inline std::string* ScriptPublicKey::mutable_script() {
  std::string* _s = _internal_mutable_script();
  // @@protoc_insertion_point(field_mutable:protowire.ScriptPublicKey.script)
  return _s;
}
inline const std::string& ScriptPublicKey::_internal_script() const {
  return script_.Get();
}
inline void ScriptPublicKey::_internal_set_script(const std::string& value) {
  
  script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ScriptPublicKey::_internal_mutable_script() {
  
  return script_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ScriptPublicKey::release_script() {
  // @@protoc_insertion_point(field_release:protowire.ScriptPublicKey.script)
  return script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ScriptPublicKey::set_allocated_script(std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (script_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.ScriptPublicKey.script)
}

// uint32 version = 2;
inline void ScriptPublicKey::clear_version() {
  version_ = 0u;
}
inline uint32_t ScriptPublicKey::_internal_version() const {
  return version_;
}
inline uint32_t ScriptPublicKey::version() const {
  // @@protoc_insertion_point(field_get:protowire.ScriptPublicKey.version)
  return _internal_version();
}
inline void ScriptPublicKey::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void ScriptPublicKey::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:protowire.ScriptPublicKey.version)
}

// -------------------------------------------------------------------

// TransactionOutput

// uint64 value = 1;
inline void TransactionOutput::clear_value() {
  value_ = uint64_t{0u};
}
inline uint64_t TransactionOutput::_internal_value() const {
  return value_;
}
inline uint64_t TransactionOutput::value() const {
  // @@protoc_insertion_point(field_get:protowire.TransactionOutput.value)
  return _internal_value();
}
inline void TransactionOutput::_internal_set_value(uint64_t value) {
  
  value_ = value;
}
inline void TransactionOutput::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:protowire.TransactionOutput.value)
}

// .protowire.ScriptPublicKey scriptPublicKey = 2;
inline bool TransactionOutput::_internal_has_scriptpublickey() const {
  return this != internal_default_instance() && scriptpublickey_ != nullptr;
}
inline bool TransactionOutput::has_scriptpublickey() const {
  return _internal_has_scriptpublickey();
}
inline void TransactionOutput::clear_scriptpublickey() {
  if (GetArenaForAllocation() == nullptr && scriptpublickey_ != nullptr) {
    delete scriptpublickey_;
  }
  scriptpublickey_ = nullptr;
}
inline const ::protowire::ScriptPublicKey& TransactionOutput::_internal_scriptpublickey() const {
  const ::protowire::ScriptPublicKey* p = scriptpublickey_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::ScriptPublicKey&>(
      ::protowire::_ScriptPublicKey_default_instance_);
}
inline const ::protowire::ScriptPublicKey& TransactionOutput::scriptpublickey() const {
  // @@protoc_insertion_point(field_get:protowire.TransactionOutput.scriptPublicKey)
  return _internal_scriptpublickey();
}
inline void TransactionOutput::unsafe_arena_set_allocated_scriptpublickey(
    ::protowire::ScriptPublicKey* scriptpublickey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scriptpublickey_);
  }
  scriptpublickey_ = scriptpublickey;
  if (scriptpublickey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.TransactionOutput.scriptPublicKey)
}
inline ::protowire::ScriptPublicKey* TransactionOutput::release_scriptpublickey() {
  
  ::protowire::ScriptPublicKey* temp = scriptpublickey_;
  scriptpublickey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::ScriptPublicKey* TransactionOutput::unsafe_arena_release_scriptpublickey() {
  // @@protoc_insertion_point(field_release:protowire.TransactionOutput.scriptPublicKey)
  
  ::protowire::ScriptPublicKey* temp = scriptpublickey_;
  scriptpublickey_ = nullptr;
  return temp;
}
inline ::protowire::ScriptPublicKey* TransactionOutput::_internal_mutable_scriptpublickey() {
  
  if (scriptpublickey_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::ScriptPublicKey>(GetArenaForAllocation());
    scriptpublickey_ = p;
  }
  return scriptpublickey_;
}
inline ::protowire::ScriptPublicKey* TransactionOutput::mutable_scriptpublickey() {
  ::protowire::ScriptPublicKey* _msg = _internal_mutable_scriptpublickey();
  // @@protoc_insertion_point(field_mutable:protowire.TransactionOutput.scriptPublicKey)
  return _msg;
}
inline void TransactionOutput::set_allocated_scriptpublickey(::protowire::ScriptPublicKey* scriptpublickey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scriptpublickey_;
  }
  if (scriptpublickey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::ScriptPublicKey>::GetOwningArena(scriptpublickey);
    if (message_arena != submessage_arena) {
      scriptpublickey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptpublickey, submessage_arena);
    }
    
  } else {
    
  }
  scriptpublickey_ = scriptpublickey;
  // @@protoc_insertion_point(field_set_allocated:protowire.TransactionOutput.scriptPublicKey)
}

// -------------------------------------------------------------------

// BlockMessage

// .protowire.BlockHeader header = 1;
inline bool BlockMessage::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool BlockMessage::has_header() const {
  return _internal_has_header();
}
inline void BlockMessage::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protowire::BlockHeader& BlockMessage::_internal_header() const {
  const ::protowire::BlockHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::BlockHeader&>(
      ::protowire::_BlockHeader_default_instance_);
}
inline const ::protowire::BlockHeader& BlockMessage::header() const {
  // @@protoc_insertion_point(field_get:protowire.BlockMessage.header)
  return _internal_header();
}
inline void BlockMessage::unsafe_arena_set_allocated_header(
    ::protowire::BlockHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.BlockMessage.header)
}
inline ::protowire::BlockHeader* BlockMessage::release_header() {
  
  ::protowire::BlockHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::BlockHeader* BlockMessage::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:protowire.BlockMessage.header)
  
  ::protowire::BlockHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protowire::BlockHeader* BlockMessage::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::BlockHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::protowire::BlockHeader* BlockMessage::mutable_header() {
  ::protowire::BlockHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:protowire.BlockMessage.header)
  return _msg;
}
inline void BlockMessage::set_allocated_header(::protowire::BlockHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::BlockHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protowire.BlockMessage.header)
}

// repeated .protowire.TransactionMessage transactions = 2;
inline int BlockMessage::_internal_transactions_size() const {
  return transactions_.size();
}
inline int BlockMessage::transactions_size() const {
  return _internal_transactions_size();
}
inline void BlockMessage::clear_transactions() {
  transactions_.Clear();
}
inline ::protowire::TransactionMessage* BlockMessage::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.BlockMessage.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionMessage >*
BlockMessage::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:protowire.BlockMessage.transactions)
  return &transactions_;
}
inline const ::protowire::TransactionMessage& BlockMessage::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::protowire::TransactionMessage& BlockMessage::transactions(int index) const {
  // @@protoc_insertion_point(field_get:protowire.BlockMessage.transactions)
  return _internal_transactions(index);
}
inline ::protowire::TransactionMessage* BlockMessage::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::protowire::TransactionMessage* BlockMessage::add_transactions() {
  ::protowire::TransactionMessage* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:protowire.BlockMessage.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionMessage >&
BlockMessage::transactions() const {
  // @@protoc_insertion_point(field_list:protowire.BlockMessage.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// BlockHeader

// uint32 version = 1;
inline void BlockHeader::clear_version() {
  version_ = 0u;
}
inline uint32_t BlockHeader::_internal_version() const {
  return version_;
}
inline uint32_t BlockHeader::version() const {
  // @@protoc_insertion_point(field_get:protowire.BlockHeader.version)
  return _internal_version();
}
inline void BlockHeader::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void BlockHeader::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:protowire.BlockHeader.version)
}

// repeated .protowire.BlockLevelParents parents = 12;
inline int BlockHeader::_internal_parents_size() const {
  return parents_.size();
}
inline int BlockHeader::parents_size() const {
  return _internal_parents_size();
}
inline void BlockHeader::clear_parents() {
  parents_.Clear();
}
inline ::protowire::BlockLevelParents* BlockHeader::mutable_parents(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.BlockHeader.parents)
  return parents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockLevelParents >*
BlockHeader::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:protowire.BlockHeader.parents)
  return &parents_;
}
inline const ::protowire::BlockLevelParents& BlockHeader::_internal_parents(int index) const {
  return parents_.Get(index);
}
inline const ::protowire::BlockLevelParents& BlockHeader::parents(int index) const {
  // @@protoc_insertion_point(field_get:protowire.BlockHeader.parents)
  return _internal_parents(index);
}
inline ::protowire::BlockLevelParents* BlockHeader::_internal_add_parents() {
  return parents_.Add();
}
inline ::protowire::BlockLevelParents* BlockHeader::add_parents() {
  ::protowire::BlockLevelParents* _add = _internal_add_parents();
  // @@protoc_insertion_point(field_add:protowire.BlockHeader.parents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockLevelParents >&
BlockHeader::parents() const {
  // @@protoc_insertion_point(field_list:protowire.BlockHeader.parents)
  return parents_;
}

// .protowire.Hash hashMerkleRoot = 3;
inline bool BlockHeader::_internal_has_hashmerkleroot() const {
  return this != internal_default_instance() && hashmerkleroot_ != nullptr;
}
inline bool BlockHeader::has_hashmerkleroot() const {
  return _internal_has_hashmerkleroot();
}
inline void BlockHeader::clear_hashmerkleroot() {
  if (GetArenaForAllocation() == nullptr && hashmerkleroot_ != nullptr) {
    delete hashmerkleroot_;
  }
  hashmerkleroot_ = nullptr;
}
inline const ::protowire::Hash& BlockHeader::_internal_hashmerkleroot() const {
  const ::protowire::Hash* p = hashmerkleroot_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& BlockHeader::hashmerkleroot() const {
  // @@protoc_insertion_point(field_get:protowire.BlockHeader.hashMerkleRoot)
  return _internal_hashmerkleroot();
}
inline void BlockHeader::unsafe_arena_set_allocated_hashmerkleroot(
    ::protowire::Hash* hashmerkleroot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hashmerkleroot_);
  }
  hashmerkleroot_ = hashmerkleroot;
  if (hashmerkleroot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.BlockHeader.hashMerkleRoot)
}
inline ::protowire::Hash* BlockHeader::release_hashmerkleroot() {
  
  ::protowire::Hash* temp = hashmerkleroot_;
  hashmerkleroot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* BlockHeader::unsafe_arena_release_hashmerkleroot() {
  // @@protoc_insertion_point(field_release:protowire.BlockHeader.hashMerkleRoot)
  
  ::protowire::Hash* temp = hashmerkleroot_;
  hashmerkleroot_ = nullptr;
  return temp;
}
inline ::protowire::Hash* BlockHeader::_internal_mutable_hashmerkleroot() {
  
  if (hashmerkleroot_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    hashmerkleroot_ = p;
  }
  return hashmerkleroot_;
}
inline ::protowire::Hash* BlockHeader::mutable_hashmerkleroot() {
  ::protowire::Hash* _msg = _internal_mutable_hashmerkleroot();
  // @@protoc_insertion_point(field_mutable:protowire.BlockHeader.hashMerkleRoot)
  return _msg;
}
inline void BlockHeader::set_allocated_hashmerkleroot(::protowire::Hash* hashmerkleroot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hashmerkleroot_;
  }
  if (hashmerkleroot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(hashmerkleroot);
    if (message_arena != submessage_arena) {
      hashmerkleroot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hashmerkleroot, submessage_arena);
    }
    
  } else {
    
  }
  hashmerkleroot_ = hashmerkleroot;
  // @@protoc_insertion_point(field_set_allocated:protowire.BlockHeader.hashMerkleRoot)
}

// .protowire.Hash acceptedIdMerkleRoot = 4;
inline bool BlockHeader::_internal_has_acceptedidmerkleroot() const {
  return this != internal_default_instance() && acceptedidmerkleroot_ != nullptr;
}
inline bool BlockHeader::has_acceptedidmerkleroot() const {
  return _internal_has_acceptedidmerkleroot();
}
inline void BlockHeader::clear_acceptedidmerkleroot() {
  if (GetArenaForAllocation() == nullptr && acceptedidmerkleroot_ != nullptr) {
    delete acceptedidmerkleroot_;
  }
  acceptedidmerkleroot_ = nullptr;
}
inline const ::protowire::Hash& BlockHeader::_internal_acceptedidmerkleroot() const {
  const ::protowire::Hash* p = acceptedidmerkleroot_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& BlockHeader::acceptedidmerkleroot() const {
  // @@protoc_insertion_point(field_get:protowire.BlockHeader.acceptedIdMerkleRoot)
  return _internal_acceptedidmerkleroot();
}
inline void BlockHeader::unsafe_arena_set_allocated_acceptedidmerkleroot(
    ::protowire::Hash* acceptedidmerkleroot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceptedidmerkleroot_);
  }
  acceptedidmerkleroot_ = acceptedidmerkleroot;
  if (acceptedidmerkleroot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.BlockHeader.acceptedIdMerkleRoot)
}
inline ::protowire::Hash* BlockHeader::release_acceptedidmerkleroot() {
  
  ::protowire::Hash* temp = acceptedidmerkleroot_;
  acceptedidmerkleroot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* BlockHeader::unsafe_arena_release_acceptedidmerkleroot() {
  // @@protoc_insertion_point(field_release:protowire.BlockHeader.acceptedIdMerkleRoot)
  
  ::protowire::Hash* temp = acceptedidmerkleroot_;
  acceptedidmerkleroot_ = nullptr;
  return temp;
}
inline ::protowire::Hash* BlockHeader::_internal_mutable_acceptedidmerkleroot() {
  
  if (acceptedidmerkleroot_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    acceptedidmerkleroot_ = p;
  }
  return acceptedidmerkleroot_;
}
inline ::protowire::Hash* BlockHeader::mutable_acceptedidmerkleroot() {
  ::protowire::Hash* _msg = _internal_mutable_acceptedidmerkleroot();
  // @@protoc_insertion_point(field_mutable:protowire.BlockHeader.acceptedIdMerkleRoot)
  return _msg;
}
inline void BlockHeader::set_allocated_acceptedidmerkleroot(::protowire::Hash* acceptedidmerkleroot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete acceptedidmerkleroot_;
  }
  if (acceptedidmerkleroot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(acceptedidmerkleroot);
    if (message_arena != submessage_arena) {
      acceptedidmerkleroot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceptedidmerkleroot, submessage_arena);
    }
    
  } else {
    
  }
  acceptedidmerkleroot_ = acceptedidmerkleroot;
  // @@protoc_insertion_point(field_set_allocated:protowire.BlockHeader.acceptedIdMerkleRoot)
}

// .protowire.Hash utxoCommitment = 5;
inline bool BlockHeader::_internal_has_utxocommitment() const {
  return this != internal_default_instance() && utxocommitment_ != nullptr;
}
inline bool BlockHeader::has_utxocommitment() const {
  return _internal_has_utxocommitment();
}
inline void BlockHeader::clear_utxocommitment() {
  if (GetArenaForAllocation() == nullptr && utxocommitment_ != nullptr) {
    delete utxocommitment_;
  }
  utxocommitment_ = nullptr;
}
inline const ::protowire::Hash& BlockHeader::_internal_utxocommitment() const {
  const ::protowire::Hash* p = utxocommitment_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& BlockHeader::utxocommitment() const {
  // @@protoc_insertion_point(field_get:protowire.BlockHeader.utxoCommitment)
  return _internal_utxocommitment();
}
inline void BlockHeader::unsafe_arena_set_allocated_utxocommitment(
    ::protowire::Hash* utxocommitment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utxocommitment_);
  }
  utxocommitment_ = utxocommitment;
  if (utxocommitment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.BlockHeader.utxoCommitment)
}
inline ::protowire::Hash* BlockHeader::release_utxocommitment() {
  
  ::protowire::Hash* temp = utxocommitment_;
  utxocommitment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* BlockHeader::unsafe_arena_release_utxocommitment() {
  // @@protoc_insertion_point(field_release:protowire.BlockHeader.utxoCommitment)
  
  ::protowire::Hash* temp = utxocommitment_;
  utxocommitment_ = nullptr;
  return temp;
}
inline ::protowire::Hash* BlockHeader::_internal_mutable_utxocommitment() {
  
  if (utxocommitment_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    utxocommitment_ = p;
  }
  return utxocommitment_;
}
inline ::protowire::Hash* BlockHeader::mutable_utxocommitment() {
  ::protowire::Hash* _msg = _internal_mutable_utxocommitment();
  // @@protoc_insertion_point(field_mutable:protowire.BlockHeader.utxoCommitment)
  return _msg;
}
inline void BlockHeader::set_allocated_utxocommitment(::protowire::Hash* utxocommitment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete utxocommitment_;
  }
  if (utxocommitment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(utxocommitment);
    if (message_arena != submessage_arena) {
      utxocommitment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utxocommitment, submessage_arena);
    }
    
  } else {
    
  }
  utxocommitment_ = utxocommitment;
  // @@protoc_insertion_point(field_set_allocated:protowire.BlockHeader.utxoCommitment)
}

// int64 timestamp = 6;
inline void BlockHeader::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t BlockHeader::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t BlockHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:protowire.BlockHeader.timestamp)
  return _internal_timestamp();
}
inline void BlockHeader::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void BlockHeader::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protowire.BlockHeader.timestamp)
}

// uint32 bits = 7;
inline void BlockHeader::clear_bits() {
  bits_ = 0u;
}
inline uint32_t BlockHeader::_internal_bits() const {
  return bits_;
}
inline uint32_t BlockHeader::bits() const {
  // @@protoc_insertion_point(field_get:protowire.BlockHeader.bits)
  return _internal_bits();
}
inline void BlockHeader::_internal_set_bits(uint32_t value) {
  
  bits_ = value;
}
inline void BlockHeader::set_bits(uint32_t value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:protowire.BlockHeader.bits)
}

// uint64 nonce = 8;
inline void BlockHeader::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline uint64_t BlockHeader::_internal_nonce() const {
  return nonce_;
}
inline uint64_t BlockHeader::nonce() const {
  // @@protoc_insertion_point(field_get:protowire.BlockHeader.nonce)
  return _internal_nonce();
}
inline void BlockHeader::_internal_set_nonce(uint64_t value) {
  
  nonce_ = value;
}
inline void BlockHeader::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:protowire.BlockHeader.nonce)
}

// uint64 daaScore = 9;
inline void BlockHeader::clear_daascore() {
  daascore_ = uint64_t{0u};
}
inline uint64_t BlockHeader::_internal_daascore() const {
  return daascore_;
}
inline uint64_t BlockHeader::daascore() const {
  // @@protoc_insertion_point(field_get:protowire.BlockHeader.daaScore)
  return _internal_daascore();
}
inline void BlockHeader::_internal_set_daascore(uint64_t value) {
  
  daascore_ = value;
}
inline void BlockHeader::set_daascore(uint64_t value) {
  _internal_set_daascore(value);
  // @@protoc_insertion_point(field_set:protowire.BlockHeader.daaScore)
}

// bytes blueWork = 10;
inline void BlockHeader::clear_bluework() {
  bluework_.ClearToEmpty();
}
inline const std::string& BlockHeader::bluework() const {
  // @@protoc_insertion_point(field_get:protowire.BlockHeader.blueWork)
  return _internal_bluework();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockHeader::set_bluework(ArgT0&& arg0, ArgT... args) {
 
 bluework_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.BlockHeader.blueWork)
}
inline std::string* BlockHeader::mutable_bluework() {
  std::string* _s = _internal_mutable_bluework();
  // @@protoc_insertion_point(field_mutable:protowire.BlockHeader.blueWork)
  return _s;
}
inline const std::string& BlockHeader::_internal_bluework() const {
  return bluework_.Get();
}
inline void BlockHeader::_internal_set_bluework(const std::string& value) {
  
  bluework_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockHeader::_internal_mutable_bluework() {
  
  return bluework_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockHeader::release_bluework() {
  // @@protoc_insertion_point(field_release:protowire.BlockHeader.blueWork)
  return bluework_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockHeader::set_allocated_bluework(std::string* bluework) {
  if (bluework != nullptr) {
    
  } else {
    
  }
  bluework_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bluework,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bluework_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bluework_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.BlockHeader.blueWork)
}

// .protowire.Hash pruningPoint = 14;
inline bool BlockHeader::_internal_has_pruningpoint() const {
  return this != internal_default_instance() && pruningpoint_ != nullptr;
}
inline bool BlockHeader::has_pruningpoint() const {
  return _internal_has_pruningpoint();
}
inline void BlockHeader::clear_pruningpoint() {
  if (GetArenaForAllocation() == nullptr && pruningpoint_ != nullptr) {
    delete pruningpoint_;
  }
  pruningpoint_ = nullptr;
}
inline const ::protowire::Hash& BlockHeader::_internal_pruningpoint() const {
  const ::protowire::Hash* p = pruningpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& BlockHeader::pruningpoint() const {
  // @@protoc_insertion_point(field_get:protowire.BlockHeader.pruningPoint)
  return _internal_pruningpoint();
}
inline void BlockHeader::unsafe_arena_set_allocated_pruningpoint(
    ::protowire::Hash* pruningpoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pruningpoint_);
  }
  pruningpoint_ = pruningpoint;
  if (pruningpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.BlockHeader.pruningPoint)
}
inline ::protowire::Hash* BlockHeader::release_pruningpoint() {
  
  ::protowire::Hash* temp = pruningpoint_;
  pruningpoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* BlockHeader::unsafe_arena_release_pruningpoint() {
  // @@protoc_insertion_point(field_release:protowire.BlockHeader.pruningPoint)
  
  ::protowire::Hash* temp = pruningpoint_;
  pruningpoint_ = nullptr;
  return temp;
}
inline ::protowire::Hash* BlockHeader::_internal_mutable_pruningpoint() {
  
  if (pruningpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    pruningpoint_ = p;
  }
  return pruningpoint_;
}
inline ::protowire::Hash* BlockHeader::mutable_pruningpoint() {
  ::protowire::Hash* _msg = _internal_mutable_pruningpoint();
  // @@protoc_insertion_point(field_mutable:protowire.BlockHeader.pruningPoint)
  return _msg;
}
inline void BlockHeader::set_allocated_pruningpoint(::protowire::Hash* pruningpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pruningpoint_;
  }
  if (pruningpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(pruningpoint);
    if (message_arena != submessage_arena) {
      pruningpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pruningpoint, submessage_arena);
    }
    
  } else {
    
  }
  pruningpoint_ = pruningpoint;
  // @@protoc_insertion_point(field_set_allocated:protowire.BlockHeader.pruningPoint)
}

// uint64 blueScore = 13;
inline void BlockHeader::clear_bluescore() {
  bluescore_ = uint64_t{0u};
}
inline uint64_t BlockHeader::_internal_bluescore() const {
  return bluescore_;
}
inline uint64_t BlockHeader::bluescore() const {
  // @@protoc_insertion_point(field_get:protowire.BlockHeader.blueScore)
  return _internal_bluescore();
}
inline void BlockHeader::_internal_set_bluescore(uint64_t value) {
  
  bluescore_ = value;
}
inline void BlockHeader::set_bluescore(uint64_t value) {
  _internal_set_bluescore(value);
  // @@protoc_insertion_point(field_set:protowire.BlockHeader.blueScore)
}

// -------------------------------------------------------------------

// BlockLevelParents

// repeated .protowire.Hash parentHashes = 1;
inline int BlockLevelParents::_internal_parenthashes_size() const {
  return parenthashes_.size();
}
inline int BlockLevelParents::parenthashes_size() const {
  return _internal_parenthashes_size();
}
inline void BlockLevelParents::clear_parenthashes() {
  parenthashes_.Clear();
}
inline ::protowire::Hash* BlockLevelParents::mutable_parenthashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.BlockLevelParents.parentHashes)
  return parenthashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
BlockLevelParents::mutable_parenthashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.BlockLevelParents.parentHashes)
  return &parenthashes_;
}
inline const ::protowire::Hash& BlockLevelParents::_internal_parenthashes(int index) const {
  return parenthashes_.Get(index);
}
inline const ::protowire::Hash& BlockLevelParents::parenthashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.BlockLevelParents.parentHashes)
  return _internal_parenthashes(index);
}
inline ::protowire::Hash* BlockLevelParents::_internal_add_parenthashes() {
  return parenthashes_.Add();
}
inline ::protowire::Hash* BlockLevelParents::add_parenthashes() {
  ::protowire::Hash* _add = _internal_add_parenthashes();
  // @@protoc_insertion_point(field_add:protowire.BlockLevelParents.parentHashes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
BlockLevelParents::parenthashes() const {
  // @@protoc_insertion_point(field_list:protowire.BlockLevelParents.parentHashes)
  return parenthashes_;
}

// -------------------------------------------------------------------

// Hash

// bytes bytes = 1;
inline void Hash::clear_bytes() {
  bytes_.ClearToEmpty();
}
inline const std::string& Hash::bytes() const {
  // @@protoc_insertion_point(field_get:protowire.Hash.bytes)
  return _internal_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Hash::set_bytes(ArgT0&& arg0, ArgT... args) {
 
 bytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.Hash.bytes)
}
inline std::string* Hash::mutable_bytes() {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:protowire.Hash.bytes)
  return _s;
}
inline const std::string& Hash::_internal_bytes() const {
  return bytes_.Get();
}
inline void Hash::_internal_set_bytes(const std::string& value) {
  
  bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Hash::_internal_mutable_bytes() {
  
  return bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Hash::release_bytes() {
  // @@protoc_insertion_point(field_release:protowire.Hash.bytes)
  return bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Hash::set_allocated_bytes(std::string* bytes) {
  if (bytes != nullptr) {
    
  } else {
    
  }
  bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bytes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.Hash.bytes)
}

// -------------------------------------------------------------------

// RequestBlockLocatorMessage

// .protowire.Hash highHash = 1;
inline bool RequestBlockLocatorMessage::_internal_has_highhash() const {
  return this != internal_default_instance() && highhash_ != nullptr;
}
inline bool RequestBlockLocatorMessage::has_highhash() const {
  return _internal_has_highhash();
}
inline void RequestBlockLocatorMessage::clear_highhash() {
  if (GetArenaForAllocation() == nullptr && highhash_ != nullptr) {
    delete highhash_;
  }
  highhash_ = nullptr;
}
inline const ::protowire::Hash& RequestBlockLocatorMessage::_internal_highhash() const {
  const ::protowire::Hash* p = highhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& RequestBlockLocatorMessage::highhash() const {
  // @@protoc_insertion_point(field_get:protowire.RequestBlockLocatorMessage.highHash)
  return _internal_highhash();
}
inline void RequestBlockLocatorMessage::unsafe_arena_set_allocated_highhash(
    ::protowire::Hash* highhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(highhash_);
  }
  highhash_ = highhash;
  if (highhash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RequestBlockLocatorMessage.highHash)
}
inline ::protowire::Hash* RequestBlockLocatorMessage::release_highhash() {
  
  ::protowire::Hash* temp = highhash_;
  highhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* RequestBlockLocatorMessage::unsafe_arena_release_highhash() {
  // @@protoc_insertion_point(field_release:protowire.RequestBlockLocatorMessage.highHash)
  
  ::protowire::Hash* temp = highhash_;
  highhash_ = nullptr;
  return temp;
}
inline ::protowire::Hash* RequestBlockLocatorMessage::_internal_mutable_highhash() {
  
  if (highhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    highhash_ = p;
  }
  return highhash_;
}
inline ::protowire::Hash* RequestBlockLocatorMessage::mutable_highhash() {
  ::protowire::Hash* _msg = _internal_mutable_highhash();
  // @@protoc_insertion_point(field_mutable:protowire.RequestBlockLocatorMessage.highHash)
  return _msg;
}
inline void RequestBlockLocatorMessage::set_allocated_highhash(::protowire::Hash* highhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete highhash_;
  }
  if (highhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(highhash);
    if (message_arena != submessage_arena) {
      highhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, highhash, submessage_arena);
    }
    
  } else {
    
  }
  highhash_ = highhash;
  // @@protoc_insertion_point(field_set_allocated:protowire.RequestBlockLocatorMessage.highHash)
}

// uint32 limit = 2;
inline void RequestBlockLocatorMessage::clear_limit() {
  limit_ = 0u;
}
inline uint32_t RequestBlockLocatorMessage::_internal_limit() const {
  return limit_;
}
inline uint32_t RequestBlockLocatorMessage::limit() const {
  // @@protoc_insertion_point(field_get:protowire.RequestBlockLocatorMessage.limit)
  return _internal_limit();
}
inline void RequestBlockLocatorMessage::_internal_set_limit(uint32_t value) {
  
  limit_ = value;
}
inline void RequestBlockLocatorMessage::set_limit(uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:protowire.RequestBlockLocatorMessage.limit)
}

// -------------------------------------------------------------------

// BlockLocatorMessage

// repeated .protowire.Hash hashes = 1;
inline int BlockLocatorMessage::_internal_hashes_size() const {
  return hashes_.size();
}
inline int BlockLocatorMessage::hashes_size() const {
  return _internal_hashes_size();
}
inline void BlockLocatorMessage::clear_hashes() {
  hashes_.Clear();
}
inline ::protowire::Hash* BlockLocatorMessage::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.BlockLocatorMessage.hashes)
  return hashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
BlockLocatorMessage::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.BlockLocatorMessage.hashes)
  return &hashes_;
}
inline const ::protowire::Hash& BlockLocatorMessage::_internal_hashes(int index) const {
  return hashes_.Get(index);
}
inline const ::protowire::Hash& BlockLocatorMessage::hashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.BlockLocatorMessage.hashes)
  return _internal_hashes(index);
}
inline ::protowire::Hash* BlockLocatorMessage::_internal_add_hashes() {
  return hashes_.Add();
}
inline ::protowire::Hash* BlockLocatorMessage::add_hashes() {
  ::protowire::Hash* _add = _internal_add_hashes();
  // @@protoc_insertion_point(field_add:protowire.BlockLocatorMessage.hashes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
BlockLocatorMessage::hashes() const {
  // @@protoc_insertion_point(field_list:protowire.BlockLocatorMessage.hashes)
  return hashes_;
}

// -------------------------------------------------------------------

// RequestHeadersMessage

// .protowire.Hash lowHash = 1;
inline bool RequestHeadersMessage::_internal_has_lowhash() const {
  return this != internal_default_instance() && lowhash_ != nullptr;
}
inline bool RequestHeadersMessage::has_lowhash() const {
  return _internal_has_lowhash();
}
inline void RequestHeadersMessage::clear_lowhash() {
  if (GetArenaForAllocation() == nullptr && lowhash_ != nullptr) {
    delete lowhash_;
  }
  lowhash_ = nullptr;
}
inline const ::protowire::Hash& RequestHeadersMessage::_internal_lowhash() const {
  const ::protowire::Hash* p = lowhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& RequestHeadersMessage::lowhash() const {
  // @@protoc_insertion_point(field_get:protowire.RequestHeadersMessage.lowHash)
  return _internal_lowhash();
}
inline void RequestHeadersMessage::unsafe_arena_set_allocated_lowhash(
    ::protowire::Hash* lowhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lowhash_);
  }
  lowhash_ = lowhash;
  if (lowhash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RequestHeadersMessage.lowHash)
}
inline ::protowire::Hash* RequestHeadersMessage::release_lowhash() {
  
  ::protowire::Hash* temp = lowhash_;
  lowhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* RequestHeadersMessage::unsafe_arena_release_lowhash() {
  // @@protoc_insertion_point(field_release:protowire.RequestHeadersMessage.lowHash)
  
  ::protowire::Hash* temp = lowhash_;
  lowhash_ = nullptr;
  return temp;
}
inline ::protowire::Hash* RequestHeadersMessage::_internal_mutable_lowhash() {
  
  if (lowhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    lowhash_ = p;
  }
  return lowhash_;
}
inline ::protowire::Hash* RequestHeadersMessage::mutable_lowhash() {
  ::protowire::Hash* _msg = _internal_mutable_lowhash();
  // @@protoc_insertion_point(field_mutable:protowire.RequestHeadersMessage.lowHash)
  return _msg;
}
inline void RequestHeadersMessage::set_allocated_lowhash(::protowire::Hash* lowhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lowhash_;
  }
  if (lowhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(lowhash);
    if (message_arena != submessage_arena) {
      lowhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lowhash, submessage_arena);
    }
    
  } else {
    
  }
  lowhash_ = lowhash;
  // @@protoc_insertion_point(field_set_allocated:protowire.RequestHeadersMessage.lowHash)
}

// .protowire.Hash highHash = 2;
inline bool RequestHeadersMessage::_internal_has_highhash() const {
  return this != internal_default_instance() && highhash_ != nullptr;
}
inline bool RequestHeadersMessage::has_highhash() const {
  return _internal_has_highhash();
}
inline void RequestHeadersMessage::clear_highhash() {
  if (GetArenaForAllocation() == nullptr && highhash_ != nullptr) {
    delete highhash_;
  }
  highhash_ = nullptr;
}
inline const ::protowire::Hash& RequestHeadersMessage::_internal_highhash() const {
  const ::protowire::Hash* p = highhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& RequestHeadersMessage::highhash() const {
  // @@protoc_insertion_point(field_get:protowire.RequestHeadersMessage.highHash)
  return _internal_highhash();
}
inline void RequestHeadersMessage::unsafe_arena_set_allocated_highhash(
    ::protowire::Hash* highhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(highhash_);
  }
  highhash_ = highhash;
  if (highhash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RequestHeadersMessage.highHash)
}
inline ::protowire::Hash* RequestHeadersMessage::release_highhash() {
  
  ::protowire::Hash* temp = highhash_;
  highhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* RequestHeadersMessage::unsafe_arena_release_highhash() {
  // @@protoc_insertion_point(field_release:protowire.RequestHeadersMessage.highHash)
  
  ::protowire::Hash* temp = highhash_;
  highhash_ = nullptr;
  return temp;
}
inline ::protowire::Hash* RequestHeadersMessage::_internal_mutable_highhash() {
  
  if (highhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    highhash_ = p;
  }
  return highhash_;
}
inline ::protowire::Hash* RequestHeadersMessage::mutable_highhash() {
  ::protowire::Hash* _msg = _internal_mutable_highhash();
  // @@protoc_insertion_point(field_mutable:protowire.RequestHeadersMessage.highHash)
  return _msg;
}
inline void RequestHeadersMessage::set_allocated_highhash(::protowire::Hash* highhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete highhash_;
  }
  if (highhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(highhash);
    if (message_arena != submessage_arena) {
      highhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, highhash, submessage_arena);
    }
    
  } else {
    
  }
  highhash_ = highhash;
  // @@protoc_insertion_point(field_set_allocated:protowire.RequestHeadersMessage.highHash)
}

// -------------------------------------------------------------------

// RequestNextHeadersMessage

// -------------------------------------------------------------------

// DoneHeadersMessage

// -------------------------------------------------------------------

// RequestRelayBlocksMessage

// repeated .protowire.Hash hashes = 1;
inline int RequestRelayBlocksMessage::_internal_hashes_size() const {
  return hashes_.size();
}
inline int RequestRelayBlocksMessage::hashes_size() const {
  return _internal_hashes_size();
}
inline void RequestRelayBlocksMessage::clear_hashes() {
  hashes_.Clear();
}
inline ::protowire::Hash* RequestRelayBlocksMessage::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.RequestRelayBlocksMessage.hashes)
  return hashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
RequestRelayBlocksMessage::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.RequestRelayBlocksMessage.hashes)
  return &hashes_;
}
inline const ::protowire::Hash& RequestRelayBlocksMessage::_internal_hashes(int index) const {
  return hashes_.Get(index);
}
inline const ::protowire::Hash& RequestRelayBlocksMessage::hashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.RequestRelayBlocksMessage.hashes)
  return _internal_hashes(index);
}
inline ::protowire::Hash* RequestRelayBlocksMessage::_internal_add_hashes() {
  return hashes_.Add();
}
inline ::protowire::Hash* RequestRelayBlocksMessage::add_hashes() {
  ::protowire::Hash* _add = _internal_add_hashes();
  // @@protoc_insertion_point(field_add:protowire.RequestRelayBlocksMessage.hashes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
RequestRelayBlocksMessage::hashes() const {
  // @@protoc_insertion_point(field_list:protowire.RequestRelayBlocksMessage.hashes)
  return hashes_;
}

// -------------------------------------------------------------------

// RequestTransactionsMessage

// repeated .protowire.TransactionId ids = 1;
inline int RequestTransactionsMessage::_internal_ids_size() const {
  return ids_.size();
}
inline int RequestTransactionsMessage::ids_size() const {
  return _internal_ids_size();
}
inline void RequestTransactionsMessage::clear_ids() {
  ids_.Clear();
}
inline ::protowire::TransactionId* RequestTransactionsMessage::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.RequestTransactionsMessage.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionId >*
RequestTransactionsMessage::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:protowire.RequestTransactionsMessage.ids)
  return &ids_;
}
inline const ::protowire::TransactionId& RequestTransactionsMessage::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const ::protowire::TransactionId& RequestTransactionsMessage::ids(int index) const {
  // @@protoc_insertion_point(field_get:protowire.RequestTransactionsMessage.ids)
  return _internal_ids(index);
}
inline ::protowire::TransactionId* RequestTransactionsMessage::_internal_add_ids() {
  return ids_.Add();
}
inline ::protowire::TransactionId* RequestTransactionsMessage::add_ids() {
  ::protowire::TransactionId* _add = _internal_add_ids();
  // @@protoc_insertion_point(field_add:protowire.RequestTransactionsMessage.ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionId >&
RequestTransactionsMessage::ids() const {
  // @@protoc_insertion_point(field_list:protowire.RequestTransactionsMessage.ids)
  return ids_;
}

// -------------------------------------------------------------------

// TransactionNotFoundMessage

// .protowire.TransactionId id = 1;
inline bool TransactionNotFoundMessage::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool TransactionNotFoundMessage::has_id() const {
  return _internal_has_id();
}
inline void TransactionNotFoundMessage::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::protowire::TransactionId& TransactionNotFoundMessage::_internal_id() const {
  const ::protowire::TransactionId* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::TransactionId&>(
      ::protowire::_TransactionId_default_instance_);
}
inline const ::protowire::TransactionId& TransactionNotFoundMessage::id() const {
  // @@protoc_insertion_point(field_get:protowire.TransactionNotFoundMessage.id)
  return _internal_id();
}
inline void TransactionNotFoundMessage::unsafe_arena_set_allocated_id(
    ::protowire::TransactionId* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.TransactionNotFoundMessage.id)
}
inline ::protowire::TransactionId* TransactionNotFoundMessage::release_id() {
  
  ::protowire::TransactionId* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::TransactionId* TransactionNotFoundMessage::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:protowire.TransactionNotFoundMessage.id)
  
  ::protowire::TransactionId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::protowire::TransactionId* TransactionNotFoundMessage::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::TransactionId>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::protowire::TransactionId* TransactionNotFoundMessage::mutable_id() {
  ::protowire::TransactionId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:protowire.TransactionNotFoundMessage.id)
  return _msg;
}
inline void TransactionNotFoundMessage::set_allocated_id(::protowire::TransactionId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::TransactionId>::GetOwningArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:protowire.TransactionNotFoundMessage.id)
}

// -------------------------------------------------------------------

// InvRelayBlockMessage

// .protowire.Hash hash = 1;
inline bool InvRelayBlockMessage::_internal_has_hash() const {
  return this != internal_default_instance() && hash_ != nullptr;
}
inline bool InvRelayBlockMessage::has_hash() const {
  return _internal_has_hash();
}
inline void InvRelayBlockMessage::clear_hash() {
  if (GetArenaForAllocation() == nullptr && hash_ != nullptr) {
    delete hash_;
  }
  hash_ = nullptr;
}
inline const ::protowire::Hash& InvRelayBlockMessage::_internal_hash() const {
  const ::protowire::Hash* p = hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& InvRelayBlockMessage::hash() const {
  // @@protoc_insertion_point(field_get:protowire.InvRelayBlockMessage.hash)
  return _internal_hash();
}
inline void InvRelayBlockMessage::unsafe_arena_set_allocated_hash(
    ::protowire::Hash* hash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash_);
  }
  hash_ = hash;
  if (hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.InvRelayBlockMessage.hash)
}
inline ::protowire::Hash* InvRelayBlockMessage::release_hash() {
  
  ::protowire::Hash* temp = hash_;
  hash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* InvRelayBlockMessage::unsafe_arena_release_hash() {
  // @@protoc_insertion_point(field_release:protowire.InvRelayBlockMessage.hash)
  
  ::protowire::Hash* temp = hash_;
  hash_ = nullptr;
  return temp;
}
inline ::protowire::Hash* InvRelayBlockMessage::_internal_mutable_hash() {
  
  if (hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    hash_ = p;
  }
  return hash_;
}
inline ::protowire::Hash* InvRelayBlockMessage::mutable_hash() {
  ::protowire::Hash* _msg = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:protowire.InvRelayBlockMessage.hash)
  return _msg;
}
inline void InvRelayBlockMessage::set_allocated_hash(::protowire::Hash* hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hash_;
  }
  if (hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(hash);
    if (message_arena != submessage_arena) {
      hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hash, submessage_arena);
    }
    
  } else {
    
  }
  hash_ = hash;
  // @@protoc_insertion_point(field_set_allocated:protowire.InvRelayBlockMessage.hash)
}

// -------------------------------------------------------------------

// InvTransactionsMessage

// repeated .protowire.TransactionId ids = 1;
inline int InvTransactionsMessage::_internal_ids_size() const {
  return ids_.size();
}
inline int InvTransactionsMessage::ids_size() const {
  return _internal_ids_size();
}
inline void InvTransactionsMessage::clear_ids() {
  ids_.Clear();
}
inline ::protowire::TransactionId* InvTransactionsMessage::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.InvTransactionsMessage.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionId >*
InvTransactionsMessage::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:protowire.InvTransactionsMessage.ids)
  return &ids_;
}
inline const ::protowire::TransactionId& InvTransactionsMessage::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const ::protowire::TransactionId& InvTransactionsMessage::ids(int index) const {
  // @@protoc_insertion_point(field_get:protowire.InvTransactionsMessage.ids)
  return _internal_ids(index);
}
inline ::protowire::TransactionId* InvTransactionsMessage::_internal_add_ids() {
  return ids_.Add();
}
inline ::protowire::TransactionId* InvTransactionsMessage::add_ids() {
  ::protowire::TransactionId* _add = _internal_add_ids();
  // @@protoc_insertion_point(field_add:protowire.InvTransactionsMessage.ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::TransactionId >&
InvTransactionsMessage::ids() const {
  // @@protoc_insertion_point(field_list:protowire.InvTransactionsMessage.ids)
  return ids_;
}

// -------------------------------------------------------------------

// PingMessage

// uint64 nonce = 1;
inline void PingMessage::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline uint64_t PingMessage::_internal_nonce() const {
  return nonce_;
}
inline uint64_t PingMessage::nonce() const {
  // @@protoc_insertion_point(field_get:protowire.PingMessage.nonce)
  return _internal_nonce();
}
inline void PingMessage::_internal_set_nonce(uint64_t value) {
  
  nonce_ = value;
}
inline void PingMessage::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:protowire.PingMessage.nonce)
}

// -------------------------------------------------------------------

// PongMessage

// uint64 nonce = 1;
inline void PongMessage::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline uint64_t PongMessage::_internal_nonce() const {
  return nonce_;
}
inline uint64_t PongMessage::nonce() const {
  // @@protoc_insertion_point(field_get:protowire.PongMessage.nonce)
  return _internal_nonce();
}
inline void PongMessage::_internal_set_nonce(uint64_t value) {
  
  nonce_ = value;
}
inline void PongMessage::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:protowire.PongMessage.nonce)
}

// -------------------------------------------------------------------

// VerackMessage

// -------------------------------------------------------------------

// VersionMessage

// uint32 protocolVersion = 1;
inline void VersionMessage::clear_protocolversion() {
  protocolversion_ = 0u;
}
inline uint32_t VersionMessage::_internal_protocolversion() const {
  return protocolversion_;
}
inline uint32_t VersionMessage::protocolversion() const {
  // @@protoc_insertion_point(field_get:protowire.VersionMessage.protocolVersion)
  return _internal_protocolversion();
}
inline void VersionMessage::_internal_set_protocolversion(uint32_t value) {
  
  protocolversion_ = value;
}
inline void VersionMessage::set_protocolversion(uint32_t value) {
  _internal_set_protocolversion(value);
  // @@protoc_insertion_point(field_set:protowire.VersionMessage.protocolVersion)
}

// uint64 services = 2;
inline void VersionMessage::clear_services() {
  services_ = uint64_t{0u};
}
inline uint64_t VersionMessage::_internal_services() const {
  return services_;
}
inline uint64_t VersionMessage::services() const {
  // @@protoc_insertion_point(field_get:protowire.VersionMessage.services)
  return _internal_services();
}
inline void VersionMessage::_internal_set_services(uint64_t value) {
  
  services_ = value;
}
inline void VersionMessage::set_services(uint64_t value) {
  _internal_set_services(value);
  // @@protoc_insertion_point(field_set:protowire.VersionMessage.services)
}

// int64 timestamp = 3;
inline void VersionMessage::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t VersionMessage::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t VersionMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:protowire.VersionMessage.timestamp)
  return _internal_timestamp();
}
inline void VersionMessage::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void VersionMessage::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protowire.VersionMessage.timestamp)
}

// .protowire.NetAddress address = 4;
inline bool VersionMessage::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool VersionMessage::has_address() const {
  return _internal_has_address();
}
inline void VersionMessage::clear_address() {
  if (GetArenaForAllocation() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
inline const ::protowire::NetAddress& VersionMessage::_internal_address() const {
  const ::protowire::NetAddress* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::NetAddress&>(
      ::protowire::_NetAddress_default_instance_);
}
inline const ::protowire::NetAddress& VersionMessage::address() const {
  // @@protoc_insertion_point(field_get:protowire.VersionMessage.address)
  return _internal_address();
}
inline void VersionMessage::unsafe_arena_set_allocated_address(
    ::protowire::NetAddress* address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.VersionMessage.address)
}
inline ::protowire::NetAddress* VersionMessage::release_address() {
  
  ::protowire::NetAddress* temp = address_;
  address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::NetAddress* VersionMessage::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:protowire.VersionMessage.address)
  
  ::protowire::NetAddress* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::protowire::NetAddress* VersionMessage::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::NetAddress>(GetArenaForAllocation());
    address_ = p;
  }
  return address_;
}
inline ::protowire::NetAddress* VersionMessage::mutable_address() {
  ::protowire::NetAddress* _msg = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:protowire.VersionMessage.address)
  return _msg;
}
inline void VersionMessage::set_allocated_address(::protowire::NetAddress* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::NetAddress>::GetOwningArena(address);
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:protowire.VersionMessage.address)
}

// bytes id = 5;
inline void VersionMessage::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& VersionMessage::id() const {
  // @@protoc_insertion_point(field_get:protowire.VersionMessage.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VersionMessage::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.VersionMessage.id)
}
inline std::string* VersionMessage::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:protowire.VersionMessage.id)
  return _s;
}
inline const std::string& VersionMessage::_internal_id() const {
  return id_.Get();
}
inline void VersionMessage::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VersionMessage::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VersionMessage::release_id() {
  // @@protoc_insertion_point(field_release:protowire.VersionMessage.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VersionMessage::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.VersionMessage.id)
}

// string userAgent = 6;
inline void VersionMessage::clear_useragent() {
  useragent_.ClearToEmpty();
}
inline const std::string& VersionMessage::useragent() const {
  // @@protoc_insertion_point(field_get:protowire.VersionMessage.userAgent)
  return _internal_useragent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VersionMessage::set_useragent(ArgT0&& arg0, ArgT... args) {
 
 useragent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.VersionMessage.userAgent)
}
inline std::string* VersionMessage::mutable_useragent() {
  std::string* _s = _internal_mutable_useragent();
  // @@protoc_insertion_point(field_mutable:protowire.VersionMessage.userAgent)
  return _s;
}
inline const std::string& VersionMessage::_internal_useragent() const {
  return useragent_.Get();
}
inline void VersionMessage::_internal_set_useragent(const std::string& value) {
  
  useragent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VersionMessage::_internal_mutable_useragent() {
  
  return useragent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VersionMessage::release_useragent() {
  // @@protoc_insertion_point(field_release:protowire.VersionMessage.userAgent)
  return useragent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VersionMessage::set_allocated_useragent(std::string* useragent) {
  if (useragent != nullptr) {
    
  } else {
    
  }
  useragent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), useragent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (useragent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    useragent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.VersionMessage.userAgent)
}

// bool disableRelayTx = 8;
inline void VersionMessage::clear_disablerelaytx() {
  disablerelaytx_ = false;
}
inline bool VersionMessage::_internal_disablerelaytx() const {
  return disablerelaytx_;
}
inline bool VersionMessage::disablerelaytx() const {
  // @@protoc_insertion_point(field_get:protowire.VersionMessage.disableRelayTx)
  return _internal_disablerelaytx();
}
inline void VersionMessage::_internal_set_disablerelaytx(bool value) {
  
  disablerelaytx_ = value;
}
inline void VersionMessage::set_disablerelaytx(bool value) {
  _internal_set_disablerelaytx(value);
  // @@protoc_insertion_point(field_set:protowire.VersionMessage.disableRelayTx)
}

// .protowire.SubnetworkId subnetworkId = 9;
inline bool VersionMessage::_internal_has_subnetworkid() const {
  return this != internal_default_instance() && subnetworkid_ != nullptr;
}
inline bool VersionMessage::has_subnetworkid() const {
  return _internal_has_subnetworkid();
}
inline void VersionMessage::clear_subnetworkid() {
  if (GetArenaForAllocation() == nullptr && subnetworkid_ != nullptr) {
    delete subnetworkid_;
  }
  subnetworkid_ = nullptr;
}
inline const ::protowire::SubnetworkId& VersionMessage::_internal_subnetworkid() const {
  const ::protowire::SubnetworkId* p = subnetworkid_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::SubnetworkId&>(
      ::protowire::_SubnetworkId_default_instance_);
}
inline const ::protowire::SubnetworkId& VersionMessage::subnetworkid() const {
  // @@protoc_insertion_point(field_get:protowire.VersionMessage.subnetworkId)
  return _internal_subnetworkid();
}
inline void VersionMessage::unsafe_arena_set_allocated_subnetworkid(
    ::protowire::SubnetworkId* subnetworkid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subnetworkid_);
  }
  subnetworkid_ = subnetworkid;
  if (subnetworkid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.VersionMessage.subnetworkId)
}
inline ::protowire::SubnetworkId* VersionMessage::release_subnetworkid() {
  
  ::protowire::SubnetworkId* temp = subnetworkid_;
  subnetworkid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::SubnetworkId* VersionMessage::unsafe_arena_release_subnetworkid() {
  // @@protoc_insertion_point(field_release:protowire.VersionMessage.subnetworkId)
  
  ::protowire::SubnetworkId* temp = subnetworkid_;
  subnetworkid_ = nullptr;
  return temp;
}
inline ::protowire::SubnetworkId* VersionMessage::_internal_mutable_subnetworkid() {
  
  if (subnetworkid_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::SubnetworkId>(GetArenaForAllocation());
    subnetworkid_ = p;
  }
  return subnetworkid_;
}
inline ::protowire::SubnetworkId* VersionMessage::mutable_subnetworkid() {
  ::protowire::SubnetworkId* _msg = _internal_mutable_subnetworkid();
  // @@protoc_insertion_point(field_mutable:protowire.VersionMessage.subnetworkId)
  return _msg;
}
inline void VersionMessage::set_allocated_subnetworkid(::protowire::SubnetworkId* subnetworkid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete subnetworkid_;
  }
  if (subnetworkid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::SubnetworkId>::GetOwningArena(subnetworkid);
    if (message_arena != submessage_arena) {
      subnetworkid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subnetworkid, submessage_arena);
    }
    
  } else {
    
  }
  subnetworkid_ = subnetworkid;
  // @@protoc_insertion_point(field_set_allocated:protowire.VersionMessage.subnetworkId)
}

// string network = 10;
inline void VersionMessage::clear_network() {
  network_.ClearToEmpty();
}
inline const std::string& VersionMessage::network() const {
  // @@protoc_insertion_point(field_get:protowire.VersionMessage.network)
  return _internal_network();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VersionMessage::set_network(ArgT0&& arg0, ArgT... args) {
 
 network_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.VersionMessage.network)
}
inline std::string* VersionMessage::mutable_network() {
  std::string* _s = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:protowire.VersionMessage.network)
  return _s;
}
inline const std::string& VersionMessage::_internal_network() const {
  return network_.Get();
}
inline void VersionMessage::_internal_set_network(const std::string& value) {
  
  network_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VersionMessage::_internal_mutable_network() {
  
  return network_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VersionMessage::release_network() {
  // @@protoc_insertion_point(field_release:protowire.VersionMessage.network)
  return network_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VersionMessage::set_allocated_network(std::string* network) {
  if (network != nullptr) {
    
  } else {
    
  }
  network_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (network_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    network_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.VersionMessage.network)
}

// -------------------------------------------------------------------

// RejectMessage

// string reason = 1;
inline void RejectMessage::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& RejectMessage::reason() const {
  // @@protoc_insertion_point(field_get:protowire.RejectMessage.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RejectMessage::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RejectMessage.reason)
}
inline std::string* RejectMessage::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:protowire.RejectMessage.reason)
  return _s;
}
inline const std::string& RejectMessage::_internal_reason() const {
  return reason_.Get();
}
inline void RejectMessage::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RejectMessage::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RejectMessage::release_reason() {
  // @@protoc_insertion_point(field_release:protowire.RejectMessage.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RejectMessage::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reason_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RejectMessage.reason)
}

// -------------------------------------------------------------------

// RequestPruningPointUTXOSetMessage

// .protowire.Hash pruningPointHash = 1;
inline bool RequestPruningPointUTXOSetMessage::_internal_has_pruningpointhash() const {
  return this != internal_default_instance() && pruningpointhash_ != nullptr;
}
inline bool RequestPruningPointUTXOSetMessage::has_pruningpointhash() const {
  return _internal_has_pruningpointhash();
}
inline void RequestPruningPointUTXOSetMessage::clear_pruningpointhash() {
  if (GetArenaForAllocation() == nullptr && pruningpointhash_ != nullptr) {
    delete pruningpointhash_;
  }
  pruningpointhash_ = nullptr;
}
inline const ::protowire::Hash& RequestPruningPointUTXOSetMessage::_internal_pruningpointhash() const {
  const ::protowire::Hash* p = pruningpointhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& RequestPruningPointUTXOSetMessage::pruningpointhash() const {
  // @@protoc_insertion_point(field_get:protowire.RequestPruningPointUTXOSetMessage.pruningPointHash)
  return _internal_pruningpointhash();
}
inline void RequestPruningPointUTXOSetMessage::unsafe_arena_set_allocated_pruningpointhash(
    ::protowire::Hash* pruningpointhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pruningpointhash_);
  }
  pruningpointhash_ = pruningpointhash;
  if (pruningpointhash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RequestPruningPointUTXOSetMessage.pruningPointHash)
}
inline ::protowire::Hash* RequestPruningPointUTXOSetMessage::release_pruningpointhash() {
  
  ::protowire::Hash* temp = pruningpointhash_;
  pruningpointhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* RequestPruningPointUTXOSetMessage::unsafe_arena_release_pruningpointhash() {
  // @@protoc_insertion_point(field_release:protowire.RequestPruningPointUTXOSetMessage.pruningPointHash)
  
  ::protowire::Hash* temp = pruningpointhash_;
  pruningpointhash_ = nullptr;
  return temp;
}
inline ::protowire::Hash* RequestPruningPointUTXOSetMessage::_internal_mutable_pruningpointhash() {
  
  if (pruningpointhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    pruningpointhash_ = p;
  }
  return pruningpointhash_;
}
inline ::protowire::Hash* RequestPruningPointUTXOSetMessage::mutable_pruningpointhash() {
  ::protowire::Hash* _msg = _internal_mutable_pruningpointhash();
  // @@protoc_insertion_point(field_mutable:protowire.RequestPruningPointUTXOSetMessage.pruningPointHash)
  return _msg;
}
inline void RequestPruningPointUTXOSetMessage::set_allocated_pruningpointhash(::protowire::Hash* pruningpointhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pruningpointhash_;
  }
  if (pruningpointhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(pruningpointhash);
    if (message_arena != submessage_arena) {
      pruningpointhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pruningpointhash, submessage_arena);
    }
    
  } else {
    
  }
  pruningpointhash_ = pruningpointhash;
  // @@protoc_insertion_point(field_set_allocated:protowire.RequestPruningPointUTXOSetMessage.pruningPointHash)
}

// -------------------------------------------------------------------

// PruningPointUtxoSetChunkMessage

// repeated .protowire.OutpointAndUtxoEntryPair outpointAndUtxoEntryPairs = 1;
inline int PruningPointUtxoSetChunkMessage::_internal_outpointandutxoentrypairs_size() const {
  return outpointandutxoentrypairs_.size();
}
inline int PruningPointUtxoSetChunkMessage::outpointandutxoentrypairs_size() const {
  return _internal_outpointandutxoentrypairs_size();
}
inline void PruningPointUtxoSetChunkMessage::clear_outpointandutxoentrypairs() {
  outpointandutxoentrypairs_.Clear();
}
inline ::protowire::OutpointAndUtxoEntryPair* PruningPointUtxoSetChunkMessage::mutable_outpointandutxoentrypairs(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.PruningPointUtxoSetChunkMessage.outpointAndUtxoEntryPairs)
  return outpointandutxoentrypairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::OutpointAndUtxoEntryPair >*
PruningPointUtxoSetChunkMessage::mutable_outpointandutxoentrypairs() {
  // @@protoc_insertion_point(field_mutable_list:protowire.PruningPointUtxoSetChunkMessage.outpointAndUtxoEntryPairs)
  return &outpointandutxoentrypairs_;
}
inline const ::protowire::OutpointAndUtxoEntryPair& PruningPointUtxoSetChunkMessage::_internal_outpointandutxoentrypairs(int index) const {
  return outpointandutxoentrypairs_.Get(index);
}
inline const ::protowire::OutpointAndUtxoEntryPair& PruningPointUtxoSetChunkMessage::outpointandutxoentrypairs(int index) const {
  // @@protoc_insertion_point(field_get:protowire.PruningPointUtxoSetChunkMessage.outpointAndUtxoEntryPairs)
  return _internal_outpointandutxoentrypairs(index);
}
inline ::protowire::OutpointAndUtxoEntryPair* PruningPointUtxoSetChunkMessage::_internal_add_outpointandutxoentrypairs() {
  return outpointandutxoentrypairs_.Add();
}
inline ::protowire::OutpointAndUtxoEntryPair* PruningPointUtxoSetChunkMessage::add_outpointandutxoentrypairs() {
  ::protowire::OutpointAndUtxoEntryPair* _add = _internal_add_outpointandutxoentrypairs();
  // @@protoc_insertion_point(field_add:protowire.PruningPointUtxoSetChunkMessage.outpointAndUtxoEntryPairs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::OutpointAndUtxoEntryPair >&
PruningPointUtxoSetChunkMessage::outpointandutxoentrypairs() const {
  // @@protoc_insertion_point(field_list:protowire.PruningPointUtxoSetChunkMessage.outpointAndUtxoEntryPairs)
  return outpointandutxoentrypairs_;
}

// -------------------------------------------------------------------

// OutpointAndUtxoEntryPair

// .protowire.Outpoint outpoint = 1;
inline bool OutpointAndUtxoEntryPair::_internal_has_outpoint() const {
  return this != internal_default_instance() && outpoint_ != nullptr;
}
inline bool OutpointAndUtxoEntryPair::has_outpoint() const {
  return _internal_has_outpoint();
}
inline void OutpointAndUtxoEntryPair::clear_outpoint() {
  if (GetArenaForAllocation() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
}
inline const ::protowire::Outpoint& OutpointAndUtxoEntryPair::_internal_outpoint() const {
  const ::protowire::Outpoint* p = outpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Outpoint&>(
      ::protowire::_Outpoint_default_instance_);
}
inline const ::protowire::Outpoint& OutpointAndUtxoEntryPair::outpoint() const {
  // @@protoc_insertion_point(field_get:protowire.OutpointAndUtxoEntryPair.outpoint)
  return _internal_outpoint();
}
inline void OutpointAndUtxoEntryPair::unsafe_arena_set_allocated_outpoint(
    ::protowire::Outpoint* outpoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outpoint_);
  }
  outpoint_ = outpoint;
  if (outpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.OutpointAndUtxoEntryPair.outpoint)
}
inline ::protowire::Outpoint* OutpointAndUtxoEntryPair::release_outpoint() {
  
  ::protowire::Outpoint* temp = outpoint_;
  outpoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Outpoint* OutpointAndUtxoEntryPair::unsafe_arena_release_outpoint() {
  // @@protoc_insertion_point(field_release:protowire.OutpointAndUtxoEntryPair.outpoint)
  
  ::protowire::Outpoint* temp = outpoint_;
  outpoint_ = nullptr;
  return temp;
}
inline ::protowire::Outpoint* OutpointAndUtxoEntryPair::_internal_mutable_outpoint() {
  
  if (outpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Outpoint>(GetArenaForAllocation());
    outpoint_ = p;
  }
  return outpoint_;
}
inline ::protowire::Outpoint* OutpointAndUtxoEntryPair::mutable_outpoint() {
  ::protowire::Outpoint* _msg = _internal_mutable_outpoint();
  // @@protoc_insertion_point(field_mutable:protowire.OutpointAndUtxoEntryPair.outpoint)
  return _msg;
}
inline void OutpointAndUtxoEntryPair::set_allocated_outpoint(::protowire::Outpoint* outpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete outpoint_;
  }
  if (outpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Outpoint>::GetOwningArena(outpoint);
    if (message_arena != submessage_arena) {
      outpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outpoint, submessage_arena);
    }
    
  } else {
    
  }
  outpoint_ = outpoint;
  // @@protoc_insertion_point(field_set_allocated:protowire.OutpointAndUtxoEntryPair.outpoint)
}

// .protowire.UtxoEntry utxoEntry = 2;
inline bool OutpointAndUtxoEntryPair::_internal_has_utxoentry() const {
  return this != internal_default_instance() && utxoentry_ != nullptr;
}
inline bool OutpointAndUtxoEntryPair::has_utxoentry() const {
  return _internal_has_utxoentry();
}
inline void OutpointAndUtxoEntryPair::clear_utxoentry() {
  if (GetArenaForAllocation() == nullptr && utxoentry_ != nullptr) {
    delete utxoentry_;
  }
  utxoentry_ = nullptr;
}
inline const ::protowire::UtxoEntry& OutpointAndUtxoEntryPair::_internal_utxoentry() const {
  const ::protowire::UtxoEntry* p = utxoentry_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::UtxoEntry&>(
      ::protowire::_UtxoEntry_default_instance_);
}
inline const ::protowire::UtxoEntry& OutpointAndUtxoEntryPair::utxoentry() const {
  // @@protoc_insertion_point(field_get:protowire.OutpointAndUtxoEntryPair.utxoEntry)
  return _internal_utxoentry();
}
inline void OutpointAndUtxoEntryPair::unsafe_arena_set_allocated_utxoentry(
    ::protowire::UtxoEntry* utxoentry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utxoentry_);
  }
  utxoentry_ = utxoentry;
  if (utxoentry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.OutpointAndUtxoEntryPair.utxoEntry)
}
inline ::protowire::UtxoEntry* OutpointAndUtxoEntryPair::release_utxoentry() {
  
  ::protowire::UtxoEntry* temp = utxoentry_;
  utxoentry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::UtxoEntry* OutpointAndUtxoEntryPair::unsafe_arena_release_utxoentry() {
  // @@protoc_insertion_point(field_release:protowire.OutpointAndUtxoEntryPair.utxoEntry)
  
  ::protowire::UtxoEntry* temp = utxoentry_;
  utxoentry_ = nullptr;
  return temp;
}
inline ::protowire::UtxoEntry* OutpointAndUtxoEntryPair::_internal_mutable_utxoentry() {
  
  if (utxoentry_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::UtxoEntry>(GetArenaForAllocation());
    utxoentry_ = p;
  }
  return utxoentry_;
}
inline ::protowire::UtxoEntry* OutpointAndUtxoEntryPair::mutable_utxoentry() {
  ::protowire::UtxoEntry* _msg = _internal_mutable_utxoentry();
  // @@protoc_insertion_point(field_mutable:protowire.OutpointAndUtxoEntryPair.utxoEntry)
  return _msg;
}
inline void OutpointAndUtxoEntryPair::set_allocated_utxoentry(::protowire::UtxoEntry* utxoentry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete utxoentry_;
  }
  if (utxoentry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::UtxoEntry>::GetOwningArena(utxoentry);
    if (message_arena != submessage_arena) {
      utxoentry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utxoentry, submessage_arena);
    }
    
  } else {
    
  }
  utxoentry_ = utxoentry;
  // @@protoc_insertion_point(field_set_allocated:protowire.OutpointAndUtxoEntryPair.utxoEntry)
}

// -------------------------------------------------------------------

// UtxoEntry

// uint64 amount = 1;
inline void UtxoEntry::clear_amount() {
  amount_ = uint64_t{0u};
}
inline uint64_t UtxoEntry::_internal_amount() const {
  return amount_;
}
inline uint64_t UtxoEntry::amount() const {
  // @@protoc_insertion_point(field_get:protowire.UtxoEntry.amount)
  return _internal_amount();
}
inline void UtxoEntry::_internal_set_amount(uint64_t value) {
  
  amount_ = value;
}
inline void UtxoEntry::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:protowire.UtxoEntry.amount)
}

// .protowire.ScriptPublicKey scriptPublicKey = 2;
inline bool UtxoEntry::_internal_has_scriptpublickey() const {
  return this != internal_default_instance() && scriptpublickey_ != nullptr;
}
inline bool UtxoEntry::has_scriptpublickey() const {
  return _internal_has_scriptpublickey();
}
inline void UtxoEntry::clear_scriptpublickey() {
  if (GetArenaForAllocation() == nullptr && scriptpublickey_ != nullptr) {
    delete scriptpublickey_;
  }
  scriptpublickey_ = nullptr;
}
inline const ::protowire::ScriptPublicKey& UtxoEntry::_internal_scriptpublickey() const {
  const ::protowire::ScriptPublicKey* p = scriptpublickey_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::ScriptPublicKey&>(
      ::protowire::_ScriptPublicKey_default_instance_);
}
inline const ::protowire::ScriptPublicKey& UtxoEntry::scriptpublickey() const {
  // @@protoc_insertion_point(field_get:protowire.UtxoEntry.scriptPublicKey)
  return _internal_scriptpublickey();
}
inline void UtxoEntry::unsafe_arena_set_allocated_scriptpublickey(
    ::protowire::ScriptPublicKey* scriptpublickey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scriptpublickey_);
  }
  scriptpublickey_ = scriptpublickey;
  if (scriptpublickey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.UtxoEntry.scriptPublicKey)
}
inline ::protowire::ScriptPublicKey* UtxoEntry::release_scriptpublickey() {
  
  ::protowire::ScriptPublicKey* temp = scriptpublickey_;
  scriptpublickey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::ScriptPublicKey* UtxoEntry::unsafe_arena_release_scriptpublickey() {
  // @@protoc_insertion_point(field_release:protowire.UtxoEntry.scriptPublicKey)
  
  ::protowire::ScriptPublicKey* temp = scriptpublickey_;
  scriptpublickey_ = nullptr;
  return temp;
}
inline ::protowire::ScriptPublicKey* UtxoEntry::_internal_mutable_scriptpublickey() {
  
  if (scriptpublickey_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::ScriptPublicKey>(GetArenaForAllocation());
    scriptpublickey_ = p;
  }
  return scriptpublickey_;
}
inline ::protowire::ScriptPublicKey* UtxoEntry::mutable_scriptpublickey() {
  ::protowire::ScriptPublicKey* _msg = _internal_mutable_scriptpublickey();
  // @@protoc_insertion_point(field_mutable:protowire.UtxoEntry.scriptPublicKey)
  return _msg;
}
inline void UtxoEntry::set_allocated_scriptpublickey(::protowire::ScriptPublicKey* scriptpublickey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scriptpublickey_;
  }
  if (scriptpublickey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::ScriptPublicKey>::GetOwningArena(scriptpublickey);
    if (message_arena != submessage_arena) {
      scriptpublickey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptpublickey, submessage_arena);
    }
    
  } else {
    
  }
  scriptpublickey_ = scriptpublickey;
  // @@protoc_insertion_point(field_set_allocated:protowire.UtxoEntry.scriptPublicKey)
}

// uint64 blockDaaScore = 3;
inline void UtxoEntry::clear_blockdaascore() {
  blockdaascore_ = uint64_t{0u};
}
inline uint64_t UtxoEntry::_internal_blockdaascore() const {
  return blockdaascore_;
}
inline uint64_t UtxoEntry::blockdaascore() const {
  // @@protoc_insertion_point(field_get:protowire.UtxoEntry.blockDaaScore)
  return _internal_blockdaascore();
}
inline void UtxoEntry::_internal_set_blockdaascore(uint64_t value) {
  
  blockdaascore_ = value;
}
inline void UtxoEntry::set_blockdaascore(uint64_t value) {
  _internal_set_blockdaascore(value);
  // @@protoc_insertion_point(field_set:protowire.UtxoEntry.blockDaaScore)
}

// bool isCoinbase = 4;
inline void UtxoEntry::clear_iscoinbase() {
  iscoinbase_ = false;
}
inline bool UtxoEntry::_internal_iscoinbase() const {
  return iscoinbase_;
}
inline bool UtxoEntry::iscoinbase() const {
  // @@protoc_insertion_point(field_get:protowire.UtxoEntry.isCoinbase)
  return _internal_iscoinbase();
}
inline void UtxoEntry::_internal_set_iscoinbase(bool value) {
  
  iscoinbase_ = value;
}
inline void UtxoEntry::set_iscoinbase(bool value) {
  _internal_set_iscoinbase(value);
  // @@protoc_insertion_point(field_set:protowire.UtxoEntry.isCoinbase)
}

// -------------------------------------------------------------------

// RequestNextPruningPointUtxoSetChunkMessage

// -------------------------------------------------------------------

// DonePruningPointUtxoSetChunksMessage

// -------------------------------------------------------------------

// RequestIBDBlocksMessage

// repeated .protowire.Hash hashes = 1;
inline int RequestIBDBlocksMessage::_internal_hashes_size() const {
  return hashes_.size();
}
inline int RequestIBDBlocksMessage::hashes_size() const {
  return _internal_hashes_size();
}
inline void RequestIBDBlocksMessage::clear_hashes() {
  hashes_.Clear();
}
inline ::protowire::Hash* RequestIBDBlocksMessage::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.RequestIBDBlocksMessage.hashes)
  return hashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
RequestIBDBlocksMessage::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.RequestIBDBlocksMessage.hashes)
  return &hashes_;
}
inline const ::protowire::Hash& RequestIBDBlocksMessage::_internal_hashes(int index) const {
  return hashes_.Get(index);
}
inline const ::protowire::Hash& RequestIBDBlocksMessage::hashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.RequestIBDBlocksMessage.hashes)
  return _internal_hashes(index);
}
inline ::protowire::Hash* RequestIBDBlocksMessage::_internal_add_hashes() {
  return hashes_.Add();
}
inline ::protowire::Hash* RequestIBDBlocksMessage::add_hashes() {
  ::protowire::Hash* _add = _internal_add_hashes();
  // @@protoc_insertion_point(field_add:protowire.RequestIBDBlocksMessage.hashes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
RequestIBDBlocksMessage::hashes() const {
  // @@protoc_insertion_point(field_list:protowire.RequestIBDBlocksMessage.hashes)
  return hashes_;
}

// -------------------------------------------------------------------

// UnexpectedPruningPointMessage

// -------------------------------------------------------------------

// IbdBlockLocatorMessage

// .protowire.Hash targetHash = 1;
inline bool IbdBlockLocatorMessage::_internal_has_targethash() const {
  return this != internal_default_instance() && targethash_ != nullptr;
}
inline bool IbdBlockLocatorMessage::has_targethash() const {
  return _internal_has_targethash();
}
inline void IbdBlockLocatorMessage::clear_targethash() {
  if (GetArenaForAllocation() == nullptr && targethash_ != nullptr) {
    delete targethash_;
  }
  targethash_ = nullptr;
}
inline const ::protowire::Hash& IbdBlockLocatorMessage::_internal_targethash() const {
  const ::protowire::Hash* p = targethash_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& IbdBlockLocatorMessage::targethash() const {
  // @@protoc_insertion_point(field_get:protowire.IbdBlockLocatorMessage.targetHash)
  return _internal_targethash();
}
inline void IbdBlockLocatorMessage::unsafe_arena_set_allocated_targethash(
    ::protowire::Hash* targethash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targethash_);
  }
  targethash_ = targethash;
  if (targethash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.IbdBlockLocatorMessage.targetHash)
}
inline ::protowire::Hash* IbdBlockLocatorMessage::release_targethash() {
  
  ::protowire::Hash* temp = targethash_;
  targethash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* IbdBlockLocatorMessage::unsafe_arena_release_targethash() {
  // @@protoc_insertion_point(field_release:protowire.IbdBlockLocatorMessage.targetHash)
  
  ::protowire::Hash* temp = targethash_;
  targethash_ = nullptr;
  return temp;
}
inline ::protowire::Hash* IbdBlockLocatorMessage::_internal_mutable_targethash() {
  
  if (targethash_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    targethash_ = p;
  }
  return targethash_;
}
inline ::protowire::Hash* IbdBlockLocatorMessage::mutable_targethash() {
  ::protowire::Hash* _msg = _internal_mutable_targethash();
  // @@protoc_insertion_point(field_mutable:protowire.IbdBlockLocatorMessage.targetHash)
  return _msg;
}
inline void IbdBlockLocatorMessage::set_allocated_targethash(::protowire::Hash* targethash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete targethash_;
  }
  if (targethash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(targethash);
    if (message_arena != submessage_arena) {
      targethash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targethash, submessage_arena);
    }
    
  } else {
    
  }
  targethash_ = targethash;
  // @@protoc_insertion_point(field_set_allocated:protowire.IbdBlockLocatorMessage.targetHash)
}

// repeated .protowire.Hash blockLocatorHashes = 2;
inline int IbdBlockLocatorMessage::_internal_blocklocatorhashes_size() const {
  return blocklocatorhashes_.size();
}
inline int IbdBlockLocatorMessage::blocklocatorhashes_size() const {
  return _internal_blocklocatorhashes_size();
}
inline void IbdBlockLocatorMessage::clear_blocklocatorhashes() {
  blocklocatorhashes_.Clear();
}
inline ::protowire::Hash* IbdBlockLocatorMessage::mutable_blocklocatorhashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.IbdBlockLocatorMessage.blockLocatorHashes)
  return blocklocatorhashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
IbdBlockLocatorMessage::mutable_blocklocatorhashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.IbdBlockLocatorMessage.blockLocatorHashes)
  return &blocklocatorhashes_;
}
inline const ::protowire::Hash& IbdBlockLocatorMessage::_internal_blocklocatorhashes(int index) const {
  return blocklocatorhashes_.Get(index);
}
inline const ::protowire::Hash& IbdBlockLocatorMessage::blocklocatorhashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.IbdBlockLocatorMessage.blockLocatorHashes)
  return _internal_blocklocatorhashes(index);
}
inline ::protowire::Hash* IbdBlockLocatorMessage::_internal_add_blocklocatorhashes() {
  return blocklocatorhashes_.Add();
}
inline ::protowire::Hash* IbdBlockLocatorMessage::add_blocklocatorhashes() {
  ::protowire::Hash* _add = _internal_add_blocklocatorhashes();
  // @@protoc_insertion_point(field_add:protowire.IbdBlockLocatorMessage.blockLocatorHashes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
IbdBlockLocatorMessage::blocklocatorhashes() const {
  // @@protoc_insertion_point(field_list:protowire.IbdBlockLocatorMessage.blockLocatorHashes)
  return blocklocatorhashes_;
}

// -------------------------------------------------------------------

// RequestIBDChainBlockLocatorMessage

// .protowire.Hash lowHash = 1;
inline bool RequestIBDChainBlockLocatorMessage::_internal_has_lowhash() const {
  return this != internal_default_instance() && lowhash_ != nullptr;
}
inline bool RequestIBDChainBlockLocatorMessage::has_lowhash() const {
  return _internal_has_lowhash();
}
inline void RequestIBDChainBlockLocatorMessage::clear_lowhash() {
  if (GetArenaForAllocation() == nullptr && lowhash_ != nullptr) {
    delete lowhash_;
  }
  lowhash_ = nullptr;
}
inline const ::protowire::Hash& RequestIBDChainBlockLocatorMessage::_internal_lowhash() const {
  const ::protowire::Hash* p = lowhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& RequestIBDChainBlockLocatorMessage::lowhash() const {
  // @@protoc_insertion_point(field_get:protowire.RequestIBDChainBlockLocatorMessage.lowHash)
  return _internal_lowhash();
}
inline void RequestIBDChainBlockLocatorMessage::unsafe_arena_set_allocated_lowhash(
    ::protowire::Hash* lowhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lowhash_);
  }
  lowhash_ = lowhash;
  if (lowhash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RequestIBDChainBlockLocatorMessage.lowHash)
}
inline ::protowire::Hash* RequestIBDChainBlockLocatorMessage::release_lowhash() {
  
  ::protowire::Hash* temp = lowhash_;
  lowhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* RequestIBDChainBlockLocatorMessage::unsafe_arena_release_lowhash() {
  // @@protoc_insertion_point(field_release:protowire.RequestIBDChainBlockLocatorMessage.lowHash)
  
  ::protowire::Hash* temp = lowhash_;
  lowhash_ = nullptr;
  return temp;
}
inline ::protowire::Hash* RequestIBDChainBlockLocatorMessage::_internal_mutable_lowhash() {
  
  if (lowhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    lowhash_ = p;
  }
  return lowhash_;
}
inline ::protowire::Hash* RequestIBDChainBlockLocatorMessage::mutable_lowhash() {
  ::protowire::Hash* _msg = _internal_mutable_lowhash();
  // @@protoc_insertion_point(field_mutable:protowire.RequestIBDChainBlockLocatorMessage.lowHash)
  return _msg;
}
inline void RequestIBDChainBlockLocatorMessage::set_allocated_lowhash(::protowire::Hash* lowhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lowhash_;
  }
  if (lowhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(lowhash);
    if (message_arena != submessage_arena) {
      lowhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lowhash, submessage_arena);
    }
    
  } else {
    
  }
  lowhash_ = lowhash;
  // @@protoc_insertion_point(field_set_allocated:protowire.RequestIBDChainBlockLocatorMessage.lowHash)
}

// .protowire.Hash highHash = 2;
inline bool RequestIBDChainBlockLocatorMessage::_internal_has_highhash() const {
  return this != internal_default_instance() && highhash_ != nullptr;
}
inline bool RequestIBDChainBlockLocatorMessage::has_highhash() const {
  return _internal_has_highhash();
}
inline void RequestIBDChainBlockLocatorMessage::clear_highhash() {
  if (GetArenaForAllocation() == nullptr && highhash_ != nullptr) {
    delete highhash_;
  }
  highhash_ = nullptr;
}
inline const ::protowire::Hash& RequestIBDChainBlockLocatorMessage::_internal_highhash() const {
  const ::protowire::Hash* p = highhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& RequestIBDChainBlockLocatorMessage::highhash() const {
  // @@protoc_insertion_point(field_get:protowire.RequestIBDChainBlockLocatorMessage.highHash)
  return _internal_highhash();
}
inline void RequestIBDChainBlockLocatorMessage::unsafe_arena_set_allocated_highhash(
    ::protowire::Hash* highhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(highhash_);
  }
  highhash_ = highhash;
  if (highhash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RequestIBDChainBlockLocatorMessage.highHash)
}
inline ::protowire::Hash* RequestIBDChainBlockLocatorMessage::release_highhash() {
  
  ::protowire::Hash* temp = highhash_;
  highhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* RequestIBDChainBlockLocatorMessage::unsafe_arena_release_highhash() {
  // @@protoc_insertion_point(field_release:protowire.RequestIBDChainBlockLocatorMessage.highHash)
  
  ::protowire::Hash* temp = highhash_;
  highhash_ = nullptr;
  return temp;
}
inline ::protowire::Hash* RequestIBDChainBlockLocatorMessage::_internal_mutable_highhash() {
  
  if (highhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    highhash_ = p;
  }
  return highhash_;
}
inline ::protowire::Hash* RequestIBDChainBlockLocatorMessage::mutable_highhash() {
  ::protowire::Hash* _msg = _internal_mutable_highhash();
  // @@protoc_insertion_point(field_mutable:protowire.RequestIBDChainBlockLocatorMessage.highHash)
  return _msg;
}
inline void RequestIBDChainBlockLocatorMessage::set_allocated_highhash(::protowire::Hash* highhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete highhash_;
  }
  if (highhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(highhash);
    if (message_arena != submessage_arena) {
      highhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, highhash, submessage_arena);
    }
    
  } else {
    
  }
  highhash_ = highhash;
  // @@protoc_insertion_point(field_set_allocated:protowire.RequestIBDChainBlockLocatorMessage.highHash)
}

// -------------------------------------------------------------------

// IbdChainBlockLocatorMessage

// repeated .protowire.Hash blockLocatorHashes = 1;
inline int IbdChainBlockLocatorMessage::_internal_blocklocatorhashes_size() const {
  return blocklocatorhashes_.size();
}
inline int IbdChainBlockLocatorMessage::blocklocatorhashes_size() const {
  return _internal_blocklocatorhashes_size();
}
inline void IbdChainBlockLocatorMessage::clear_blocklocatorhashes() {
  blocklocatorhashes_.Clear();
}
inline ::protowire::Hash* IbdChainBlockLocatorMessage::mutable_blocklocatorhashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.IbdChainBlockLocatorMessage.blockLocatorHashes)
  return blocklocatorhashes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
IbdChainBlockLocatorMessage::mutable_blocklocatorhashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.IbdChainBlockLocatorMessage.blockLocatorHashes)
  return &blocklocatorhashes_;
}
inline const ::protowire::Hash& IbdChainBlockLocatorMessage::_internal_blocklocatorhashes(int index) const {
  return blocklocatorhashes_.Get(index);
}
inline const ::protowire::Hash& IbdChainBlockLocatorMessage::blocklocatorhashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.IbdChainBlockLocatorMessage.blockLocatorHashes)
  return _internal_blocklocatorhashes(index);
}
inline ::protowire::Hash* IbdChainBlockLocatorMessage::_internal_add_blocklocatorhashes() {
  return blocklocatorhashes_.Add();
}
inline ::protowire::Hash* IbdChainBlockLocatorMessage::add_blocklocatorhashes() {
  ::protowire::Hash* _add = _internal_add_blocklocatorhashes();
  // @@protoc_insertion_point(field_add:protowire.IbdChainBlockLocatorMessage.blockLocatorHashes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
IbdChainBlockLocatorMessage::blocklocatorhashes() const {
  // @@protoc_insertion_point(field_list:protowire.IbdChainBlockLocatorMessage.blockLocatorHashes)
  return blocklocatorhashes_;
}

// -------------------------------------------------------------------

// RequestAnticoneMessage

// .protowire.Hash blockHash = 1;
inline bool RequestAnticoneMessage::_internal_has_blockhash() const {
  return this != internal_default_instance() && blockhash_ != nullptr;
}
inline bool RequestAnticoneMessage::has_blockhash() const {
  return _internal_has_blockhash();
}
inline void RequestAnticoneMessage::clear_blockhash() {
  if (GetArenaForAllocation() == nullptr && blockhash_ != nullptr) {
    delete blockhash_;
  }
  blockhash_ = nullptr;
}
inline const ::protowire::Hash& RequestAnticoneMessage::_internal_blockhash() const {
  const ::protowire::Hash* p = blockhash_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& RequestAnticoneMessage::blockhash() const {
  // @@protoc_insertion_point(field_get:protowire.RequestAnticoneMessage.blockHash)
  return _internal_blockhash();
}
inline void RequestAnticoneMessage::unsafe_arena_set_allocated_blockhash(
    ::protowire::Hash* blockhash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blockhash_);
  }
  blockhash_ = blockhash;
  if (blockhash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RequestAnticoneMessage.blockHash)
}
inline ::protowire::Hash* RequestAnticoneMessage::release_blockhash() {
  
  ::protowire::Hash* temp = blockhash_;
  blockhash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* RequestAnticoneMessage::unsafe_arena_release_blockhash() {
  // @@protoc_insertion_point(field_release:protowire.RequestAnticoneMessage.blockHash)
  
  ::protowire::Hash* temp = blockhash_;
  blockhash_ = nullptr;
  return temp;
}
inline ::protowire::Hash* RequestAnticoneMessage::_internal_mutable_blockhash() {
  
  if (blockhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    blockhash_ = p;
  }
  return blockhash_;
}
inline ::protowire::Hash* RequestAnticoneMessage::mutable_blockhash() {
  ::protowire::Hash* _msg = _internal_mutable_blockhash();
  // @@protoc_insertion_point(field_mutable:protowire.RequestAnticoneMessage.blockHash)
  return _msg;
}
inline void RequestAnticoneMessage::set_allocated_blockhash(::protowire::Hash* blockhash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete blockhash_;
  }
  if (blockhash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(blockhash);
    if (message_arena != submessage_arena) {
      blockhash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockhash, submessage_arena);
    }
    
  } else {
    
  }
  blockhash_ = blockhash;
  // @@protoc_insertion_point(field_set_allocated:protowire.RequestAnticoneMessage.blockHash)
}

// .protowire.Hash contextHash = 2;
inline bool RequestAnticoneMessage::_internal_has_contexthash() const {
  return this != internal_default_instance() && contexthash_ != nullptr;
}
inline bool RequestAnticoneMessage::has_contexthash() const {
  return _internal_has_contexthash();
}
inline void RequestAnticoneMessage::clear_contexthash() {
  if (GetArenaForAllocation() == nullptr && contexthash_ != nullptr) {
    delete contexthash_;
  }
  contexthash_ = nullptr;
}
inline const ::protowire::Hash& RequestAnticoneMessage::_internal_contexthash() const {
  const ::protowire::Hash* p = contexthash_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& RequestAnticoneMessage::contexthash() const {
  // @@protoc_insertion_point(field_get:protowire.RequestAnticoneMessage.contextHash)
  return _internal_contexthash();
}
inline void RequestAnticoneMessage::unsafe_arena_set_allocated_contexthash(
    ::protowire::Hash* contexthash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contexthash_);
  }
  contexthash_ = contexthash;
  if (contexthash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RequestAnticoneMessage.contextHash)
}
inline ::protowire::Hash* RequestAnticoneMessage::release_contexthash() {
  
  ::protowire::Hash* temp = contexthash_;
  contexthash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* RequestAnticoneMessage::unsafe_arena_release_contexthash() {
  // @@protoc_insertion_point(field_release:protowire.RequestAnticoneMessage.contextHash)
  
  ::protowire::Hash* temp = contexthash_;
  contexthash_ = nullptr;
  return temp;
}
inline ::protowire::Hash* RequestAnticoneMessage::_internal_mutable_contexthash() {
  
  if (contexthash_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    contexthash_ = p;
  }
  return contexthash_;
}
inline ::protowire::Hash* RequestAnticoneMessage::mutable_contexthash() {
  ::protowire::Hash* _msg = _internal_mutable_contexthash();
  // @@protoc_insertion_point(field_mutable:protowire.RequestAnticoneMessage.contextHash)
  return _msg;
}
inline void RequestAnticoneMessage::set_allocated_contexthash(::protowire::Hash* contexthash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete contexthash_;
  }
  if (contexthash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(contexthash);
    if (message_arena != submessage_arena) {
      contexthash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contexthash, submessage_arena);
    }
    
  } else {
    
  }
  contexthash_ = contexthash;
  // @@protoc_insertion_point(field_set_allocated:protowire.RequestAnticoneMessage.contextHash)
}

// -------------------------------------------------------------------

// IbdBlockLocatorHighestHashMessage

// .protowire.Hash highestHash = 1;
inline bool IbdBlockLocatorHighestHashMessage::_internal_has_highesthash() const {
  return this != internal_default_instance() && highesthash_ != nullptr;
}
inline bool IbdBlockLocatorHighestHashMessage::has_highesthash() const {
  return _internal_has_highesthash();
}
inline void IbdBlockLocatorHighestHashMessage::clear_highesthash() {
  if (GetArenaForAllocation() == nullptr && highesthash_ != nullptr) {
    delete highesthash_;
  }
  highesthash_ = nullptr;
}
inline const ::protowire::Hash& IbdBlockLocatorHighestHashMessage::_internal_highesthash() const {
  const ::protowire::Hash* p = highesthash_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& IbdBlockLocatorHighestHashMessage::highesthash() const {
  // @@protoc_insertion_point(field_get:protowire.IbdBlockLocatorHighestHashMessage.highestHash)
  return _internal_highesthash();
}
inline void IbdBlockLocatorHighestHashMessage::unsafe_arena_set_allocated_highesthash(
    ::protowire::Hash* highesthash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(highesthash_);
  }
  highesthash_ = highesthash;
  if (highesthash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.IbdBlockLocatorHighestHashMessage.highestHash)
}
inline ::protowire::Hash* IbdBlockLocatorHighestHashMessage::release_highesthash() {
  
  ::protowire::Hash* temp = highesthash_;
  highesthash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* IbdBlockLocatorHighestHashMessage::unsafe_arena_release_highesthash() {
  // @@protoc_insertion_point(field_release:protowire.IbdBlockLocatorHighestHashMessage.highestHash)
  
  ::protowire::Hash* temp = highesthash_;
  highesthash_ = nullptr;
  return temp;
}
inline ::protowire::Hash* IbdBlockLocatorHighestHashMessage::_internal_mutable_highesthash() {
  
  if (highesthash_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    highesthash_ = p;
  }
  return highesthash_;
}
inline ::protowire::Hash* IbdBlockLocatorHighestHashMessage::mutable_highesthash() {
  ::protowire::Hash* _msg = _internal_mutable_highesthash();
  // @@protoc_insertion_point(field_mutable:protowire.IbdBlockLocatorHighestHashMessage.highestHash)
  return _msg;
}
inline void IbdBlockLocatorHighestHashMessage::set_allocated_highesthash(::protowire::Hash* highesthash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete highesthash_;
  }
  if (highesthash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(highesthash);
    if (message_arena != submessage_arena) {
      highesthash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, highesthash, submessage_arena);
    }
    
  } else {
    
  }
  highesthash_ = highesthash;
  // @@protoc_insertion_point(field_set_allocated:protowire.IbdBlockLocatorHighestHashMessage.highestHash)
}

// -------------------------------------------------------------------

// IbdBlockLocatorHighestHashNotFoundMessage

// -------------------------------------------------------------------

// BlockHeadersMessage

// repeated .protowire.BlockHeader blockHeaders = 1;
inline int BlockHeadersMessage::_internal_blockheaders_size() const {
  return blockheaders_.size();
}
inline int BlockHeadersMessage::blockheaders_size() const {
  return _internal_blockheaders_size();
}
inline void BlockHeadersMessage::clear_blockheaders() {
  blockheaders_.Clear();
}
inline ::protowire::BlockHeader* BlockHeadersMessage::mutable_blockheaders(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.BlockHeadersMessage.blockHeaders)
  return blockheaders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader >*
BlockHeadersMessage::mutable_blockheaders() {
  // @@protoc_insertion_point(field_mutable_list:protowire.BlockHeadersMessage.blockHeaders)
  return &blockheaders_;
}
inline const ::protowire::BlockHeader& BlockHeadersMessage::_internal_blockheaders(int index) const {
  return blockheaders_.Get(index);
}
inline const ::protowire::BlockHeader& BlockHeadersMessage::blockheaders(int index) const {
  // @@protoc_insertion_point(field_get:protowire.BlockHeadersMessage.blockHeaders)
  return _internal_blockheaders(index);
}
inline ::protowire::BlockHeader* BlockHeadersMessage::_internal_add_blockheaders() {
  return blockheaders_.Add();
}
inline ::protowire::BlockHeader* BlockHeadersMessage::add_blockheaders() {
  ::protowire::BlockHeader* _add = _internal_add_blockheaders();
  // @@protoc_insertion_point(field_add:protowire.BlockHeadersMessage.blockHeaders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader >&
BlockHeadersMessage::blockheaders() const {
  // @@protoc_insertion_point(field_list:protowire.BlockHeadersMessage.blockHeaders)
  return blockheaders_;
}

// -------------------------------------------------------------------

// RequestPruningPointAndItsAnticoneMessage

// -------------------------------------------------------------------

// RequestNextPruningPointAndItsAnticoneBlocksMessage

// -------------------------------------------------------------------

// BlockWithTrustedDataMessage

// .protowire.BlockMessage block = 1;
inline bool BlockWithTrustedDataMessage::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool BlockWithTrustedDataMessage::has_block() const {
  return _internal_has_block();
}
inline void BlockWithTrustedDataMessage::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::protowire::BlockMessage& BlockWithTrustedDataMessage::_internal_block() const {
  const ::protowire::BlockMessage* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::BlockMessage&>(
      ::protowire::_BlockMessage_default_instance_);
}
inline const ::protowire::BlockMessage& BlockWithTrustedDataMessage::block() const {
  // @@protoc_insertion_point(field_get:protowire.BlockWithTrustedDataMessage.block)
  return _internal_block();
}
inline void BlockWithTrustedDataMessage::unsafe_arena_set_allocated_block(
    ::protowire::BlockMessage* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.BlockWithTrustedDataMessage.block)
}
inline ::protowire::BlockMessage* BlockWithTrustedDataMessage::release_block() {
  
  ::protowire::BlockMessage* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::BlockMessage* BlockWithTrustedDataMessage::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:protowire.BlockWithTrustedDataMessage.block)
  
  ::protowire::BlockMessage* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::protowire::BlockMessage* BlockWithTrustedDataMessage::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::BlockMessage>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::protowire::BlockMessage* BlockWithTrustedDataMessage::mutable_block() {
  ::protowire::BlockMessage* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:protowire.BlockWithTrustedDataMessage.block)
  return _msg;
}
inline void BlockWithTrustedDataMessage::set_allocated_block(::protowire::BlockMessage* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::BlockMessage>::GetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:protowire.BlockWithTrustedDataMessage.block)
}

// uint64 daaScore = 2;
inline void BlockWithTrustedDataMessage::clear_daascore() {
  daascore_ = uint64_t{0u};
}
inline uint64_t BlockWithTrustedDataMessage::_internal_daascore() const {
  return daascore_;
}
inline uint64_t BlockWithTrustedDataMessage::daascore() const {
  // @@protoc_insertion_point(field_get:protowire.BlockWithTrustedDataMessage.daaScore)
  return _internal_daascore();
}
inline void BlockWithTrustedDataMessage::_internal_set_daascore(uint64_t value) {
  
  daascore_ = value;
}
inline void BlockWithTrustedDataMessage::set_daascore(uint64_t value) {
  _internal_set_daascore(value);
  // @@protoc_insertion_point(field_set:protowire.BlockWithTrustedDataMessage.daaScore)
}

// repeated .protowire.DaaBlock daaWindow = 3;
inline int BlockWithTrustedDataMessage::_internal_daawindow_size() const {
  return daawindow_.size();
}
inline int BlockWithTrustedDataMessage::daawindow_size() const {
  return _internal_daawindow_size();
}
inline void BlockWithTrustedDataMessage::clear_daawindow() {
  daawindow_.Clear();
}
inline ::protowire::DaaBlock* BlockWithTrustedDataMessage::mutable_daawindow(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.BlockWithTrustedDataMessage.daaWindow)
  return daawindow_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::DaaBlock >*
BlockWithTrustedDataMessage::mutable_daawindow() {
  // @@protoc_insertion_point(field_mutable_list:protowire.BlockWithTrustedDataMessage.daaWindow)
  return &daawindow_;
}
inline const ::protowire::DaaBlock& BlockWithTrustedDataMessage::_internal_daawindow(int index) const {
  return daawindow_.Get(index);
}
inline const ::protowire::DaaBlock& BlockWithTrustedDataMessage::daawindow(int index) const {
  // @@protoc_insertion_point(field_get:protowire.BlockWithTrustedDataMessage.daaWindow)
  return _internal_daawindow(index);
}
inline ::protowire::DaaBlock* BlockWithTrustedDataMessage::_internal_add_daawindow() {
  return daawindow_.Add();
}
inline ::protowire::DaaBlock* BlockWithTrustedDataMessage::add_daawindow() {
  ::protowire::DaaBlock* _add = _internal_add_daawindow();
  // @@protoc_insertion_point(field_add:protowire.BlockWithTrustedDataMessage.daaWindow)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::DaaBlock >&
BlockWithTrustedDataMessage::daawindow() const {
  // @@protoc_insertion_point(field_list:protowire.BlockWithTrustedDataMessage.daaWindow)
  return daawindow_;
}

// repeated .protowire.BlockGhostdagDataHashPair ghostdagData = 4;
inline int BlockWithTrustedDataMessage::_internal_ghostdagdata_size() const {
  return ghostdagdata_.size();
}
inline int BlockWithTrustedDataMessage::ghostdagdata_size() const {
  return _internal_ghostdagdata_size();
}
inline void BlockWithTrustedDataMessage::clear_ghostdagdata() {
  ghostdagdata_.Clear();
}
inline ::protowire::BlockGhostdagDataHashPair* BlockWithTrustedDataMessage::mutable_ghostdagdata(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.BlockWithTrustedDataMessage.ghostdagData)
  return ghostdagdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockGhostdagDataHashPair >*
BlockWithTrustedDataMessage::mutable_ghostdagdata() {
  // @@protoc_insertion_point(field_mutable_list:protowire.BlockWithTrustedDataMessage.ghostdagData)
  return &ghostdagdata_;
}
inline const ::protowire::BlockGhostdagDataHashPair& BlockWithTrustedDataMessage::_internal_ghostdagdata(int index) const {
  return ghostdagdata_.Get(index);
}
inline const ::protowire::BlockGhostdagDataHashPair& BlockWithTrustedDataMessage::ghostdagdata(int index) const {
  // @@protoc_insertion_point(field_get:protowire.BlockWithTrustedDataMessage.ghostdagData)
  return _internal_ghostdagdata(index);
}
inline ::protowire::BlockGhostdagDataHashPair* BlockWithTrustedDataMessage::_internal_add_ghostdagdata() {
  return ghostdagdata_.Add();
}
inline ::protowire::BlockGhostdagDataHashPair* BlockWithTrustedDataMessage::add_ghostdagdata() {
  ::protowire::BlockGhostdagDataHashPair* _add = _internal_add_ghostdagdata();
  // @@protoc_insertion_point(field_add:protowire.BlockWithTrustedDataMessage.ghostdagData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockGhostdagDataHashPair >&
BlockWithTrustedDataMessage::ghostdagdata() const {
  // @@protoc_insertion_point(field_list:protowire.BlockWithTrustedDataMessage.ghostdagData)
  return ghostdagdata_;
}

// -------------------------------------------------------------------

// DaaBlock

// .protowire.BlockMessage block = 3;
inline bool DaaBlock::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool DaaBlock::has_block() const {
  return _internal_has_block();
}
inline void DaaBlock::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::protowire::BlockMessage& DaaBlock::_internal_block() const {
  const ::protowire::BlockMessage* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::BlockMessage&>(
      ::protowire::_BlockMessage_default_instance_);
}
inline const ::protowire::BlockMessage& DaaBlock::block() const {
  // @@protoc_insertion_point(field_get:protowire.DaaBlock.block)
  return _internal_block();
}
inline void DaaBlock::unsafe_arena_set_allocated_block(
    ::protowire::BlockMessage* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.DaaBlock.block)
}
inline ::protowire::BlockMessage* DaaBlock::release_block() {
  
  ::protowire::BlockMessage* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::BlockMessage* DaaBlock::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:protowire.DaaBlock.block)
  
  ::protowire::BlockMessage* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::protowire::BlockMessage* DaaBlock::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::BlockMessage>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::protowire::BlockMessage* DaaBlock::mutable_block() {
  ::protowire::BlockMessage* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:protowire.DaaBlock.block)
  return _msg;
}
inline void DaaBlock::set_allocated_block(::protowire::BlockMessage* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::BlockMessage>::GetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:protowire.DaaBlock.block)
}

// .protowire.GhostdagData ghostdagData = 2;
inline bool DaaBlock::_internal_has_ghostdagdata() const {
  return this != internal_default_instance() && ghostdagdata_ != nullptr;
}
inline bool DaaBlock::has_ghostdagdata() const {
  return _internal_has_ghostdagdata();
}
inline void DaaBlock::clear_ghostdagdata() {
  if (GetArenaForAllocation() == nullptr && ghostdagdata_ != nullptr) {
    delete ghostdagdata_;
  }
  ghostdagdata_ = nullptr;
}
inline const ::protowire::GhostdagData& DaaBlock::_internal_ghostdagdata() const {
  const ::protowire::GhostdagData* p = ghostdagdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::GhostdagData&>(
      ::protowire::_GhostdagData_default_instance_);
}
inline const ::protowire::GhostdagData& DaaBlock::ghostdagdata() const {
  // @@protoc_insertion_point(field_get:protowire.DaaBlock.ghostdagData)
  return _internal_ghostdagdata();
}
inline void DaaBlock::unsafe_arena_set_allocated_ghostdagdata(
    ::protowire::GhostdagData* ghostdagdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ghostdagdata_);
  }
  ghostdagdata_ = ghostdagdata;
  if (ghostdagdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.DaaBlock.ghostdagData)
}
inline ::protowire::GhostdagData* DaaBlock::release_ghostdagdata() {
  
  ::protowire::GhostdagData* temp = ghostdagdata_;
  ghostdagdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::GhostdagData* DaaBlock::unsafe_arena_release_ghostdagdata() {
  // @@protoc_insertion_point(field_release:protowire.DaaBlock.ghostdagData)
  
  ::protowire::GhostdagData* temp = ghostdagdata_;
  ghostdagdata_ = nullptr;
  return temp;
}
inline ::protowire::GhostdagData* DaaBlock::_internal_mutable_ghostdagdata() {
  
  if (ghostdagdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::GhostdagData>(GetArenaForAllocation());
    ghostdagdata_ = p;
  }
  return ghostdagdata_;
}
inline ::protowire::GhostdagData* DaaBlock::mutable_ghostdagdata() {
  ::protowire::GhostdagData* _msg = _internal_mutable_ghostdagdata();
  // @@protoc_insertion_point(field_mutable:protowire.DaaBlock.ghostdagData)
  return _msg;
}
inline void DaaBlock::set_allocated_ghostdagdata(::protowire::GhostdagData* ghostdagdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ghostdagdata_;
  }
  if (ghostdagdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::GhostdagData>::GetOwningArena(ghostdagdata);
    if (message_arena != submessage_arena) {
      ghostdagdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ghostdagdata, submessage_arena);
    }
    
  } else {
    
  }
  ghostdagdata_ = ghostdagdata;
  // @@protoc_insertion_point(field_set_allocated:protowire.DaaBlock.ghostdagData)
}

// -------------------------------------------------------------------

// DaaBlockV4

// .protowire.BlockHeader header = 1;
inline bool DaaBlockV4::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DaaBlockV4::has_header() const {
  return _internal_has_header();
}
inline void DaaBlockV4::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protowire::BlockHeader& DaaBlockV4::_internal_header() const {
  const ::protowire::BlockHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::BlockHeader&>(
      ::protowire::_BlockHeader_default_instance_);
}
inline const ::protowire::BlockHeader& DaaBlockV4::header() const {
  // @@protoc_insertion_point(field_get:protowire.DaaBlockV4.header)
  return _internal_header();
}
inline void DaaBlockV4::unsafe_arena_set_allocated_header(
    ::protowire::BlockHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.DaaBlockV4.header)
}
inline ::protowire::BlockHeader* DaaBlockV4::release_header() {
  
  ::protowire::BlockHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::BlockHeader* DaaBlockV4::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:protowire.DaaBlockV4.header)
  
  ::protowire::BlockHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protowire::BlockHeader* DaaBlockV4::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::BlockHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::protowire::BlockHeader* DaaBlockV4::mutable_header() {
  ::protowire::BlockHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:protowire.DaaBlockV4.header)
  return _msg;
}
inline void DaaBlockV4::set_allocated_header(::protowire::BlockHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::BlockHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protowire.DaaBlockV4.header)
}

// .protowire.GhostdagData ghostdagData = 2;
inline bool DaaBlockV4::_internal_has_ghostdagdata() const {
  return this != internal_default_instance() && ghostdagdata_ != nullptr;
}
inline bool DaaBlockV4::has_ghostdagdata() const {
  return _internal_has_ghostdagdata();
}
inline void DaaBlockV4::clear_ghostdagdata() {
  if (GetArenaForAllocation() == nullptr && ghostdagdata_ != nullptr) {
    delete ghostdagdata_;
  }
  ghostdagdata_ = nullptr;
}
inline const ::protowire::GhostdagData& DaaBlockV4::_internal_ghostdagdata() const {
  const ::protowire::GhostdagData* p = ghostdagdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::GhostdagData&>(
      ::protowire::_GhostdagData_default_instance_);
}
inline const ::protowire::GhostdagData& DaaBlockV4::ghostdagdata() const {
  // @@protoc_insertion_point(field_get:protowire.DaaBlockV4.ghostdagData)
  return _internal_ghostdagdata();
}
inline void DaaBlockV4::unsafe_arena_set_allocated_ghostdagdata(
    ::protowire::GhostdagData* ghostdagdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ghostdagdata_);
  }
  ghostdagdata_ = ghostdagdata;
  if (ghostdagdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.DaaBlockV4.ghostdagData)
}
inline ::protowire::GhostdagData* DaaBlockV4::release_ghostdagdata() {
  
  ::protowire::GhostdagData* temp = ghostdagdata_;
  ghostdagdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::GhostdagData* DaaBlockV4::unsafe_arena_release_ghostdagdata() {
  // @@protoc_insertion_point(field_release:protowire.DaaBlockV4.ghostdagData)
  
  ::protowire::GhostdagData* temp = ghostdagdata_;
  ghostdagdata_ = nullptr;
  return temp;
}
inline ::protowire::GhostdagData* DaaBlockV4::_internal_mutable_ghostdagdata() {
  
  if (ghostdagdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::GhostdagData>(GetArenaForAllocation());
    ghostdagdata_ = p;
  }
  return ghostdagdata_;
}
inline ::protowire::GhostdagData* DaaBlockV4::mutable_ghostdagdata() {
  ::protowire::GhostdagData* _msg = _internal_mutable_ghostdagdata();
  // @@protoc_insertion_point(field_mutable:protowire.DaaBlockV4.ghostdagData)
  return _msg;
}
inline void DaaBlockV4::set_allocated_ghostdagdata(::protowire::GhostdagData* ghostdagdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ghostdagdata_;
  }
  if (ghostdagdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::GhostdagData>::GetOwningArena(ghostdagdata);
    if (message_arena != submessage_arena) {
      ghostdagdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ghostdagdata, submessage_arena);
    }
    
  } else {
    
  }
  ghostdagdata_ = ghostdagdata;
  // @@protoc_insertion_point(field_set_allocated:protowire.DaaBlockV4.ghostdagData)
}

// -------------------------------------------------------------------

// BlockGhostdagDataHashPair

// .protowire.Hash hash = 1;
inline bool BlockGhostdagDataHashPair::_internal_has_hash() const {
  return this != internal_default_instance() && hash_ != nullptr;
}
inline bool BlockGhostdagDataHashPair::has_hash() const {
  return _internal_has_hash();
}
inline void BlockGhostdagDataHashPair::clear_hash() {
  if (GetArenaForAllocation() == nullptr && hash_ != nullptr) {
    delete hash_;
  }
  hash_ = nullptr;
}
inline const ::protowire::Hash& BlockGhostdagDataHashPair::_internal_hash() const {
  const ::protowire::Hash* p = hash_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& BlockGhostdagDataHashPair::hash() const {
  // @@protoc_insertion_point(field_get:protowire.BlockGhostdagDataHashPair.hash)
  return _internal_hash();
}
inline void BlockGhostdagDataHashPair::unsafe_arena_set_allocated_hash(
    ::protowire::Hash* hash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash_);
  }
  hash_ = hash;
  if (hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.BlockGhostdagDataHashPair.hash)
}
inline ::protowire::Hash* BlockGhostdagDataHashPair::release_hash() {
  
  ::protowire::Hash* temp = hash_;
  hash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* BlockGhostdagDataHashPair::unsafe_arena_release_hash() {
  // @@protoc_insertion_point(field_release:protowire.BlockGhostdagDataHashPair.hash)
  
  ::protowire::Hash* temp = hash_;
  hash_ = nullptr;
  return temp;
}
inline ::protowire::Hash* BlockGhostdagDataHashPair::_internal_mutable_hash() {
  
  if (hash_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    hash_ = p;
  }
  return hash_;
}
inline ::protowire::Hash* BlockGhostdagDataHashPair::mutable_hash() {
  ::protowire::Hash* _msg = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:protowire.BlockGhostdagDataHashPair.hash)
  return _msg;
}
inline void BlockGhostdagDataHashPair::set_allocated_hash(::protowire::Hash* hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hash_;
  }
  if (hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(hash);
    if (message_arena != submessage_arena) {
      hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hash, submessage_arena);
    }
    
  } else {
    
  }
  hash_ = hash;
  // @@protoc_insertion_point(field_set_allocated:protowire.BlockGhostdagDataHashPair.hash)
}

// .protowire.GhostdagData ghostdagData = 2;
inline bool BlockGhostdagDataHashPair::_internal_has_ghostdagdata() const {
  return this != internal_default_instance() && ghostdagdata_ != nullptr;
}
inline bool BlockGhostdagDataHashPair::has_ghostdagdata() const {
  return _internal_has_ghostdagdata();
}
inline void BlockGhostdagDataHashPair::clear_ghostdagdata() {
  if (GetArenaForAllocation() == nullptr && ghostdagdata_ != nullptr) {
    delete ghostdagdata_;
  }
  ghostdagdata_ = nullptr;
}
inline const ::protowire::GhostdagData& BlockGhostdagDataHashPair::_internal_ghostdagdata() const {
  const ::protowire::GhostdagData* p = ghostdagdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::GhostdagData&>(
      ::protowire::_GhostdagData_default_instance_);
}
inline const ::protowire::GhostdagData& BlockGhostdagDataHashPair::ghostdagdata() const {
  // @@protoc_insertion_point(field_get:protowire.BlockGhostdagDataHashPair.ghostdagData)
  return _internal_ghostdagdata();
}
inline void BlockGhostdagDataHashPair::unsafe_arena_set_allocated_ghostdagdata(
    ::protowire::GhostdagData* ghostdagdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ghostdagdata_);
  }
  ghostdagdata_ = ghostdagdata;
  if (ghostdagdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.BlockGhostdagDataHashPair.ghostdagData)
}
inline ::protowire::GhostdagData* BlockGhostdagDataHashPair::release_ghostdagdata() {
  
  ::protowire::GhostdagData* temp = ghostdagdata_;
  ghostdagdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::GhostdagData* BlockGhostdagDataHashPair::unsafe_arena_release_ghostdagdata() {
  // @@protoc_insertion_point(field_release:protowire.BlockGhostdagDataHashPair.ghostdagData)
  
  ::protowire::GhostdagData* temp = ghostdagdata_;
  ghostdagdata_ = nullptr;
  return temp;
}
inline ::protowire::GhostdagData* BlockGhostdagDataHashPair::_internal_mutable_ghostdagdata() {
  
  if (ghostdagdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::GhostdagData>(GetArenaForAllocation());
    ghostdagdata_ = p;
  }
  return ghostdagdata_;
}
inline ::protowire::GhostdagData* BlockGhostdagDataHashPair::mutable_ghostdagdata() {
  ::protowire::GhostdagData* _msg = _internal_mutable_ghostdagdata();
  // @@protoc_insertion_point(field_mutable:protowire.BlockGhostdagDataHashPair.ghostdagData)
  return _msg;
}
inline void BlockGhostdagDataHashPair::set_allocated_ghostdagdata(::protowire::GhostdagData* ghostdagdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ghostdagdata_;
  }
  if (ghostdagdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::GhostdagData>::GetOwningArena(ghostdagdata);
    if (message_arena != submessage_arena) {
      ghostdagdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ghostdagdata, submessage_arena);
    }
    
  } else {
    
  }
  ghostdagdata_ = ghostdagdata;
  // @@protoc_insertion_point(field_set_allocated:protowire.BlockGhostdagDataHashPair.ghostdagData)
}

// -------------------------------------------------------------------

// GhostdagData

// uint64 blueScore = 1;
inline void GhostdagData::clear_bluescore() {
  bluescore_ = uint64_t{0u};
}
inline uint64_t GhostdagData::_internal_bluescore() const {
  return bluescore_;
}
inline uint64_t GhostdagData::bluescore() const {
  // @@protoc_insertion_point(field_get:protowire.GhostdagData.blueScore)
  return _internal_bluescore();
}
inline void GhostdagData::_internal_set_bluescore(uint64_t value) {
  
  bluescore_ = value;
}
inline void GhostdagData::set_bluescore(uint64_t value) {
  _internal_set_bluescore(value);
  // @@protoc_insertion_point(field_set:protowire.GhostdagData.blueScore)
}

// bytes blueWork = 2;
inline void GhostdagData::clear_bluework() {
  bluework_.ClearToEmpty();
}
inline const std::string& GhostdagData::bluework() const {
  // @@protoc_insertion_point(field_get:protowire.GhostdagData.blueWork)
  return _internal_bluework();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GhostdagData::set_bluework(ArgT0&& arg0, ArgT... args) {
 
 bluework_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GhostdagData.blueWork)
}
inline std::string* GhostdagData::mutable_bluework() {
  std::string* _s = _internal_mutable_bluework();
  // @@protoc_insertion_point(field_mutable:protowire.GhostdagData.blueWork)
  return _s;
}
inline const std::string& GhostdagData::_internal_bluework() const {
  return bluework_.Get();
}
inline void GhostdagData::_internal_set_bluework(const std::string& value) {
  
  bluework_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GhostdagData::_internal_mutable_bluework() {
  
  return bluework_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GhostdagData::release_bluework() {
  // @@protoc_insertion_point(field_release:protowire.GhostdagData.blueWork)
  return bluework_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GhostdagData::set_allocated_bluework(std::string* bluework) {
  if (bluework != nullptr) {
    
  } else {
    
  }
  bluework_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bluework,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bluework_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bluework_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GhostdagData.blueWork)
}

// .protowire.Hash selectedParent = 3;
inline bool GhostdagData::_internal_has_selectedparent() const {
  return this != internal_default_instance() && selectedparent_ != nullptr;
}
inline bool GhostdagData::has_selectedparent() const {
  return _internal_has_selectedparent();
}
inline void GhostdagData::clear_selectedparent() {
  if (GetArenaForAllocation() == nullptr && selectedparent_ != nullptr) {
    delete selectedparent_;
  }
  selectedparent_ = nullptr;
}
inline const ::protowire::Hash& GhostdagData::_internal_selectedparent() const {
  const ::protowire::Hash* p = selectedparent_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& GhostdagData::selectedparent() const {
  // @@protoc_insertion_point(field_get:protowire.GhostdagData.selectedParent)
  return _internal_selectedparent();
}
inline void GhostdagData::unsafe_arena_set_allocated_selectedparent(
    ::protowire::Hash* selectedparent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectedparent_);
  }
  selectedparent_ = selectedparent;
  if (selectedparent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GhostdagData.selectedParent)
}
inline ::protowire::Hash* GhostdagData::release_selectedparent() {
  
  ::protowire::Hash* temp = selectedparent_;
  selectedparent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* GhostdagData::unsafe_arena_release_selectedparent() {
  // @@protoc_insertion_point(field_release:protowire.GhostdagData.selectedParent)
  
  ::protowire::Hash* temp = selectedparent_;
  selectedparent_ = nullptr;
  return temp;
}
inline ::protowire::Hash* GhostdagData::_internal_mutable_selectedparent() {
  
  if (selectedparent_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    selectedparent_ = p;
  }
  return selectedparent_;
}
inline ::protowire::Hash* GhostdagData::mutable_selectedparent() {
  ::protowire::Hash* _msg = _internal_mutable_selectedparent();
  // @@protoc_insertion_point(field_mutable:protowire.GhostdagData.selectedParent)
  return _msg;
}
inline void GhostdagData::set_allocated_selectedparent(::protowire::Hash* selectedparent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete selectedparent_;
  }
  if (selectedparent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(selectedparent);
    if (message_arena != submessage_arena) {
      selectedparent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectedparent, submessage_arena);
    }
    
  } else {
    
  }
  selectedparent_ = selectedparent;
  // @@protoc_insertion_point(field_set_allocated:protowire.GhostdagData.selectedParent)
}

// repeated .protowire.Hash mergeSetBlues = 4;
inline int GhostdagData::_internal_mergesetblues_size() const {
  return mergesetblues_.size();
}
inline int GhostdagData::mergesetblues_size() const {
  return _internal_mergesetblues_size();
}
inline void GhostdagData::clear_mergesetblues() {
  mergesetblues_.Clear();
}
inline ::protowire::Hash* GhostdagData::mutable_mergesetblues(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GhostdagData.mergeSetBlues)
  return mergesetblues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
GhostdagData::mutable_mergesetblues() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GhostdagData.mergeSetBlues)
  return &mergesetblues_;
}
inline const ::protowire::Hash& GhostdagData::_internal_mergesetblues(int index) const {
  return mergesetblues_.Get(index);
}
inline const ::protowire::Hash& GhostdagData::mergesetblues(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GhostdagData.mergeSetBlues)
  return _internal_mergesetblues(index);
}
inline ::protowire::Hash* GhostdagData::_internal_add_mergesetblues() {
  return mergesetblues_.Add();
}
inline ::protowire::Hash* GhostdagData::add_mergesetblues() {
  ::protowire::Hash* _add = _internal_add_mergesetblues();
  // @@protoc_insertion_point(field_add:protowire.GhostdagData.mergeSetBlues)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
GhostdagData::mergesetblues() const {
  // @@protoc_insertion_point(field_list:protowire.GhostdagData.mergeSetBlues)
  return mergesetblues_;
}

// repeated .protowire.Hash mergeSetReds = 5;
inline int GhostdagData::_internal_mergesetreds_size() const {
  return mergesetreds_.size();
}
inline int GhostdagData::mergesetreds_size() const {
  return _internal_mergesetreds_size();
}
inline void GhostdagData::clear_mergesetreds() {
  mergesetreds_.Clear();
}
inline ::protowire::Hash* GhostdagData::mutable_mergesetreds(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GhostdagData.mergeSetReds)
  return mergesetreds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >*
GhostdagData::mutable_mergesetreds() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GhostdagData.mergeSetReds)
  return &mergesetreds_;
}
inline const ::protowire::Hash& GhostdagData::_internal_mergesetreds(int index) const {
  return mergesetreds_.Get(index);
}
inline const ::protowire::Hash& GhostdagData::mergesetreds(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GhostdagData.mergeSetReds)
  return _internal_mergesetreds(index);
}
inline ::protowire::Hash* GhostdagData::_internal_add_mergesetreds() {
  return mergesetreds_.Add();
}
inline ::protowire::Hash* GhostdagData::add_mergesetreds() {
  ::protowire::Hash* _add = _internal_add_mergesetreds();
  // @@protoc_insertion_point(field_add:protowire.GhostdagData.mergeSetReds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::Hash >&
GhostdagData::mergesetreds() const {
  // @@protoc_insertion_point(field_list:protowire.GhostdagData.mergeSetReds)
  return mergesetreds_;
}

// repeated .protowire.BluesAnticoneSizes bluesAnticoneSizes = 6;
inline int GhostdagData::_internal_bluesanticonesizes_size() const {
  return bluesanticonesizes_.size();
}
inline int GhostdagData::bluesanticonesizes_size() const {
  return _internal_bluesanticonesizes_size();
}
inline void GhostdagData::clear_bluesanticonesizes() {
  bluesanticonesizes_.Clear();
}
inline ::protowire::BluesAnticoneSizes* GhostdagData::mutable_bluesanticonesizes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GhostdagData.bluesAnticoneSizes)
  return bluesanticonesizes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BluesAnticoneSizes >*
GhostdagData::mutable_bluesanticonesizes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GhostdagData.bluesAnticoneSizes)
  return &bluesanticonesizes_;
}
inline const ::protowire::BluesAnticoneSizes& GhostdagData::_internal_bluesanticonesizes(int index) const {
  return bluesanticonesizes_.Get(index);
}
inline const ::protowire::BluesAnticoneSizes& GhostdagData::bluesanticonesizes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GhostdagData.bluesAnticoneSizes)
  return _internal_bluesanticonesizes(index);
}
inline ::protowire::BluesAnticoneSizes* GhostdagData::_internal_add_bluesanticonesizes() {
  return bluesanticonesizes_.Add();
}
inline ::protowire::BluesAnticoneSizes* GhostdagData::add_bluesanticonesizes() {
  ::protowire::BluesAnticoneSizes* _add = _internal_add_bluesanticonesizes();
  // @@protoc_insertion_point(field_add:protowire.GhostdagData.bluesAnticoneSizes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BluesAnticoneSizes >&
GhostdagData::bluesanticonesizes() const {
  // @@protoc_insertion_point(field_list:protowire.GhostdagData.bluesAnticoneSizes)
  return bluesanticonesizes_;
}

// -------------------------------------------------------------------

// BluesAnticoneSizes

// .protowire.Hash blueHash = 1;
inline bool BluesAnticoneSizes::_internal_has_bluehash() const {
  return this != internal_default_instance() && bluehash_ != nullptr;
}
inline bool BluesAnticoneSizes::has_bluehash() const {
  return _internal_has_bluehash();
}
inline void BluesAnticoneSizes::clear_bluehash() {
  if (GetArenaForAllocation() == nullptr && bluehash_ != nullptr) {
    delete bluehash_;
  }
  bluehash_ = nullptr;
}
inline const ::protowire::Hash& BluesAnticoneSizes::_internal_bluehash() const {
  const ::protowire::Hash* p = bluehash_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::Hash&>(
      ::protowire::_Hash_default_instance_);
}
inline const ::protowire::Hash& BluesAnticoneSizes::bluehash() const {
  // @@protoc_insertion_point(field_get:protowire.BluesAnticoneSizes.blueHash)
  return _internal_bluehash();
}
inline void BluesAnticoneSizes::unsafe_arena_set_allocated_bluehash(
    ::protowire::Hash* bluehash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bluehash_);
  }
  bluehash_ = bluehash;
  if (bluehash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.BluesAnticoneSizes.blueHash)
}
inline ::protowire::Hash* BluesAnticoneSizes::release_bluehash() {
  
  ::protowire::Hash* temp = bluehash_;
  bluehash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::Hash* BluesAnticoneSizes::unsafe_arena_release_bluehash() {
  // @@protoc_insertion_point(field_release:protowire.BluesAnticoneSizes.blueHash)
  
  ::protowire::Hash* temp = bluehash_;
  bluehash_ = nullptr;
  return temp;
}
inline ::protowire::Hash* BluesAnticoneSizes::_internal_mutable_bluehash() {
  
  if (bluehash_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::Hash>(GetArenaForAllocation());
    bluehash_ = p;
  }
  return bluehash_;
}
inline ::protowire::Hash* BluesAnticoneSizes::mutable_bluehash() {
  ::protowire::Hash* _msg = _internal_mutable_bluehash();
  // @@protoc_insertion_point(field_mutable:protowire.BluesAnticoneSizes.blueHash)
  return _msg;
}
inline void BluesAnticoneSizes::set_allocated_bluehash(::protowire::Hash* bluehash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bluehash_;
  }
  if (bluehash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::Hash>::GetOwningArena(bluehash);
    if (message_arena != submessage_arena) {
      bluehash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bluehash, submessage_arena);
    }
    
  } else {
    
  }
  bluehash_ = bluehash;
  // @@protoc_insertion_point(field_set_allocated:protowire.BluesAnticoneSizes.blueHash)
}

// uint32 anticoneSize = 2;
inline void BluesAnticoneSizes::clear_anticonesize() {
  anticonesize_ = 0u;
}
inline uint32_t BluesAnticoneSizes::_internal_anticonesize() const {
  return anticonesize_;
}
inline uint32_t BluesAnticoneSizes::anticonesize() const {
  // @@protoc_insertion_point(field_get:protowire.BluesAnticoneSizes.anticoneSize)
  return _internal_anticonesize();
}
inline void BluesAnticoneSizes::_internal_set_anticonesize(uint32_t value) {
  
  anticonesize_ = value;
}
inline void BluesAnticoneSizes::set_anticonesize(uint32_t value) {
  _internal_set_anticonesize(value);
  // @@protoc_insertion_point(field_set:protowire.BluesAnticoneSizes.anticoneSize)
}

// -------------------------------------------------------------------

// DoneBlocksWithTrustedDataMessage

// -------------------------------------------------------------------

// PruningPointsMessage

// repeated .protowire.BlockHeader headers = 1;
inline int PruningPointsMessage::_internal_headers_size() const {
  return headers_.size();
}
inline int PruningPointsMessage::headers_size() const {
  return _internal_headers_size();
}
inline void PruningPointsMessage::clear_headers() {
  headers_.Clear();
}
inline ::protowire::BlockHeader* PruningPointsMessage::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.PruningPointsMessage.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader >*
PruningPointsMessage::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:protowire.PruningPointsMessage.headers)
  return &headers_;
}
inline const ::protowire::BlockHeader& PruningPointsMessage::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::protowire::BlockHeader& PruningPointsMessage::headers(int index) const {
  // @@protoc_insertion_point(field_get:protowire.PruningPointsMessage.headers)
  return _internal_headers(index);
}
inline ::protowire::BlockHeader* PruningPointsMessage::_internal_add_headers() {
  return headers_.Add();
}
inline ::protowire::BlockHeader* PruningPointsMessage::add_headers() {
  ::protowire::BlockHeader* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:protowire.PruningPointsMessage.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader >&
PruningPointsMessage::headers() const {
  // @@protoc_insertion_point(field_list:protowire.PruningPointsMessage.headers)
  return headers_;
}

// -------------------------------------------------------------------

// RequestPruningPointProofMessage

// -------------------------------------------------------------------

// PruningPointProofMessage

// repeated .protowire.PruningPointProofHeaderArray headers = 1;
inline int PruningPointProofMessage::_internal_headers_size() const {
  return headers_.size();
}
inline int PruningPointProofMessage::headers_size() const {
  return _internal_headers_size();
}
inline void PruningPointProofMessage::clear_headers() {
  headers_.Clear();
}
inline ::protowire::PruningPointProofHeaderArray* PruningPointProofMessage::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.PruningPointProofMessage.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::PruningPointProofHeaderArray >*
PruningPointProofMessage::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:protowire.PruningPointProofMessage.headers)
  return &headers_;
}
inline const ::protowire::PruningPointProofHeaderArray& PruningPointProofMessage::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::protowire::PruningPointProofHeaderArray& PruningPointProofMessage::headers(int index) const {
  // @@protoc_insertion_point(field_get:protowire.PruningPointProofMessage.headers)
  return _internal_headers(index);
}
inline ::protowire::PruningPointProofHeaderArray* PruningPointProofMessage::_internal_add_headers() {
  return headers_.Add();
}
inline ::protowire::PruningPointProofHeaderArray* PruningPointProofMessage::add_headers() {
  ::protowire::PruningPointProofHeaderArray* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:protowire.PruningPointProofMessage.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::PruningPointProofHeaderArray >&
PruningPointProofMessage::headers() const {
  // @@protoc_insertion_point(field_list:protowire.PruningPointProofMessage.headers)
  return headers_;
}

// -------------------------------------------------------------------

// PruningPointProofHeaderArray

// repeated .protowire.BlockHeader headers = 1;
inline int PruningPointProofHeaderArray::_internal_headers_size() const {
  return headers_.size();
}
inline int PruningPointProofHeaderArray::headers_size() const {
  return _internal_headers_size();
}
inline void PruningPointProofHeaderArray::clear_headers() {
  headers_.Clear();
}
inline ::protowire::BlockHeader* PruningPointProofHeaderArray::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.PruningPointProofHeaderArray.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader >*
PruningPointProofHeaderArray::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:protowire.PruningPointProofHeaderArray.headers)
  return &headers_;
}
inline const ::protowire::BlockHeader& PruningPointProofHeaderArray::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::protowire::BlockHeader& PruningPointProofHeaderArray::headers(int index) const {
  // @@protoc_insertion_point(field_get:protowire.PruningPointProofHeaderArray.headers)
  return _internal_headers(index);
}
inline ::protowire::BlockHeader* PruningPointProofHeaderArray::_internal_add_headers() {
  return headers_.Add();
}
inline ::protowire::BlockHeader* PruningPointProofHeaderArray::add_headers() {
  ::protowire::BlockHeader* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:protowire.PruningPointProofHeaderArray.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockHeader >&
PruningPointProofHeaderArray::headers() const {
  // @@protoc_insertion_point(field_list:protowire.PruningPointProofHeaderArray.headers)
  return headers_;
}

// -------------------------------------------------------------------

// ReadyMessage

// -------------------------------------------------------------------

// BlockWithTrustedDataV4Message

// .protowire.BlockMessage block = 1;
inline bool BlockWithTrustedDataV4Message::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool BlockWithTrustedDataV4Message::has_block() const {
  return _internal_has_block();
}
inline void BlockWithTrustedDataV4Message::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::protowire::BlockMessage& BlockWithTrustedDataV4Message::_internal_block() const {
  const ::protowire::BlockMessage* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::BlockMessage&>(
      ::protowire::_BlockMessage_default_instance_);
}
inline const ::protowire::BlockMessage& BlockWithTrustedDataV4Message::block() const {
  // @@protoc_insertion_point(field_get:protowire.BlockWithTrustedDataV4Message.block)
  return _internal_block();
}
inline void BlockWithTrustedDataV4Message::unsafe_arena_set_allocated_block(
    ::protowire::BlockMessage* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.BlockWithTrustedDataV4Message.block)
}
inline ::protowire::BlockMessage* BlockWithTrustedDataV4Message::release_block() {
  
  ::protowire::BlockMessage* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::BlockMessage* BlockWithTrustedDataV4Message::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:protowire.BlockWithTrustedDataV4Message.block)
  
  ::protowire::BlockMessage* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::protowire::BlockMessage* BlockWithTrustedDataV4Message::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::BlockMessage>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::protowire::BlockMessage* BlockWithTrustedDataV4Message::mutable_block() {
  ::protowire::BlockMessage* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:protowire.BlockWithTrustedDataV4Message.block)
  return _msg;
}
inline void BlockWithTrustedDataV4Message::set_allocated_block(::protowire::BlockMessage* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::BlockMessage>::GetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:protowire.BlockWithTrustedDataV4Message.block)
}

// repeated uint64 daaWindowIndices = 2;
inline int BlockWithTrustedDataV4Message::_internal_daawindowindices_size() const {
  return daawindowindices_.size();
}
inline int BlockWithTrustedDataV4Message::daawindowindices_size() const {
  return _internal_daawindowindices_size();
}
inline void BlockWithTrustedDataV4Message::clear_daawindowindices() {
  daawindowindices_.Clear();
}
inline uint64_t BlockWithTrustedDataV4Message::_internal_daawindowindices(int index) const {
  return daawindowindices_.Get(index);
}
inline uint64_t BlockWithTrustedDataV4Message::daawindowindices(int index) const {
  // @@protoc_insertion_point(field_get:protowire.BlockWithTrustedDataV4Message.daaWindowIndices)
  return _internal_daawindowindices(index);
}
inline void BlockWithTrustedDataV4Message::set_daawindowindices(int index, uint64_t value) {
  daawindowindices_.Set(index, value);
  // @@protoc_insertion_point(field_set:protowire.BlockWithTrustedDataV4Message.daaWindowIndices)
}
inline void BlockWithTrustedDataV4Message::_internal_add_daawindowindices(uint64_t value) {
  daawindowindices_.Add(value);
}
inline void BlockWithTrustedDataV4Message::add_daawindowindices(uint64_t value) {
  _internal_add_daawindowindices(value);
  // @@protoc_insertion_point(field_add:protowire.BlockWithTrustedDataV4Message.daaWindowIndices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BlockWithTrustedDataV4Message::_internal_daawindowindices() const {
  return daawindowindices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BlockWithTrustedDataV4Message::daawindowindices() const {
  // @@protoc_insertion_point(field_list:protowire.BlockWithTrustedDataV4Message.daaWindowIndices)
  return _internal_daawindowindices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BlockWithTrustedDataV4Message::_internal_mutable_daawindowindices() {
  return &daawindowindices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BlockWithTrustedDataV4Message::mutable_daawindowindices() {
  // @@protoc_insertion_point(field_mutable_list:protowire.BlockWithTrustedDataV4Message.daaWindowIndices)
  return _internal_mutable_daawindowindices();
}

// repeated uint64 ghostdagDataIndices = 3;
inline int BlockWithTrustedDataV4Message::_internal_ghostdagdataindices_size() const {
  return ghostdagdataindices_.size();
}
inline int BlockWithTrustedDataV4Message::ghostdagdataindices_size() const {
  return _internal_ghostdagdataindices_size();
}
inline void BlockWithTrustedDataV4Message::clear_ghostdagdataindices() {
  ghostdagdataindices_.Clear();
}
inline uint64_t BlockWithTrustedDataV4Message::_internal_ghostdagdataindices(int index) const {
  return ghostdagdataindices_.Get(index);
}
inline uint64_t BlockWithTrustedDataV4Message::ghostdagdataindices(int index) const {
  // @@protoc_insertion_point(field_get:protowire.BlockWithTrustedDataV4Message.ghostdagDataIndices)
  return _internal_ghostdagdataindices(index);
}
inline void BlockWithTrustedDataV4Message::set_ghostdagdataindices(int index, uint64_t value) {
  ghostdagdataindices_.Set(index, value);
  // @@protoc_insertion_point(field_set:protowire.BlockWithTrustedDataV4Message.ghostdagDataIndices)
}
inline void BlockWithTrustedDataV4Message::_internal_add_ghostdagdataindices(uint64_t value) {
  ghostdagdataindices_.Add(value);
}
inline void BlockWithTrustedDataV4Message::add_ghostdagdataindices(uint64_t value) {
  _internal_add_ghostdagdataindices(value);
  // @@protoc_insertion_point(field_add:protowire.BlockWithTrustedDataV4Message.ghostdagDataIndices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BlockWithTrustedDataV4Message::_internal_ghostdagdataindices() const {
  return ghostdagdataindices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BlockWithTrustedDataV4Message::ghostdagdataindices() const {
  // @@protoc_insertion_point(field_list:protowire.BlockWithTrustedDataV4Message.ghostdagDataIndices)
  return _internal_ghostdagdataindices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BlockWithTrustedDataV4Message::_internal_mutable_ghostdagdataindices() {
  return &ghostdagdataindices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BlockWithTrustedDataV4Message::mutable_ghostdagdataindices() {
  // @@protoc_insertion_point(field_mutable_list:protowire.BlockWithTrustedDataV4Message.ghostdagDataIndices)
  return _internal_mutable_ghostdagdataindices();
}

// -------------------------------------------------------------------

// TrustedDataMessage

// repeated .protowire.DaaBlockV4 daaWindow = 1;
inline int TrustedDataMessage::_internal_daawindow_size() const {
  return daawindow_.size();
}
inline int TrustedDataMessage::daawindow_size() const {
  return _internal_daawindow_size();
}
inline void TrustedDataMessage::clear_daawindow() {
  daawindow_.Clear();
}
inline ::protowire::DaaBlockV4* TrustedDataMessage::mutable_daawindow(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.TrustedDataMessage.daaWindow)
  return daawindow_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::DaaBlockV4 >*
TrustedDataMessage::mutable_daawindow() {
  // @@protoc_insertion_point(field_mutable_list:protowire.TrustedDataMessage.daaWindow)
  return &daawindow_;
}
inline const ::protowire::DaaBlockV4& TrustedDataMessage::_internal_daawindow(int index) const {
  return daawindow_.Get(index);
}
inline const ::protowire::DaaBlockV4& TrustedDataMessage::daawindow(int index) const {
  // @@protoc_insertion_point(field_get:protowire.TrustedDataMessage.daaWindow)
  return _internal_daawindow(index);
}
inline ::protowire::DaaBlockV4* TrustedDataMessage::_internal_add_daawindow() {
  return daawindow_.Add();
}
inline ::protowire::DaaBlockV4* TrustedDataMessage::add_daawindow() {
  ::protowire::DaaBlockV4* _add = _internal_add_daawindow();
  // @@protoc_insertion_point(field_add:protowire.TrustedDataMessage.daaWindow)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::DaaBlockV4 >&
TrustedDataMessage::daawindow() const {
  // @@protoc_insertion_point(field_list:protowire.TrustedDataMessage.daaWindow)
  return daawindow_;
}

// repeated .protowire.BlockGhostdagDataHashPair ghostdagData = 2;
inline int TrustedDataMessage::_internal_ghostdagdata_size() const {
  return ghostdagdata_.size();
}
inline int TrustedDataMessage::ghostdagdata_size() const {
  return _internal_ghostdagdata_size();
}
inline void TrustedDataMessage::clear_ghostdagdata() {
  ghostdagdata_.Clear();
}
inline ::protowire::BlockGhostdagDataHashPair* TrustedDataMessage::mutable_ghostdagdata(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.TrustedDataMessage.ghostdagData)
  return ghostdagdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockGhostdagDataHashPair >*
TrustedDataMessage::mutable_ghostdagdata() {
  // @@protoc_insertion_point(field_mutable_list:protowire.TrustedDataMessage.ghostdagData)
  return &ghostdagdata_;
}
inline const ::protowire::BlockGhostdagDataHashPair& TrustedDataMessage::_internal_ghostdagdata(int index) const {
  return ghostdagdata_.Get(index);
}
inline const ::protowire::BlockGhostdagDataHashPair& TrustedDataMessage::ghostdagdata(int index) const {
  // @@protoc_insertion_point(field_get:protowire.TrustedDataMessage.ghostdagData)
  return _internal_ghostdagdata(index);
}
inline ::protowire::BlockGhostdagDataHashPair* TrustedDataMessage::_internal_add_ghostdagdata() {
  return ghostdagdata_.Add();
}
inline ::protowire::BlockGhostdagDataHashPair* TrustedDataMessage::add_ghostdagdata() {
  ::protowire::BlockGhostdagDataHashPair* _add = _internal_add_ghostdagdata();
  // @@protoc_insertion_point(field_add:protowire.TrustedDataMessage.ghostdagData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BlockGhostdagDataHashPair >&
TrustedDataMessage::ghostdagdata() const {
  // @@protoc_insertion_point(field_list:protowire.TrustedDataMessage.ghostdagData)
  return ghostdagdata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protowire

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_p2p_2eproto
