// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[108]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto;
namespace protowire {
class AcceptedTransactionIds;
struct AcceptedTransactionIdsDefaultTypeInternal;
extern AcceptedTransactionIdsDefaultTypeInternal _AcceptedTransactionIds_default_instance_;
class AddPeerRequestMessage;
struct AddPeerRequestMessageDefaultTypeInternal;
extern AddPeerRequestMessageDefaultTypeInternal _AddPeerRequestMessage_default_instance_;
class AddPeerResponseMessage;
struct AddPeerResponseMessageDefaultTypeInternal;
extern AddPeerResponseMessageDefaultTypeInternal _AddPeerResponseMessage_default_instance_;
class BalancesByAddressEntry;
struct BalancesByAddressEntryDefaultTypeInternal;
extern BalancesByAddressEntryDefaultTypeInternal _BalancesByAddressEntry_default_instance_;
class BanRequestMessage;
struct BanRequestMessageDefaultTypeInternal;
extern BanRequestMessageDefaultTypeInternal _BanRequestMessage_default_instance_;
class BanResponseMessage;
struct BanResponseMessageDefaultTypeInternal;
extern BanResponseMessageDefaultTypeInternal _BanResponseMessage_default_instance_;
class BlockAddedNotificationMessage;
struct BlockAddedNotificationMessageDefaultTypeInternal;
extern BlockAddedNotificationMessageDefaultTypeInternal _BlockAddedNotificationMessage_default_instance_;
class EstimateNetworkHashesPerSecondRequestMessage;
struct EstimateNetworkHashesPerSecondRequestMessageDefaultTypeInternal;
extern EstimateNetworkHashesPerSecondRequestMessageDefaultTypeInternal _EstimateNetworkHashesPerSecondRequestMessage_default_instance_;
class EstimateNetworkHashesPerSecondResponseMessage;
struct EstimateNetworkHashesPerSecondResponseMessageDefaultTypeInternal;
extern EstimateNetworkHashesPerSecondResponseMessageDefaultTypeInternal _EstimateNetworkHashesPerSecondResponseMessage_default_instance_;
class FinalityConflictNotificationMessage;
struct FinalityConflictNotificationMessageDefaultTypeInternal;
extern FinalityConflictNotificationMessageDefaultTypeInternal _FinalityConflictNotificationMessage_default_instance_;
class FinalityConflictResolvedNotificationMessage;
struct FinalityConflictResolvedNotificationMessageDefaultTypeInternal;
extern FinalityConflictResolvedNotificationMessageDefaultTypeInternal _FinalityConflictResolvedNotificationMessage_default_instance_;
class GetBalanceByAddressRequestMessage;
struct GetBalanceByAddressRequestMessageDefaultTypeInternal;
extern GetBalanceByAddressRequestMessageDefaultTypeInternal _GetBalanceByAddressRequestMessage_default_instance_;
class GetBalanceByAddressResponseMessage;
struct GetBalanceByAddressResponseMessageDefaultTypeInternal;
extern GetBalanceByAddressResponseMessageDefaultTypeInternal _GetBalanceByAddressResponseMessage_default_instance_;
class GetBalancesByAddressesRequestMessage;
struct GetBalancesByAddressesRequestMessageDefaultTypeInternal;
extern GetBalancesByAddressesRequestMessageDefaultTypeInternal _GetBalancesByAddressesRequestMessage_default_instance_;
class GetBalancesByAddressesResponseMessage;
struct GetBalancesByAddressesResponseMessageDefaultTypeInternal;
extern GetBalancesByAddressesResponseMessageDefaultTypeInternal _GetBalancesByAddressesResponseMessage_default_instance_;
class GetBlockCountRequestMessage;
struct GetBlockCountRequestMessageDefaultTypeInternal;
extern GetBlockCountRequestMessageDefaultTypeInternal _GetBlockCountRequestMessage_default_instance_;
class GetBlockCountResponseMessage;
struct GetBlockCountResponseMessageDefaultTypeInternal;
extern GetBlockCountResponseMessageDefaultTypeInternal _GetBlockCountResponseMessage_default_instance_;
class GetBlockDagInfoRequestMessage;
struct GetBlockDagInfoRequestMessageDefaultTypeInternal;
extern GetBlockDagInfoRequestMessageDefaultTypeInternal _GetBlockDagInfoRequestMessage_default_instance_;
class GetBlockDagInfoResponseMessage;
struct GetBlockDagInfoResponseMessageDefaultTypeInternal;
extern GetBlockDagInfoResponseMessageDefaultTypeInternal _GetBlockDagInfoResponseMessage_default_instance_;
class GetBlockRequestMessage;
struct GetBlockRequestMessageDefaultTypeInternal;
extern GetBlockRequestMessageDefaultTypeInternal _GetBlockRequestMessage_default_instance_;
class GetBlockResponseMessage;
struct GetBlockResponseMessageDefaultTypeInternal;
extern GetBlockResponseMessageDefaultTypeInternal _GetBlockResponseMessage_default_instance_;
class GetBlockTemplateRequestMessage;
struct GetBlockTemplateRequestMessageDefaultTypeInternal;
extern GetBlockTemplateRequestMessageDefaultTypeInternal _GetBlockTemplateRequestMessage_default_instance_;
class GetBlockTemplateResponseMessage;
struct GetBlockTemplateResponseMessageDefaultTypeInternal;
extern GetBlockTemplateResponseMessageDefaultTypeInternal _GetBlockTemplateResponseMessage_default_instance_;
class GetBlocksRequestMessage;
struct GetBlocksRequestMessageDefaultTypeInternal;
extern GetBlocksRequestMessageDefaultTypeInternal _GetBlocksRequestMessage_default_instance_;
class GetBlocksResponseMessage;
struct GetBlocksResponseMessageDefaultTypeInternal;
extern GetBlocksResponseMessageDefaultTypeInternal _GetBlocksResponseMessage_default_instance_;
class GetCoinSupplyRequestMessage;
struct GetCoinSupplyRequestMessageDefaultTypeInternal;
extern GetCoinSupplyRequestMessageDefaultTypeInternal _GetCoinSupplyRequestMessage_default_instance_;
class GetCoinSupplyResponseMessage;
struct GetCoinSupplyResponseMessageDefaultTypeInternal;
extern GetCoinSupplyResponseMessageDefaultTypeInternal _GetCoinSupplyResponseMessage_default_instance_;
class GetConnectedPeerInfoMessage;
struct GetConnectedPeerInfoMessageDefaultTypeInternal;
extern GetConnectedPeerInfoMessageDefaultTypeInternal _GetConnectedPeerInfoMessage_default_instance_;
class GetConnectedPeerInfoRequestMessage;
struct GetConnectedPeerInfoRequestMessageDefaultTypeInternal;
extern GetConnectedPeerInfoRequestMessageDefaultTypeInternal _GetConnectedPeerInfoRequestMessage_default_instance_;
class GetConnectedPeerInfoResponseMessage;
struct GetConnectedPeerInfoResponseMessageDefaultTypeInternal;
extern GetConnectedPeerInfoResponseMessageDefaultTypeInternal _GetConnectedPeerInfoResponseMessage_default_instance_;
class GetCurrentNetworkRequestMessage;
struct GetCurrentNetworkRequestMessageDefaultTypeInternal;
extern GetCurrentNetworkRequestMessageDefaultTypeInternal _GetCurrentNetworkRequestMessage_default_instance_;
class GetCurrentNetworkResponseMessage;
struct GetCurrentNetworkResponseMessageDefaultTypeInternal;
extern GetCurrentNetworkResponseMessageDefaultTypeInternal _GetCurrentNetworkResponseMessage_default_instance_;
class GetHeadersRequestMessage;
struct GetHeadersRequestMessageDefaultTypeInternal;
extern GetHeadersRequestMessageDefaultTypeInternal _GetHeadersRequestMessage_default_instance_;
class GetHeadersResponseMessage;
struct GetHeadersResponseMessageDefaultTypeInternal;
extern GetHeadersResponseMessageDefaultTypeInternal _GetHeadersResponseMessage_default_instance_;
class GetInfoRequestMessage;
struct GetInfoRequestMessageDefaultTypeInternal;
extern GetInfoRequestMessageDefaultTypeInternal _GetInfoRequestMessage_default_instance_;
class GetInfoResponseMessage;
struct GetInfoResponseMessageDefaultTypeInternal;
extern GetInfoResponseMessageDefaultTypeInternal _GetInfoResponseMessage_default_instance_;
class GetMempoolEntriesByAddressesRequestMessage;
struct GetMempoolEntriesByAddressesRequestMessageDefaultTypeInternal;
extern GetMempoolEntriesByAddressesRequestMessageDefaultTypeInternal _GetMempoolEntriesByAddressesRequestMessage_default_instance_;
class GetMempoolEntriesByAddressesResponseMessage;
struct GetMempoolEntriesByAddressesResponseMessageDefaultTypeInternal;
extern GetMempoolEntriesByAddressesResponseMessageDefaultTypeInternal _GetMempoolEntriesByAddressesResponseMessage_default_instance_;
class GetMempoolEntriesRequestMessage;
struct GetMempoolEntriesRequestMessageDefaultTypeInternal;
extern GetMempoolEntriesRequestMessageDefaultTypeInternal _GetMempoolEntriesRequestMessage_default_instance_;
class GetMempoolEntriesResponseMessage;
struct GetMempoolEntriesResponseMessageDefaultTypeInternal;
extern GetMempoolEntriesResponseMessageDefaultTypeInternal _GetMempoolEntriesResponseMessage_default_instance_;
class GetMempoolEntryRequestMessage;
struct GetMempoolEntryRequestMessageDefaultTypeInternal;
extern GetMempoolEntryRequestMessageDefaultTypeInternal _GetMempoolEntryRequestMessage_default_instance_;
class GetMempoolEntryResponseMessage;
struct GetMempoolEntryResponseMessageDefaultTypeInternal;
extern GetMempoolEntryResponseMessageDefaultTypeInternal _GetMempoolEntryResponseMessage_default_instance_;
class GetPeerAddressesKnownAddressMessage;
struct GetPeerAddressesKnownAddressMessageDefaultTypeInternal;
extern GetPeerAddressesKnownAddressMessageDefaultTypeInternal _GetPeerAddressesKnownAddressMessage_default_instance_;
class GetPeerAddressesRequestMessage;
struct GetPeerAddressesRequestMessageDefaultTypeInternal;
extern GetPeerAddressesRequestMessageDefaultTypeInternal _GetPeerAddressesRequestMessage_default_instance_;
class GetPeerAddressesResponseMessage;
struct GetPeerAddressesResponseMessageDefaultTypeInternal;
extern GetPeerAddressesResponseMessageDefaultTypeInternal _GetPeerAddressesResponseMessage_default_instance_;
class GetSelectedTipHashRequestMessage;
struct GetSelectedTipHashRequestMessageDefaultTypeInternal;
extern GetSelectedTipHashRequestMessageDefaultTypeInternal _GetSelectedTipHashRequestMessage_default_instance_;
class GetSelectedTipHashResponseMessage;
struct GetSelectedTipHashResponseMessageDefaultTypeInternal;
extern GetSelectedTipHashResponseMessageDefaultTypeInternal _GetSelectedTipHashResponseMessage_default_instance_;
class GetSubnetworkRequestMessage;
struct GetSubnetworkRequestMessageDefaultTypeInternal;
extern GetSubnetworkRequestMessageDefaultTypeInternal _GetSubnetworkRequestMessage_default_instance_;
class GetSubnetworkResponseMessage;
struct GetSubnetworkResponseMessageDefaultTypeInternal;
extern GetSubnetworkResponseMessageDefaultTypeInternal _GetSubnetworkResponseMessage_default_instance_;
class GetUtxosByAddressesRequestMessage;
struct GetUtxosByAddressesRequestMessageDefaultTypeInternal;
extern GetUtxosByAddressesRequestMessageDefaultTypeInternal _GetUtxosByAddressesRequestMessage_default_instance_;
class GetUtxosByAddressesResponseMessage;
struct GetUtxosByAddressesResponseMessageDefaultTypeInternal;
extern GetUtxosByAddressesResponseMessageDefaultTypeInternal _GetUtxosByAddressesResponseMessage_default_instance_;
class GetVirtualSelectedParentBlueScoreRequestMessage;
struct GetVirtualSelectedParentBlueScoreRequestMessageDefaultTypeInternal;
extern GetVirtualSelectedParentBlueScoreRequestMessageDefaultTypeInternal _GetVirtualSelectedParentBlueScoreRequestMessage_default_instance_;
class GetVirtualSelectedParentBlueScoreResponseMessage;
struct GetVirtualSelectedParentBlueScoreResponseMessageDefaultTypeInternal;
extern GetVirtualSelectedParentBlueScoreResponseMessageDefaultTypeInternal _GetVirtualSelectedParentBlueScoreResponseMessage_default_instance_;
class GetVirtualSelectedParentChainFromBlockRequestMessage;
struct GetVirtualSelectedParentChainFromBlockRequestMessageDefaultTypeInternal;
extern GetVirtualSelectedParentChainFromBlockRequestMessageDefaultTypeInternal _GetVirtualSelectedParentChainFromBlockRequestMessage_default_instance_;
class GetVirtualSelectedParentChainFromBlockResponseMessage;
struct GetVirtualSelectedParentChainFromBlockResponseMessageDefaultTypeInternal;
extern GetVirtualSelectedParentChainFromBlockResponseMessageDefaultTypeInternal _GetVirtualSelectedParentChainFromBlockResponseMessage_default_instance_;
class MempoolEntry;
struct MempoolEntryDefaultTypeInternal;
extern MempoolEntryDefaultTypeInternal _MempoolEntry_default_instance_;
class MempoolEntryByAddress;
struct MempoolEntryByAddressDefaultTypeInternal;
extern MempoolEntryByAddressDefaultTypeInternal _MempoolEntryByAddress_default_instance_;
class NewBlockTemplateNotificationMessage;
struct NewBlockTemplateNotificationMessageDefaultTypeInternal;
extern NewBlockTemplateNotificationMessageDefaultTypeInternal _NewBlockTemplateNotificationMessage_default_instance_;
class NotifyBlockAddedRequestMessage;
struct NotifyBlockAddedRequestMessageDefaultTypeInternal;
extern NotifyBlockAddedRequestMessageDefaultTypeInternal _NotifyBlockAddedRequestMessage_default_instance_;
class NotifyBlockAddedResponseMessage;
struct NotifyBlockAddedResponseMessageDefaultTypeInternal;
extern NotifyBlockAddedResponseMessageDefaultTypeInternal _NotifyBlockAddedResponseMessage_default_instance_;
class NotifyFinalityConflictsRequestMessage;
struct NotifyFinalityConflictsRequestMessageDefaultTypeInternal;
extern NotifyFinalityConflictsRequestMessageDefaultTypeInternal _NotifyFinalityConflictsRequestMessage_default_instance_;
class NotifyFinalityConflictsResponseMessage;
struct NotifyFinalityConflictsResponseMessageDefaultTypeInternal;
extern NotifyFinalityConflictsResponseMessageDefaultTypeInternal _NotifyFinalityConflictsResponseMessage_default_instance_;
class NotifyNewBlockTemplateRequestMessage;
struct NotifyNewBlockTemplateRequestMessageDefaultTypeInternal;
extern NotifyNewBlockTemplateRequestMessageDefaultTypeInternal _NotifyNewBlockTemplateRequestMessage_default_instance_;
class NotifyNewBlockTemplateResponseMessage;
struct NotifyNewBlockTemplateResponseMessageDefaultTypeInternal;
extern NotifyNewBlockTemplateResponseMessageDefaultTypeInternal _NotifyNewBlockTemplateResponseMessage_default_instance_;
class NotifyPruningPointUTXOSetOverrideRequestMessage;
struct NotifyPruningPointUTXOSetOverrideRequestMessageDefaultTypeInternal;
extern NotifyPruningPointUTXOSetOverrideRequestMessageDefaultTypeInternal _NotifyPruningPointUTXOSetOverrideRequestMessage_default_instance_;
class NotifyPruningPointUTXOSetOverrideResponseMessage;
struct NotifyPruningPointUTXOSetOverrideResponseMessageDefaultTypeInternal;
extern NotifyPruningPointUTXOSetOverrideResponseMessageDefaultTypeInternal _NotifyPruningPointUTXOSetOverrideResponseMessage_default_instance_;
class NotifyUtxosChangedRequestMessage;
struct NotifyUtxosChangedRequestMessageDefaultTypeInternal;
extern NotifyUtxosChangedRequestMessageDefaultTypeInternal _NotifyUtxosChangedRequestMessage_default_instance_;
class NotifyUtxosChangedResponseMessage;
struct NotifyUtxosChangedResponseMessageDefaultTypeInternal;
extern NotifyUtxosChangedResponseMessageDefaultTypeInternal _NotifyUtxosChangedResponseMessage_default_instance_;
class NotifyVirtualDaaScoreChangedRequestMessage;
struct NotifyVirtualDaaScoreChangedRequestMessageDefaultTypeInternal;
extern NotifyVirtualDaaScoreChangedRequestMessageDefaultTypeInternal _NotifyVirtualDaaScoreChangedRequestMessage_default_instance_;
class NotifyVirtualDaaScoreChangedResponseMessage;
struct NotifyVirtualDaaScoreChangedResponseMessageDefaultTypeInternal;
extern NotifyVirtualDaaScoreChangedResponseMessageDefaultTypeInternal _NotifyVirtualDaaScoreChangedResponseMessage_default_instance_;
class NotifyVirtualSelectedParentBlueScoreChangedRequestMessage;
struct NotifyVirtualSelectedParentBlueScoreChangedRequestMessageDefaultTypeInternal;
extern NotifyVirtualSelectedParentBlueScoreChangedRequestMessageDefaultTypeInternal _NotifyVirtualSelectedParentBlueScoreChangedRequestMessage_default_instance_;
class NotifyVirtualSelectedParentBlueScoreChangedResponseMessage;
struct NotifyVirtualSelectedParentBlueScoreChangedResponseMessageDefaultTypeInternal;
extern NotifyVirtualSelectedParentBlueScoreChangedResponseMessageDefaultTypeInternal _NotifyVirtualSelectedParentBlueScoreChangedResponseMessage_default_instance_;
class NotifyVirtualSelectedParentChainChangedRequestMessage;
struct NotifyVirtualSelectedParentChainChangedRequestMessageDefaultTypeInternal;
extern NotifyVirtualSelectedParentChainChangedRequestMessageDefaultTypeInternal _NotifyVirtualSelectedParentChainChangedRequestMessage_default_instance_;
class NotifyVirtualSelectedParentChainChangedResponseMessage;
struct NotifyVirtualSelectedParentChainChangedResponseMessageDefaultTypeInternal;
extern NotifyVirtualSelectedParentChainChangedResponseMessageDefaultTypeInternal _NotifyVirtualSelectedParentChainChangedResponseMessage_default_instance_;
class PruningPointUTXOSetOverrideNotificationMessage;
struct PruningPointUTXOSetOverrideNotificationMessageDefaultTypeInternal;
extern PruningPointUTXOSetOverrideNotificationMessageDefaultTypeInternal _PruningPointUTXOSetOverrideNotificationMessage_default_instance_;
class RPCError;
struct RPCErrorDefaultTypeInternal;
extern RPCErrorDefaultTypeInternal _RPCError_default_instance_;
class ResolveFinalityConflictRequestMessage;
struct ResolveFinalityConflictRequestMessageDefaultTypeInternal;
extern ResolveFinalityConflictRequestMessageDefaultTypeInternal _ResolveFinalityConflictRequestMessage_default_instance_;
class ResolveFinalityConflictResponseMessage;
struct ResolveFinalityConflictResponseMessageDefaultTypeInternal;
extern ResolveFinalityConflictResponseMessageDefaultTypeInternal _ResolveFinalityConflictResponseMessage_default_instance_;
class RpcBlock;
struct RpcBlockDefaultTypeInternal;
extern RpcBlockDefaultTypeInternal _RpcBlock_default_instance_;
class RpcBlockHeader;
struct RpcBlockHeaderDefaultTypeInternal;
extern RpcBlockHeaderDefaultTypeInternal _RpcBlockHeader_default_instance_;
class RpcBlockLevelParents;
struct RpcBlockLevelParentsDefaultTypeInternal;
extern RpcBlockLevelParentsDefaultTypeInternal _RpcBlockLevelParents_default_instance_;
class RpcBlockVerboseData;
struct RpcBlockVerboseDataDefaultTypeInternal;
extern RpcBlockVerboseDataDefaultTypeInternal _RpcBlockVerboseData_default_instance_;
class RpcOutpoint;
struct RpcOutpointDefaultTypeInternal;
extern RpcOutpointDefaultTypeInternal _RpcOutpoint_default_instance_;
class RpcScriptPublicKey;
struct RpcScriptPublicKeyDefaultTypeInternal;
extern RpcScriptPublicKeyDefaultTypeInternal _RpcScriptPublicKey_default_instance_;
class RpcTransaction;
struct RpcTransactionDefaultTypeInternal;
extern RpcTransactionDefaultTypeInternal _RpcTransaction_default_instance_;
class RpcTransactionInput;
struct RpcTransactionInputDefaultTypeInternal;
extern RpcTransactionInputDefaultTypeInternal _RpcTransactionInput_default_instance_;
class RpcTransactionInputVerboseData;
struct RpcTransactionInputVerboseDataDefaultTypeInternal;
extern RpcTransactionInputVerboseDataDefaultTypeInternal _RpcTransactionInputVerboseData_default_instance_;
class RpcTransactionOutput;
struct RpcTransactionOutputDefaultTypeInternal;
extern RpcTransactionOutputDefaultTypeInternal _RpcTransactionOutput_default_instance_;
class RpcTransactionOutputVerboseData;
struct RpcTransactionOutputVerboseDataDefaultTypeInternal;
extern RpcTransactionOutputVerboseDataDefaultTypeInternal _RpcTransactionOutputVerboseData_default_instance_;
class RpcTransactionVerboseData;
struct RpcTransactionVerboseDataDefaultTypeInternal;
extern RpcTransactionVerboseDataDefaultTypeInternal _RpcTransactionVerboseData_default_instance_;
class RpcUtxoEntry;
struct RpcUtxoEntryDefaultTypeInternal;
extern RpcUtxoEntryDefaultTypeInternal _RpcUtxoEntry_default_instance_;
class ShutDownRequestMessage;
struct ShutDownRequestMessageDefaultTypeInternal;
extern ShutDownRequestMessageDefaultTypeInternal _ShutDownRequestMessage_default_instance_;
class ShutDownResponseMessage;
struct ShutDownResponseMessageDefaultTypeInternal;
extern ShutDownResponseMessageDefaultTypeInternal _ShutDownResponseMessage_default_instance_;
class StopNotifyingPruningPointUTXOSetOverrideRequestMessage;
struct StopNotifyingPruningPointUTXOSetOverrideRequestMessageDefaultTypeInternal;
extern StopNotifyingPruningPointUTXOSetOverrideRequestMessageDefaultTypeInternal _StopNotifyingPruningPointUTXOSetOverrideRequestMessage_default_instance_;
class StopNotifyingPruningPointUTXOSetOverrideResponseMessage;
struct StopNotifyingPruningPointUTXOSetOverrideResponseMessageDefaultTypeInternal;
extern StopNotifyingPruningPointUTXOSetOverrideResponseMessageDefaultTypeInternal _StopNotifyingPruningPointUTXOSetOverrideResponseMessage_default_instance_;
class StopNotifyingUtxosChangedRequestMessage;
struct StopNotifyingUtxosChangedRequestMessageDefaultTypeInternal;
extern StopNotifyingUtxosChangedRequestMessageDefaultTypeInternal _StopNotifyingUtxosChangedRequestMessage_default_instance_;
class StopNotifyingUtxosChangedResponseMessage;
struct StopNotifyingUtxosChangedResponseMessageDefaultTypeInternal;
extern StopNotifyingUtxosChangedResponseMessageDefaultTypeInternal _StopNotifyingUtxosChangedResponseMessage_default_instance_;
class SubmitBlockRequestMessage;
struct SubmitBlockRequestMessageDefaultTypeInternal;
extern SubmitBlockRequestMessageDefaultTypeInternal _SubmitBlockRequestMessage_default_instance_;
class SubmitBlockResponseMessage;
struct SubmitBlockResponseMessageDefaultTypeInternal;
extern SubmitBlockResponseMessageDefaultTypeInternal _SubmitBlockResponseMessage_default_instance_;
class SubmitTransactionRequestMessage;
struct SubmitTransactionRequestMessageDefaultTypeInternal;
extern SubmitTransactionRequestMessageDefaultTypeInternal _SubmitTransactionRequestMessage_default_instance_;
class SubmitTransactionResponseMessage;
struct SubmitTransactionResponseMessageDefaultTypeInternal;
extern SubmitTransactionResponseMessageDefaultTypeInternal _SubmitTransactionResponseMessage_default_instance_;
class UnbanRequestMessage;
struct UnbanRequestMessageDefaultTypeInternal;
extern UnbanRequestMessageDefaultTypeInternal _UnbanRequestMessage_default_instance_;
class UnbanResponseMessage;
struct UnbanResponseMessageDefaultTypeInternal;
extern UnbanResponseMessageDefaultTypeInternal _UnbanResponseMessage_default_instance_;
class UtxosByAddressesEntry;
struct UtxosByAddressesEntryDefaultTypeInternal;
extern UtxosByAddressesEntryDefaultTypeInternal _UtxosByAddressesEntry_default_instance_;
class UtxosChangedNotificationMessage;
struct UtxosChangedNotificationMessageDefaultTypeInternal;
extern UtxosChangedNotificationMessageDefaultTypeInternal _UtxosChangedNotificationMessage_default_instance_;
class VirtualDaaScoreChangedNotificationMessage;
struct VirtualDaaScoreChangedNotificationMessageDefaultTypeInternal;
extern VirtualDaaScoreChangedNotificationMessageDefaultTypeInternal _VirtualDaaScoreChangedNotificationMessage_default_instance_;
class VirtualSelectedParentBlueScoreChangedNotificationMessage;
struct VirtualSelectedParentBlueScoreChangedNotificationMessageDefaultTypeInternal;
extern VirtualSelectedParentBlueScoreChangedNotificationMessageDefaultTypeInternal _VirtualSelectedParentBlueScoreChangedNotificationMessage_default_instance_;
class VirtualSelectedParentChainChangedNotificationMessage;
struct VirtualSelectedParentChainChangedNotificationMessageDefaultTypeInternal;
extern VirtualSelectedParentChainChangedNotificationMessageDefaultTypeInternal _VirtualSelectedParentChainChangedNotificationMessage_default_instance_;
}  // namespace protowire
PROTOBUF_NAMESPACE_OPEN
template<> ::protowire::AcceptedTransactionIds* Arena::CreateMaybeMessage<::protowire::AcceptedTransactionIds>(Arena*);
template<> ::protowire::AddPeerRequestMessage* Arena::CreateMaybeMessage<::protowire::AddPeerRequestMessage>(Arena*);
template<> ::protowire::AddPeerResponseMessage* Arena::CreateMaybeMessage<::protowire::AddPeerResponseMessage>(Arena*);
template<> ::protowire::BalancesByAddressEntry* Arena::CreateMaybeMessage<::protowire::BalancesByAddressEntry>(Arena*);
template<> ::protowire::BanRequestMessage* Arena::CreateMaybeMessage<::protowire::BanRequestMessage>(Arena*);
template<> ::protowire::BanResponseMessage* Arena::CreateMaybeMessage<::protowire::BanResponseMessage>(Arena*);
template<> ::protowire::BlockAddedNotificationMessage* Arena::CreateMaybeMessage<::protowire::BlockAddedNotificationMessage>(Arena*);
template<> ::protowire::EstimateNetworkHashesPerSecondRequestMessage* Arena::CreateMaybeMessage<::protowire::EstimateNetworkHashesPerSecondRequestMessage>(Arena*);
template<> ::protowire::EstimateNetworkHashesPerSecondResponseMessage* Arena::CreateMaybeMessage<::protowire::EstimateNetworkHashesPerSecondResponseMessage>(Arena*);
template<> ::protowire::FinalityConflictNotificationMessage* Arena::CreateMaybeMessage<::protowire::FinalityConflictNotificationMessage>(Arena*);
template<> ::protowire::FinalityConflictResolvedNotificationMessage* Arena::CreateMaybeMessage<::protowire::FinalityConflictResolvedNotificationMessage>(Arena*);
template<> ::protowire::GetBalanceByAddressRequestMessage* Arena::CreateMaybeMessage<::protowire::GetBalanceByAddressRequestMessage>(Arena*);
template<> ::protowire::GetBalanceByAddressResponseMessage* Arena::CreateMaybeMessage<::protowire::GetBalanceByAddressResponseMessage>(Arena*);
template<> ::protowire::GetBalancesByAddressesRequestMessage* Arena::CreateMaybeMessage<::protowire::GetBalancesByAddressesRequestMessage>(Arena*);
template<> ::protowire::GetBalancesByAddressesResponseMessage* Arena::CreateMaybeMessage<::protowire::GetBalancesByAddressesResponseMessage>(Arena*);
template<> ::protowire::GetBlockCountRequestMessage* Arena::CreateMaybeMessage<::protowire::GetBlockCountRequestMessage>(Arena*);
template<> ::protowire::GetBlockCountResponseMessage* Arena::CreateMaybeMessage<::protowire::GetBlockCountResponseMessage>(Arena*);
template<> ::protowire::GetBlockDagInfoRequestMessage* Arena::CreateMaybeMessage<::protowire::GetBlockDagInfoRequestMessage>(Arena*);
template<> ::protowire::GetBlockDagInfoResponseMessage* Arena::CreateMaybeMessage<::protowire::GetBlockDagInfoResponseMessage>(Arena*);
template<> ::protowire::GetBlockRequestMessage* Arena::CreateMaybeMessage<::protowire::GetBlockRequestMessage>(Arena*);
template<> ::protowire::GetBlockResponseMessage* Arena::CreateMaybeMessage<::protowire::GetBlockResponseMessage>(Arena*);
template<> ::protowire::GetBlockTemplateRequestMessage* Arena::CreateMaybeMessage<::protowire::GetBlockTemplateRequestMessage>(Arena*);
template<> ::protowire::GetBlockTemplateResponseMessage* Arena::CreateMaybeMessage<::protowire::GetBlockTemplateResponseMessage>(Arena*);
template<> ::protowire::GetBlocksRequestMessage* Arena::CreateMaybeMessage<::protowire::GetBlocksRequestMessage>(Arena*);
template<> ::protowire::GetBlocksResponseMessage* Arena::CreateMaybeMessage<::protowire::GetBlocksResponseMessage>(Arena*);
template<> ::protowire::GetCoinSupplyRequestMessage* Arena::CreateMaybeMessage<::protowire::GetCoinSupplyRequestMessage>(Arena*);
template<> ::protowire::GetCoinSupplyResponseMessage* Arena::CreateMaybeMessage<::protowire::GetCoinSupplyResponseMessage>(Arena*);
template<> ::protowire::GetConnectedPeerInfoMessage* Arena::CreateMaybeMessage<::protowire::GetConnectedPeerInfoMessage>(Arena*);
template<> ::protowire::GetConnectedPeerInfoRequestMessage* Arena::CreateMaybeMessage<::protowire::GetConnectedPeerInfoRequestMessage>(Arena*);
template<> ::protowire::GetConnectedPeerInfoResponseMessage* Arena::CreateMaybeMessage<::protowire::GetConnectedPeerInfoResponseMessage>(Arena*);
template<> ::protowire::GetCurrentNetworkRequestMessage* Arena::CreateMaybeMessage<::protowire::GetCurrentNetworkRequestMessage>(Arena*);
template<> ::protowire::GetCurrentNetworkResponseMessage* Arena::CreateMaybeMessage<::protowire::GetCurrentNetworkResponseMessage>(Arena*);
template<> ::protowire::GetHeadersRequestMessage* Arena::CreateMaybeMessage<::protowire::GetHeadersRequestMessage>(Arena*);
template<> ::protowire::GetHeadersResponseMessage* Arena::CreateMaybeMessage<::protowire::GetHeadersResponseMessage>(Arena*);
template<> ::protowire::GetInfoRequestMessage* Arena::CreateMaybeMessage<::protowire::GetInfoRequestMessage>(Arena*);
template<> ::protowire::GetInfoResponseMessage* Arena::CreateMaybeMessage<::protowire::GetInfoResponseMessage>(Arena*);
template<> ::protowire::GetMempoolEntriesByAddressesRequestMessage* Arena::CreateMaybeMessage<::protowire::GetMempoolEntriesByAddressesRequestMessage>(Arena*);
template<> ::protowire::GetMempoolEntriesByAddressesResponseMessage* Arena::CreateMaybeMessage<::protowire::GetMempoolEntriesByAddressesResponseMessage>(Arena*);
template<> ::protowire::GetMempoolEntriesRequestMessage* Arena::CreateMaybeMessage<::protowire::GetMempoolEntriesRequestMessage>(Arena*);
template<> ::protowire::GetMempoolEntriesResponseMessage* Arena::CreateMaybeMessage<::protowire::GetMempoolEntriesResponseMessage>(Arena*);
template<> ::protowire::GetMempoolEntryRequestMessage* Arena::CreateMaybeMessage<::protowire::GetMempoolEntryRequestMessage>(Arena*);
template<> ::protowire::GetMempoolEntryResponseMessage* Arena::CreateMaybeMessage<::protowire::GetMempoolEntryResponseMessage>(Arena*);
template<> ::protowire::GetPeerAddressesKnownAddressMessage* Arena::CreateMaybeMessage<::protowire::GetPeerAddressesKnownAddressMessage>(Arena*);
template<> ::protowire::GetPeerAddressesRequestMessage* Arena::CreateMaybeMessage<::protowire::GetPeerAddressesRequestMessage>(Arena*);
template<> ::protowire::GetPeerAddressesResponseMessage* Arena::CreateMaybeMessage<::protowire::GetPeerAddressesResponseMessage>(Arena*);
template<> ::protowire::GetSelectedTipHashRequestMessage* Arena::CreateMaybeMessage<::protowire::GetSelectedTipHashRequestMessage>(Arena*);
template<> ::protowire::GetSelectedTipHashResponseMessage* Arena::CreateMaybeMessage<::protowire::GetSelectedTipHashResponseMessage>(Arena*);
template<> ::protowire::GetSubnetworkRequestMessage* Arena::CreateMaybeMessage<::protowire::GetSubnetworkRequestMessage>(Arena*);
template<> ::protowire::GetSubnetworkResponseMessage* Arena::CreateMaybeMessage<::protowire::GetSubnetworkResponseMessage>(Arena*);
template<> ::protowire::GetUtxosByAddressesRequestMessage* Arena::CreateMaybeMessage<::protowire::GetUtxosByAddressesRequestMessage>(Arena*);
template<> ::protowire::GetUtxosByAddressesResponseMessage* Arena::CreateMaybeMessage<::protowire::GetUtxosByAddressesResponseMessage>(Arena*);
template<> ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* Arena::CreateMaybeMessage<::protowire::GetVirtualSelectedParentBlueScoreRequestMessage>(Arena*);
template<> ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* Arena::CreateMaybeMessage<::protowire::GetVirtualSelectedParentBlueScoreResponseMessage>(Arena*);
template<> ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* Arena::CreateMaybeMessage<::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage>(Arena*);
template<> ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* Arena::CreateMaybeMessage<::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage>(Arena*);
template<> ::protowire::MempoolEntry* Arena::CreateMaybeMessage<::protowire::MempoolEntry>(Arena*);
template<> ::protowire::MempoolEntryByAddress* Arena::CreateMaybeMessage<::protowire::MempoolEntryByAddress>(Arena*);
template<> ::protowire::NewBlockTemplateNotificationMessage* Arena::CreateMaybeMessage<::protowire::NewBlockTemplateNotificationMessage>(Arena*);
template<> ::protowire::NotifyBlockAddedRequestMessage* Arena::CreateMaybeMessage<::protowire::NotifyBlockAddedRequestMessage>(Arena*);
template<> ::protowire::NotifyBlockAddedResponseMessage* Arena::CreateMaybeMessage<::protowire::NotifyBlockAddedResponseMessage>(Arena*);
template<> ::protowire::NotifyFinalityConflictsRequestMessage* Arena::CreateMaybeMessage<::protowire::NotifyFinalityConflictsRequestMessage>(Arena*);
template<> ::protowire::NotifyFinalityConflictsResponseMessage* Arena::CreateMaybeMessage<::protowire::NotifyFinalityConflictsResponseMessage>(Arena*);
template<> ::protowire::NotifyNewBlockTemplateRequestMessage* Arena::CreateMaybeMessage<::protowire::NotifyNewBlockTemplateRequestMessage>(Arena*);
template<> ::protowire::NotifyNewBlockTemplateResponseMessage* Arena::CreateMaybeMessage<::protowire::NotifyNewBlockTemplateResponseMessage>(Arena*);
template<> ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* Arena::CreateMaybeMessage<::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage>(Arena*);
template<> ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* Arena::CreateMaybeMessage<::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage>(Arena*);
template<> ::protowire::NotifyUtxosChangedRequestMessage* Arena::CreateMaybeMessage<::protowire::NotifyUtxosChangedRequestMessage>(Arena*);
template<> ::protowire::NotifyUtxosChangedResponseMessage* Arena::CreateMaybeMessage<::protowire::NotifyUtxosChangedResponseMessage>(Arena*);
template<> ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* Arena::CreateMaybeMessage<::protowire::NotifyVirtualDaaScoreChangedRequestMessage>(Arena*);
template<> ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* Arena::CreateMaybeMessage<::protowire::NotifyVirtualDaaScoreChangedResponseMessage>(Arena*);
template<> ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* Arena::CreateMaybeMessage<::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage>(Arena*);
template<> ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* Arena::CreateMaybeMessage<::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage>(Arena*);
template<> ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* Arena::CreateMaybeMessage<::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage>(Arena*);
template<> ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* Arena::CreateMaybeMessage<::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage>(Arena*);
template<> ::protowire::PruningPointUTXOSetOverrideNotificationMessage* Arena::CreateMaybeMessage<::protowire::PruningPointUTXOSetOverrideNotificationMessage>(Arena*);
template<> ::protowire::RPCError* Arena::CreateMaybeMessage<::protowire::RPCError>(Arena*);
template<> ::protowire::ResolveFinalityConflictRequestMessage* Arena::CreateMaybeMessage<::protowire::ResolveFinalityConflictRequestMessage>(Arena*);
template<> ::protowire::ResolveFinalityConflictResponseMessage* Arena::CreateMaybeMessage<::protowire::ResolveFinalityConflictResponseMessage>(Arena*);
template<> ::protowire::RpcBlock* Arena::CreateMaybeMessage<::protowire::RpcBlock>(Arena*);
template<> ::protowire::RpcBlockHeader* Arena::CreateMaybeMessage<::protowire::RpcBlockHeader>(Arena*);
template<> ::protowire::RpcBlockLevelParents* Arena::CreateMaybeMessage<::protowire::RpcBlockLevelParents>(Arena*);
template<> ::protowire::RpcBlockVerboseData* Arena::CreateMaybeMessage<::protowire::RpcBlockVerboseData>(Arena*);
template<> ::protowire::RpcOutpoint* Arena::CreateMaybeMessage<::protowire::RpcOutpoint>(Arena*);
template<> ::protowire::RpcScriptPublicKey* Arena::CreateMaybeMessage<::protowire::RpcScriptPublicKey>(Arena*);
template<> ::protowire::RpcTransaction* Arena::CreateMaybeMessage<::protowire::RpcTransaction>(Arena*);
template<> ::protowire::RpcTransactionInput* Arena::CreateMaybeMessage<::protowire::RpcTransactionInput>(Arena*);
template<> ::protowire::RpcTransactionInputVerboseData* Arena::CreateMaybeMessage<::protowire::RpcTransactionInputVerboseData>(Arena*);
template<> ::protowire::RpcTransactionOutput* Arena::CreateMaybeMessage<::protowire::RpcTransactionOutput>(Arena*);
template<> ::protowire::RpcTransactionOutputVerboseData* Arena::CreateMaybeMessage<::protowire::RpcTransactionOutputVerboseData>(Arena*);
template<> ::protowire::RpcTransactionVerboseData* Arena::CreateMaybeMessage<::protowire::RpcTransactionVerboseData>(Arena*);
template<> ::protowire::RpcUtxoEntry* Arena::CreateMaybeMessage<::protowire::RpcUtxoEntry>(Arena*);
template<> ::protowire::ShutDownRequestMessage* Arena::CreateMaybeMessage<::protowire::ShutDownRequestMessage>(Arena*);
template<> ::protowire::ShutDownResponseMessage* Arena::CreateMaybeMessage<::protowire::ShutDownResponseMessage>(Arena*);
template<> ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* Arena::CreateMaybeMessage<::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage>(Arena*);
template<> ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* Arena::CreateMaybeMessage<::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage>(Arena*);
template<> ::protowire::StopNotifyingUtxosChangedRequestMessage* Arena::CreateMaybeMessage<::protowire::StopNotifyingUtxosChangedRequestMessage>(Arena*);
template<> ::protowire::StopNotifyingUtxosChangedResponseMessage* Arena::CreateMaybeMessage<::protowire::StopNotifyingUtxosChangedResponseMessage>(Arena*);
template<> ::protowire::SubmitBlockRequestMessage* Arena::CreateMaybeMessage<::protowire::SubmitBlockRequestMessage>(Arena*);
template<> ::protowire::SubmitBlockResponseMessage* Arena::CreateMaybeMessage<::protowire::SubmitBlockResponseMessage>(Arena*);
template<> ::protowire::SubmitTransactionRequestMessage* Arena::CreateMaybeMessage<::protowire::SubmitTransactionRequestMessage>(Arena*);
template<> ::protowire::SubmitTransactionResponseMessage* Arena::CreateMaybeMessage<::protowire::SubmitTransactionResponseMessage>(Arena*);
template<> ::protowire::UnbanRequestMessage* Arena::CreateMaybeMessage<::protowire::UnbanRequestMessage>(Arena*);
template<> ::protowire::UnbanResponseMessage* Arena::CreateMaybeMessage<::protowire::UnbanResponseMessage>(Arena*);
template<> ::protowire::UtxosByAddressesEntry* Arena::CreateMaybeMessage<::protowire::UtxosByAddressesEntry>(Arena*);
template<> ::protowire::UtxosChangedNotificationMessage* Arena::CreateMaybeMessage<::protowire::UtxosChangedNotificationMessage>(Arena*);
template<> ::protowire::VirtualDaaScoreChangedNotificationMessage* Arena::CreateMaybeMessage<::protowire::VirtualDaaScoreChangedNotificationMessage>(Arena*);
template<> ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* Arena::CreateMaybeMessage<::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage>(Arena*);
template<> ::protowire::VirtualSelectedParentChainChangedNotificationMessage* Arena::CreateMaybeMessage<::protowire::VirtualSelectedParentChainChangedNotificationMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protowire {

enum SubmitBlockResponseMessage_RejectReason : int {
  SubmitBlockResponseMessage_RejectReason_NONE = 0,
  SubmitBlockResponseMessage_RejectReason_BLOCK_INVALID = 1,
  SubmitBlockResponseMessage_RejectReason_IS_IN_IBD = 2,
  SubmitBlockResponseMessage_RejectReason_SubmitBlockResponseMessage_RejectReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SubmitBlockResponseMessage_RejectReason_SubmitBlockResponseMessage_RejectReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SubmitBlockResponseMessage_RejectReason_IsValid(int value);
constexpr SubmitBlockResponseMessage_RejectReason SubmitBlockResponseMessage_RejectReason_RejectReason_MIN = SubmitBlockResponseMessage_RejectReason_NONE;
constexpr SubmitBlockResponseMessage_RejectReason SubmitBlockResponseMessage_RejectReason_RejectReason_MAX = SubmitBlockResponseMessage_RejectReason_IS_IN_IBD;
constexpr int SubmitBlockResponseMessage_RejectReason_RejectReason_ARRAYSIZE = SubmitBlockResponseMessage_RejectReason_RejectReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubmitBlockResponseMessage_RejectReason_descriptor();
template<typename T>
inline const std::string& SubmitBlockResponseMessage_RejectReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubmitBlockResponseMessage_RejectReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubmitBlockResponseMessage_RejectReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubmitBlockResponseMessage_RejectReason_descriptor(), enum_t_value);
}
inline bool SubmitBlockResponseMessage_RejectReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SubmitBlockResponseMessage_RejectReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubmitBlockResponseMessage_RejectReason>(
    SubmitBlockResponseMessage_RejectReason_descriptor(), name, value);
}
// ===================================================================

class RPCError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RPCError) */ {
 public:
  inline RPCError() : RPCError(nullptr) {}
  ~RPCError() override;
  explicit constexpr RPCError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RPCError(const RPCError& from);
  RPCError(RPCError&& from) noexcept
    : RPCError() {
    *this = ::std::move(from);
  }

  inline RPCError& operator=(const RPCError& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCError& operator=(RPCError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCError& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCError* internal_default_instance() {
    return reinterpret_cast<const RPCError*>(
               &_RPCError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RPCError& a, RPCError& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RPCError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RPCError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RPCError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RPCError";
  }
  protected:
  explicit RPCError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:protowire.RPCError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RpcBlock) */ {
 public:
  inline RpcBlock() : RpcBlock(nullptr) {}
  ~RpcBlock() override;
  explicit constexpr RpcBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcBlock(const RpcBlock& from);
  RpcBlock(RpcBlock&& from) noexcept
    : RpcBlock() {
    *this = ::std::move(from);
  }

  inline RpcBlock& operator=(const RpcBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcBlock& operator=(RpcBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcBlock* internal_default_instance() {
    return reinterpret_cast<const RpcBlock*>(
               &_RpcBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcBlock& a, RpcBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RpcBlock";
  }
  protected:
  explicit RpcBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kVerboseDataFieldNumber = 3,
  };
  // repeated .protowire.RpcTransaction transactions = 2;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::protowire::RpcTransaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransaction >*
      mutable_transactions();
  private:
  const ::protowire::RpcTransaction& _internal_transactions(int index) const;
  ::protowire::RpcTransaction* _internal_add_transactions();
  public:
  const ::protowire::RpcTransaction& transactions(int index) const;
  ::protowire::RpcTransaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransaction >&
      transactions() const;

  // .protowire.RpcBlockHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protowire::RpcBlockHeader& header() const;
  PROTOBUF_NODISCARD ::protowire::RpcBlockHeader* release_header();
  ::protowire::RpcBlockHeader* mutable_header();
  void set_allocated_header(::protowire::RpcBlockHeader* header);
  private:
  const ::protowire::RpcBlockHeader& _internal_header() const;
  ::protowire::RpcBlockHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::protowire::RpcBlockHeader* header);
  ::protowire::RpcBlockHeader* unsafe_arena_release_header();

  // .protowire.RpcBlockVerboseData verboseData = 3;
  bool has_verbosedata() const;
  private:
  bool _internal_has_verbosedata() const;
  public:
  void clear_verbosedata();
  const ::protowire::RpcBlockVerboseData& verbosedata() const;
  PROTOBUF_NODISCARD ::protowire::RpcBlockVerboseData* release_verbosedata();
  ::protowire::RpcBlockVerboseData* mutable_verbosedata();
  void set_allocated_verbosedata(::protowire::RpcBlockVerboseData* verbosedata);
  private:
  const ::protowire::RpcBlockVerboseData& _internal_verbosedata() const;
  ::protowire::RpcBlockVerboseData* _internal_mutable_verbosedata();
  public:
  void unsafe_arena_set_allocated_verbosedata(
      ::protowire::RpcBlockVerboseData* verbosedata);
  ::protowire::RpcBlockVerboseData* unsafe_arena_release_verbosedata();

  // @@protoc_insertion_point(class_scope:protowire.RpcBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransaction > transactions_;
  ::protowire::RpcBlockHeader* header_;
  ::protowire::RpcBlockVerboseData* verbosedata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcBlockHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RpcBlockHeader) */ {
 public:
  inline RpcBlockHeader() : RpcBlockHeader(nullptr) {}
  ~RpcBlockHeader() override;
  explicit constexpr RpcBlockHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcBlockHeader(const RpcBlockHeader& from);
  RpcBlockHeader(RpcBlockHeader&& from) noexcept
    : RpcBlockHeader() {
    *this = ::std::move(from);
  }

  inline RpcBlockHeader& operator=(const RpcBlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcBlockHeader& operator=(RpcBlockHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcBlockHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcBlockHeader* internal_default_instance() {
    return reinterpret_cast<const RpcBlockHeader*>(
               &_RpcBlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RpcBlockHeader& a, RpcBlockHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcBlockHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcBlockHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcBlockHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcBlockHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcBlockHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcBlockHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcBlockHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RpcBlockHeader";
  }
  protected:
  explicit RpcBlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentsFieldNumber = 12,
    kHashMerkleRootFieldNumber = 3,
    kAcceptedIdMerkleRootFieldNumber = 4,
    kUtxoCommitmentFieldNumber = 5,
    kBlueWorkFieldNumber = 10,
    kPruningPointFieldNumber = 14,
    kVersionFieldNumber = 1,
    kBitsFieldNumber = 7,
    kTimestampFieldNumber = 6,
    kNonceFieldNumber = 8,
    kDaaScoreFieldNumber = 9,
    kBlueScoreFieldNumber = 13,
  };
  // repeated .protowire.RpcBlockLevelParents parents = 12;
  int parents_size() const;
  private:
  int _internal_parents_size() const;
  public:
  void clear_parents();
  ::protowire::RpcBlockLevelParents* mutable_parents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcBlockLevelParents >*
      mutable_parents();
  private:
  const ::protowire::RpcBlockLevelParents& _internal_parents(int index) const;
  ::protowire::RpcBlockLevelParents* _internal_add_parents();
  public:
  const ::protowire::RpcBlockLevelParents& parents(int index) const;
  ::protowire::RpcBlockLevelParents* add_parents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcBlockLevelParents >&
      parents() const;

  // string hashMerkleRoot = 3;
  void clear_hashmerkleroot();
  const std::string& hashmerkleroot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hashmerkleroot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hashmerkleroot();
  PROTOBUF_NODISCARD std::string* release_hashmerkleroot();
  void set_allocated_hashmerkleroot(std::string* hashmerkleroot);
  private:
  const std::string& _internal_hashmerkleroot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hashmerkleroot(const std::string& value);
  std::string* _internal_mutable_hashmerkleroot();
  public:

  // string acceptedIdMerkleRoot = 4;
  void clear_acceptedidmerkleroot();
  const std::string& acceptedidmerkleroot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acceptedidmerkleroot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acceptedidmerkleroot();
  PROTOBUF_NODISCARD std::string* release_acceptedidmerkleroot();
  void set_allocated_acceptedidmerkleroot(std::string* acceptedidmerkleroot);
  private:
  const std::string& _internal_acceptedidmerkleroot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acceptedidmerkleroot(const std::string& value);
  std::string* _internal_mutable_acceptedidmerkleroot();
  public:

  // string utxoCommitment = 5;
  void clear_utxocommitment();
  const std::string& utxocommitment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_utxocommitment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_utxocommitment();
  PROTOBUF_NODISCARD std::string* release_utxocommitment();
  void set_allocated_utxocommitment(std::string* utxocommitment);
  private:
  const std::string& _internal_utxocommitment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_utxocommitment(const std::string& value);
  std::string* _internal_mutable_utxocommitment();
  public:

  // string blueWork = 10;
  void clear_bluework();
  const std::string& bluework() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bluework(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bluework();
  PROTOBUF_NODISCARD std::string* release_bluework();
  void set_allocated_bluework(std::string* bluework);
  private:
  const std::string& _internal_bluework() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bluework(const std::string& value);
  std::string* _internal_mutable_bluework();
  public:

  // string pruningPoint = 14;
  void clear_pruningpoint();
  const std::string& pruningpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pruningpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pruningpoint();
  PROTOBUF_NODISCARD std::string* release_pruningpoint();
  void set_allocated_pruningpoint(std::string* pruningpoint);
  private:
  const std::string& _internal_pruningpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pruningpoint(const std::string& value);
  std::string* _internal_mutable_pruningpoint();
  public:

  // uint32 version = 1;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // uint32 bits = 7;
  void clear_bits();
  uint32_t bits() const;
  void set_bits(uint32_t value);
  private:
  uint32_t _internal_bits() const;
  void _internal_set_bits(uint32_t value);
  public:

  // int64 timestamp = 6;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // uint64 nonce = 8;
  void clear_nonce();
  uint64_t nonce() const;
  void set_nonce(uint64_t value);
  private:
  uint64_t _internal_nonce() const;
  void _internal_set_nonce(uint64_t value);
  public:

  // uint64 daaScore = 9;
  void clear_daascore();
  uint64_t daascore() const;
  void set_daascore(uint64_t value);
  private:
  uint64_t _internal_daascore() const;
  void _internal_set_daascore(uint64_t value);
  public:

  // uint64 blueScore = 13;
  void clear_bluescore();
  uint64_t bluescore() const;
  void set_bluescore(uint64_t value);
  private:
  uint64_t _internal_bluescore() const;
  void _internal_set_bluescore(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.RpcBlockHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcBlockLevelParents > parents_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashmerkleroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceptedidmerkleroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utxocommitment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bluework_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pruningpoint_;
  uint32_t version_;
  uint32_t bits_;
  int64_t timestamp_;
  uint64_t nonce_;
  uint64_t daascore_;
  uint64_t bluescore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcBlockLevelParents final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RpcBlockLevelParents) */ {
 public:
  inline RpcBlockLevelParents() : RpcBlockLevelParents(nullptr) {}
  ~RpcBlockLevelParents() override;
  explicit constexpr RpcBlockLevelParents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcBlockLevelParents(const RpcBlockLevelParents& from);
  RpcBlockLevelParents(RpcBlockLevelParents&& from) noexcept
    : RpcBlockLevelParents() {
    *this = ::std::move(from);
  }

  inline RpcBlockLevelParents& operator=(const RpcBlockLevelParents& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcBlockLevelParents& operator=(RpcBlockLevelParents&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcBlockLevelParents& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcBlockLevelParents* internal_default_instance() {
    return reinterpret_cast<const RpcBlockLevelParents*>(
               &_RpcBlockLevelParents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RpcBlockLevelParents& a, RpcBlockLevelParents& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcBlockLevelParents* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcBlockLevelParents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcBlockLevelParents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcBlockLevelParents>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcBlockLevelParents& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcBlockLevelParents& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcBlockLevelParents* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RpcBlockLevelParents";
  }
  protected:
  explicit RpcBlockLevelParents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentHashesFieldNumber = 1,
  };
  // repeated string parentHashes = 1;
  int parenthashes_size() const;
  private:
  int _internal_parenthashes_size() const;
  public:
  void clear_parenthashes();
  const std::string& parenthashes(int index) const;
  std::string* mutable_parenthashes(int index);
  void set_parenthashes(int index, const std::string& value);
  void set_parenthashes(int index, std::string&& value);
  void set_parenthashes(int index, const char* value);
  void set_parenthashes(int index, const char* value, size_t size);
  std::string* add_parenthashes();
  void add_parenthashes(const std::string& value);
  void add_parenthashes(std::string&& value);
  void add_parenthashes(const char* value);
  void add_parenthashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parenthashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parenthashes();
  private:
  const std::string& _internal_parenthashes(int index) const;
  std::string* _internal_add_parenthashes();
  public:

  // @@protoc_insertion_point(class_scope:protowire.RpcBlockLevelParents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parenthashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcBlockVerboseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RpcBlockVerboseData) */ {
 public:
  inline RpcBlockVerboseData() : RpcBlockVerboseData(nullptr) {}
  ~RpcBlockVerboseData() override;
  explicit constexpr RpcBlockVerboseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcBlockVerboseData(const RpcBlockVerboseData& from);
  RpcBlockVerboseData(RpcBlockVerboseData&& from) noexcept
    : RpcBlockVerboseData() {
    *this = ::std::move(from);
  }

  inline RpcBlockVerboseData& operator=(const RpcBlockVerboseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcBlockVerboseData& operator=(RpcBlockVerboseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcBlockVerboseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcBlockVerboseData* internal_default_instance() {
    return reinterpret_cast<const RpcBlockVerboseData*>(
               &_RpcBlockVerboseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RpcBlockVerboseData& a, RpcBlockVerboseData& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcBlockVerboseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcBlockVerboseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcBlockVerboseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcBlockVerboseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcBlockVerboseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcBlockVerboseData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcBlockVerboseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RpcBlockVerboseData";
  }
  protected:
  explicit RpcBlockVerboseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdsFieldNumber = 14,
    kChildrenHashesFieldNumber = 17,
    kMergeSetBluesHashesFieldNumber = 18,
    kMergeSetRedsHashesFieldNumber = 19,
    kHashFieldNumber = 1,
    kSelectedParentHashFieldNumber = 13,
    kDifficultyFieldNumber = 11,
    kIsHeaderOnlyFieldNumber = 15,
    kIsChainBlockFieldNumber = 20,
    kBlueScoreFieldNumber = 16,
  };
  // repeated string transactionIds = 14;
  int transactionids_size() const;
  private:
  int _internal_transactionids_size() const;
  public:
  void clear_transactionids();
  const std::string& transactionids(int index) const;
  std::string* mutable_transactionids(int index);
  void set_transactionids(int index, const std::string& value);
  void set_transactionids(int index, std::string&& value);
  void set_transactionids(int index, const char* value);
  void set_transactionids(int index, const char* value, size_t size);
  std::string* add_transactionids();
  void add_transactionids(const std::string& value);
  void add_transactionids(std::string&& value);
  void add_transactionids(const char* value);
  void add_transactionids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transactionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transactionids();
  private:
  const std::string& _internal_transactionids(int index) const;
  std::string* _internal_add_transactionids();
  public:

  // repeated string childrenHashes = 17;
  int childrenhashes_size() const;
  private:
  int _internal_childrenhashes_size() const;
  public:
  void clear_childrenhashes();
  const std::string& childrenhashes(int index) const;
  std::string* mutable_childrenhashes(int index);
  void set_childrenhashes(int index, const std::string& value);
  void set_childrenhashes(int index, std::string&& value);
  void set_childrenhashes(int index, const char* value);
  void set_childrenhashes(int index, const char* value, size_t size);
  std::string* add_childrenhashes();
  void add_childrenhashes(const std::string& value);
  void add_childrenhashes(std::string&& value);
  void add_childrenhashes(const char* value);
  void add_childrenhashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& childrenhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_childrenhashes();
  private:
  const std::string& _internal_childrenhashes(int index) const;
  std::string* _internal_add_childrenhashes();
  public:

  // repeated string mergeSetBluesHashes = 18;
  int mergesetblueshashes_size() const;
  private:
  int _internal_mergesetblueshashes_size() const;
  public:
  void clear_mergesetblueshashes();
  const std::string& mergesetblueshashes(int index) const;
  std::string* mutable_mergesetblueshashes(int index);
  void set_mergesetblueshashes(int index, const std::string& value);
  void set_mergesetblueshashes(int index, std::string&& value);
  void set_mergesetblueshashes(int index, const char* value);
  void set_mergesetblueshashes(int index, const char* value, size_t size);
  std::string* add_mergesetblueshashes();
  void add_mergesetblueshashes(const std::string& value);
  void add_mergesetblueshashes(std::string&& value);
  void add_mergesetblueshashes(const char* value);
  void add_mergesetblueshashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mergesetblueshashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mergesetblueshashes();
  private:
  const std::string& _internal_mergesetblueshashes(int index) const;
  std::string* _internal_add_mergesetblueshashes();
  public:

  // repeated string mergeSetRedsHashes = 19;
  int mergesetredshashes_size() const;
  private:
  int _internal_mergesetredshashes_size() const;
  public:
  void clear_mergesetredshashes();
  const std::string& mergesetredshashes(int index) const;
  std::string* mutable_mergesetredshashes(int index);
  void set_mergesetredshashes(int index, const std::string& value);
  void set_mergesetredshashes(int index, std::string&& value);
  void set_mergesetredshashes(int index, const char* value);
  void set_mergesetredshashes(int index, const char* value, size_t size);
  std::string* add_mergesetredshashes();
  void add_mergesetredshashes(const std::string& value);
  void add_mergesetredshashes(std::string&& value);
  void add_mergesetredshashes(const char* value);
  void add_mergesetredshashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mergesetredshashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mergesetredshashes();
  private:
  const std::string& _internal_mergesetredshashes(int index) const;
  std::string* _internal_add_mergesetredshashes();
  public:

  // string hash = 1;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string selectedParentHash = 13;
  void clear_selectedparenthash();
  const std::string& selectedparenthash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selectedparenthash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selectedparenthash();
  PROTOBUF_NODISCARD std::string* release_selectedparenthash();
  void set_allocated_selectedparenthash(std::string* selectedparenthash);
  private:
  const std::string& _internal_selectedparenthash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selectedparenthash(const std::string& value);
  std::string* _internal_mutable_selectedparenthash();
  public:

  // double difficulty = 11;
  void clear_difficulty();
  double difficulty() const;
  void set_difficulty(double value);
  private:
  double _internal_difficulty() const;
  void _internal_set_difficulty(double value);
  public:

  // bool isHeaderOnly = 15;
  void clear_isheaderonly();
  bool isheaderonly() const;
  void set_isheaderonly(bool value);
  private:
  bool _internal_isheaderonly() const;
  void _internal_set_isheaderonly(bool value);
  public:

  // bool isChainBlock = 20;
  void clear_ischainblock();
  bool ischainblock() const;
  void set_ischainblock(bool value);
  private:
  bool _internal_ischainblock() const;
  void _internal_set_ischainblock(bool value);
  public:

  // uint64 blueScore = 16;
  void clear_bluescore();
  uint64_t bluescore() const;
  void set_bluescore(uint64_t value);
  private:
  uint64_t _internal_bluescore() const;
  void _internal_set_bluescore(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.RpcBlockVerboseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transactionids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> childrenhashes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mergesetblueshashes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mergesetredshashes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selectedparenthash_;
  double difficulty_;
  bool isheaderonly_;
  bool ischainblock_;
  uint64_t bluescore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcTransaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RpcTransaction) */ {
 public:
  inline RpcTransaction() : RpcTransaction(nullptr) {}
  ~RpcTransaction() override;
  explicit constexpr RpcTransaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcTransaction(const RpcTransaction& from);
  RpcTransaction(RpcTransaction&& from) noexcept
    : RpcTransaction() {
    *this = ::std::move(from);
  }

  inline RpcTransaction& operator=(const RpcTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcTransaction& operator=(RpcTransaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcTransaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcTransaction* internal_default_instance() {
    return reinterpret_cast<const RpcTransaction*>(
               &_RpcTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RpcTransaction& a, RpcTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcTransaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcTransaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcTransaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcTransaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcTransaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RpcTransaction";
  }
  protected:
  explicit RpcTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kOutputsFieldNumber = 3,
    kSubnetworkIdFieldNumber = 5,
    kPayloadFieldNumber = 8,
    kVerboseDataFieldNumber = 9,
    kLockTimeFieldNumber = 4,
    kGasFieldNumber = 6,
    kVersionFieldNumber = 1,
  };
  // repeated .protowire.RpcTransactionInput inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::protowire::RpcTransactionInput* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransactionInput >*
      mutable_inputs();
  private:
  const ::protowire::RpcTransactionInput& _internal_inputs(int index) const;
  ::protowire::RpcTransactionInput* _internal_add_inputs();
  public:
  const ::protowire::RpcTransactionInput& inputs(int index) const;
  ::protowire::RpcTransactionInput* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransactionInput >&
      inputs() const;

  // repeated .protowire.RpcTransactionOutput outputs = 3;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::protowire::RpcTransactionOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransactionOutput >*
      mutable_outputs();
  private:
  const ::protowire::RpcTransactionOutput& _internal_outputs(int index) const;
  ::protowire::RpcTransactionOutput* _internal_add_outputs();
  public:
  const ::protowire::RpcTransactionOutput& outputs(int index) const;
  ::protowire::RpcTransactionOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransactionOutput >&
      outputs() const;

  // string subnetworkId = 5;
  void clear_subnetworkid();
  const std::string& subnetworkid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subnetworkid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subnetworkid();
  PROTOBUF_NODISCARD std::string* release_subnetworkid();
  void set_allocated_subnetworkid(std::string* subnetworkid);
  private:
  const std::string& _internal_subnetworkid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subnetworkid(const std::string& value);
  std::string* _internal_mutable_subnetworkid();
  public:

  // string payload = 8;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .protowire.RpcTransactionVerboseData verboseData = 9;
  bool has_verbosedata() const;
  private:
  bool _internal_has_verbosedata() const;
  public:
  void clear_verbosedata();
  const ::protowire::RpcTransactionVerboseData& verbosedata() const;
  PROTOBUF_NODISCARD ::protowire::RpcTransactionVerboseData* release_verbosedata();
  ::protowire::RpcTransactionVerboseData* mutable_verbosedata();
  void set_allocated_verbosedata(::protowire::RpcTransactionVerboseData* verbosedata);
  private:
  const ::protowire::RpcTransactionVerboseData& _internal_verbosedata() const;
  ::protowire::RpcTransactionVerboseData* _internal_mutable_verbosedata();
  public:
  void unsafe_arena_set_allocated_verbosedata(
      ::protowire::RpcTransactionVerboseData* verbosedata);
  ::protowire::RpcTransactionVerboseData* unsafe_arena_release_verbosedata();

  // uint64 lockTime = 4;
  void clear_locktime();
  uint64_t locktime() const;
  void set_locktime(uint64_t value);
  private:
  uint64_t _internal_locktime() const;
  void _internal_set_locktime(uint64_t value);
  public:

  // uint64 gas = 6;
  void clear_gas();
  uint64_t gas() const;
  void set_gas(uint64_t value);
  private:
  uint64_t _internal_gas() const;
  void _internal_set_gas(uint64_t value);
  public:

  // uint32 version = 1;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.RpcTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransactionInput > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransactionOutput > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnetworkid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::protowire::RpcTransactionVerboseData* verbosedata_;
  uint64_t locktime_;
  uint64_t gas_;
  uint32_t version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcTransactionInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RpcTransactionInput) */ {
 public:
  inline RpcTransactionInput() : RpcTransactionInput(nullptr) {}
  ~RpcTransactionInput() override;
  explicit constexpr RpcTransactionInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcTransactionInput(const RpcTransactionInput& from);
  RpcTransactionInput(RpcTransactionInput&& from) noexcept
    : RpcTransactionInput() {
    *this = ::std::move(from);
  }

  inline RpcTransactionInput& operator=(const RpcTransactionInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcTransactionInput& operator=(RpcTransactionInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcTransactionInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcTransactionInput* internal_default_instance() {
    return reinterpret_cast<const RpcTransactionInput*>(
               &_RpcTransactionInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RpcTransactionInput& a, RpcTransactionInput& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcTransactionInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcTransactionInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcTransactionInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcTransactionInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcTransactionInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcTransactionInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcTransactionInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RpcTransactionInput";
  }
  protected:
  explicit RpcTransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureScriptFieldNumber = 2,
    kPreviousOutpointFieldNumber = 1,
    kVerboseDataFieldNumber = 4,
    kSequenceFieldNumber = 3,
    kSigOpCountFieldNumber = 5,
  };
  // string signatureScript = 2;
  void clear_signaturescript();
  const std::string& signaturescript() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signaturescript(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signaturescript();
  PROTOBUF_NODISCARD std::string* release_signaturescript();
  void set_allocated_signaturescript(std::string* signaturescript);
  private:
  const std::string& _internal_signaturescript() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signaturescript(const std::string& value);
  std::string* _internal_mutable_signaturescript();
  public:

  // .protowire.RpcOutpoint previousOutpoint = 1;
  bool has_previousoutpoint() const;
  private:
  bool _internal_has_previousoutpoint() const;
  public:
  void clear_previousoutpoint();
  const ::protowire::RpcOutpoint& previousoutpoint() const;
  PROTOBUF_NODISCARD ::protowire::RpcOutpoint* release_previousoutpoint();
  ::protowire::RpcOutpoint* mutable_previousoutpoint();
  void set_allocated_previousoutpoint(::protowire::RpcOutpoint* previousoutpoint);
  private:
  const ::protowire::RpcOutpoint& _internal_previousoutpoint() const;
  ::protowire::RpcOutpoint* _internal_mutable_previousoutpoint();
  public:
  void unsafe_arena_set_allocated_previousoutpoint(
      ::protowire::RpcOutpoint* previousoutpoint);
  ::protowire::RpcOutpoint* unsafe_arena_release_previousoutpoint();

  // .protowire.RpcTransactionInputVerboseData verboseData = 4;
  bool has_verbosedata() const;
  private:
  bool _internal_has_verbosedata() const;
  public:
  void clear_verbosedata();
  const ::protowire::RpcTransactionInputVerboseData& verbosedata() const;
  PROTOBUF_NODISCARD ::protowire::RpcTransactionInputVerboseData* release_verbosedata();
  ::protowire::RpcTransactionInputVerboseData* mutable_verbosedata();
  void set_allocated_verbosedata(::protowire::RpcTransactionInputVerboseData* verbosedata);
  private:
  const ::protowire::RpcTransactionInputVerboseData& _internal_verbosedata() const;
  ::protowire::RpcTransactionInputVerboseData* _internal_mutable_verbosedata();
  public:
  void unsafe_arena_set_allocated_verbosedata(
      ::protowire::RpcTransactionInputVerboseData* verbosedata);
  ::protowire::RpcTransactionInputVerboseData* unsafe_arena_release_verbosedata();

  // uint64 sequence = 3;
  void clear_sequence();
  uint64_t sequence() const;
  void set_sequence(uint64_t value);
  private:
  uint64_t _internal_sequence() const;
  void _internal_set_sequence(uint64_t value);
  public:

  // uint32 sigOpCount = 5;
  void clear_sigopcount();
  uint32_t sigopcount() const;
  void set_sigopcount(uint32_t value);
  private:
  uint32_t _internal_sigopcount() const;
  void _internal_set_sigopcount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.RpcTransactionInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signaturescript_;
  ::protowire::RpcOutpoint* previousoutpoint_;
  ::protowire::RpcTransactionInputVerboseData* verbosedata_;
  uint64_t sequence_;
  uint32_t sigopcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcScriptPublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RpcScriptPublicKey) */ {
 public:
  inline RpcScriptPublicKey() : RpcScriptPublicKey(nullptr) {}
  ~RpcScriptPublicKey() override;
  explicit constexpr RpcScriptPublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcScriptPublicKey(const RpcScriptPublicKey& from);
  RpcScriptPublicKey(RpcScriptPublicKey&& from) noexcept
    : RpcScriptPublicKey() {
    *this = ::std::move(from);
  }

  inline RpcScriptPublicKey& operator=(const RpcScriptPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcScriptPublicKey& operator=(RpcScriptPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcScriptPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcScriptPublicKey* internal_default_instance() {
    return reinterpret_cast<const RpcScriptPublicKey*>(
               &_RpcScriptPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RpcScriptPublicKey& a, RpcScriptPublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcScriptPublicKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcScriptPublicKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcScriptPublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcScriptPublicKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcScriptPublicKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcScriptPublicKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcScriptPublicKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RpcScriptPublicKey";
  }
  protected:
  explicit RpcScriptPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptPublicKeyFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // string scriptPublicKey = 2;
  void clear_scriptpublickey();
  const std::string& scriptpublickey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scriptpublickey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scriptpublickey();
  PROTOBUF_NODISCARD std::string* release_scriptpublickey();
  void set_allocated_scriptpublickey(std::string* scriptpublickey);
  private:
  const std::string& _internal_scriptpublickey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scriptpublickey(const std::string& value);
  std::string* _internal_mutable_scriptpublickey();
  public:

  // uint32 version = 1;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.RpcScriptPublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scriptpublickey_;
  uint32_t version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcTransactionOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RpcTransactionOutput) */ {
 public:
  inline RpcTransactionOutput() : RpcTransactionOutput(nullptr) {}
  ~RpcTransactionOutput() override;
  explicit constexpr RpcTransactionOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcTransactionOutput(const RpcTransactionOutput& from);
  RpcTransactionOutput(RpcTransactionOutput&& from) noexcept
    : RpcTransactionOutput() {
    *this = ::std::move(from);
  }

  inline RpcTransactionOutput& operator=(const RpcTransactionOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcTransactionOutput& operator=(RpcTransactionOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcTransactionOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcTransactionOutput* internal_default_instance() {
    return reinterpret_cast<const RpcTransactionOutput*>(
               &_RpcTransactionOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RpcTransactionOutput& a, RpcTransactionOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcTransactionOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcTransactionOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcTransactionOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcTransactionOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcTransactionOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcTransactionOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcTransactionOutput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RpcTransactionOutput";
  }
  protected:
  explicit RpcTransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptPublicKeyFieldNumber = 2,
    kVerboseDataFieldNumber = 3,
    kAmountFieldNumber = 1,
  };
  // .protowire.RpcScriptPublicKey scriptPublicKey = 2;
  bool has_scriptpublickey() const;
  private:
  bool _internal_has_scriptpublickey() const;
  public:
  void clear_scriptpublickey();
  const ::protowire::RpcScriptPublicKey& scriptpublickey() const;
  PROTOBUF_NODISCARD ::protowire::RpcScriptPublicKey* release_scriptpublickey();
  ::protowire::RpcScriptPublicKey* mutable_scriptpublickey();
  void set_allocated_scriptpublickey(::protowire::RpcScriptPublicKey* scriptpublickey);
  private:
  const ::protowire::RpcScriptPublicKey& _internal_scriptpublickey() const;
  ::protowire::RpcScriptPublicKey* _internal_mutable_scriptpublickey();
  public:
  void unsafe_arena_set_allocated_scriptpublickey(
      ::protowire::RpcScriptPublicKey* scriptpublickey);
  ::protowire::RpcScriptPublicKey* unsafe_arena_release_scriptpublickey();

  // .protowire.RpcTransactionOutputVerboseData verboseData = 3;
  bool has_verbosedata() const;
  private:
  bool _internal_has_verbosedata() const;
  public:
  void clear_verbosedata();
  const ::protowire::RpcTransactionOutputVerboseData& verbosedata() const;
  PROTOBUF_NODISCARD ::protowire::RpcTransactionOutputVerboseData* release_verbosedata();
  ::protowire::RpcTransactionOutputVerboseData* mutable_verbosedata();
  void set_allocated_verbosedata(::protowire::RpcTransactionOutputVerboseData* verbosedata);
  private:
  const ::protowire::RpcTransactionOutputVerboseData& _internal_verbosedata() const;
  ::protowire::RpcTransactionOutputVerboseData* _internal_mutable_verbosedata();
  public:
  void unsafe_arena_set_allocated_verbosedata(
      ::protowire::RpcTransactionOutputVerboseData* verbosedata);
  ::protowire::RpcTransactionOutputVerboseData* unsafe_arena_release_verbosedata();

  // uint64 amount = 1;
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.RpcTransactionOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RpcScriptPublicKey* scriptpublickey_;
  ::protowire::RpcTransactionOutputVerboseData* verbosedata_;
  uint64_t amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcOutpoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RpcOutpoint) */ {
 public:
  inline RpcOutpoint() : RpcOutpoint(nullptr) {}
  ~RpcOutpoint() override;
  explicit constexpr RpcOutpoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcOutpoint(const RpcOutpoint& from);
  RpcOutpoint(RpcOutpoint&& from) noexcept
    : RpcOutpoint() {
    *this = ::std::move(from);
  }

  inline RpcOutpoint& operator=(const RpcOutpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcOutpoint& operator=(RpcOutpoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcOutpoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcOutpoint* internal_default_instance() {
    return reinterpret_cast<const RpcOutpoint*>(
               &_RpcOutpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RpcOutpoint& a, RpcOutpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcOutpoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcOutpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcOutpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcOutpoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcOutpoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcOutpoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcOutpoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RpcOutpoint";
  }
  protected:
  explicit RpcOutpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // string transactionId = 1;
  void clear_transactionid();
  const std::string& transactionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transactionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transactionid();
  PROTOBUF_NODISCARD std::string* release_transactionid();
  void set_allocated_transactionid(std::string* transactionid);
  private:
  const std::string& _internal_transactionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transactionid(const std::string& value);
  std::string* _internal_mutable_transactionid();
  public:

  // uint32 index = 2;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.RpcOutpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionid_;
  uint32_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcUtxoEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RpcUtxoEntry) */ {
 public:
  inline RpcUtxoEntry() : RpcUtxoEntry(nullptr) {}
  ~RpcUtxoEntry() override;
  explicit constexpr RpcUtxoEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcUtxoEntry(const RpcUtxoEntry& from);
  RpcUtxoEntry(RpcUtxoEntry&& from) noexcept
    : RpcUtxoEntry() {
    *this = ::std::move(from);
  }

  inline RpcUtxoEntry& operator=(const RpcUtxoEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcUtxoEntry& operator=(RpcUtxoEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcUtxoEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcUtxoEntry* internal_default_instance() {
    return reinterpret_cast<const RpcUtxoEntry*>(
               &_RpcUtxoEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RpcUtxoEntry& a, RpcUtxoEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcUtxoEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcUtxoEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcUtxoEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcUtxoEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcUtxoEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcUtxoEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcUtxoEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RpcUtxoEntry";
  }
  protected:
  explicit RpcUtxoEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptPublicKeyFieldNumber = 2,
    kAmountFieldNumber = 1,
    kBlockDaaScoreFieldNumber = 3,
    kIsCoinbaseFieldNumber = 4,
  };
  // .protowire.RpcScriptPublicKey scriptPublicKey = 2;
  bool has_scriptpublickey() const;
  private:
  bool _internal_has_scriptpublickey() const;
  public:
  void clear_scriptpublickey();
  const ::protowire::RpcScriptPublicKey& scriptpublickey() const;
  PROTOBUF_NODISCARD ::protowire::RpcScriptPublicKey* release_scriptpublickey();
  ::protowire::RpcScriptPublicKey* mutable_scriptpublickey();
  void set_allocated_scriptpublickey(::protowire::RpcScriptPublicKey* scriptpublickey);
  private:
  const ::protowire::RpcScriptPublicKey& _internal_scriptpublickey() const;
  ::protowire::RpcScriptPublicKey* _internal_mutable_scriptpublickey();
  public:
  void unsafe_arena_set_allocated_scriptpublickey(
      ::protowire::RpcScriptPublicKey* scriptpublickey);
  ::protowire::RpcScriptPublicKey* unsafe_arena_release_scriptpublickey();

  // uint64 amount = 1;
  void clear_amount();
  uint64_t amount() const;
  void set_amount(uint64_t value);
  private:
  uint64_t _internal_amount() const;
  void _internal_set_amount(uint64_t value);
  public:

  // uint64 blockDaaScore = 3;
  void clear_blockdaascore();
  uint64_t blockdaascore() const;
  void set_blockdaascore(uint64_t value);
  private:
  uint64_t _internal_blockdaascore() const;
  void _internal_set_blockdaascore(uint64_t value);
  public:

  // bool isCoinbase = 4;
  void clear_iscoinbase();
  bool iscoinbase() const;
  void set_iscoinbase(bool value);
  private:
  bool _internal_iscoinbase() const;
  void _internal_set_iscoinbase(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.RpcUtxoEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RpcScriptPublicKey* scriptpublickey_;
  uint64_t amount_;
  uint64_t blockdaascore_;
  bool iscoinbase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcTransactionVerboseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RpcTransactionVerboseData) */ {
 public:
  inline RpcTransactionVerboseData() : RpcTransactionVerboseData(nullptr) {}
  ~RpcTransactionVerboseData() override;
  explicit constexpr RpcTransactionVerboseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcTransactionVerboseData(const RpcTransactionVerboseData& from);
  RpcTransactionVerboseData(RpcTransactionVerboseData&& from) noexcept
    : RpcTransactionVerboseData() {
    *this = ::std::move(from);
  }

  inline RpcTransactionVerboseData& operator=(const RpcTransactionVerboseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcTransactionVerboseData& operator=(RpcTransactionVerboseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcTransactionVerboseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcTransactionVerboseData* internal_default_instance() {
    return reinterpret_cast<const RpcTransactionVerboseData*>(
               &_RpcTransactionVerboseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RpcTransactionVerboseData& a, RpcTransactionVerboseData& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcTransactionVerboseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcTransactionVerboseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcTransactionVerboseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcTransactionVerboseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcTransactionVerboseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcTransactionVerboseData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcTransactionVerboseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RpcTransactionVerboseData";
  }
  protected:
  explicit RpcTransactionVerboseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdFieldNumber = 1,
    kHashFieldNumber = 2,
    kBlockHashFieldNumber = 12,
    kMassFieldNumber = 4,
    kBlockTimeFieldNumber = 14,
  };
  // string transactionId = 1;
  void clear_transactionid();
  const std::string& transactionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transactionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transactionid();
  PROTOBUF_NODISCARD std::string* release_transactionid();
  void set_allocated_transactionid(std::string* transactionid);
  private:
  const std::string& _internal_transactionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transactionid(const std::string& value);
  std::string* _internal_mutable_transactionid();
  public:

  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string blockHash = 12;
  void clear_blockhash();
  const std::string& blockhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blockhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blockhash();
  PROTOBUF_NODISCARD std::string* release_blockhash();
  void set_allocated_blockhash(std::string* blockhash);
  private:
  const std::string& _internal_blockhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blockhash(const std::string& value);
  std::string* _internal_mutable_blockhash();
  public:

  // uint64 mass = 4;
  void clear_mass();
  uint64_t mass() const;
  void set_mass(uint64_t value);
  private:
  uint64_t _internal_mass() const;
  void _internal_set_mass(uint64_t value);
  public:

  // uint64 blockTime = 14;
  void clear_blocktime();
  uint64_t blocktime() const;
  void set_blocktime(uint64_t value);
  private:
  uint64_t _internal_blocktime() const;
  void _internal_set_blocktime(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.RpcTransactionVerboseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockhash_;
  uint64_t mass_;
  uint64_t blocktime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcTransactionInputVerboseData final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.RpcTransactionInputVerboseData) */ {
 public:
  inline RpcTransactionInputVerboseData() : RpcTransactionInputVerboseData(nullptr) {}
  explicit constexpr RpcTransactionInputVerboseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcTransactionInputVerboseData(const RpcTransactionInputVerboseData& from);
  RpcTransactionInputVerboseData(RpcTransactionInputVerboseData&& from) noexcept
    : RpcTransactionInputVerboseData() {
    *this = ::std::move(from);
  }

  inline RpcTransactionInputVerboseData& operator=(const RpcTransactionInputVerboseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcTransactionInputVerboseData& operator=(RpcTransactionInputVerboseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcTransactionInputVerboseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcTransactionInputVerboseData* internal_default_instance() {
    return reinterpret_cast<const RpcTransactionInputVerboseData*>(
               &_RpcTransactionInputVerboseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RpcTransactionInputVerboseData& a, RpcTransactionInputVerboseData& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcTransactionInputVerboseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcTransactionInputVerboseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcTransactionInputVerboseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcTransactionInputVerboseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RpcTransactionInputVerboseData& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RpcTransactionInputVerboseData& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RpcTransactionInputVerboseData";
  }
  protected:
  explicit RpcTransactionInputVerboseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.RpcTransactionInputVerboseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcTransactionOutputVerboseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.RpcTransactionOutputVerboseData) */ {
 public:
  inline RpcTransactionOutputVerboseData() : RpcTransactionOutputVerboseData(nullptr) {}
  ~RpcTransactionOutputVerboseData() override;
  explicit constexpr RpcTransactionOutputVerboseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcTransactionOutputVerboseData(const RpcTransactionOutputVerboseData& from);
  RpcTransactionOutputVerboseData(RpcTransactionOutputVerboseData&& from) noexcept
    : RpcTransactionOutputVerboseData() {
    *this = ::std::move(from);
  }

  inline RpcTransactionOutputVerboseData& operator=(const RpcTransactionOutputVerboseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcTransactionOutputVerboseData& operator=(RpcTransactionOutputVerboseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcTransactionOutputVerboseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcTransactionOutputVerboseData* internal_default_instance() {
    return reinterpret_cast<const RpcTransactionOutputVerboseData*>(
               &_RpcTransactionOutputVerboseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RpcTransactionOutputVerboseData& a, RpcTransactionOutputVerboseData& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcTransactionOutputVerboseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcTransactionOutputVerboseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcTransactionOutputVerboseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcTransactionOutputVerboseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcTransactionOutputVerboseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcTransactionOutputVerboseData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcTransactionOutputVerboseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.RpcTransactionOutputVerboseData";
  }
  protected:
  explicit RpcTransactionOutputVerboseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptPublicKeyTypeFieldNumber = 5,
    kScriptPublicKeyAddressFieldNumber = 6,
  };
  // string scriptPublicKeyType = 5;
  void clear_scriptpublickeytype();
  const std::string& scriptpublickeytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scriptpublickeytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scriptpublickeytype();
  PROTOBUF_NODISCARD std::string* release_scriptpublickeytype();
  void set_allocated_scriptpublickeytype(std::string* scriptpublickeytype);
  private:
  const std::string& _internal_scriptpublickeytype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scriptpublickeytype(const std::string& value);
  std::string* _internal_mutable_scriptpublickeytype();
  public:

  // string scriptPublicKeyAddress = 6;
  void clear_scriptpublickeyaddress();
  const std::string& scriptpublickeyaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scriptpublickeyaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scriptpublickeyaddress();
  PROTOBUF_NODISCARD std::string* release_scriptpublickeyaddress();
  void set_allocated_scriptpublickeyaddress(std::string* scriptpublickeyaddress);
  private:
  const std::string& _internal_scriptpublickeyaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scriptpublickeyaddress(const std::string& value);
  std::string* _internal_mutable_scriptpublickeyaddress();
  public:

  // @@protoc_insertion_point(class_scope:protowire.RpcTransactionOutputVerboseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scriptpublickeytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scriptpublickeyaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetCurrentNetworkRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.GetCurrentNetworkRequestMessage) */ {
 public:
  inline GetCurrentNetworkRequestMessage() : GetCurrentNetworkRequestMessage(nullptr) {}
  explicit constexpr GetCurrentNetworkRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrentNetworkRequestMessage(const GetCurrentNetworkRequestMessage& from);
  GetCurrentNetworkRequestMessage(GetCurrentNetworkRequestMessage&& from) noexcept
    : GetCurrentNetworkRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetCurrentNetworkRequestMessage& operator=(const GetCurrentNetworkRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrentNetworkRequestMessage& operator=(GetCurrentNetworkRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCurrentNetworkRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrentNetworkRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetCurrentNetworkRequestMessage*>(
               &_GetCurrentNetworkRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetCurrentNetworkRequestMessage& a, GetCurrentNetworkRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrentNetworkRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrentNetworkRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCurrentNetworkRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCurrentNetworkRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetCurrentNetworkRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetCurrentNetworkRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetCurrentNetworkRequestMessage";
  }
  protected:
  explicit GetCurrentNetworkRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.GetCurrentNetworkRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetCurrentNetworkResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetCurrentNetworkResponseMessage) */ {
 public:
  inline GetCurrentNetworkResponseMessage() : GetCurrentNetworkResponseMessage(nullptr) {}
  ~GetCurrentNetworkResponseMessage() override;
  explicit constexpr GetCurrentNetworkResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrentNetworkResponseMessage(const GetCurrentNetworkResponseMessage& from);
  GetCurrentNetworkResponseMessage(GetCurrentNetworkResponseMessage&& from) noexcept
    : GetCurrentNetworkResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetCurrentNetworkResponseMessage& operator=(const GetCurrentNetworkResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrentNetworkResponseMessage& operator=(GetCurrentNetworkResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCurrentNetworkResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrentNetworkResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetCurrentNetworkResponseMessage*>(
               &_GetCurrentNetworkResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetCurrentNetworkResponseMessage& a, GetCurrentNetworkResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrentNetworkResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrentNetworkResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCurrentNetworkResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCurrentNetworkResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCurrentNetworkResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCurrentNetworkResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrentNetworkResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetCurrentNetworkResponseMessage";
  }
  protected:
  explicit GetCurrentNetworkResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentNetworkFieldNumber = 1,
    kErrorFieldNumber = 1000,
  };
  // string currentNetwork = 1;
  void clear_currentnetwork();
  const std::string& currentnetwork() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currentnetwork(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currentnetwork();
  PROTOBUF_NODISCARD std::string* release_currentnetwork();
  void set_allocated_currentnetwork(std::string* currentnetwork);
  private:
  const std::string& _internal_currentnetwork() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currentnetwork(const std::string& value);
  std::string* _internal_mutable_currentnetwork();
  public:

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.GetCurrentNetworkResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentnetwork_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SubmitBlockRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.SubmitBlockRequestMessage) */ {
 public:
  inline SubmitBlockRequestMessage() : SubmitBlockRequestMessage(nullptr) {}
  ~SubmitBlockRequestMessage() override;
  explicit constexpr SubmitBlockRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmitBlockRequestMessage(const SubmitBlockRequestMessage& from);
  SubmitBlockRequestMessage(SubmitBlockRequestMessage&& from) noexcept
    : SubmitBlockRequestMessage() {
    *this = ::std::move(from);
  }

  inline SubmitBlockRequestMessage& operator=(const SubmitBlockRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitBlockRequestMessage& operator=(SubmitBlockRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitBlockRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitBlockRequestMessage* internal_default_instance() {
    return reinterpret_cast<const SubmitBlockRequestMessage*>(
               &_SubmitBlockRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SubmitBlockRequestMessage& a, SubmitBlockRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitBlockRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitBlockRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitBlockRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmitBlockRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmitBlockRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubmitBlockRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitBlockRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.SubmitBlockRequestMessage";
  }
  protected:
  explicit SubmitBlockRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 2,
    kAllowNonDAABlocksFieldNumber = 3,
  };
  // .protowire.RpcBlock block = 2;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::protowire::RpcBlock& block() const;
  PROTOBUF_NODISCARD ::protowire::RpcBlock* release_block();
  ::protowire::RpcBlock* mutable_block();
  void set_allocated_block(::protowire::RpcBlock* block);
  private:
  const ::protowire::RpcBlock& _internal_block() const;
  ::protowire::RpcBlock* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::protowire::RpcBlock* block);
  ::protowire::RpcBlock* unsafe_arena_release_block();

  // bool allowNonDAABlocks = 3;
  void clear_allownondaablocks();
  bool allownondaablocks() const;
  void set_allownondaablocks(bool value);
  private:
  bool _internal_allownondaablocks() const;
  void _internal_set_allownondaablocks(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.SubmitBlockRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RpcBlock* block_;
  bool allownondaablocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SubmitBlockResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.SubmitBlockResponseMessage) */ {
 public:
  inline SubmitBlockResponseMessage() : SubmitBlockResponseMessage(nullptr) {}
  ~SubmitBlockResponseMessage() override;
  explicit constexpr SubmitBlockResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmitBlockResponseMessage(const SubmitBlockResponseMessage& from);
  SubmitBlockResponseMessage(SubmitBlockResponseMessage&& from) noexcept
    : SubmitBlockResponseMessage() {
    *this = ::std::move(from);
  }

  inline SubmitBlockResponseMessage& operator=(const SubmitBlockResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitBlockResponseMessage& operator=(SubmitBlockResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitBlockResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitBlockResponseMessage* internal_default_instance() {
    return reinterpret_cast<const SubmitBlockResponseMessage*>(
               &_SubmitBlockResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SubmitBlockResponseMessage& a, SubmitBlockResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitBlockResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitBlockResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitBlockResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmitBlockResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmitBlockResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubmitBlockResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitBlockResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.SubmitBlockResponseMessage";
  }
  protected:
  explicit SubmitBlockResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SubmitBlockResponseMessage_RejectReason RejectReason;
  static constexpr RejectReason NONE =
    SubmitBlockResponseMessage_RejectReason_NONE;
  static constexpr RejectReason BLOCK_INVALID =
    SubmitBlockResponseMessage_RejectReason_BLOCK_INVALID;
  static constexpr RejectReason IS_IN_IBD =
    SubmitBlockResponseMessage_RejectReason_IS_IN_IBD;
  static inline bool RejectReason_IsValid(int value) {
    return SubmitBlockResponseMessage_RejectReason_IsValid(value);
  }
  static constexpr RejectReason RejectReason_MIN =
    SubmitBlockResponseMessage_RejectReason_RejectReason_MIN;
  static constexpr RejectReason RejectReason_MAX =
    SubmitBlockResponseMessage_RejectReason_RejectReason_MAX;
  static constexpr int RejectReason_ARRAYSIZE =
    SubmitBlockResponseMessage_RejectReason_RejectReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RejectReason_descriptor() {
    return SubmitBlockResponseMessage_RejectReason_descriptor();
  }
  template<typename T>
  static inline const std::string& RejectReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RejectReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RejectReason_Name.");
    return SubmitBlockResponseMessage_RejectReason_Name(enum_t_value);
  }
  static inline bool RejectReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RejectReason* value) {
    return SubmitBlockResponseMessage_RejectReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
    kRejectReasonFieldNumber = 1,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // .protowire.SubmitBlockResponseMessage.RejectReason rejectReason = 1;
  void clear_rejectreason();
  ::protowire::SubmitBlockResponseMessage_RejectReason rejectreason() const;
  void set_rejectreason(::protowire::SubmitBlockResponseMessage_RejectReason value);
  private:
  ::protowire::SubmitBlockResponseMessage_RejectReason _internal_rejectreason() const;
  void _internal_set_rejectreason(::protowire::SubmitBlockResponseMessage_RejectReason value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.SubmitBlockResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  int rejectreason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockTemplateRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetBlockTemplateRequestMessage) */ {
 public:
  inline GetBlockTemplateRequestMessage() : GetBlockTemplateRequestMessage(nullptr) {}
  ~GetBlockTemplateRequestMessage() override;
  explicit constexpr GetBlockTemplateRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockTemplateRequestMessage(const GetBlockTemplateRequestMessage& from);
  GetBlockTemplateRequestMessage(GetBlockTemplateRequestMessage&& from) noexcept
    : GetBlockTemplateRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetBlockTemplateRequestMessage& operator=(const GetBlockTemplateRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockTemplateRequestMessage& operator=(GetBlockTemplateRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockTemplateRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockTemplateRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetBlockTemplateRequestMessage*>(
               &_GetBlockTemplateRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetBlockTemplateRequestMessage& a, GetBlockTemplateRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockTemplateRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockTemplateRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockTemplateRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockTemplateRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockTemplateRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockTemplateRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockTemplateRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBlockTemplateRequestMessage";
  }
  protected:
  explicit GetBlockTemplateRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayAddressFieldNumber = 1,
    kExtraDataFieldNumber = 2,
  };
  // string payAddress = 1;
  void clear_payaddress();
  const std::string& payaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payaddress();
  PROTOBUF_NODISCARD std::string* release_payaddress();
  void set_allocated_payaddress(std::string* payaddress);
  private:
  const std::string& _internal_payaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payaddress(const std::string& value);
  std::string* _internal_mutable_payaddress();
  public:

  // string extraData = 2;
  void clear_extradata();
  const std::string& extradata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extradata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extradata();
  PROTOBUF_NODISCARD std::string* release_extradata();
  void set_allocated_extradata(std::string* extradata);
  private:
  const std::string& _internal_extradata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extradata(const std::string& value);
  std::string* _internal_mutable_extradata();
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetBlockTemplateRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extradata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockTemplateResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetBlockTemplateResponseMessage) */ {
 public:
  inline GetBlockTemplateResponseMessage() : GetBlockTemplateResponseMessage(nullptr) {}
  ~GetBlockTemplateResponseMessage() override;
  explicit constexpr GetBlockTemplateResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockTemplateResponseMessage(const GetBlockTemplateResponseMessage& from);
  GetBlockTemplateResponseMessage(GetBlockTemplateResponseMessage&& from) noexcept
    : GetBlockTemplateResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetBlockTemplateResponseMessage& operator=(const GetBlockTemplateResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockTemplateResponseMessage& operator=(GetBlockTemplateResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockTemplateResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockTemplateResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetBlockTemplateResponseMessage*>(
               &_GetBlockTemplateResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetBlockTemplateResponseMessage& a, GetBlockTemplateResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockTemplateResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockTemplateResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockTemplateResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockTemplateResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockTemplateResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockTemplateResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockTemplateResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBlockTemplateResponseMessage";
  }
  protected:
  explicit GetBlockTemplateResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 3,
    kErrorFieldNumber = 1000,
    kIsSyncedFieldNumber = 2,
  };
  // .protowire.RpcBlock block = 3;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::protowire::RpcBlock& block() const;
  PROTOBUF_NODISCARD ::protowire::RpcBlock* release_block();
  ::protowire::RpcBlock* mutable_block();
  void set_allocated_block(::protowire::RpcBlock* block);
  private:
  const ::protowire::RpcBlock& _internal_block() const;
  ::protowire::RpcBlock* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::protowire::RpcBlock* block);
  ::protowire::RpcBlock* unsafe_arena_release_block();

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // bool isSynced = 2;
  void clear_issynced();
  bool issynced() const;
  void set_issynced(bool value);
  private:
  bool _internal_issynced() const;
  void _internal_set_issynced(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetBlockTemplateResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RpcBlock* block_;
  ::protowire::RPCError* error_;
  bool issynced_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyBlockAddedRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.NotifyBlockAddedRequestMessage) */ {
 public:
  inline NotifyBlockAddedRequestMessage() : NotifyBlockAddedRequestMessage(nullptr) {}
  explicit constexpr NotifyBlockAddedRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyBlockAddedRequestMessage(const NotifyBlockAddedRequestMessage& from);
  NotifyBlockAddedRequestMessage(NotifyBlockAddedRequestMessage&& from) noexcept
    : NotifyBlockAddedRequestMessage() {
    *this = ::std::move(from);
  }

  inline NotifyBlockAddedRequestMessage& operator=(const NotifyBlockAddedRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyBlockAddedRequestMessage& operator=(NotifyBlockAddedRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyBlockAddedRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyBlockAddedRequestMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyBlockAddedRequestMessage*>(
               &_NotifyBlockAddedRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(NotifyBlockAddedRequestMessage& a, NotifyBlockAddedRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyBlockAddedRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyBlockAddedRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyBlockAddedRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyBlockAddedRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NotifyBlockAddedRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NotifyBlockAddedRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyBlockAddedRequestMessage";
  }
  protected:
  explicit NotifyBlockAddedRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.NotifyBlockAddedRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyBlockAddedResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.NotifyBlockAddedResponseMessage) */ {
 public:
  inline NotifyBlockAddedResponseMessage() : NotifyBlockAddedResponseMessage(nullptr) {}
  ~NotifyBlockAddedResponseMessage() override;
  explicit constexpr NotifyBlockAddedResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyBlockAddedResponseMessage(const NotifyBlockAddedResponseMessage& from);
  NotifyBlockAddedResponseMessage(NotifyBlockAddedResponseMessage&& from) noexcept
    : NotifyBlockAddedResponseMessage() {
    *this = ::std::move(from);
  }

  inline NotifyBlockAddedResponseMessage& operator=(const NotifyBlockAddedResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyBlockAddedResponseMessage& operator=(NotifyBlockAddedResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyBlockAddedResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyBlockAddedResponseMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyBlockAddedResponseMessage*>(
               &_NotifyBlockAddedResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(NotifyBlockAddedResponseMessage& a, NotifyBlockAddedResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyBlockAddedResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyBlockAddedResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyBlockAddedResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyBlockAddedResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyBlockAddedResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyBlockAddedResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyBlockAddedResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyBlockAddedResponseMessage";
  }
  protected:
  explicit NotifyBlockAddedResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.NotifyBlockAddedResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class BlockAddedNotificationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.BlockAddedNotificationMessage) */ {
 public:
  inline BlockAddedNotificationMessage() : BlockAddedNotificationMessage(nullptr) {}
  ~BlockAddedNotificationMessage() override;
  explicit constexpr BlockAddedNotificationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockAddedNotificationMessage(const BlockAddedNotificationMessage& from);
  BlockAddedNotificationMessage(BlockAddedNotificationMessage&& from) noexcept
    : BlockAddedNotificationMessage() {
    *this = ::std::move(from);
  }

  inline BlockAddedNotificationMessage& operator=(const BlockAddedNotificationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockAddedNotificationMessage& operator=(BlockAddedNotificationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockAddedNotificationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockAddedNotificationMessage* internal_default_instance() {
    return reinterpret_cast<const BlockAddedNotificationMessage*>(
               &_BlockAddedNotificationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BlockAddedNotificationMessage& a, BlockAddedNotificationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockAddedNotificationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockAddedNotificationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockAddedNotificationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockAddedNotificationMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockAddedNotificationMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockAddedNotificationMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockAddedNotificationMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.BlockAddedNotificationMessage";
  }
  protected:
  explicit BlockAddedNotificationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 3,
  };
  // .protowire.RpcBlock block = 3;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::protowire::RpcBlock& block() const;
  PROTOBUF_NODISCARD ::protowire::RpcBlock* release_block();
  ::protowire::RpcBlock* mutable_block();
  void set_allocated_block(::protowire::RpcBlock* block);
  private:
  const ::protowire::RpcBlock& _internal_block() const;
  ::protowire::RpcBlock* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::protowire::RpcBlock* block);
  ::protowire::RpcBlock* unsafe_arena_release_block();

  // @@protoc_insertion_point(class_scope:protowire.BlockAddedNotificationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RpcBlock* block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetPeerAddressesRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.GetPeerAddressesRequestMessage) */ {
 public:
  inline GetPeerAddressesRequestMessage() : GetPeerAddressesRequestMessage(nullptr) {}
  explicit constexpr GetPeerAddressesRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPeerAddressesRequestMessage(const GetPeerAddressesRequestMessage& from);
  GetPeerAddressesRequestMessage(GetPeerAddressesRequestMessage&& from) noexcept
    : GetPeerAddressesRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetPeerAddressesRequestMessage& operator=(const GetPeerAddressesRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeerAddressesRequestMessage& operator=(GetPeerAddressesRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPeerAddressesRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPeerAddressesRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetPeerAddressesRequestMessage*>(
               &_GetPeerAddressesRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetPeerAddressesRequestMessage& a, GetPeerAddressesRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeerAddressesRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPeerAddressesRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPeerAddressesRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPeerAddressesRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetPeerAddressesRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetPeerAddressesRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetPeerAddressesRequestMessage";
  }
  protected:
  explicit GetPeerAddressesRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.GetPeerAddressesRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetPeerAddressesResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetPeerAddressesResponseMessage) */ {
 public:
  inline GetPeerAddressesResponseMessage() : GetPeerAddressesResponseMessage(nullptr) {}
  ~GetPeerAddressesResponseMessage() override;
  explicit constexpr GetPeerAddressesResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPeerAddressesResponseMessage(const GetPeerAddressesResponseMessage& from);
  GetPeerAddressesResponseMessage(GetPeerAddressesResponseMessage&& from) noexcept
    : GetPeerAddressesResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetPeerAddressesResponseMessage& operator=(const GetPeerAddressesResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeerAddressesResponseMessage& operator=(GetPeerAddressesResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPeerAddressesResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPeerAddressesResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetPeerAddressesResponseMessage*>(
               &_GetPeerAddressesResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetPeerAddressesResponseMessage& a, GetPeerAddressesResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeerAddressesResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPeerAddressesResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPeerAddressesResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPeerAddressesResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPeerAddressesResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPeerAddressesResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerAddressesResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetPeerAddressesResponseMessage";
  }
  protected:
  explicit GetPeerAddressesResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
    kBannedAddressesFieldNumber = 2,
    kErrorFieldNumber = 1000,
  };
  // repeated .protowire.GetPeerAddressesKnownAddressMessage addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  ::protowire::GetPeerAddressesKnownAddressMessage* mutable_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetPeerAddressesKnownAddressMessage >*
      mutable_addresses();
  private:
  const ::protowire::GetPeerAddressesKnownAddressMessage& _internal_addresses(int index) const;
  ::protowire::GetPeerAddressesKnownAddressMessage* _internal_add_addresses();
  public:
  const ::protowire::GetPeerAddressesKnownAddressMessage& addresses(int index) const;
  ::protowire::GetPeerAddressesKnownAddressMessage* add_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetPeerAddressesKnownAddressMessage >&
      addresses() const;

  // repeated .protowire.GetPeerAddressesKnownAddressMessage bannedAddresses = 2;
  int bannedaddresses_size() const;
  private:
  int _internal_bannedaddresses_size() const;
  public:
  void clear_bannedaddresses();
  ::protowire::GetPeerAddressesKnownAddressMessage* mutable_bannedaddresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetPeerAddressesKnownAddressMessage >*
      mutable_bannedaddresses();
  private:
  const ::protowire::GetPeerAddressesKnownAddressMessage& _internal_bannedaddresses(int index) const;
  ::protowire::GetPeerAddressesKnownAddressMessage* _internal_add_bannedaddresses();
  public:
  const ::protowire::GetPeerAddressesKnownAddressMessage& bannedaddresses(int index) const;
  ::protowire::GetPeerAddressesKnownAddressMessage* add_bannedaddresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetPeerAddressesKnownAddressMessage >&
      bannedaddresses() const;

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.GetPeerAddressesResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetPeerAddressesKnownAddressMessage > addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetPeerAddressesKnownAddressMessage > bannedaddresses_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetPeerAddressesKnownAddressMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetPeerAddressesKnownAddressMessage) */ {
 public:
  inline GetPeerAddressesKnownAddressMessage() : GetPeerAddressesKnownAddressMessage(nullptr) {}
  ~GetPeerAddressesKnownAddressMessage() override;
  explicit constexpr GetPeerAddressesKnownAddressMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPeerAddressesKnownAddressMessage(const GetPeerAddressesKnownAddressMessage& from);
  GetPeerAddressesKnownAddressMessage(GetPeerAddressesKnownAddressMessage&& from) noexcept
    : GetPeerAddressesKnownAddressMessage() {
    *this = ::std::move(from);
  }

  inline GetPeerAddressesKnownAddressMessage& operator=(const GetPeerAddressesKnownAddressMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeerAddressesKnownAddressMessage& operator=(GetPeerAddressesKnownAddressMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPeerAddressesKnownAddressMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPeerAddressesKnownAddressMessage* internal_default_instance() {
    return reinterpret_cast<const GetPeerAddressesKnownAddressMessage*>(
               &_GetPeerAddressesKnownAddressMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetPeerAddressesKnownAddressMessage& a, GetPeerAddressesKnownAddressMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeerAddressesKnownAddressMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPeerAddressesKnownAddressMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPeerAddressesKnownAddressMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPeerAddressesKnownAddressMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPeerAddressesKnownAddressMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPeerAddressesKnownAddressMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerAddressesKnownAddressMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetPeerAddressesKnownAddressMessage";
  }
  protected:
  explicit GetPeerAddressesKnownAddressMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
  };
  // string Addr = 1;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetPeerAddressesKnownAddressMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetSelectedTipHashRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.GetSelectedTipHashRequestMessage) */ {
 public:
  inline GetSelectedTipHashRequestMessage() : GetSelectedTipHashRequestMessage(nullptr) {}
  explicit constexpr GetSelectedTipHashRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSelectedTipHashRequestMessage(const GetSelectedTipHashRequestMessage& from);
  GetSelectedTipHashRequestMessage(GetSelectedTipHashRequestMessage&& from) noexcept
    : GetSelectedTipHashRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetSelectedTipHashRequestMessage& operator=(const GetSelectedTipHashRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSelectedTipHashRequestMessage& operator=(GetSelectedTipHashRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSelectedTipHashRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSelectedTipHashRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetSelectedTipHashRequestMessage*>(
               &_GetSelectedTipHashRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetSelectedTipHashRequestMessage& a, GetSelectedTipHashRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSelectedTipHashRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSelectedTipHashRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSelectedTipHashRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSelectedTipHashRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetSelectedTipHashRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetSelectedTipHashRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetSelectedTipHashRequestMessage";
  }
  protected:
  explicit GetSelectedTipHashRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.GetSelectedTipHashRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetSelectedTipHashResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetSelectedTipHashResponseMessage) */ {
 public:
  inline GetSelectedTipHashResponseMessage() : GetSelectedTipHashResponseMessage(nullptr) {}
  ~GetSelectedTipHashResponseMessage() override;
  explicit constexpr GetSelectedTipHashResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSelectedTipHashResponseMessage(const GetSelectedTipHashResponseMessage& from);
  GetSelectedTipHashResponseMessage(GetSelectedTipHashResponseMessage&& from) noexcept
    : GetSelectedTipHashResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetSelectedTipHashResponseMessage& operator=(const GetSelectedTipHashResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSelectedTipHashResponseMessage& operator=(GetSelectedTipHashResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSelectedTipHashResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSelectedTipHashResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetSelectedTipHashResponseMessage*>(
               &_GetSelectedTipHashResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetSelectedTipHashResponseMessage& a, GetSelectedTipHashResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSelectedTipHashResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSelectedTipHashResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSelectedTipHashResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSelectedTipHashResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSelectedTipHashResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSelectedTipHashResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSelectedTipHashResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetSelectedTipHashResponseMessage";
  }
  protected:
  explicit GetSelectedTipHashResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedTipHashFieldNumber = 1,
    kErrorFieldNumber = 1000,
  };
  // string selectedTipHash = 1;
  void clear_selectedtiphash();
  const std::string& selectedtiphash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selectedtiphash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selectedtiphash();
  PROTOBUF_NODISCARD std::string* release_selectedtiphash();
  void set_allocated_selectedtiphash(std::string* selectedtiphash);
  private:
  const std::string& _internal_selectedtiphash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selectedtiphash(const std::string& value);
  std::string* _internal_mutable_selectedtiphash();
  public:

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.GetSelectedTipHashResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selectedtiphash_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolEntryRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetMempoolEntryRequestMessage) */ {
 public:
  inline GetMempoolEntryRequestMessage() : GetMempoolEntryRequestMessage(nullptr) {}
  ~GetMempoolEntryRequestMessage() override;
  explicit constexpr GetMempoolEntryRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMempoolEntryRequestMessage(const GetMempoolEntryRequestMessage& from);
  GetMempoolEntryRequestMessage(GetMempoolEntryRequestMessage&& from) noexcept
    : GetMempoolEntryRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetMempoolEntryRequestMessage& operator=(const GetMempoolEntryRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolEntryRequestMessage& operator=(GetMempoolEntryRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMempoolEntryRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMempoolEntryRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetMempoolEntryRequestMessage*>(
               &_GetMempoolEntryRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetMempoolEntryRequestMessage& a, GetMempoolEntryRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolEntryRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMempoolEntryRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMempoolEntryRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMempoolEntryRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMempoolEntryRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMempoolEntryRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolEntryRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetMempoolEntryRequestMessage";
  }
  protected:
  explicit GetMempoolEntryRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxIdFieldNumber = 1,
    kIncludeOrphanPoolFieldNumber = 2,
    kFilterTransactionPoolFieldNumber = 3,
  };
  // string txId = 1;
  void clear_txid();
  const std::string& txid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_txid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_txid();
  PROTOBUF_NODISCARD std::string* release_txid();
  void set_allocated_txid(std::string* txid);
  private:
  const std::string& _internal_txid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_txid(const std::string& value);
  std::string* _internal_mutable_txid();
  public:

  // bool includeOrphanPool = 2;
  void clear_includeorphanpool();
  bool includeorphanpool() const;
  void set_includeorphanpool(bool value);
  private:
  bool _internal_includeorphanpool() const;
  void _internal_set_includeorphanpool(bool value);
  public:

  // bool filterTransactionPool = 3;
  void clear_filtertransactionpool();
  bool filtertransactionpool() const;
  void set_filtertransactionpool(bool value);
  private:
  bool _internal_filtertransactionpool() const;
  void _internal_set_filtertransactionpool(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetMempoolEntryRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txid_;
  bool includeorphanpool_;
  bool filtertransactionpool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolEntryResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetMempoolEntryResponseMessage) */ {
 public:
  inline GetMempoolEntryResponseMessage() : GetMempoolEntryResponseMessage(nullptr) {}
  ~GetMempoolEntryResponseMessage() override;
  explicit constexpr GetMempoolEntryResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMempoolEntryResponseMessage(const GetMempoolEntryResponseMessage& from);
  GetMempoolEntryResponseMessage(GetMempoolEntryResponseMessage&& from) noexcept
    : GetMempoolEntryResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetMempoolEntryResponseMessage& operator=(const GetMempoolEntryResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolEntryResponseMessage& operator=(GetMempoolEntryResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMempoolEntryResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMempoolEntryResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetMempoolEntryResponseMessage*>(
               &_GetMempoolEntryResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetMempoolEntryResponseMessage& a, GetMempoolEntryResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolEntryResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMempoolEntryResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMempoolEntryResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMempoolEntryResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMempoolEntryResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMempoolEntryResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolEntryResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetMempoolEntryResponseMessage";
  }
  protected:
  explicit GetMempoolEntryResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
    kErrorFieldNumber = 1000,
  };
  // .protowire.MempoolEntry entry = 1;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::protowire::MempoolEntry& entry() const;
  PROTOBUF_NODISCARD ::protowire::MempoolEntry* release_entry();
  ::protowire::MempoolEntry* mutable_entry();
  void set_allocated_entry(::protowire::MempoolEntry* entry);
  private:
  const ::protowire::MempoolEntry& _internal_entry() const;
  ::protowire::MempoolEntry* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::protowire::MempoolEntry* entry);
  ::protowire::MempoolEntry* unsafe_arena_release_entry();

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.GetMempoolEntryResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::MempoolEntry* entry_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolEntriesRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetMempoolEntriesRequestMessage) */ {
 public:
  inline GetMempoolEntriesRequestMessage() : GetMempoolEntriesRequestMessage(nullptr) {}
  ~GetMempoolEntriesRequestMessage() override;
  explicit constexpr GetMempoolEntriesRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMempoolEntriesRequestMessage(const GetMempoolEntriesRequestMessage& from);
  GetMempoolEntriesRequestMessage(GetMempoolEntriesRequestMessage&& from) noexcept
    : GetMempoolEntriesRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetMempoolEntriesRequestMessage& operator=(const GetMempoolEntriesRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolEntriesRequestMessage& operator=(GetMempoolEntriesRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMempoolEntriesRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMempoolEntriesRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetMempoolEntriesRequestMessage*>(
               &_GetMempoolEntriesRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetMempoolEntriesRequestMessage& a, GetMempoolEntriesRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolEntriesRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMempoolEntriesRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMempoolEntriesRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMempoolEntriesRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMempoolEntriesRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMempoolEntriesRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolEntriesRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetMempoolEntriesRequestMessage";
  }
  protected:
  explicit GetMempoolEntriesRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncludeOrphanPoolFieldNumber = 1,
    kFilterTransactionPoolFieldNumber = 2,
  };
  // bool includeOrphanPool = 1;
  void clear_includeorphanpool();
  bool includeorphanpool() const;
  void set_includeorphanpool(bool value);
  private:
  bool _internal_includeorphanpool() const;
  void _internal_set_includeorphanpool(bool value);
  public:

  // bool filterTransactionPool = 2;
  void clear_filtertransactionpool();
  bool filtertransactionpool() const;
  void set_filtertransactionpool(bool value);
  private:
  bool _internal_filtertransactionpool() const;
  void _internal_set_filtertransactionpool(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetMempoolEntriesRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool includeorphanpool_;
  bool filtertransactionpool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolEntriesResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetMempoolEntriesResponseMessage) */ {
 public:
  inline GetMempoolEntriesResponseMessage() : GetMempoolEntriesResponseMessage(nullptr) {}
  ~GetMempoolEntriesResponseMessage() override;
  explicit constexpr GetMempoolEntriesResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMempoolEntriesResponseMessage(const GetMempoolEntriesResponseMessage& from);
  GetMempoolEntriesResponseMessage(GetMempoolEntriesResponseMessage&& from) noexcept
    : GetMempoolEntriesResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetMempoolEntriesResponseMessage& operator=(const GetMempoolEntriesResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolEntriesResponseMessage& operator=(GetMempoolEntriesResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMempoolEntriesResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMempoolEntriesResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetMempoolEntriesResponseMessage*>(
               &_GetMempoolEntriesResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetMempoolEntriesResponseMessage& a, GetMempoolEntriesResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolEntriesResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMempoolEntriesResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMempoolEntriesResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMempoolEntriesResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMempoolEntriesResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMempoolEntriesResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolEntriesResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetMempoolEntriesResponseMessage";
  }
  protected:
  explicit GetMempoolEntriesResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kErrorFieldNumber = 1000,
  };
  // repeated .protowire.MempoolEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::protowire::MempoolEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry >*
      mutable_entries();
  private:
  const ::protowire::MempoolEntry& _internal_entries(int index) const;
  ::protowire::MempoolEntry* _internal_add_entries();
  public:
  const ::protowire::MempoolEntry& entries(int index) const;
  ::protowire::MempoolEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry >&
      entries() const;

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.GetMempoolEntriesResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry > entries_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MempoolEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.MempoolEntry) */ {
 public:
  inline MempoolEntry() : MempoolEntry(nullptr) {}
  ~MempoolEntry() override;
  explicit constexpr MempoolEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MempoolEntry(const MempoolEntry& from);
  MempoolEntry(MempoolEntry&& from) noexcept
    : MempoolEntry() {
    *this = ::std::move(from);
  }

  inline MempoolEntry& operator=(const MempoolEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MempoolEntry& operator=(MempoolEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MempoolEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MempoolEntry* internal_default_instance() {
    return reinterpret_cast<const MempoolEntry*>(
               &_MempoolEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(MempoolEntry& a, MempoolEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MempoolEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MempoolEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MempoolEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MempoolEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MempoolEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MempoolEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MempoolEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.MempoolEntry";
  }
  protected:
  explicit MempoolEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 3,
    kFeeFieldNumber = 1,
    kIsOrphanFieldNumber = 4,
  };
  // .protowire.RpcTransaction transaction = 3;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::protowire::RpcTransaction& transaction() const;
  PROTOBUF_NODISCARD ::protowire::RpcTransaction* release_transaction();
  ::protowire::RpcTransaction* mutable_transaction();
  void set_allocated_transaction(::protowire::RpcTransaction* transaction);
  private:
  const ::protowire::RpcTransaction& _internal_transaction() const;
  ::protowire::RpcTransaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::protowire::RpcTransaction* transaction);
  ::protowire::RpcTransaction* unsafe_arena_release_transaction();

  // uint64 fee = 1;
  void clear_fee();
  uint64_t fee() const;
  void set_fee(uint64_t value);
  private:
  uint64_t _internal_fee() const;
  void _internal_set_fee(uint64_t value);
  public:

  // bool isOrphan = 4;
  void clear_isorphan();
  bool isorphan() const;
  void set_isorphan(bool value);
  private:
  bool _internal_isorphan() const;
  void _internal_set_isorphan(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.MempoolEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RpcTransaction* transaction_;
  uint64_t fee_;
  bool isorphan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetConnectedPeerInfoRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.GetConnectedPeerInfoRequestMessage) */ {
 public:
  inline GetConnectedPeerInfoRequestMessage() : GetConnectedPeerInfoRequestMessage(nullptr) {}
  explicit constexpr GetConnectedPeerInfoRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConnectedPeerInfoRequestMessage(const GetConnectedPeerInfoRequestMessage& from);
  GetConnectedPeerInfoRequestMessage(GetConnectedPeerInfoRequestMessage&& from) noexcept
    : GetConnectedPeerInfoRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetConnectedPeerInfoRequestMessage& operator=(const GetConnectedPeerInfoRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnectedPeerInfoRequestMessage& operator=(GetConnectedPeerInfoRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConnectedPeerInfoRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConnectedPeerInfoRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetConnectedPeerInfoRequestMessage*>(
               &_GetConnectedPeerInfoRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetConnectedPeerInfoRequestMessage& a, GetConnectedPeerInfoRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnectedPeerInfoRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConnectedPeerInfoRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConnectedPeerInfoRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConnectedPeerInfoRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetConnectedPeerInfoRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetConnectedPeerInfoRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetConnectedPeerInfoRequestMessage";
  }
  protected:
  explicit GetConnectedPeerInfoRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.GetConnectedPeerInfoRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetConnectedPeerInfoResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetConnectedPeerInfoResponseMessage) */ {
 public:
  inline GetConnectedPeerInfoResponseMessage() : GetConnectedPeerInfoResponseMessage(nullptr) {}
  ~GetConnectedPeerInfoResponseMessage() override;
  explicit constexpr GetConnectedPeerInfoResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConnectedPeerInfoResponseMessage(const GetConnectedPeerInfoResponseMessage& from);
  GetConnectedPeerInfoResponseMessage(GetConnectedPeerInfoResponseMessage&& from) noexcept
    : GetConnectedPeerInfoResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetConnectedPeerInfoResponseMessage& operator=(const GetConnectedPeerInfoResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnectedPeerInfoResponseMessage& operator=(GetConnectedPeerInfoResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConnectedPeerInfoResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConnectedPeerInfoResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetConnectedPeerInfoResponseMessage*>(
               &_GetConnectedPeerInfoResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetConnectedPeerInfoResponseMessage& a, GetConnectedPeerInfoResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnectedPeerInfoResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConnectedPeerInfoResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConnectedPeerInfoResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConnectedPeerInfoResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConnectedPeerInfoResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetConnectedPeerInfoResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectedPeerInfoResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetConnectedPeerInfoResponseMessage";
  }
  protected:
  explicit GetConnectedPeerInfoResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
    kErrorFieldNumber = 1000,
  };
  // repeated .protowire.GetConnectedPeerInfoMessage infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::protowire::GetConnectedPeerInfoMessage* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetConnectedPeerInfoMessage >*
      mutable_infos();
  private:
  const ::protowire::GetConnectedPeerInfoMessage& _internal_infos(int index) const;
  ::protowire::GetConnectedPeerInfoMessage* _internal_add_infos();
  public:
  const ::protowire::GetConnectedPeerInfoMessage& infos(int index) const;
  ::protowire::GetConnectedPeerInfoMessage* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetConnectedPeerInfoMessage >&
      infos() const;

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.GetConnectedPeerInfoResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetConnectedPeerInfoMessage > infos_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetConnectedPeerInfoMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetConnectedPeerInfoMessage) */ {
 public:
  inline GetConnectedPeerInfoMessage() : GetConnectedPeerInfoMessage(nullptr) {}
  ~GetConnectedPeerInfoMessage() override;
  explicit constexpr GetConnectedPeerInfoMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConnectedPeerInfoMessage(const GetConnectedPeerInfoMessage& from);
  GetConnectedPeerInfoMessage(GetConnectedPeerInfoMessage&& from) noexcept
    : GetConnectedPeerInfoMessage() {
    *this = ::std::move(from);
  }

  inline GetConnectedPeerInfoMessage& operator=(const GetConnectedPeerInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnectedPeerInfoMessage& operator=(GetConnectedPeerInfoMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConnectedPeerInfoMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConnectedPeerInfoMessage* internal_default_instance() {
    return reinterpret_cast<const GetConnectedPeerInfoMessage*>(
               &_GetConnectedPeerInfoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetConnectedPeerInfoMessage& a, GetConnectedPeerInfoMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnectedPeerInfoMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConnectedPeerInfoMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConnectedPeerInfoMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConnectedPeerInfoMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConnectedPeerInfoMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetConnectedPeerInfoMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectedPeerInfoMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetConnectedPeerInfoMessage";
  }
  protected:
  explicit GetConnectedPeerInfoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAddressFieldNumber = 2,
    kUserAgentFieldNumber = 8,
    kLastPingDurationFieldNumber = 3,
    kTimeOffsetFieldNumber = 7,
    kIsOutboundFieldNumber = 6,
    kIsIbdPeerFieldNumber = 11,
    kAdvertisedProtocolVersionFieldNumber = 9,
    kTimeConnectedFieldNumber = 10,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string userAgent = 8;
  void clear_useragent();
  const std::string& useragent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_useragent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_useragent();
  PROTOBUF_NODISCARD std::string* release_useragent();
  void set_allocated_useragent(std::string* useragent);
  private:
  const std::string& _internal_useragent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_useragent(const std::string& value);
  std::string* _internal_mutable_useragent();
  public:

  // int64 lastPingDuration = 3;
  void clear_lastpingduration();
  int64_t lastpingduration() const;
  void set_lastpingduration(int64_t value);
  private:
  int64_t _internal_lastpingduration() const;
  void _internal_set_lastpingduration(int64_t value);
  public:

  // int64 timeOffset = 7;
  void clear_timeoffset();
  int64_t timeoffset() const;
  void set_timeoffset(int64_t value);
  private:
  int64_t _internal_timeoffset() const;
  void _internal_set_timeoffset(int64_t value);
  public:

  // bool isOutbound = 6;
  void clear_isoutbound();
  bool isoutbound() const;
  void set_isoutbound(bool value);
  private:
  bool _internal_isoutbound() const;
  void _internal_set_isoutbound(bool value);
  public:

  // bool isIbdPeer = 11;
  void clear_isibdpeer();
  bool isibdpeer() const;
  void set_isibdpeer(bool value);
  private:
  bool _internal_isibdpeer() const;
  void _internal_set_isibdpeer(bool value);
  public:

  // uint32 advertisedProtocolVersion = 9;
  void clear_advertisedprotocolversion();
  uint32_t advertisedprotocolversion() const;
  void set_advertisedprotocolversion(uint32_t value);
  private:
  uint32_t _internal_advertisedprotocolversion() const;
  void _internal_set_advertisedprotocolversion(uint32_t value);
  public:

  // int64 timeConnected = 10;
  void clear_timeconnected();
  int64_t timeconnected() const;
  void set_timeconnected(int64_t value);
  private:
  int64_t _internal_timeconnected() const;
  void _internal_set_timeconnected(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetConnectedPeerInfoMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr useragent_;
  int64_t lastpingduration_;
  int64_t timeoffset_;
  bool isoutbound_;
  bool isibdpeer_;
  uint32_t advertisedprotocolversion_;
  int64_t timeconnected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AddPeerRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.AddPeerRequestMessage) */ {
 public:
  inline AddPeerRequestMessage() : AddPeerRequestMessage(nullptr) {}
  ~AddPeerRequestMessage() override;
  explicit constexpr AddPeerRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPeerRequestMessage(const AddPeerRequestMessage& from);
  AddPeerRequestMessage(AddPeerRequestMessage&& from) noexcept
    : AddPeerRequestMessage() {
    *this = ::std::move(from);
  }

  inline AddPeerRequestMessage& operator=(const AddPeerRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerRequestMessage& operator=(AddPeerRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPeerRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPeerRequestMessage* internal_default_instance() {
    return reinterpret_cast<const AddPeerRequestMessage*>(
               &_AddPeerRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(AddPeerRequestMessage& a, AddPeerRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPeerRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddPeerRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddPeerRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPeerRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddPeerRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.AddPeerRequestMessage";
  }
  protected:
  explicit AddPeerRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kIsPermanentFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool isPermanent = 2;
  void clear_ispermanent();
  bool ispermanent() const;
  void set_ispermanent(bool value);
  private:
  bool _internal_ispermanent() const;
  void _internal_set_ispermanent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.AddPeerRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  bool ispermanent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AddPeerResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.AddPeerResponseMessage) */ {
 public:
  inline AddPeerResponseMessage() : AddPeerResponseMessage(nullptr) {}
  ~AddPeerResponseMessage() override;
  explicit constexpr AddPeerResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPeerResponseMessage(const AddPeerResponseMessage& from);
  AddPeerResponseMessage(AddPeerResponseMessage&& from) noexcept
    : AddPeerResponseMessage() {
    *this = ::std::move(from);
  }

  inline AddPeerResponseMessage& operator=(const AddPeerResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerResponseMessage& operator=(AddPeerResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPeerResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPeerResponseMessage* internal_default_instance() {
    return reinterpret_cast<const AddPeerResponseMessage*>(
               &_AddPeerResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(AddPeerResponseMessage& a, AddPeerResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPeerResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddPeerResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddPeerResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPeerResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddPeerResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.AddPeerResponseMessage";
  }
  protected:
  explicit AddPeerResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.AddPeerResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SubmitTransactionRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.SubmitTransactionRequestMessage) */ {
 public:
  inline SubmitTransactionRequestMessage() : SubmitTransactionRequestMessage(nullptr) {}
  ~SubmitTransactionRequestMessage() override;
  explicit constexpr SubmitTransactionRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmitTransactionRequestMessage(const SubmitTransactionRequestMessage& from);
  SubmitTransactionRequestMessage(SubmitTransactionRequestMessage&& from) noexcept
    : SubmitTransactionRequestMessage() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionRequestMessage& operator=(const SubmitTransactionRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionRequestMessage& operator=(SubmitTransactionRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitTransactionRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitTransactionRequestMessage* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionRequestMessage*>(
               &_SubmitTransactionRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SubmitTransactionRequestMessage& a, SubmitTransactionRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitTransactionRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTransactionRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitTransactionRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmitTransactionRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmitTransactionRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubmitTransactionRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.SubmitTransactionRequestMessage";
  }
  protected:
  explicit SubmitTransactionRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
    kAllowOrphanFieldNumber = 2,
  };
  // .protowire.RpcTransaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::protowire::RpcTransaction& transaction() const;
  PROTOBUF_NODISCARD ::protowire::RpcTransaction* release_transaction();
  ::protowire::RpcTransaction* mutable_transaction();
  void set_allocated_transaction(::protowire::RpcTransaction* transaction);
  private:
  const ::protowire::RpcTransaction& _internal_transaction() const;
  ::protowire::RpcTransaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::protowire::RpcTransaction* transaction);
  ::protowire::RpcTransaction* unsafe_arena_release_transaction();

  // bool allowOrphan = 2;
  void clear_alloworphan();
  bool alloworphan() const;
  void set_alloworphan(bool value);
  private:
  bool _internal_alloworphan() const;
  void _internal_set_alloworphan(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.SubmitTransactionRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RpcTransaction* transaction_;
  bool alloworphan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SubmitTransactionResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.SubmitTransactionResponseMessage) */ {
 public:
  inline SubmitTransactionResponseMessage() : SubmitTransactionResponseMessage(nullptr) {}
  ~SubmitTransactionResponseMessage() override;
  explicit constexpr SubmitTransactionResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmitTransactionResponseMessage(const SubmitTransactionResponseMessage& from);
  SubmitTransactionResponseMessage(SubmitTransactionResponseMessage&& from) noexcept
    : SubmitTransactionResponseMessage() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionResponseMessage& operator=(const SubmitTransactionResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionResponseMessage& operator=(SubmitTransactionResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitTransactionResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitTransactionResponseMessage* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionResponseMessage*>(
               &_SubmitTransactionResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SubmitTransactionResponseMessage& a, SubmitTransactionResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitTransactionResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTransactionResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitTransactionResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmitTransactionResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmitTransactionResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubmitTransactionResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.SubmitTransactionResponseMessage";
  }
  protected:
  explicit SubmitTransactionResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdFieldNumber = 1,
    kErrorFieldNumber = 1000,
  };
  // string transactionId = 1;
  void clear_transactionid();
  const std::string& transactionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transactionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transactionid();
  PROTOBUF_NODISCARD std::string* release_transactionid();
  void set_allocated_transactionid(std::string* transactionid);
  private:
  const std::string& _internal_transactionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transactionid(const std::string& value);
  std::string* _internal_mutable_transactionid();
  public:

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.SubmitTransactionResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionid_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyVirtualSelectedParentChainChangedRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.NotifyVirtualSelectedParentChainChangedRequestMessage) */ {
 public:
  inline NotifyVirtualSelectedParentChainChangedRequestMessage() : NotifyVirtualSelectedParentChainChangedRequestMessage(nullptr) {}
  ~NotifyVirtualSelectedParentChainChangedRequestMessage() override;
  explicit constexpr NotifyVirtualSelectedParentChainChangedRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyVirtualSelectedParentChainChangedRequestMessage(const NotifyVirtualSelectedParentChainChangedRequestMessage& from);
  NotifyVirtualSelectedParentChainChangedRequestMessage(NotifyVirtualSelectedParentChainChangedRequestMessage&& from) noexcept
    : NotifyVirtualSelectedParentChainChangedRequestMessage() {
    *this = ::std::move(from);
  }

  inline NotifyVirtualSelectedParentChainChangedRequestMessage& operator=(const NotifyVirtualSelectedParentChainChangedRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyVirtualSelectedParentChainChangedRequestMessage& operator=(NotifyVirtualSelectedParentChainChangedRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyVirtualSelectedParentChainChangedRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyVirtualSelectedParentChainChangedRequestMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyVirtualSelectedParentChainChangedRequestMessage*>(
               &_NotifyVirtualSelectedParentChainChangedRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(NotifyVirtualSelectedParentChainChangedRequestMessage& a, NotifyVirtualSelectedParentChainChangedRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyVirtualSelectedParentChainChangedRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyVirtualSelectedParentChainChangedRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyVirtualSelectedParentChainChangedRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyVirtualSelectedParentChainChangedRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyVirtualSelectedParentChainChangedRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyVirtualSelectedParentChainChangedRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyVirtualSelectedParentChainChangedRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyVirtualSelectedParentChainChangedRequestMessage";
  }
  protected:
  explicit NotifyVirtualSelectedParentChainChangedRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncludeAcceptedTransactionIdsFieldNumber = 1,
  };
  // bool includeAcceptedTransactionIds = 1;
  void clear_includeacceptedtransactionids();
  bool includeacceptedtransactionids() const;
  void set_includeacceptedtransactionids(bool value);
  private:
  bool _internal_includeacceptedtransactionids() const;
  void _internal_set_includeacceptedtransactionids(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.NotifyVirtualSelectedParentChainChangedRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool includeacceptedtransactionids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyVirtualSelectedParentChainChangedResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.NotifyVirtualSelectedParentChainChangedResponseMessage) */ {
 public:
  inline NotifyVirtualSelectedParentChainChangedResponseMessage() : NotifyVirtualSelectedParentChainChangedResponseMessage(nullptr) {}
  ~NotifyVirtualSelectedParentChainChangedResponseMessage() override;
  explicit constexpr NotifyVirtualSelectedParentChainChangedResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyVirtualSelectedParentChainChangedResponseMessage(const NotifyVirtualSelectedParentChainChangedResponseMessage& from);
  NotifyVirtualSelectedParentChainChangedResponseMessage(NotifyVirtualSelectedParentChainChangedResponseMessage&& from) noexcept
    : NotifyVirtualSelectedParentChainChangedResponseMessage() {
    *this = ::std::move(from);
  }

  inline NotifyVirtualSelectedParentChainChangedResponseMessage& operator=(const NotifyVirtualSelectedParentChainChangedResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyVirtualSelectedParentChainChangedResponseMessage& operator=(NotifyVirtualSelectedParentChainChangedResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyVirtualSelectedParentChainChangedResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyVirtualSelectedParentChainChangedResponseMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyVirtualSelectedParentChainChangedResponseMessage*>(
               &_NotifyVirtualSelectedParentChainChangedResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(NotifyVirtualSelectedParentChainChangedResponseMessage& a, NotifyVirtualSelectedParentChainChangedResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyVirtualSelectedParentChainChangedResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyVirtualSelectedParentChainChangedResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyVirtualSelectedParentChainChangedResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyVirtualSelectedParentChainChangedResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyVirtualSelectedParentChainChangedResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyVirtualSelectedParentChainChangedResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyVirtualSelectedParentChainChangedResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyVirtualSelectedParentChainChangedResponseMessage";
  }
  protected:
  explicit NotifyVirtualSelectedParentChainChangedResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.NotifyVirtualSelectedParentChainChangedResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class VirtualSelectedParentChainChangedNotificationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.VirtualSelectedParentChainChangedNotificationMessage) */ {
 public:
  inline VirtualSelectedParentChainChangedNotificationMessage() : VirtualSelectedParentChainChangedNotificationMessage(nullptr) {}
  ~VirtualSelectedParentChainChangedNotificationMessage() override;
  explicit constexpr VirtualSelectedParentChainChangedNotificationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtualSelectedParentChainChangedNotificationMessage(const VirtualSelectedParentChainChangedNotificationMessage& from);
  VirtualSelectedParentChainChangedNotificationMessage(VirtualSelectedParentChainChangedNotificationMessage&& from) noexcept
    : VirtualSelectedParentChainChangedNotificationMessage() {
    *this = ::std::move(from);
  }

  inline VirtualSelectedParentChainChangedNotificationMessage& operator=(const VirtualSelectedParentChainChangedNotificationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtualSelectedParentChainChangedNotificationMessage& operator=(VirtualSelectedParentChainChangedNotificationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtualSelectedParentChainChangedNotificationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtualSelectedParentChainChangedNotificationMessage* internal_default_instance() {
    return reinterpret_cast<const VirtualSelectedParentChainChangedNotificationMessage*>(
               &_VirtualSelectedParentChainChangedNotificationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(VirtualSelectedParentChainChangedNotificationMessage& a, VirtualSelectedParentChainChangedNotificationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtualSelectedParentChainChangedNotificationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtualSelectedParentChainChangedNotificationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtualSelectedParentChainChangedNotificationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtualSelectedParentChainChangedNotificationMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtualSelectedParentChainChangedNotificationMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtualSelectedParentChainChangedNotificationMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtualSelectedParentChainChangedNotificationMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.VirtualSelectedParentChainChangedNotificationMessage";
  }
  protected:
  explicit VirtualSelectedParentChainChangedNotificationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemovedChainBlockHashesFieldNumber = 1,
    kAcceptedTransactionIdsFieldNumber = 2,
    kAddedChainBlockHashesFieldNumber = 3,
  };
  // repeated string removedChainBlockHashes = 1;
  int removedchainblockhashes_size() const;
  private:
  int _internal_removedchainblockhashes_size() const;
  public:
  void clear_removedchainblockhashes();
  const std::string& removedchainblockhashes(int index) const;
  std::string* mutable_removedchainblockhashes(int index);
  void set_removedchainblockhashes(int index, const std::string& value);
  void set_removedchainblockhashes(int index, std::string&& value);
  void set_removedchainblockhashes(int index, const char* value);
  void set_removedchainblockhashes(int index, const char* value, size_t size);
  std::string* add_removedchainblockhashes();
  void add_removedchainblockhashes(const std::string& value);
  void add_removedchainblockhashes(std::string&& value);
  void add_removedchainblockhashes(const char* value);
  void add_removedchainblockhashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& removedchainblockhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_removedchainblockhashes();
  private:
  const std::string& _internal_removedchainblockhashes(int index) const;
  std::string* _internal_add_removedchainblockhashes();
  public:

  // repeated .protowire.AcceptedTransactionIds acceptedTransactionIds = 2;
  int acceptedtransactionids_size() const;
  private:
  int _internal_acceptedtransactionids_size() const;
  public:
  void clear_acceptedtransactionids();
  ::protowire::AcceptedTransactionIds* mutable_acceptedtransactionids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::AcceptedTransactionIds >*
      mutable_acceptedtransactionids();
  private:
  const ::protowire::AcceptedTransactionIds& _internal_acceptedtransactionids(int index) const;
  ::protowire::AcceptedTransactionIds* _internal_add_acceptedtransactionids();
  public:
  const ::protowire::AcceptedTransactionIds& acceptedtransactionids(int index) const;
  ::protowire::AcceptedTransactionIds* add_acceptedtransactionids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::AcceptedTransactionIds >&
      acceptedtransactionids() const;

  // repeated string addedChainBlockHashes = 3;
  int addedchainblockhashes_size() const;
  private:
  int _internal_addedchainblockhashes_size() const;
  public:
  void clear_addedchainblockhashes();
  const std::string& addedchainblockhashes(int index) const;
  std::string* mutable_addedchainblockhashes(int index);
  void set_addedchainblockhashes(int index, const std::string& value);
  void set_addedchainblockhashes(int index, std::string&& value);
  void set_addedchainblockhashes(int index, const char* value);
  void set_addedchainblockhashes(int index, const char* value, size_t size);
  std::string* add_addedchainblockhashes();
  void add_addedchainblockhashes(const std::string& value);
  void add_addedchainblockhashes(std::string&& value);
  void add_addedchainblockhashes(const char* value);
  void add_addedchainblockhashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addedchainblockhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addedchainblockhashes();
  private:
  const std::string& _internal_addedchainblockhashes(int index) const;
  std::string* _internal_add_addedchainblockhashes();
  public:

  // @@protoc_insertion_point(class_scope:protowire.VirtualSelectedParentChainChangedNotificationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> removedchainblockhashes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::AcceptedTransactionIds > acceptedtransactionids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addedchainblockhashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetBlockRequestMessage) */ {
 public:
  inline GetBlockRequestMessage() : GetBlockRequestMessage(nullptr) {}
  ~GetBlockRequestMessage() override;
  explicit constexpr GetBlockRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockRequestMessage(const GetBlockRequestMessage& from);
  GetBlockRequestMessage(GetBlockRequestMessage&& from) noexcept
    : GetBlockRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetBlockRequestMessage& operator=(const GetBlockRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockRequestMessage& operator=(GetBlockRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetBlockRequestMessage*>(
               &_GetBlockRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetBlockRequestMessage& a, GetBlockRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBlockRequestMessage";
  }
  protected:
  explicit GetBlockRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kIncludeTransactionsFieldNumber = 3,
  };
  // string hash = 1;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bool includeTransactions = 3;
  void clear_includetransactions();
  bool includetransactions() const;
  void set_includetransactions(bool value);
  private:
  bool _internal_includetransactions() const;
  void _internal_set_includetransactions(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetBlockRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  bool includetransactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetBlockResponseMessage) */ {
 public:
  inline GetBlockResponseMessage() : GetBlockResponseMessage(nullptr) {}
  ~GetBlockResponseMessage() override;
  explicit constexpr GetBlockResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockResponseMessage(const GetBlockResponseMessage& from);
  GetBlockResponseMessage(GetBlockResponseMessage&& from) noexcept
    : GetBlockResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetBlockResponseMessage& operator=(const GetBlockResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockResponseMessage& operator=(GetBlockResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetBlockResponseMessage*>(
               &_GetBlockResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetBlockResponseMessage& a, GetBlockResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBlockResponseMessage";
  }
  protected:
  explicit GetBlockResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 3,
    kErrorFieldNumber = 1000,
  };
  // .protowire.RpcBlock block = 3;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::protowire::RpcBlock& block() const;
  PROTOBUF_NODISCARD ::protowire::RpcBlock* release_block();
  ::protowire::RpcBlock* mutable_block();
  void set_allocated_block(::protowire::RpcBlock* block);
  private:
  const ::protowire::RpcBlock& _internal_block() const;
  ::protowire::RpcBlock* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::protowire::RpcBlock* block);
  ::protowire::RpcBlock* unsafe_arena_release_block();

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.GetBlockResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RpcBlock* block_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetSubnetworkRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetSubnetworkRequestMessage) */ {
 public:
  inline GetSubnetworkRequestMessage() : GetSubnetworkRequestMessage(nullptr) {}
  ~GetSubnetworkRequestMessage() override;
  explicit constexpr GetSubnetworkRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSubnetworkRequestMessage(const GetSubnetworkRequestMessage& from);
  GetSubnetworkRequestMessage(GetSubnetworkRequestMessage&& from) noexcept
    : GetSubnetworkRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetSubnetworkRequestMessage& operator=(const GetSubnetworkRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSubnetworkRequestMessage& operator=(GetSubnetworkRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSubnetworkRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSubnetworkRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetSubnetworkRequestMessage*>(
               &_GetSubnetworkRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GetSubnetworkRequestMessage& a, GetSubnetworkRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSubnetworkRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSubnetworkRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSubnetworkRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSubnetworkRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSubnetworkRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSubnetworkRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSubnetworkRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetSubnetworkRequestMessage";
  }
  protected:
  explicit GetSubnetworkRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubnetworkIdFieldNumber = 1,
  };
  // string subnetworkId = 1;
  void clear_subnetworkid();
  const std::string& subnetworkid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subnetworkid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subnetworkid();
  PROTOBUF_NODISCARD std::string* release_subnetworkid();
  void set_allocated_subnetworkid(std::string* subnetworkid);
  private:
  const std::string& _internal_subnetworkid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subnetworkid(const std::string& value);
  std::string* _internal_mutable_subnetworkid();
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetSubnetworkRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnetworkid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetSubnetworkResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetSubnetworkResponseMessage) */ {
 public:
  inline GetSubnetworkResponseMessage() : GetSubnetworkResponseMessage(nullptr) {}
  ~GetSubnetworkResponseMessage() override;
  explicit constexpr GetSubnetworkResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSubnetworkResponseMessage(const GetSubnetworkResponseMessage& from);
  GetSubnetworkResponseMessage(GetSubnetworkResponseMessage&& from) noexcept
    : GetSubnetworkResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetSubnetworkResponseMessage& operator=(const GetSubnetworkResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSubnetworkResponseMessage& operator=(GetSubnetworkResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSubnetworkResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSubnetworkResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetSubnetworkResponseMessage*>(
               &_GetSubnetworkResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetSubnetworkResponseMessage& a, GetSubnetworkResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSubnetworkResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSubnetworkResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSubnetworkResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSubnetworkResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSubnetworkResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSubnetworkResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSubnetworkResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetSubnetworkResponseMessage";
  }
  protected:
  explicit GetSubnetworkResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
    kGasLimitFieldNumber = 1,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // uint64 gasLimit = 1;
  void clear_gaslimit();
  uint64_t gaslimit() const;
  void set_gaslimit(uint64_t value);
  private:
  uint64_t _internal_gaslimit() const;
  void _internal_set_gaslimit(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetSubnetworkResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  uint64_t gaslimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetVirtualSelectedParentChainFromBlockRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetVirtualSelectedParentChainFromBlockRequestMessage) */ {
 public:
  inline GetVirtualSelectedParentChainFromBlockRequestMessage() : GetVirtualSelectedParentChainFromBlockRequestMessage(nullptr) {}
  ~GetVirtualSelectedParentChainFromBlockRequestMessage() override;
  explicit constexpr GetVirtualSelectedParentChainFromBlockRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtualSelectedParentChainFromBlockRequestMessage(const GetVirtualSelectedParentChainFromBlockRequestMessage& from);
  GetVirtualSelectedParentChainFromBlockRequestMessage(GetVirtualSelectedParentChainFromBlockRequestMessage&& from) noexcept
    : GetVirtualSelectedParentChainFromBlockRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetVirtualSelectedParentChainFromBlockRequestMessage& operator=(const GetVirtualSelectedParentChainFromBlockRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualSelectedParentChainFromBlockRequestMessage& operator=(GetVirtualSelectedParentChainFromBlockRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtualSelectedParentChainFromBlockRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtualSelectedParentChainFromBlockRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetVirtualSelectedParentChainFromBlockRequestMessage*>(
               &_GetVirtualSelectedParentChainFromBlockRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetVirtualSelectedParentChainFromBlockRequestMessage& a, GetVirtualSelectedParentChainFromBlockRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualSelectedParentChainFromBlockRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualSelectedParentChainFromBlockRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtualSelectedParentChainFromBlockRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtualSelectedParentChainFromBlockRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtualSelectedParentChainFromBlockRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVirtualSelectedParentChainFromBlockRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtualSelectedParentChainFromBlockRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetVirtualSelectedParentChainFromBlockRequestMessage";
  }
  protected:
  explicit GetVirtualSelectedParentChainFromBlockRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartHashFieldNumber = 1,
    kIncludeAcceptedTransactionIdsFieldNumber = 2,
  };
  // string startHash = 1;
  void clear_starthash();
  const std::string& starthash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starthash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starthash();
  PROTOBUF_NODISCARD std::string* release_starthash();
  void set_allocated_starthash(std::string* starthash);
  private:
  const std::string& _internal_starthash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starthash(const std::string& value);
  std::string* _internal_mutable_starthash();
  public:

  // bool includeAcceptedTransactionIds = 2;
  void clear_includeacceptedtransactionids();
  bool includeacceptedtransactionids() const;
  void set_includeacceptedtransactionids(bool value);
  private:
  bool _internal_includeacceptedtransactionids() const;
  void _internal_set_includeacceptedtransactionids(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetVirtualSelectedParentChainFromBlockRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starthash_;
  bool includeacceptedtransactionids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AcceptedTransactionIds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.AcceptedTransactionIds) */ {
 public:
  inline AcceptedTransactionIds() : AcceptedTransactionIds(nullptr) {}
  ~AcceptedTransactionIds() override;
  explicit constexpr AcceptedTransactionIds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcceptedTransactionIds(const AcceptedTransactionIds& from);
  AcceptedTransactionIds(AcceptedTransactionIds&& from) noexcept
    : AcceptedTransactionIds() {
    *this = ::std::move(from);
  }

  inline AcceptedTransactionIds& operator=(const AcceptedTransactionIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptedTransactionIds& operator=(AcceptedTransactionIds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcceptedTransactionIds& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcceptedTransactionIds* internal_default_instance() {
    return reinterpret_cast<const AcceptedTransactionIds*>(
               &_AcceptedTransactionIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(AcceptedTransactionIds& a, AcceptedTransactionIds& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptedTransactionIds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptedTransactionIds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AcceptedTransactionIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AcceptedTransactionIds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AcceptedTransactionIds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AcceptedTransactionIds& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptedTransactionIds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.AcceptedTransactionIds";
  }
  protected:
  explicit AcceptedTransactionIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptedTransactionIdsFieldNumber = 2,
    kAcceptingBlockHashFieldNumber = 1,
  };
  // repeated string acceptedTransactionIds = 2;
  int acceptedtransactionids_size() const;
  private:
  int _internal_acceptedtransactionids_size() const;
  public:
  void clear_acceptedtransactionids();
  const std::string& acceptedtransactionids(int index) const;
  std::string* mutable_acceptedtransactionids(int index);
  void set_acceptedtransactionids(int index, const std::string& value);
  void set_acceptedtransactionids(int index, std::string&& value);
  void set_acceptedtransactionids(int index, const char* value);
  void set_acceptedtransactionids(int index, const char* value, size_t size);
  std::string* add_acceptedtransactionids();
  void add_acceptedtransactionids(const std::string& value);
  void add_acceptedtransactionids(std::string&& value);
  void add_acceptedtransactionids(const char* value);
  void add_acceptedtransactionids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& acceptedtransactionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_acceptedtransactionids();
  private:
  const std::string& _internal_acceptedtransactionids(int index) const;
  std::string* _internal_add_acceptedtransactionids();
  public:

  // string acceptingBlockHash = 1;
  void clear_acceptingblockhash();
  const std::string& acceptingblockhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acceptingblockhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acceptingblockhash();
  PROTOBUF_NODISCARD std::string* release_acceptingblockhash();
  void set_allocated_acceptingblockhash(std::string* acceptingblockhash);
  private:
  const std::string& _internal_acceptingblockhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acceptingblockhash(const std::string& value);
  std::string* _internal_mutable_acceptingblockhash();
  public:

  // @@protoc_insertion_point(class_scope:protowire.AcceptedTransactionIds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> acceptedtransactionids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceptingblockhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetVirtualSelectedParentChainFromBlockResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage) */ {
 public:
  inline GetVirtualSelectedParentChainFromBlockResponseMessage() : GetVirtualSelectedParentChainFromBlockResponseMessage(nullptr) {}
  ~GetVirtualSelectedParentChainFromBlockResponseMessage() override;
  explicit constexpr GetVirtualSelectedParentChainFromBlockResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtualSelectedParentChainFromBlockResponseMessage(const GetVirtualSelectedParentChainFromBlockResponseMessage& from);
  GetVirtualSelectedParentChainFromBlockResponseMessage(GetVirtualSelectedParentChainFromBlockResponseMessage&& from) noexcept
    : GetVirtualSelectedParentChainFromBlockResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetVirtualSelectedParentChainFromBlockResponseMessage& operator=(const GetVirtualSelectedParentChainFromBlockResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualSelectedParentChainFromBlockResponseMessage& operator=(GetVirtualSelectedParentChainFromBlockResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtualSelectedParentChainFromBlockResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtualSelectedParentChainFromBlockResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetVirtualSelectedParentChainFromBlockResponseMessage*>(
               &_GetVirtualSelectedParentChainFromBlockResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetVirtualSelectedParentChainFromBlockResponseMessage& a, GetVirtualSelectedParentChainFromBlockResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualSelectedParentChainFromBlockResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualSelectedParentChainFromBlockResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtualSelectedParentChainFromBlockResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtualSelectedParentChainFromBlockResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtualSelectedParentChainFromBlockResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVirtualSelectedParentChainFromBlockResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtualSelectedParentChainFromBlockResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetVirtualSelectedParentChainFromBlockResponseMessage";
  }
  protected:
  explicit GetVirtualSelectedParentChainFromBlockResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemovedChainBlockHashesFieldNumber = 1,
    kAcceptedTransactionIdsFieldNumber = 2,
    kAddedChainBlockHashesFieldNumber = 3,
    kErrorFieldNumber = 1000,
  };
  // repeated string removedChainBlockHashes = 1;
  int removedchainblockhashes_size() const;
  private:
  int _internal_removedchainblockhashes_size() const;
  public:
  void clear_removedchainblockhashes();
  const std::string& removedchainblockhashes(int index) const;
  std::string* mutable_removedchainblockhashes(int index);
  void set_removedchainblockhashes(int index, const std::string& value);
  void set_removedchainblockhashes(int index, std::string&& value);
  void set_removedchainblockhashes(int index, const char* value);
  void set_removedchainblockhashes(int index, const char* value, size_t size);
  std::string* add_removedchainblockhashes();
  void add_removedchainblockhashes(const std::string& value);
  void add_removedchainblockhashes(std::string&& value);
  void add_removedchainblockhashes(const char* value);
  void add_removedchainblockhashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& removedchainblockhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_removedchainblockhashes();
  private:
  const std::string& _internal_removedchainblockhashes(int index) const;
  std::string* _internal_add_removedchainblockhashes();
  public:

  // repeated .protowire.AcceptedTransactionIds acceptedTransactionIds = 2;
  int acceptedtransactionids_size() const;
  private:
  int _internal_acceptedtransactionids_size() const;
  public:
  void clear_acceptedtransactionids();
  ::protowire::AcceptedTransactionIds* mutable_acceptedtransactionids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::AcceptedTransactionIds >*
      mutable_acceptedtransactionids();
  private:
  const ::protowire::AcceptedTransactionIds& _internal_acceptedtransactionids(int index) const;
  ::protowire::AcceptedTransactionIds* _internal_add_acceptedtransactionids();
  public:
  const ::protowire::AcceptedTransactionIds& acceptedtransactionids(int index) const;
  ::protowire::AcceptedTransactionIds* add_acceptedtransactionids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::AcceptedTransactionIds >&
      acceptedtransactionids() const;

  // repeated string addedChainBlockHashes = 3;
  int addedchainblockhashes_size() const;
  private:
  int _internal_addedchainblockhashes_size() const;
  public:
  void clear_addedchainblockhashes();
  const std::string& addedchainblockhashes(int index) const;
  std::string* mutable_addedchainblockhashes(int index);
  void set_addedchainblockhashes(int index, const std::string& value);
  void set_addedchainblockhashes(int index, std::string&& value);
  void set_addedchainblockhashes(int index, const char* value);
  void set_addedchainblockhashes(int index, const char* value, size_t size);
  std::string* add_addedchainblockhashes();
  void add_addedchainblockhashes(const std::string& value);
  void add_addedchainblockhashes(std::string&& value);
  void add_addedchainblockhashes(const char* value);
  void add_addedchainblockhashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addedchainblockhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addedchainblockhashes();
  private:
  const std::string& _internal_addedchainblockhashes(int index) const;
  std::string* _internal_add_addedchainblockhashes();
  public:

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> removedchainblockhashes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::AcceptedTransactionIds > acceptedtransactionids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addedchainblockhashes_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlocksRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetBlocksRequestMessage) */ {
 public:
  inline GetBlocksRequestMessage() : GetBlocksRequestMessage(nullptr) {}
  ~GetBlocksRequestMessage() override;
  explicit constexpr GetBlocksRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlocksRequestMessage(const GetBlocksRequestMessage& from);
  GetBlocksRequestMessage(GetBlocksRequestMessage&& from) noexcept
    : GetBlocksRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetBlocksRequestMessage& operator=(const GetBlocksRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlocksRequestMessage& operator=(GetBlocksRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlocksRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlocksRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetBlocksRequestMessage*>(
               &_GetBlocksRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GetBlocksRequestMessage& a, GetBlocksRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlocksRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlocksRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlocksRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlocksRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlocksRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlocksRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlocksRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBlocksRequestMessage";
  }
  protected:
  explicit GetBlocksRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowHashFieldNumber = 1,
    kIncludeBlocksFieldNumber = 2,
    kIncludeTransactionsFieldNumber = 3,
  };
  // string lowHash = 1;
  void clear_lowhash();
  const std::string& lowhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lowhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lowhash();
  PROTOBUF_NODISCARD std::string* release_lowhash();
  void set_allocated_lowhash(std::string* lowhash);
  private:
  const std::string& _internal_lowhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lowhash(const std::string& value);
  std::string* _internal_mutable_lowhash();
  public:

  // bool includeBlocks = 2;
  void clear_includeblocks();
  bool includeblocks() const;
  void set_includeblocks(bool value);
  private:
  bool _internal_includeblocks() const;
  void _internal_set_includeblocks(bool value);
  public:

  // bool includeTransactions = 3;
  void clear_includetransactions();
  bool includetransactions() const;
  void set_includetransactions(bool value);
  private:
  bool _internal_includetransactions() const;
  void _internal_set_includetransactions(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetBlocksRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lowhash_;
  bool includeblocks_;
  bool includetransactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlocksResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetBlocksResponseMessage) */ {
 public:
  inline GetBlocksResponseMessage() : GetBlocksResponseMessage(nullptr) {}
  ~GetBlocksResponseMessage() override;
  explicit constexpr GetBlocksResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlocksResponseMessage(const GetBlocksResponseMessage& from);
  GetBlocksResponseMessage(GetBlocksResponseMessage&& from) noexcept
    : GetBlocksResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetBlocksResponseMessage& operator=(const GetBlocksResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlocksResponseMessage& operator=(GetBlocksResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlocksResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlocksResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetBlocksResponseMessage*>(
               &_GetBlocksResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GetBlocksResponseMessage& a, GetBlocksResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlocksResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlocksResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlocksResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlocksResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlocksResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlocksResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlocksResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBlocksResponseMessage";
  }
  protected:
  explicit GetBlocksResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 3,
    kBlockHashesFieldNumber = 4,
    kErrorFieldNumber = 1000,
  };
  // repeated .protowire.RpcBlock blocks = 3;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::protowire::RpcBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcBlock >*
      mutable_blocks();
  private:
  const ::protowire::RpcBlock& _internal_blocks(int index) const;
  ::protowire::RpcBlock* _internal_add_blocks();
  public:
  const ::protowire::RpcBlock& blocks(int index) const;
  ::protowire::RpcBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcBlock >&
      blocks() const;

  // repeated string blockHashes = 4;
  int blockhashes_size() const;
  private:
  int _internal_blockhashes_size() const;
  public:
  void clear_blockhashes();
  const std::string& blockhashes(int index) const;
  std::string* mutable_blockhashes(int index);
  void set_blockhashes(int index, const std::string& value);
  void set_blockhashes(int index, std::string&& value);
  void set_blockhashes(int index, const char* value);
  void set_blockhashes(int index, const char* value, size_t size);
  std::string* add_blockhashes();
  void add_blockhashes(const std::string& value);
  void add_blockhashes(std::string&& value);
  void add_blockhashes(const char* value);
  void add_blockhashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blockhashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blockhashes();
  private:
  const std::string& _internal_blockhashes(int index) const;
  std::string* _internal_add_blockhashes();
  public:

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.GetBlocksResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcBlock > blocks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blockhashes_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockCountRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.GetBlockCountRequestMessage) */ {
 public:
  inline GetBlockCountRequestMessage() : GetBlockCountRequestMessage(nullptr) {}
  explicit constexpr GetBlockCountRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockCountRequestMessage(const GetBlockCountRequestMessage& from);
  GetBlockCountRequestMessage(GetBlockCountRequestMessage&& from) noexcept
    : GetBlockCountRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetBlockCountRequestMessage& operator=(const GetBlockCountRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockCountRequestMessage& operator=(GetBlockCountRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockCountRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockCountRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetBlockCountRequestMessage*>(
               &_GetBlockCountRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GetBlockCountRequestMessage& a, GetBlockCountRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockCountRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockCountRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockCountRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockCountRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetBlockCountRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetBlockCountRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBlockCountRequestMessage";
  }
  protected:
  explicit GetBlockCountRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.GetBlockCountRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockCountResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetBlockCountResponseMessage) */ {
 public:
  inline GetBlockCountResponseMessage() : GetBlockCountResponseMessage(nullptr) {}
  ~GetBlockCountResponseMessage() override;
  explicit constexpr GetBlockCountResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockCountResponseMessage(const GetBlockCountResponseMessage& from);
  GetBlockCountResponseMessage(GetBlockCountResponseMessage&& from) noexcept
    : GetBlockCountResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetBlockCountResponseMessage& operator=(const GetBlockCountResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockCountResponseMessage& operator=(GetBlockCountResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockCountResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockCountResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetBlockCountResponseMessage*>(
               &_GetBlockCountResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetBlockCountResponseMessage& a, GetBlockCountResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockCountResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockCountResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockCountResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockCountResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockCountResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockCountResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockCountResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBlockCountResponseMessage";
  }
  protected:
  explicit GetBlockCountResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
    kBlockCountFieldNumber = 1,
    kHeaderCountFieldNumber = 2,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // uint64 blockCount = 1;
  void clear_blockcount();
  uint64_t blockcount() const;
  void set_blockcount(uint64_t value);
  private:
  uint64_t _internal_blockcount() const;
  void _internal_set_blockcount(uint64_t value);
  public:

  // uint64 headerCount = 2;
  void clear_headercount();
  uint64_t headercount() const;
  void set_headercount(uint64_t value);
  private:
  uint64_t _internal_headercount() const;
  void _internal_set_headercount(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetBlockCountResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  uint64_t blockcount_;
  uint64_t headercount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockDagInfoRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.GetBlockDagInfoRequestMessage) */ {
 public:
  inline GetBlockDagInfoRequestMessage() : GetBlockDagInfoRequestMessage(nullptr) {}
  explicit constexpr GetBlockDagInfoRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockDagInfoRequestMessage(const GetBlockDagInfoRequestMessage& from);
  GetBlockDagInfoRequestMessage(GetBlockDagInfoRequestMessage&& from) noexcept
    : GetBlockDagInfoRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetBlockDagInfoRequestMessage& operator=(const GetBlockDagInfoRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockDagInfoRequestMessage& operator=(GetBlockDagInfoRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockDagInfoRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockDagInfoRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetBlockDagInfoRequestMessage*>(
               &_GetBlockDagInfoRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetBlockDagInfoRequestMessage& a, GetBlockDagInfoRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockDagInfoRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockDagInfoRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockDagInfoRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockDagInfoRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetBlockDagInfoRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetBlockDagInfoRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBlockDagInfoRequestMessage";
  }
  protected:
  explicit GetBlockDagInfoRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.GetBlockDagInfoRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockDagInfoResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetBlockDagInfoResponseMessage) */ {
 public:
  inline GetBlockDagInfoResponseMessage() : GetBlockDagInfoResponseMessage(nullptr) {}
  ~GetBlockDagInfoResponseMessage() override;
  explicit constexpr GetBlockDagInfoResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockDagInfoResponseMessage(const GetBlockDagInfoResponseMessage& from);
  GetBlockDagInfoResponseMessage(GetBlockDagInfoResponseMessage&& from) noexcept
    : GetBlockDagInfoResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetBlockDagInfoResponseMessage& operator=(const GetBlockDagInfoResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockDagInfoResponseMessage& operator=(GetBlockDagInfoResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockDagInfoResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockDagInfoResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetBlockDagInfoResponseMessage*>(
               &_GetBlockDagInfoResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetBlockDagInfoResponseMessage& a, GetBlockDagInfoResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockDagInfoResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockDagInfoResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockDagInfoResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockDagInfoResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockDagInfoResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBlockDagInfoResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockDagInfoResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBlockDagInfoResponseMessage";
  }
  protected:
  explicit GetBlockDagInfoResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTipHashesFieldNumber = 4,
    kVirtualParentHashesFieldNumber = 7,
    kNetworkNameFieldNumber = 1,
    kPruningPointHashFieldNumber = 8,
    kErrorFieldNumber = 1000,
    kBlockCountFieldNumber = 2,
    kHeaderCountFieldNumber = 3,
    kDifficultyFieldNumber = 5,
    kPastMedianTimeFieldNumber = 6,
    kVirtualDaaScoreFieldNumber = 9,
  };
  // repeated string tipHashes = 4;
  int tiphashes_size() const;
  private:
  int _internal_tiphashes_size() const;
  public:
  void clear_tiphashes();
  const std::string& tiphashes(int index) const;
  std::string* mutable_tiphashes(int index);
  void set_tiphashes(int index, const std::string& value);
  void set_tiphashes(int index, std::string&& value);
  void set_tiphashes(int index, const char* value);
  void set_tiphashes(int index, const char* value, size_t size);
  std::string* add_tiphashes();
  void add_tiphashes(const std::string& value);
  void add_tiphashes(std::string&& value);
  void add_tiphashes(const char* value);
  void add_tiphashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tiphashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tiphashes();
  private:
  const std::string& _internal_tiphashes(int index) const;
  std::string* _internal_add_tiphashes();
  public:

  // repeated string virtualParentHashes = 7;
  int virtualparenthashes_size() const;
  private:
  int _internal_virtualparenthashes_size() const;
  public:
  void clear_virtualparenthashes();
  const std::string& virtualparenthashes(int index) const;
  std::string* mutable_virtualparenthashes(int index);
  void set_virtualparenthashes(int index, const std::string& value);
  void set_virtualparenthashes(int index, std::string&& value);
  void set_virtualparenthashes(int index, const char* value);
  void set_virtualparenthashes(int index, const char* value, size_t size);
  std::string* add_virtualparenthashes();
  void add_virtualparenthashes(const std::string& value);
  void add_virtualparenthashes(std::string&& value);
  void add_virtualparenthashes(const char* value);
  void add_virtualparenthashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& virtualparenthashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_virtualparenthashes();
  private:
  const std::string& _internal_virtualparenthashes(int index) const;
  std::string* _internal_add_virtualparenthashes();
  public:

  // string networkName = 1;
  void clear_networkname();
  const std::string& networkname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_networkname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_networkname();
  PROTOBUF_NODISCARD std::string* release_networkname();
  void set_allocated_networkname(std::string* networkname);
  private:
  const std::string& _internal_networkname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_networkname(const std::string& value);
  std::string* _internal_mutable_networkname();
  public:

  // string pruningPointHash = 8;
  void clear_pruningpointhash();
  const std::string& pruningpointhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pruningpointhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pruningpointhash();
  PROTOBUF_NODISCARD std::string* release_pruningpointhash();
  void set_allocated_pruningpointhash(std::string* pruningpointhash);
  private:
  const std::string& _internal_pruningpointhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pruningpointhash(const std::string& value);
  std::string* _internal_mutable_pruningpointhash();
  public:

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // uint64 blockCount = 2;
  void clear_blockcount();
  uint64_t blockcount() const;
  void set_blockcount(uint64_t value);
  private:
  uint64_t _internal_blockcount() const;
  void _internal_set_blockcount(uint64_t value);
  public:

  // uint64 headerCount = 3;
  void clear_headercount();
  uint64_t headercount() const;
  void set_headercount(uint64_t value);
  private:
  uint64_t _internal_headercount() const;
  void _internal_set_headercount(uint64_t value);
  public:

  // double difficulty = 5;
  void clear_difficulty();
  double difficulty() const;
  void set_difficulty(double value);
  private:
  double _internal_difficulty() const;
  void _internal_set_difficulty(double value);
  public:

  // int64 pastMedianTime = 6;
  void clear_pastmediantime();
  int64_t pastmediantime() const;
  void set_pastmediantime(int64_t value);
  private:
  int64_t _internal_pastmediantime() const;
  void _internal_set_pastmediantime(int64_t value);
  public:

  // uint64 virtualDaaScore = 9;
  void clear_virtualdaascore();
  uint64_t virtualdaascore() const;
  void set_virtualdaascore(uint64_t value);
  private:
  uint64_t _internal_virtualdaascore() const;
  void _internal_set_virtualdaascore(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetBlockDagInfoResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tiphashes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> virtualparenthashes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr networkname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pruningpointhash_;
  ::protowire::RPCError* error_;
  uint64_t blockcount_;
  uint64_t headercount_;
  double difficulty_;
  int64_t pastmediantime_;
  uint64_t virtualdaascore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ResolveFinalityConflictRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.ResolveFinalityConflictRequestMessage) */ {
 public:
  inline ResolveFinalityConflictRequestMessage() : ResolveFinalityConflictRequestMessage(nullptr) {}
  ~ResolveFinalityConflictRequestMessage() override;
  explicit constexpr ResolveFinalityConflictRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResolveFinalityConflictRequestMessage(const ResolveFinalityConflictRequestMessage& from);
  ResolveFinalityConflictRequestMessage(ResolveFinalityConflictRequestMessage&& from) noexcept
    : ResolveFinalityConflictRequestMessage() {
    *this = ::std::move(from);
  }

  inline ResolveFinalityConflictRequestMessage& operator=(const ResolveFinalityConflictRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveFinalityConflictRequestMessage& operator=(ResolveFinalityConflictRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResolveFinalityConflictRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResolveFinalityConflictRequestMessage* internal_default_instance() {
    return reinterpret_cast<const ResolveFinalityConflictRequestMessage*>(
               &_ResolveFinalityConflictRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ResolveFinalityConflictRequestMessage& a, ResolveFinalityConflictRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveFinalityConflictRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveFinalityConflictRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResolveFinalityConflictRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResolveFinalityConflictRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResolveFinalityConflictRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResolveFinalityConflictRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveFinalityConflictRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.ResolveFinalityConflictRequestMessage";
  }
  protected:
  explicit ResolveFinalityConflictRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinalityBlockHashFieldNumber = 1,
  };
  // string finalityBlockHash = 1;
  void clear_finalityblockhash();
  const std::string& finalityblockhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_finalityblockhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_finalityblockhash();
  PROTOBUF_NODISCARD std::string* release_finalityblockhash();
  void set_allocated_finalityblockhash(std::string* finalityblockhash);
  private:
  const std::string& _internal_finalityblockhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_finalityblockhash(const std::string& value);
  std::string* _internal_mutable_finalityblockhash();
  public:

  // @@protoc_insertion_point(class_scope:protowire.ResolveFinalityConflictRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr finalityblockhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ResolveFinalityConflictResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.ResolveFinalityConflictResponseMessage) */ {
 public:
  inline ResolveFinalityConflictResponseMessage() : ResolveFinalityConflictResponseMessage(nullptr) {}
  ~ResolveFinalityConflictResponseMessage() override;
  explicit constexpr ResolveFinalityConflictResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResolveFinalityConflictResponseMessage(const ResolveFinalityConflictResponseMessage& from);
  ResolveFinalityConflictResponseMessage(ResolveFinalityConflictResponseMessage&& from) noexcept
    : ResolveFinalityConflictResponseMessage() {
    *this = ::std::move(from);
  }

  inline ResolveFinalityConflictResponseMessage& operator=(const ResolveFinalityConflictResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveFinalityConflictResponseMessage& operator=(ResolveFinalityConflictResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResolveFinalityConflictResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResolveFinalityConflictResponseMessage* internal_default_instance() {
    return reinterpret_cast<const ResolveFinalityConflictResponseMessage*>(
               &_ResolveFinalityConflictResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ResolveFinalityConflictResponseMessage& a, ResolveFinalityConflictResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveFinalityConflictResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveFinalityConflictResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResolveFinalityConflictResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResolveFinalityConflictResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResolveFinalityConflictResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResolveFinalityConflictResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveFinalityConflictResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.ResolveFinalityConflictResponseMessage";
  }
  protected:
  explicit ResolveFinalityConflictResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.ResolveFinalityConflictResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyFinalityConflictsRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.NotifyFinalityConflictsRequestMessage) */ {
 public:
  inline NotifyFinalityConflictsRequestMessage() : NotifyFinalityConflictsRequestMessage(nullptr) {}
  explicit constexpr NotifyFinalityConflictsRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyFinalityConflictsRequestMessage(const NotifyFinalityConflictsRequestMessage& from);
  NotifyFinalityConflictsRequestMessage(NotifyFinalityConflictsRequestMessage&& from) noexcept
    : NotifyFinalityConflictsRequestMessage() {
    *this = ::std::move(from);
  }

  inline NotifyFinalityConflictsRequestMessage& operator=(const NotifyFinalityConflictsRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyFinalityConflictsRequestMessage& operator=(NotifyFinalityConflictsRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyFinalityConflictsRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyFinalityConflictsRequestMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyFinalityConflictsRequestMessage*>(
               &_NotifyFinalityConflictsRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(NotifyFinalityConflictsRequestMessage& a, NotifyFinalityConflictsRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyFinalityConflictsRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyFinalityConflictsRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyFinalityConflictsRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyFinalityConflictsRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NotifyFinalityConflictsRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NotifyFinalityConflictsRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyFinalityConflictsRequestMessage";
  }
  protected:
  explicit NotifyFinalityConflictsRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.NotifyFinalityConflictsRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyFinalityConflictsResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.NotifyFinalityConflictsResponseMessage) */ {
 public:
  inline NotifyFinalityConflictsResponseMessage() : NotifyFinalityConflictsResponseMessage(nullptr) {}
  ~NotifyFinalityConflictsResponseMessage() override;
  explicit constexpr NotifyFinalityConflictsResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyFinalityConflictsResponseMessage(const NotifyFinalityConflictsResponseMessage& from);
  NotifyFinalityConflictsResponseMessage(NotifyFinalityConflictsResponseMessage&& from) noexcept
    : NotifyFinalityConflictsResponseMessage() {
    *this = ::std::move(from);
  }

  inline NotifyFinalityConflictsResponseMessage& operator=(const NotifyFinalityConflictsResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyFinalityConflictsResponseMessage& operator=(NotifyFinalityConflictsResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyFinalityConflictsResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyFinalityConflictsResponseMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyFinalityConflictsResponseMessage*>(
               &_NotifyFinalityConflictsResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(NotifyFinalityConflictsResponseMessage& a, NotifyFinalityConflictsResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyFinalityConflictsResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyFinalityConflictsResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyFinalityConflictsResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyFinalityConflictsResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyFinalityConflictsResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyFinalityConflictsResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyFinalityConflictsResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyFinalityConflictsResponseMessage";
  }
  protected:
  explicit NotifyFinalityConflictsResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.NotifyFinalityConflictsResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FinalityConflictNotificationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.FinalityConflictNotificationMessage) */ {
 public:
  inline FinalityConflictNotificationMessage() : FinalityConflictNotificationMessage(nullptr) {}
  ~FinalityConflictNotificationMessage() override;
  explicit constexpr FinalityConflictNotificationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FinalityConflictNotificationMessage(const FinalityConflictNotificationMessage& from);
  FinalityConflictNotificationMessage(FinalityConflictNotificationMessage&& from) noexcept
    : FinalityConflictNotificationMessage() {
    *this = ::std::move(from);
  }

  inline FinalityConflictNotificationMessage& operator=(const FinalityConflictNotificationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinalityConflictNotificationMessage& operator=(FinalityConflictNotificationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FinalityConflictNotificationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FinalityConflictNotificationMessage* internal_default_instance() {
    return reinterpret_cast<const FinalityConflictNotificationMessage*>(
               &_FinalityConflictNotificationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(FinalityConflictNotificationMessage& a, FinalityConflictNotificationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FinalityConflictNotificationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinalityConflictNotificationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FinalityConflictNotificationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FinalityConflictNotificationMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FinalityConflictNotificationMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FinalityConflictNotificationMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinalityConflictNotificationMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.FinalityConflictNotificationMessage";
  }
  protected:
  explicit FinalityConflictNotificationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViolatingBlockHashFieldNumber = 1,
  };
  // string violatingBlockHash = 1;
  void clear_violatingblockhash();
  const std::string& violatingblockhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_violatingblockhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_violatingblockhash();
  PROTOBUF_NODISCARD std::string* release_violatingblockhash();
  void set_allocated_violatingblockhash(std::string* violatingblockhash);
  private:
  const std::string& _internal_violatingblockhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_violatingblockhash(const std::string& value);
  std::string* _internal_mutable_violatingblockhash();
  public:

  // @@protoc_insertion_point(class_scope:protowire.FinalityConflictNotificationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr violatingblockhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FinalityConflictResolvedNotificationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.FinalityConflictResolvedNotificationMessage) */ {
 public:
  inline FinalityConflictResolvedNotificationMessage() : FinalityConflictResolvedNotificationMessage(nullptr) {}
  ~FinalityConflictResolvedNotificationMessage() override;
  explicit constexpr FinalityConflictResolvedNotificationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FinalityConflictResolvedNotificationMessage(const FinalityConflictResolvedNotificationMessage& from);
  FinalityConflictResolvedNotificationMessage(FinalityConflictResolvedNotificationMessage&& from) noexcept
    : FinalityConflictResolvedNotificationMessage() {
    *this = ::std::move(from);
  }

  inline FinalityConflictResolvedNotificationMessage& operator=(const FinalityConflictResolvedNotificationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinalityConflictResolvedNotificationMessage& operator=(FinalityConflictResolvedNotificationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FinalityConflictResolvedNotificationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FinalityConflictResolvedNotificationMessage* internal_default_instance() {
    return reinterpret_cast<const FinalityConflictResolvedNotificationMessage*>(
               &_FinalityConflictResolvedNotificationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(FinalityConflictResolvedNotificationMessage& a, FinalityConflictResolvedNotificationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FinalityConflictResolvedNotificationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinalityConflictResolvedNotificationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FinalityConflictResolvedNotificationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FinalityConflictResolvedNotificationMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FinalityConflictResolvedNotificationMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FinalityConflictResolvedNotificationMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinalityConflictResolvedNotificationMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.FinalityConflictResolvedNotificationMessage";
  }
  protected:
  explicit FinalityConflictResolvedNotificationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinalityBlockHashFieldNumber = 1,
  };
  // string finalityBlockHash = 1;
  void clear_finalityblockhash();
  const std::string& finalityblockhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_finalityblockhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_finalityblockhash();
  PROTOBUF_NODISCARD std::string* release_finalityblockhash();
  void set_allocated_finalityblockhash(std::string* finalityblockhash);
  private:
  const std::string& _internal_finalityblockhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_finalityblockhash(const std::string& value);
  std::string* _internal_mutable_finalityblockhash();
  public:

  // @@protoc_insertion_point(class_scope:protowire.FinalityConflictResolvedNotificationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr finalityblockhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ShutDownRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.ShutDownRequestMessage) */ {
 public:
  inline ShutDownRequestMessage() : ShutDownRequestMessage(nullptr) {}
  explicit constexpr ShutDownRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShutDownRequestMessage(const ShutDownRequestMessage& from);
  ShutDownRequestMessage(ShutDownRequestMessage&& from) noexcept
    : ShutDownRequestMessage() {
    *this = ::std::move(from);
  }

  inline ShutDownRequestMessage& operator=(const ShutDownRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutDownRequestMessage& operator=(ShutDownRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShutDownRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShutDownRequestMessage* internal_default_instance() {
    return reinterpret_cast<const ShutDownRequestMessage*>(
               &_ShutDownRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ShutDownRequestMessage& a, ShutDownRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutDownRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutDownRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShutDownRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShutDownRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ShutDownRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ShutDownRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.ShutDownRequestMessage";
  }
  protected:
  explicit ShutDownRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.ShutDownRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ShutDownResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.ShutDownResponseMessage) */ {
 public:
  inline ShutDownResponseMessage() : ShutDownResponseMessage(nullptr) {}
  ~ShutDownResponseMessage() override;
  explicit constexpr ShutDownResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShutDownResponseMessage(const ShutDownResponseMessage& from);
  ShutDownResponseMessage(ShutDownResponseMessage&& from) noexcept
    : ShutDownResponseMessage() {
    *this = ::std::move(from);
  }

  inline ShutDownResponseMessage& operator=(const ShutDownResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutDownResponseMessage& operator=(ShutDownResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShutDownResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShutDownResponseMessage* internal_default_instance() {
    return reinterpret_cast<const ShutDownResponseMessage*>(
               &_ShutDownResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ShutDownResponseMessage& a, ShutDownResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutDownResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutDownResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShutDownResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShutDownResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShutDownResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShutDownResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutDownResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.ShutDownResponseMessage";
  }
  protected:
  explicit ShutDownResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.ShutDownResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetHeadersRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetHeadersRequestMessage) */ {
 public:
  inline GetHeadersRequestMessage() : GetHeadersRequestMessage(nullptr) {}
  ~GetHeadersRequestMessage() override;
  explicit constexpr GetHeadersRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHeadersRequestMessage(const GetHeadersRequestMessage& from);
  GetHeadersRequestMessage(GetHeadersRequestMessage&& from) noexcept
    : GetHeadersRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetHeadersRequestMessage& operator=(const GetHeadersRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHeadersRequestMessage& operator=(GetHeadersRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHeadersRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHeadersRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetHeadersRequestMessage*>(
               &_GetHeadersRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetHeadersRequestMessage& a, GetHeadersRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHeadersRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHeadersRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHeadersRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHeadersRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetHeadersRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetHeadersRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHeadersRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetHeadersRequestMessage";
  }
  protected:
  explicit GetHeadersRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartHashFieldNumber = 1,
    kLimitFieldNumber = 2,
    kIsAscendingFieldNumber = 3,
  };
  // string startHash = 1;
  void clear_starthash();
  const std::string& starthash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starthash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starthash();
  PROTOBUF_NODISCARD std::string* release_starthash();
  void set_allocated_starthash(std::string* starthash);
  private:
  const std::string& _internal_starthash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starthash(const std::string& value);
  std::string* _internal_mutable_starthash();
  public:

  // uint64 limit = 2;
  void clear_limit();
  uint64_t limit() const;
  void set_limit(uint64_t value);
  private:
  uint64_t _internal_limit() const;
  void _internal_set_limit(uint64_t value);
  public:

  // bool isAscending = 3;
  void clear_isascending();
  bool isascending() const;
  void set_isascending(bool value);
  private:
  bool _internal_isascending() const;
  void _internal_set_isascending(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetHeadersRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starthash_;
  uint64_t limit_;
  bool isascending_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetHeadersResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetHeadersResponseMessage) */ {
 public:
  inline GetHeadersResponseMessage() : GetHeadersResponseMessage(nullptr) {}
  ~GetHeadersResponseMessage() override;
  explicit constexpr GetHeadersResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHeadersResponseMessage(const GetHeadersResponseMessage& from);
  GetHeadersResponseMessage(GetHeadersResponseMessage&& from) noexcept
    : GetHeadersResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetHeadersResponseMessage& operator=(const GetHeadersResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHeadersResponseMessage& operator=(GetHeadersResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHeadersResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHeadersResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetHeadersResponseMessage*>(
               &_GetHeadersResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GetHeadersResponseMessage& a, GetHeadersResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHeadersResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHeadersResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHeadersResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHeadersResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetHeadersResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetHeadersResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHeadersResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetHeadersResponseMessage";
  }
  protected:
  explicit GetHeadersResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 1,
    kErrorFieldNumber = 1000,
  };
  // repeated string headers = 1;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  const std::string& headers(int index) const;
  std::string* mutable_headers(int index);
  void set_headers(int index, const std::string& value);
  void set_headers(int index, std::string&& value);
  void set_headers(int index, const char* value);
  void set_headers(int index, const char* value, size_t size);
  std::string* add_headers();
  void add_headers(const std::string& value);
  void add_headers(std::string&& value);
  void add_headers(const char* value);
  void add_headers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& headers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_headers();
  private:
  const std::string& _internal_headers(int index) const;
  std::string* _internal_add_headers();
  public:

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.GetHeadersResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> headers_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyUtxosChangedRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.NotifyUtxosChangedRequestMessage) */ {
 public:
  inline NotifyUtxosChangedRequestMessage() : NotifyUtxosChangedRequestMessage(nullptr) {}
  ~NotifyUtxosChangedRequestMessage() override;
  explicit constexpr NotifyUtxosChangedRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyUtxosChangedRequestMessage(const NotifyUtxosChangedRequestMessage& from);
  NotifyUtxosChangedRequestMessage(NotifyUtxosChangedRequestMessage&& from) noexcept
    : NotifyUtxosChangedRequestMessage() {
    *this = ::std::move(from);
  }

  inline NotifyUtxosChangedRequestMessage& operator=(const NotifyUtxosChangedRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyUtxosChangedRequestMessage& operator=(NotifyUtxosChangedRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyUtxosChangedRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyUtxosChangedRequestMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyUtxosChangedRequestMessage*>(
               &_NotifyUtxosChangedRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(NotifyUtxosChangedRequestMessage& a, NotifyUtxosChangedRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyUtxosChangedRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyUtxosChangedRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyUtxosChangedRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyUtxosChangedRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyUtxosChangedRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyUtxosChangedRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyUtxosChangedRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyUtxosChangedRequestMessage";
  }
  protected:
  explicit NotifyUtxosChangedRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
  };
  // repeated string addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // @@protoc_insertion_point(class_scope:protowire.NotifyUtxosChangedRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyUtxosChangedResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.NotifyUtxosChangedResponseMessage) */ {
 public:
  inline NotifyUtxosChangedResponseMessage() : NotifyUtxosChangedResponseMessage(nullptr) {}
  ~NotifyUtxosChangedResponseMessage() override;
  explicit constexpr NotifyUtxosChangedResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyUtxosChangedResponseMessage(const NotifyUtxosChangedResponseMessage& from);
  NotifyUtxosChangedResponseMessage(NotifyUtxosChangedResponseMessage&& from) noexcept
    : NotifyUtxosChangedResponseMessage() {
    *this = ::std::move(from);
  }

  inline NotifyUtxosChangedResponseMessage& operator=(const NotifyUtxosChangedResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyUtxosChangedResponseMessage& operator=(NotifyUtxosChangedResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyUtxosChangedResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyUtxosChangedResponseMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyUtxosChangedResponseMessage*>(
               &_NotifyUtxosChangedResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(NotifyUtxosChangedResponseMessage& a, NotifyUtxosChangedResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyUtxosChangedResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyUtxosChangedResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyUtxosChangedResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyUtxosChangedResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyUtxosChangedResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyUtxosChangedResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyUtxosChangedResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyUtxosChangedResponseMessage";
  }
  protected:
  explicit NotifyUtxosChangedResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.NotifyUtxosChangedResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class UtxosChangedNotificationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.UtxosChangedNotificationMessage) */ {
 public:
  inline UtxosChangedNotificationMessage() : UtxosChangedNotificationMessage(nullptr) {}
  ~UtxosChangedNotificationMessage() override;
  explicit constexpr UtxosChangedNotificationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UtxosChangedNotificationMessage(const UtxosChangedNotificationMessage& from);
  UtxosChangedNotificationMessage(UtxosChangedNotificationMessage&& from) noexcept
    : UtxosChangedNotificationMessage() {
    *this = ::std::move(from);
  }

  inline UtxosChangedNotificationMessage& operator=(const UtxosChangedNotificationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtxosChangedNotificationMessage& operator=(UtxosChangedNotificationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UtxosChangedNotificationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UtxosChangedNotificationMessage* internal_default_instance() {
    return reinterpret_cast<const UtxosChangedNotificationMessage*>(
               &_UtxosChangedNotificationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(UtxosChangedNotificationMessage& a, UtxosChangedNotificationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UtxosChangedNotificationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UtxosChangedNotificationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UtxosChangedNotificationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UtxosChangedNotificationMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UtxosChangedNotificationMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UtxosChangedNotificationMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtxosChangedNotificationMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.UtxosChangedNotificationMessage";
  }
  protected:
  explicit UtxosChangedNotificationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddedFieldNumber = 1,
    kRemovedFieldNumber = 2,
  };
  // repeated .protowire.UtxosByAddressesEntry added = 1;
  int added_size() const;
  private:
  int _internal_added_size() const;
  public:
  void clear_added();
  ::protowire::UtxosByAddressesEntry* mutable_added(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry >*
      mutable_added();
  private:
  const ::protowire::UtxosByAddressesEntry& _internal_added(int index) const;
  ::protowire::UtxosByAddressesEntry* _internal_add_added();
  public:
  const ::protowire::UtxosByAddressesEntry& added(int index) const;
  ::protowire::UtxosByAddressesEntry* add_added();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry >&
      added() const;

  // repeated .protowire.UtxosByAddressesEntry removed = 2;
  int removed_size() const;
  private:
  int _internal_removed_size() const;
  public:
  void clear_removed();
  ::protowire::UtxosByAddressesEntry* mutable_removed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry >*
      mutable_removed();
  private:
  const ::protowire::UtxosByAddressesEntry& _internal_removed(int index) const;
  ::protowire::UtxosByAddressesEntry* _internal_add_removed();
  public:
  const ::protowire::UtxosByAddressesEntry& removed(int index) const;
  ::protowire::UtxosByAddressesEntry* add_removed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry >&
      removed() const;

  // @@protoc_insertion_point(class_scope:protowire.UtxosChangedNotificationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry > added_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry > removed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class UtxosByAddressesEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.UtxosByAddressesEntry) */ {
 public:
  inline UtxosByAddressesEntry() : UtxosByAddressesEntry(nullptr) {}
  ~UtxosByAddressesEntry() override;
  explicit constexpr UtxosByAddressesEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UtxosByAddressesEntry(const UtxosByAddressesEntry& from);
  UtxosByAddressesEntry(UtxosByAddressesEntry&& from) noexcept
    : UtxosByAddressesEntry() {
    *this = ::std::move(from);
  }

  inline UtxosByAddressesEntry& operator=(const UtxosByAddressesEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtxosByAddressesEntry& operator=(UtxosByAddressesEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UtxosByAddressesEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const UtxosByAddressesEntry* internal_default_instance() {
    return reinterpret_cast<const UtxosByAddressesEntry*>(
               &_UtxosByAddressesEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(UtxosByAddressesEntry& a, UtxosByAddressesEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(UtxosByAddressesEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UtxosByAddressesEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UtxosByAddressesEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UtxosByAddressesEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UtxosByAddressesEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UtxosByAddressesEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtxosByAddressesEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.UtxosByAddressesEntry";
  }
  protected:
  explicit UtxosByAddressesEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kOutpointFieldNumber = 2,
    kUtxoEntryFieldNumber = 3,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // .protowire.RpcOutpoint outpoint = 2;
  bool has_outpoint() const;
  private:
  bool _internal_has_outpoint() const;
  public:
  void clear_outpoint();
  const ::protowire::RpcOutpoint& outpoint() const;
  PROTOBUF_NODISCARD ::protowire::RpcOutpoint* release_outpoint();
  ::protowire::RpcOutpoint* mutable_outpoint();
  void set_allocated_outpoint(::protowire::RpcOutpoint* outpoint);
  private:
  const ::protowire::RpcOutpoint& _internal_outpoint() const;
  ::protowire::RpcOutpoint* _internal_mutable_outpoint();
  public:
  void unsafe_arena_set_allocated_outpoint(
      ::protowire::RpcOutpoint* outpoint);
  ::protowire::RpcOutpoint* unsafe_arena_release_outpoint();

  // .protowire.RpcUtxoEntry utxoEntry = 3;
  bool has_utxoentry() const;
  private:
  bool _internal_has_utxoentry() const;
  public:
  void clear_utxoentry();
  const ::protowire::RpcUtxoEntry& utxoentry() const;
  PROTOBUF_NODISCARD ::protowire::RpcUtxoEntry* release_utxoentry();
  ::protowire::RpcUtxoEntry* mutable_utxoentry();
  void set_allocated_utxoentry(::protowire::RpcUtxoEntry* utxoentry);
  private:
  const ::protowire::RpcUtxoEntry& _internal_utxoentry() const;
  ::protowire::RpcUtxoEntry* _internal_mutable_utxoentry();
  public:
  void unsafe_arena_set_allocated_utxoentry(
      ::protowire::RpcUtxoEntry* utxoentry);
  ::protowire::RpcUtxoEntry* unsafe_arena_release_utxoentry();

  // @@protoc_insertion_point(class_scope:protowire.UtxosByAddressesEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::protowire::RpcOutpoint* outpoint_;
  ::protowire::RpcUtxoEntry* utxoentry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class StopNotifyingUtxosChangedRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.StopNotifyingUtxosChangedRequestMessage) */ {
 public:
  inline StopNotifyingUtxosChangedRequestMessage() : StopNotifyingUtxosChangedRequestMessage(nullptr) {}
  ~StopNotifyingUtxosChangedRequestMessage() override;
  explicit constexpr StopNotifyingUtxosChangedRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopNotifyingUtxosChangedRequestMessage(const StopNotifyingUtxosChangedRequestMessage& from);
  StopNotifyingUtxosChangedRequestMessage(StopNotifyingUtxosChangedRequestMessage&& from) noexcept
    : StopNotifyingUtxosChangedRequestMessage() {
    *this = ::std::move(from);
  }

  inline StopNotifyingUtxosChangedRequestMessage& operator=(const StopNotifyingUtxosChangedRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopNotifyingUtxosChangedRequestMessage& operator=(StopNotifyingUtxosChangedRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopNotifyingUtxosChangedRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopNotifyingUtxosChangedRequestMessage* internal_default_instance() {
    return reinterpret_cast<const StopNotifyingUtxosChangedRequestMessage*>(
               &_StopNotifyingUtxosChangedRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(StopNotifyingUtxosChangedRequestMessage& a, StopNotifyingUtxosChangedRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StopNotifyingUtxosChangedRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopNotifyingUtxosChangedRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopNotifyingUtxosChangedRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopNotifyingUtxosChangedRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopNotifyingUtxosChangedRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopNotifyingUtxosChangedRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopNotifyingUtxosChangedRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.StopNotifyingUtxosChangedRequestMessage";
  }
  protected:
  explicit StopNotifyingUtxosChangedRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
  };
  // repeated string addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // @@protoc_insertion_point(class_scope:protowire.StopNotifyingUtxosChangedRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class StopNotifyingUtxosChangedResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.StopNotifyingUtxosChangedResponseMessage) */ {
 public:
  inline StopNotifyingUtxosChangedResponseMessage() : StopNotifyingUtxosChangedResponseMessage(nullptr) {}
  ~StopNotifyingUtxosChangedResponseMessage() override;
  explicit constexpr StopNotifyingUtxosChangedResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopNotifyingUtxosChangedResponseMessage(const StopNotifyingUtxosChangedResponseMessage& from);
  StopNotifyingUtxosChangedResponseMessage(StopNotifyingUtxosChangedResponseMessage&& from) noexcept
    : StopNotifyingUtxosChangedResponseMessage() {
    *this = ::std::move(from);
  }

  inline StopNotifyingUtxosChangedResponseMessage& operator=(const StopNotifyingUtxosChangedResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopNotifyingUtxosChangedResponseMessage& operator=(StopNotifyingUtxosChangedResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopNotifyingUtxosChangedResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopNotifyingUtxosChangedResponseMessage* internal_default_instance() {
    return reinterpret_cast<const StopNotifyingUtxosChangedResponseMessage*>(
               &_StopNotifyingUtxosChangedResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(StopNotifyingUtxosChangedResponseMessage& a, StopNotifyingUtxosChangedResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StopNotifyingUtxosChangedResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopNotifyingUtxosChangedResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopNotifyingUtxosChangedResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopNotifyingUtxosChangedResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopNotifyingUtxosChangedResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopNotifyingUtxosChangedResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopNotifyingUtxosChangedResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.StopNotifyingUtxosChangedResponseMessage";
  }
  protected:
  explicit StopNotifyingUtxosChangedResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.StopNotifyingUtxosChangedResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetUtxosByAddressesRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetUtxosByAddressesRequestMessage) */ {
 public:
  inline GetUtxosByAddressesRequestMessage() : GetUtxosByAddressesRequestMessage(nullptr) {}
  ~GetUtxosByAddressesRequestMessage() override;
  explicit constexpr GetUtxosByAddressesRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUtxosByAddressesRequestMessage(const GetUtxosByAddressesRequestMessage& from);
  GetUtxosByAddressesRequestMessage(GetUtxosByAddressesRequestMessage&& from) noexcept
    : GetUtxosByAddressesRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetUtxosByAddressesRequestMessage& operator=(const GetUtxosByAddressesRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUtxosByAddressesRequestMessage& operator=(GetUtxosByAddressesRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUtxosByAddressesRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUtxosByAddressesRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetUtxosByAddressesRequestMessage*>(
               &_GetUtxosByAddressesRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(GetUtxosByAddressesRequestMessage& a, GetUtxosByAddressesRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUtxosByAddressesRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUtxosByAddressesRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUtxosByAddressesRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUtxosByAddressesRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUtxosByAddressesRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUtxosByAddressesRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUtxosByAddressesRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetUtxosByAddressesRequestMessage";
  }
  protected:
  explicit GetUtxosByAddressesRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
  };
  // repeated string addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetUtxosByAddressesRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetUtxosByAddressesResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetUtxosByAddressesResponseMessage) */ {
 public:
  inline GetUtxosByAddressesResponseMessage() : GetUtxosByAddressesResponseMessage(nullptr) {}
  ~GetUtxosByAddressesResponseMessage() override;
  explicit constexpr GetUtxosByAddressesResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUtxosByAddressesResponseMessage(const GetUtxosByAddressesResponseMessage& from);
  GetUtxosByAddressesResponseMessage(GetUtxosByAddressesResponseMessage&& from) noexcept
    : GetUtxosByAddressesResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetUtxosByAddressesResponseMessage& operator=(const GetUtxosByAddressesResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUtxosByAddressesResponseMessage& operator=(GetUtxosByAddressesResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUtxosByAddressesResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUtxosByAddressesResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetUtxosByAddressesResponseMessage*>(
               &_GetUtxosByAddressesResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GetUtxosByAddressesResponseMessage& a, GetUtxosByAddressesResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUtxosByAddressesResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUtxosByAddressesResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUtxosByAddressesResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUtxosByAddressesResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUtxosByAddressesResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUtxosByAddressesResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUtxosByAddressesResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetUtxosByAddressesResponseMessage";
  }
  protected:
  explicit GetUtxosByAddressesResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kErrorFieldNumber = 1000,
  };
  // repeated .protowire.UtxosByAddressesEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::protowire::UtxosByAddressesEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry >*
      mutable_entries();
  private:
  const ::protowire::UtxosByAddressesEntry& _internal_entries(int index) const;
  ::protowire::UtxosByAddressesEntry* _internal_add_entries();
  public:
  const ::protowire::UtxosByAddressesEntry& entries(int index) const;
  ::protowire::UtxosByAddressesEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry >&
      entries() const;

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.GetUtxosByAddressesResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry > entries_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBalanceByAddressRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetBalanceByAddressRequestMessage) */ {
 public:
  inline GetBalanceByAddressRequestMessage() : GetBalanceByAddressRequestMessage(nullptr) {}
  ~GetBalanceByAddressRequestMessage() override;
  explicit constexpr GetBalanceByAddressRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBalanceByAddressRequestMessage(const GetBalanceByAddressRequestMessage& from);
  GetBalanceByAddressRequestMessage(GetBalanceByAddressRequestMessage&& from) noexcept
    : GetBalanceByAddressRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetBalanceByAddressRequestMessage& operator=(const GetBalanceByAddressRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBalanceByAddressRequestMessage& operator=(GetBalanceByAddressRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBalanceByAddressRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBalanceByAddressRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetBalanceByAddressRequestMessage*>(
               &_GetBalanceByAddressRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(GetBalanceByAddressRequestMessage& a, GetBalanceByAddressRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBalanceByAddressRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBalanceByAddressRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBalanceByAddressRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBalanceByAddressRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBalanceByAddressRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBalanceByAddressRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalanceByAddressRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBalanceByAddressRequestMessage";
  }
  protected:
  explicit GetBalanceByAddressRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetBalanceByAddressRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBalanceByAddressResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetBalanceByAddressResponseMessage) */ {
 public:
  inline GetBalanceByAddressResponseMessage() : GetBalanceByAddressResponseMessage(nullptr) {}
  ~GetBalanceByAddressResponseMessage() override;
  explicit constexpr GetBalanceByAddressResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBalanceByAddressResponseMessage(const GetBalanceByAddressResponseMessage& from);
  GetBalanceByAddressResponseMessage(GetBalanceByAddressResponseMessage&& from) noexcept
    : GetBalanceByAddressResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetBalanceByAddressResponseMessage& operator=(const GetBalanceByAddressResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBalanceByAddressResponseMessage& operator=(GetBalanceByAddressResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBalanceByAddressResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBalanceByAddressResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetBalanceByAddressResponseMessage*>(
               &_GetBalanceByAddressResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GetBalanceByAddressResponseMessage& a, GetBalanceByAddressResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBalanceByAddressResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBalanceByAddressResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBalanceByAddressResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBalanceByAddressResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBalanceByAddressResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBalanceByAddressResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalanceByAddressResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBalanceByAddressResponseMessage";
  }
  protected:
  explicit GetBalanceByAddressResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
    kBalanceFieldNumber = 1,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // uint64 balance = 1;
  void clear_balance();
  uint64_t balance() const;
  void set_balance(uint64_t value);
  private:
  uint64_t _internal_balance() const;
  void _internal_set_balance(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetBalanceByAddressResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  uint64_t balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBalancesByAddressesRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetBalancesByAddressesRequestMessage) */ {
 public:
  inline GetBalancesByAddressesRequestMessage() : GetBalancesByAddressesRequestMessage(nullptr) {}
  ~GetBalancesByAddressesRequestMessage() override;
  explicit constexpr GetBalancesByAddressesRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBalancesByAddressesRequestMessage(const GetBalancesByAddressesRequestMessage& from);
  GetBalancesByAddressesRequestMessage(GetBalancesByAddressesRequestMessage&& from) noexcept
    : GetBalancesByAddressesRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetBalancesByAddressesRequestMessage& operator=(const GetBalancesByAddressesRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBalancesByAddressesRequestMessage& operator=(GetBalancesByAddressesRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBalancesByAddressesRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBalancesByAddressesRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetBalancesByAddressesRequestMessage*>(
               &_GetBalancesByAddressesRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(GetBalancesByAddressesRequestMessage& a, GetBalancesByAddressesRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBalancesByAddressesRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBalancesByAddressesRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBalancesByAddressesRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBalancesByAddressesRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBalancesByAddressesRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBalancesByAddressesRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalancesByAddressesRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBalancesByAddressesRequestMessage";
  }
  protected:
  explicit GetBalancesByAddressesRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
  };
  // repeated string addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetBalancesByAddressesRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class BalancesByAddressEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.BalancesByAddressEntry) */ {
 public:
  inline BalancesByAddressEntry() : BalancesByAddressEntry(nullptr) {}
  ~BalancesByAddressEntry() override;
  explicit constexpr BalancesByAddressEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BalancesByAddressEntry(const BalancesByAddressEntry& from);
  BalancesByAddressEntry(BalancesByAddressEntry&& from) noexcept
    : BalancesByAddressEntry() {
    *this = ::std::move(from);
  }

  inline BalancesByAddressEntry& operator=(const BalancesByAddressEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline BalancesByAddressEntry& operator=(BalancesByAddressEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BalancesByAddressEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const BalancesByAddressEntry* internal_default_instance() {
    return reinterpret_cast<const BalancesByAddressEntry*>(
               &_BalancesByAddressEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(BalancesByAddressEntry& a, BalancesByAddressEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(BalancesByAddressEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BalancesByAddressEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BalancesByAddressEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BalancesByAddressEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BalancesByAddressEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BalancesByAddressEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BalancesByAddressEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.BalancesByAddressEntry";
  }
  protected:
  explicit BalancesByAddressEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kErrorFieldNumber = 1000,
    kBalanceFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // uint64 balance = 2;
  void clear_balance();
  uint64_t balance() const;
  void set_balance(uint64_t value);
  private:
  uint64_t _internal_balance() const;
  void _internal_set_balance(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.BalancesByAddressEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::protowire::RPCError* error_;
  uint64_t balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBalancesByAddressesResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetBalancesByAddressesResponseMessage) */ {
 public:
  inline GetBalancesByAddressesResponseMessage() : GetBalancesByAddressesResponseMessage(nullptr) {}
  ~GetBalancesByAddressesResponseMessage() override;
  explicit constexpr GetBalancesByAddressesResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBalancesByAddressesResponseMessage(const GetBalancesByAddressesResponseMessage& from);
  GetBalancesByAddressesResponseMessage(GetBalancesByAddressesResponseMessage&& from) noexcept
    : GetBalancesByAddressesResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetBalancesByAddressesResponseMessage& operator=(const GetBalancesByAddressesResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBalancesByAddressesResponseMessage& operator=(GetBalancesByAddressesResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBalancesByAddressesResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBalancesByAddressesResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetBalancesByAddressesResponseMessage*>(
               &_GetBalancesByAddressesResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(GetBalancesByAddressesResponseMessage& a, GetBalancesByAddressesResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBalancesByAddressesResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBalancesByAddressesResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBalancesByAddressesResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBalancesByAddressesResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBalancesByAddressesResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBalancesByAddressesResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalancesByAddressesResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetBalancesByAddressesResponseMessage";
  }
  protected:
  explicit GetBalancesByAddressesResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kErrorFieldNumber = 1000,
  };
  // repeated .protowire.BalancesByAddressEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::protowire::BalancesByAddressEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BalancesByAddressEntry >*
      mutable_entries();
  private:
  const ::protowire::BalancesByAddressEntry& _internal_entries(int index) const;
  ::protowire::BalancesByAddressEntry* _internal_add_entries();
  public:
  const ::protowire::BalancesByAddressEntry& entries(int index) const;
  ::protowire::BalancesByAddressEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BalancesByAddressEntry >&
      entries() const;

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.GetBalancesByAddressesResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BalancesByAddressEntry > entries_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetVirtualSelectedParentBlueScoreRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.GetVirtualSelectedParentBlueScoreRequestMessage) */ {
 public:
  inline GetVirtualSelectedParentBlueScoreRequestMessage() : GetVirtualSelectedParentBlueScoreRequestMessage(nullptr) {}
  explicit constexpr GetVirtualSelectedParentBlueScoreRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtualSelectedParentBlueScoreRequestMessage(const GetVirtualSelectedParentBlueScoreRequestMessage& from);
  GetVirtualSelectedParentBlueScoreRequestMessage(GetVirtualSelectedParentBlueScoreRequestMessage&& from) noexcept
    : GetVirtualSelectedParentBlueScoreRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetVirtualSelectedParentBlueScoreRequestMessage& operator=(const GetVirtualSelectedParentBlueScoreRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualSelectedParentBlueScoreRequestMessage& operator=(GetVirtualSelectedParentBlueScoreRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtualSelectedParentBlueScoreRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtualSelectedParentBlueScoreRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetVirtualSelectedParentBlueScoreRequestMessage*>(
               &_GetVirtualSelectedParentBlueScoreRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GetVirtualSelectedParentBlueScoreRequestMessage& a, GetVirtualSelectedParentBlueScoreRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualSelectedParentBlueScoreRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualSelectedParentBlueScoreRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtualSelectedParentBlueScoreRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtualSelectedParentBlueScoreRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetVirtualSelectedParentBlueScoreRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetVirtualSelectedParentBlueScoreRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetVirtualSelectedParentBlueScoreRequestMessage";
  }
  protected:
  explicit GetVirtualSelectedParentBlueScoreRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.GetVirtualSelectedParentBlueScoreRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetVirtualSelectedParentBlueScoreResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetVirtualSelectedParentBlueScoreResponseMessage) */ {
 public:
  inline GetVirtualSelectedParentBlueScoreResponseMessage() : GetVirtualSelectedParentBlueScoreResponseMessage(nullptr) {}
  ~GetVirtualSelectedParentBlueScoreResponseMessage() override;
  explicit constexpr GetVirtualSelectedParentBlueScoreResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtualSelectedParentBlueScoreResponseMessage(const GetVirtualSelectedParentBlueScoreResponseMessage& from);
  GetVirtualSelectedParentBlueScoreResponseMessage(GetVirtualSelectedParentBlueScoreResponseMessage&& from) noexcept
    : GetVirtualSelectedParentBlueScoreResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetVirtualSelectedParentBlueScoreResponseMessage& operator=(const GetVirtualSelectedParentBlueScoreResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualSelectedParentBlueScoreResponseMessage& operator=(GetVirtualSelectedParentBlueScoreResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtualSelectedParentBlueScoreResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtualSelectedParentBlueScoreResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetVirtualSelectedParentBlueScoreResponseMessage*>(
               &_GetVirtualSelectedParentBlueScoreResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(GetVirtualSelectedParentBlueScoreResponseMessage& a, GetVirtualSelectedParentBlueScoreResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualSelectedParentBlueScoreResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualSelectedParentBlueScoreResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtualSelectedParentBlueScoreResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtualSelectedParentBlueScoreResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtualSelectedParentBlueScoreResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVirtualSelectedParentBlueScoreResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtualSelectedParentBlueScoreResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetVirtualSelectedParentBlueScoreResponseMessage";
  }
  protected:
  explicit GetVirtualSelectedParentBlueScoreResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
    kBlueScoreFieldNumber = 1,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // uint64 blueScore = 1;
  void clear_bluescore();
  uint64_t bluescore() const;
  void set_bluescore(uint64_t value);
  private:
  uint64_t _internal_bluescore() const;
  void _internal_set_bluescore(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetVirtualSelectedParentBlueScoreResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  uint64_t bluescore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyVirtualSelectedParentBlueScoreChangedRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.NotifyVirtualSelectedParentBlueScoreChangedRequestMessage) */ {
 public:
  inline NotifyVirtualSelectedParentBlueScoreChangedRequestMessage() : NotifyVirtualSelectedParentBlueScoreChangedRequestMessage(nullptr) {}
  explicit constexpr NotifyVirtualSelectedParentBlueScoreChangedRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyVirtualSelectedParentBlueScoreChangedRequestMessage(const NotifyVirtualSelectedParentBlueScoreChangedRequestMessage& from);
  NotifyVirtualSelectedParentBlueScoreChangedRequestMessage(NotifyVirtualSelectedParentBlueScoreChangedRequestMessage&& from) noexcept
    : NotifyVirtualSelectedParentBlueScoreChangedRequestMessage() {
    *this = ::std::move(from);
  }

  inline NotifyVirtualSelectedParentBlueScoreChangedRequestMessage& operator=(const NotifyVirtualSelectedParentBlueScoreChangedRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyVirtualSelectedParentBlueScoreChangedRequestMessage& operator=(NotifyVirtualSelectedParentBlueScoreChangedRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyVirtualSelectedParentBlueScoreChangedRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyVirtualSelectedParentBlueScoreChangedRequestMessage*>(
               &_NotifyVirtualSelectedParentBlueScoreChangedRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(NotifyVirtualSelectedParentBlueScoreChangedRequestMessage& a, NotifyVirtualSelectedParentBlueScoreChangedRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyVirtualSelectedParentBlueScoreChangedRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NotifyVirtualSelectedParentBlueScoreChangedRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NotifyVirtualSelectedParentBlueScoreChangedRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyVirtualSelectedParentBlueScoreChangedRequestMessage";
  }
  protected:
  explicit NotifyVirtualSelectedParentBlueScoreChangedRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.NotifyVirtualSelectedParentBlueScoreChangedRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyVirtualSelectedParentBlueScoreChangedResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.NotifyVirtualSelectedParentBlueScoreChangedResponseMessage) */ {
 public:
  inline NotifyVirtualSelectedParentBlueScoreChangedResponseMessage() : NotifyVirtualSelectedParentBlueScoreChangedResponseMessage(nullptr) {}
  ~NotifyVirtualSelectedParentBlueScoreChangedResponseMessage() override;
  explicit constexpr NotifyVirtualSelectedParentBlueScoreChangedResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyVirtualSelectedParentBlueScoreChangedResponseMessage(const NotifyVirtualSelectedParentBlueScoreChangedResponseMessage& from);
  NotifyVirtualSelectedParentBlueScoreChangedResponseMessage(NotifyVirtualSelectedParentBlueScoreChangedResponseMessage&& from) noexcept
    : NotifyVirtualSelectedParentBlueScoreChangedResponseMessage() {
    *this = ::std::move(from);
  }

  inline NotifyVirtualSelectedParentBlueScoreChangedResponseMessage& operator=(const NotifyVirtualSelectedParentBlueScoreChangedResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyVirtualSelectedParentBlueScoreChangedResponseMessage& operator=(NotifyVirtualSelectedParentBlueScoreChangedResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyVirtualSelectedParentBlueScoreChangedResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyVirtualSelectedParentBlueScoreChangedResponseMessage*>(
               &_NotifyVirtualSelectedParentBlueScoreChangedResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(NotifyVirtualSelectedParentBlueScoreChangedResponseMessage& a, NotifyVirtualSelectedParentBlueScoreChangedResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyVirtualSelectedParentBlueScoreChangedResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyVirtualSelectedParentBlueScoreChangedResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyVirtualSelectedParentBlueScoreChangedResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyVirtualSelectedParentBlueScoreChangedResponseMessage";
  }
  protected:
  explicit NotifyVirtualSelectedParentBlueScoreChangedResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.NotifyVirtualSelectedParentBlueScoreChangedResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class VirtualSelectedParentBlueScoreChangedNotificationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.VirtualSelectedParentBlueScoreChangedNotificationMessage) */ {
 public:
  inline VirtualSelectedParentBlueScoreChangedNotificationMessage() : VirtualSelectedParentBlueScoreChangedNotificationMessage(nullptr) {}
  ~VirtualSelectedParentBlueScoreChangedNotificationMessage() override;
  explicit constexpr VirtualSelectedParentBlueScoreChangedNotificationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtualSelectedParentBlueScoreChangedNotificationMessage(const VirtualSelectedParentBlueScoreChangedNotificationMessage& from);
  VirtualSelectedParentBlueScoreChangedNotificationMessage(VirtualSelectedParentBlueScoreChangedNotificationMessage&& from) noexcept
    : VirtualSelectedParentBlueScoreChangedNotificationMessage() {
    *this = ::std::move(from);
  }

  inline VirtualSelectedParentBlueScoreChangedNotificationMessage& operator=(const VirtualSelectedParentBlueScoreChangedNotificationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtualSelectedParentBlueScoreChangedNotificationMessage& operator=(VirtualSelectedParentBlueScoreChangedNotificationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtualSelectedParentBlueScoreChangedNotificationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtualSelectedParentBlueScoreChangedNotificationMessage* internal_default_instance() {
    return reinterpret_cast<const VirtualSelectedParentBlueScoreChangedNotificationMessage*>(
               &_VirtualSelectedParentBlueScoreChangedNotificationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(VirtualSelectedParentBlueScoreChangedNotificationMessage& a, VirtualSelectedParentBlueScoreChangedNotificationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtualSelectedParentBlueScoreChangedNotificationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtualSelectedParentBlueScoreChangedNotificationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtualSelectedParentBlueScoreChangedNotificationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtualSelectedParentBlueScoreChangedNotificationMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtualSelectedParentBlueScoreChangedNotificationMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtualSelectedParentBlueScoreChangedNotificationMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtualSelectedParentBlueScoreChangedNotificationMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.VirtualSelectedParentBlueScoreChangedNotificationMessage";
  }
  protected:
  explicit VirtualSelectedParentBlueScoreChangedNotificationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualSelectedParentBlueScoreFieldNumber = 1,
  };
  // uint64 virtualSelectedParentBlueScore = 1;
  void clear_virtualselectedparentbluescore();
  uint64_t virtualselectedparentbluescore() const;
  void set_virtualselectedparentbluescore(uint64_t value);
  private:
  uint64_t _internal_virtualselectedparentbluescore() const;
  void _internal_set_virtualselectedparentbluescore(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.VirtualSelectedParentBlueScoreChangedNotificationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t virtualselectedparentbluescore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyVirtualDaaScoreChangedRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.NotifyVirtualDaaScoreChangedRequestMessage) */ {
 public:
  inline NotifyVirtualDaaScoreChangedRequestMessage() : NotifyVirtualDaaScoreChangedRequestMessage(nullptr) {}
  explicit constexpr NotifyVirtualDaaScoreChangedRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyVirtualDaaScoreChangedRequestMessage(const NotifyVirtualDaaScoreChangedRequestMessage& from);
  NotifyVirtualDaaScoreChangedRequestMessage(NotifyVirtualDaaScoreChangedRequestMessage&& from) noexcept
    : NotifyVirtualDaaScoreChangedRequestMessage() {
    *this = ::std::move(from);
  }

  inline NotifyVirtualDaaScoreChangedRequestMessage& operator=(const NotifyVirtualDaaScoreChangedRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyVirtualDaaScoreChangedRequestMessage& operator=(NotifyVirtualDaaScoreChangedRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyVirtualDaaScoreChangedRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyVirtualDaaScoreChangedRequestMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyVirtualDaaScoreChangedRequestMessage*>(
               &_NotifyVirtualDaaScoreChangedRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(NotifyVirtualDaaScoreChangedRequestMessage& a, NotifyVirtualDaaScoreChangedRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyVirtualDaaScoreChangedRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyVirtualDaaScoreChangedRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyVirtualDaaScoreChangedRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyVirtualDaaScoreChangedRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NotifyVirtualDaaScoreChangedRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NotifyVirtualDaaScoreChangedRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyVirtualDaaScoreChangedRequestMessage";
  }
  protected:
  explicit NotifyVirtualDaaScoreChangedRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.NotifyVirtualDaaScoreChangedRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyVirtualDaaScoreChangedResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.NotifyVirtualDaaScoreChangedResponseMessage) */ {
 public:
  inline NotifyVirtualDaaScoreChangedResponseMessage() : NotifyVirtualDaaScoreChangedResponseMessage(nullptr) {}
  ~NotifyVirtualDaaScoreChangedResponseMessage() override;
  explicit constexpr NotifyVirtualDaaScoreChangedResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyVirtualDaaScoreChangedResponseMessage(const NotifyVirtualDaaScoreChangedResponseMessage& from);
  NotifyVirtualDaaScoreChangedResponseMessage(NotifyVirtualDaaScoreChangedResponseMessage&& from) noexcept
    : NotifyVirtualDaaScoreChangedResponseMessage() {
    *this = ::std::move(from);
  }

  inline NotifyVirtualDaaScoreChangedResponseMessage& operator=(const NotifyVirtualDaaScoreChangedResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyVirtualDaaScoreChangedResponseMessage& operator=(NotifyVirtualDaaScoreChangedResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyVirtualDaaScoreChangedResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyVirtualDaaScoreChangedResponseMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyVirtualDaaScoreChangedResponseMessage*>(
               &_NotifyVirtualDaaScoreChangedResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(NotifyVirtualDaaScoreChangedResponseMessage& a, NotifyVirtualDaaScoreChangedResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyVirtualDaaScoreChangedResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyVirtualDaaScoreChangedResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyVirtualDaaScoreChangedResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyVirtualDaaScoreChangedResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyVirtualDaaScoreChangedResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyVirtualDaaScoreChangedResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyVirtualDaaScoreChangedResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyVirtualDaaScoreChangedResponseMessage";
  }
  protected:
  explicit NotifyVirtualDaaScoreChangedResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.NotifyVirtualDaaScoreChangedResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class VirtualDaaScoreChangedNotificationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.VirtualDaaScoreChangedNotificationMessage) */ {
 public:
  inline VirtualDaaScoreChangedNotificationMessage() : VirtualDaaScoreChangedNotificationMessage(nullptr) {}
  ~VirtualDaaScoreChangedNotificationMessage() override;
  explicit constexpr VirtualDaaScoreChangedNotificationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtualDaaScoreChangedNotificationMessage(const VirtualDaaScoreChangedNotificationMessage& from);
  VirtualDaaScoreChangedNotificationMessage(VirtualDaaScoreChangedNotificationMessage&& from) noexcept
    : VirtualDaaScoreChangedNotificationMessage() {
    *this = ::std::move(from);
  }

  inline VirtualDaaScoreChangedNotificationMessage& operator=(const VirtualDaaScoreChangedNotificationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtualDaaScoreChangedNotificationMessage& operator=(VirtualDaaScoreChangedNotificationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtualDaaScoreChangedNotificationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtualDaaScoreChangedNotificationMessage* internal_default_instance() {
    return reinterpret_cast<const VirtualDaaScoreChangedNotificationMessage*>(
               &_VirtualDaaScoreChangedNotificationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(VirtualDaaScoreChangedNotificationMessage& a, VirtualDaaScoreChangedNotificationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtualDaaScoreChangedNotificationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtualDaaScoreChangedNotificationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtualDaaScoreChangedNotificationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtualDaaScoreChangedNotificationMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtualDaaScoreChangedNotificationMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VirtualDaaScoreChangedNotificationMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtualDaaScoreChangedNotificationMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.VirtualDaaScoreChangedNotificationMessage";
  }
  protected:
  explicit VirtualDaaScoreChangedNotificationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualDaaScoreFieldNumber = 1,
  };
  // uint64 virtualDaaScore = 1;
  void clear_virtualdaascore();
  uint64_t virtualdaascore() const;
  void set_virtualdaascore(uint64_t value);
  private:
  uint64_t _internal_virtualdaascore() const;
  void _internal_set_virtualdaascore(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.VirtualDaaScoreChangedNotificationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t virtualdaascore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyPruningPointUTXOSetOverrideRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.NotifyPruningPointUTXOSetOverrideRequestMessage) */ {
 public:
  inline NotifyPruningPointUTXOSetOverrideRequestMessage() : NotifyPruningPointUTXOSetOverrideRequestMessage(nullptr) {}
  explicit constexpr NotifyPruningPointUTXOSetOverrideRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyPruningPointUTXOSetOverrideRequestMessage(const NotifyPruningPointUTXOSetOverrideRequestMessage& from);
  NotifyPruningPointUTXOSetOverrideRequestMessage(NotifyPruningPointUTXOSetOverrideRequestMessage&& from) noexcept
    : NotifyPruningPointUTXOSetOverrideRequestMessage() {
    *this = ::std::move(from);
  }

  inline NotifyPruningPointUTXOSetOverrideRequestMessage& operator=(const NotifyPruningPointUTXOSetOverrideRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyPruningPointUTXOSetOverrideRequestMessage& operator=(NotifyPruningPointUTXOSetOverrideRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyPruningPointUTXOSetOverrideRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyPruningPointUTXOSetOverrideRequestMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyPruningPointUTXOSetOverrideRequestMessage*>(
               &_NotifyPruningPointUTXOSetOverrideRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(NotifyPruningPointUTXOSetOverrideRequestMessage& a, NotifyPruningPointUTXOSetOverrideRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyPruningPointUTXOSetOverrideRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyPruningPointUTXOSetOverrideRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyPruningPointUTXOSetOverrideRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyPruningPointUTXOSetOverrideRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NotifyPruningPointUTXOSetOverrideRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NotifyPruningPointUTXOSetOverrideRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyPruningPointUTXOSetOverrideRequestMessage";
  }
  protected:
  explicit NotifyPruningPointUTXOSetOverrideRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.NotifyPruningPointUTXOSetOverrideRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyPruningPointUTXOSetOverrideResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.NotifyPruningPointUTXOSetOverrideResponseMessage) */ {
 public:
  inline NotifyPruningPointUTXOSetOverrideResponseMessage() : NotifyPruningPointUTXOSetOverrideResponseMessage(nullptr) {}
  ~NotifyPruningPointUTXOSetOverrideResponseMessage() override;
  explicit constexpr NotifyPruningPointUTXOSetOverrideResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyPruningPointUTXOSetOverrideResponseMessage(const NotifyPruningPointUTXOSetOverrideResponseMessage& from);
  NotifyPruningPointUTXOSetOverrideResponseMessage(NotifyPruningPointUTXOSetOverrideResponseMessage&& from) noexcept
    : NotifyPruningPointUTXOSetOverrideResponseMessage() {
    *this = ::std::move(from);
  }

  inline NotifyPruningPointUTXOSetOverrideResponseMessage& operator=(const NotifyPruningPointUTXOSetOverrideResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyPruningPointUTXOSetOverrideResponseMessage& operator=(NotifyPruningPointUTXOSetOverrideResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyPruningPointUTXOSetOverrideResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyPruningPointUTXOSetOverrideResponseMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyPruningPointUTXOSetOverrideResponseMessage*>(
               &_NotifyPruningPointUTXOSetOverrideResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(NotifyPruningPointUTXOSetOverrideResponseMessage& a, NotifyPruningPointUTXOSetOverrideResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyPruningPointUTXOSetOverrideResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyPruningPointUTXOSetOverrideResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyPruningPointUTXOSetOverrideResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyPruningPointUTXOSetOverrideResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyPruningPointUTXOSetOverrideResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyPruningPointUTXOSetOverrideResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyPruningPointUTXOSetOverrideResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyPruningPointUTXOSetOverrideResponseMessage";
  }
  protected:
  explicit NotifyPruningPointUTXOSetOverrideResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.NotifyPruningPointUTXOSetOverrideResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PruningPointUTXOSetOverrideNotificationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.PruningPointUTXOSetOverrideNotificationMessage) */ {
 public:
  inline PruningPointUTXOSetOverrideNotificationMessage() : PruningPointUTXOSetOverrideNotificationMessage(nullptr) {}
  explicit constexpr PruningPointUTXOSetOverrideNotificationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PruningPointUTXOSetOverrideNotificationMessage(const PruningPointUTXOSetOverrideNotificationMessage& from);
  PruningPointUTXOSetOverrideNotificationMessage(PruningPointUTXOSetOverrideNotificationMessage&& from) noexcept
    : PruningPointUTXOSetOverrideNotificationMessage() {
    *this = ::std::move(from);
  }

  inline PruningPointUTXOSetOverrideNotificationMessage& operator=(const PruningPointUTXOSetOverrideNotificationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PruningPointUTXOSetOverrideNotificationMessage& operator=(PruningPointUTXOSetOverrideNotificationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PruningPointUTXOSetOverrideNotificationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PruningPointUTXOSetOverrideNotificationMessage* internal_default_instance() {
    return reinterpret_cast<const PruningPointUTXOSetOverrideNotificationMessage*>(
               &_PruningPointUTXOSetOverrideNotificationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(PruningPointUTXOSetOverrideNotificationMessage& a, PruningPointUTXOSetOverrideNotificationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PruningPointUTXOSetOverrideNotificationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PruningPointUTXOSetOverrideNotificationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PruningPointUTXOSetOverrideNotificationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PruningPointUTXOSetOverrideNotificationMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PruningPointUTXOSetOverrideNotificationMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PruningPointUTXOSetOverrideNotificationMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.PruningPointUTXOSetOverrideNotificationMessage";
  }
  protected:
  explicit PruningPointUTXOSetOverrideNotificationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.PruningPointUTXOSetOverrideNotificationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class StopNotifyingPruningPointUTXOSetOverrideRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.StopNotifyingPruningPointUTXOSetOverrideRequestMessage) */ {
 public:
  inline StopNotifyingPruningPointUTXOSetOverrideRequestMessage() : StopNotifyingPruningPointUTXOSetOverrideRequestMessage(nullptr) {}
  explicit constexpr StopNotifyingPruningPointUTXOSetOverrideRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopNotifyingPruningPointUTXOSetOverrideRequestMessage(const StopNotifyingPruningPointUTXOSetOverrideRequestMessage& from);
  StopNotifyingPruningPointUTXOSetOverrideRequestMessage(StopNotifyingPruningPointUTXOSetOverrideRequestMessage&& from) noexcept
    : StopNotifyingPruningPointUTXOSetOverrideRequestMessage() {
    *this = ::std::move(from);
  }

  inline StopNotifyingPruningPointUTXOSetOverrideRequestMessage& operator=(const StopNotifyingPruningPointUTXOSetOverrideRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopNotifyingPruningPointUTXOSetOverrideRequestMessage& operator=(StopNotifyingPruningPointUTXOSetOverrideRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopNotifyingPruningPointUTXOSetOverrideRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopNotifyingPruningPointUTXOSetOverrideRequestMessage* internal_default_instance() {
    return reinterpret_cast<const StopNotifyingPruningPointUTXOSetOverrideRequestMessage*>(
               &_StopNotifyingPruningPointUTXOSetOverrideRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(StopNotifyingPruningPointUTXOSetOverrideRequestMessage& a, StopNotifyingPruningPointUTXOSetOverrideRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StopNotifyingPruningPointUTXOSetOverrideRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopNotifyingPruningPointUTXOSetOverrideRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopNotifyingPruningPointUTXOSetOverrideRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopNotifyingPruningPointUTXOSetOverrideRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopNotifyingPruningPointUTXOSetOverrideRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopNotifyingPruningPointUTXOSetOverrideRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.StopNotifyingPruningPointUTXOSetOverrideRequestMessage";
  }
  protected:
  explicit StopNotifyingPruningPointUTXOSetOverrideRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.StopNotifyingPruningPointUTXOSetOverrideRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class StopNotifyingPruningPointUTXOSetOverrideResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.StopNotifyingPruningPointUTXOSetOverrideResponseMessage) */ {
 public:
  inline StopNotifyingPruningPointUTXOSetOverrideResponseMessage() : StopNotifyingPruningPointUTXOSetOverrideResponseMessage(nullptr) {}
  ~StopNotifyingPruningPointUTXOSetOverrideResponseMessage() override;
  explicit constexpr StopNotifyingPruningPointUTXOSetOverrideResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopNotifyingPruningPointUTXOSetOverrideResponseMessage(const StopNotifyingPruningPointUTXOSetOverrideResponseMessage& from);
  StopNotifyingPruningPointUTXOSetOverrideResponseMessage(StopNotifyingPruningPointUTXOSetOverrideResponseMessage&& from) noexcept
    : StopNotifyingPruningPointUTXOSetOverrideResponseMessage() {
    *this = ::std::move(from);
  }

  inline StopNotifyingPruningPointUTXOSetOverrideResponseMessage& operator=(const StopNotifyingPruningPointUTXOSetOverrideResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopNotifyingPruningPointUTXOSetOverrideResponseMessage& operator=(StopNotifyingPruningPointUTXOSetOverrideResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopNotifyingPruningPointUTXOSetOverrideResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopNotifyingPruningPointUTXOSetOverrideResponseMessage* internal_default_instance() {
    return reinterpret_cast<const StopNotifyingPruningPointUTXOSetOverrideResponseMessage*>(
               &_StopNotifyingPruningPointUTXOSetOverrideResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(StopNotifyingPruningPointUTXOSetOverrideResponseMessage& a, StopNotifyingPruningPointUTXOSetOverrideResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StopNotifyingPruningPointUTXOSetOverrideResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopNotifyingPruningPointUTXOSetOverrideResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopNotifyingPruningPointUTXOSetOverrideResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopNotifyingPruningPointUTXOSetOverrideResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopNotifyingPruningPointUTXOSetOverrideResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopNotifyingPruningPointUTXOSetOverrideResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopNotifyingPruningPointUTXOSetOverrideResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.StopNotifyingPruningPointUTXOSetOverrideResponseMessage";
  }
  protected:
  explicit StopNotifyingPruningPointUTXOSetOverrideResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.StopNotifyingPruningPointUTXOSetOverrideResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class BanRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.BanRequestMessage) */ {
 public:
  inline BanRequestMessage() : BanRequestMessage(nullptr) {}
  ~BanRequestMessage() override;
  explicit constexpr BanRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BanRequestMessage(const BanRequestMessage& from);
  BanRequestMessage(BanRequestMessage&& from) noexcept
    : BanRequestMessage() {
    *this = ::std::move(from);
  }

  inline BanRequestMessage& operator=(const BanRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BanRequestMessage& operator=(BanRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BanRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BanRequestMessage* internal_default_instance() {
    return reinterpret_cast<const BanRequestMessage*>(
               &_BanRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(BanRequestMessage& a, BanRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BanRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BanRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BanRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BanRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BanRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BanRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BanRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.BanRequestMessage";
  }
  protected:
  explicit BanRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:protowire.BanRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class BanResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.BanResponseMessage) */ {
 public:
  inline BanResponseMessage() : BanResponseMessage(nullptr) {}
  ~BanResponseMessage() override;
  explicit constexpr BanResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BanResponseMessage(const BanResponseMessage& from);
  BanResponseMessage(BanResponseMessage&& from) noexcept
    : BanResponseMessage() {
    *this = ::std::move(from);
  }

  inline BanResponseMessage& operator=(const BanResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BanResponseMessage& operator=(BanResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BanResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BanResponseMessage* internal_default_instance() {
    return reinterpret_cast<const BanResponseMessage*>(
               &_BanResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(BanResponseMessage& a, BanResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BanResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BanResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BanResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BanResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BanResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BanResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BanResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.BanResponseMessage";
  }
  protected:
  explicit BanResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.BanResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class UnbanRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.UnbanRequestMessage) */ {
 public:
  inline UnbanRequestMessage() : UnbanRequestMessage(nullptr) {}
  ~UnbanRequestMessage() override;
  explicit constexpr UnbanRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnbanRequestMessage(const UnbanRequestMessage& from);
  UnbanRequestMessage(UnbanRequestMessage&& from) noexcept
    : UnbanRequestMessage() {
    *this = ::std::move(from);
  }

  inline UnbanRequestMessage& operator=(const UnbanRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnbanRequestMessage& operator=(UnbanRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnbanRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnbanRequestMessage* internal_default_instance() {
    return reinterpret_cast<const UnbanRequestMessage*>(
               &_UnbanRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(UnbanRequestMessage& a, UnbanRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnbanRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnbanRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnbanRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnbanRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnbanRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnbanRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnbanRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.UnbanRequestMessage";
  }
  protected:
  explicit UnbanRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:protowire.UnbanRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class UnbanResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.UnbanResponseMessage) */ {
 public:
  inline UnbanResponseMessage() : UnbanResponseMessage(nullptr) {}
  ~UnbanResponseMessage() override;
  explicit constexpr UnbanResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnbanResponseMessage(const UnbanResponseMessage& from);
  UnbanResponseMessage(UnbanResponseMessage&& from) noexcept
    : UnbanResponseMessage() {
    *this = ::std::move(from);
  }

  inline UnbanResponseMessage& operator=(const UnbanResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnbanResponseMessage& operator=(UnbanResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnbanResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnbanResponseMessage* internal_default_instance() {
    return reinterpret_cast<const UnbanResponseMessage*>(
               &_UnbanResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(UnbanResponseMessage& a, UnbanResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnbanResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnbanResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnbanResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnbanResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnbanResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnbanResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnbanResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.UnbanResponseMessage";
  }
  protected:
  explicit UnbanResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.UnbanResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetInfoRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.GetInfoRequestMessage) */ {
 public:
  inline GetInfoRequestMessage() : GetInfoRequestMessage(nullptr) {}
  explicit constexpr GetInfoRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInfoRequestMessage(const GetInfoRequestMessage& from);
  GetInfoRequestMessage(GetInfoRequestMessage&& from) noexcept
    : GetInfoRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetInfoRequestMessage& operator=(const GetInfoRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoRequestMessage& operator=(GetInfoRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInfoRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInfoRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetInfoRequestMessage*>(
               &_GetInfoRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(GetInfoRequestMessage& a, GetInfoRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInfoRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInfoRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInfoRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetInfoRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetInfoRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetInfoRequestMessage";
  }
  protected:
  explicit GetInfoRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.GetInfoRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetInfoResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetInfoResponseMessage) */ {
 public:
  inline GetInfoResponseMessage() : GetInfoResponseMessage(nullptr) {}
  ~GetInfoResponseMessage() override;
  explicit constexpr GetInfoResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInfoResponseMessage(const GetInfoResponseMessage& from);
  GetInfoResponseMessage(GetInfoResponseMessage&& from) noexcept
    : GetInfoResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetInfoResponseMessage& operator=(const GetInfoResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoResponseMessage& operator=(GetInfoResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInfoResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInfoResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetInfoResponseMessage*>(
               &_GetInfoResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(GetInfoResponseMessage& a, GetInfoResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInfoResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInfoResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInfoResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInfoResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInfoResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetInfoResponseMessage";
  }
  protected:
  explicit GetInfoResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kP2PIdFieldNumber = 1,
    kServerVersionFieldNumber = 3,
    kErrorFieldNumber = 1000,
    kMempoolSizeFieldNumber = 2,
    kIsUtxoIndexedFieldNumber = 4,
    kIsSyncedFieldNumber = 5,
  };
  // string p2pId = 1;
  void clear_p2pid();
  const std::string& p2pid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_p2pid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_p2pid();
  PROTOBUF_NODISCARD std::string* release_p2pid();
  void set_allocated_p2pid(std::string* p2pid);
  private:
  const std::string& _internal_p2pid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_p2pid(const std::string& value);
  std::string* _internal_mutable_p2pid();
  public:

  // string serverVersion = 3;
  void clear_serverversion();
  const std::string& serverversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverversion();
  PROTOBUF_NODISCARD std::string* release_serverversion();
  void set_allocated_serverversion(std::string* serverversion);
  private:
  const std::string& _internal_serverversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverversion(const std::string& value);
  std::string* _internal_mutable_serverversion();
  public:

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // uint64 mempoolSize = 2;
  void clear_mempoolsize();
  uint64_t mempoolsize() const;
  void set_mempoolsize(uint64_t value);
  private:
  uint64_t _internal_mempoolsize() const;
  void _internal_set_mempoolsize(uint64_t value);
  public:

  // bool isUtxoIndexed = 4;
  void clear_isutxoindexed();
  bool isutxoindexed() const;
  void set_isutxoindexed(bool value);
  private:
  bool _internal_isutxoindexed() const;
  void _internal_set_isutxoindexed(bool value);
  public:

  // bool isSynced = 5;
  void clear_issynced();
  bool issynced() const;
  void set_issynced(bool value);
  private:
  bool _internal_issynced() const;
  void _internal_set_issynced(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetInfoResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p2pid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverversion_;
  ::protowire::RPCError* error_;
  uint64_t mempoolsize_;
  bool isutxoindexed_;
  bool issynced_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class EstimateNetworkHashesPerSecondRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.EstimateNetworkHashesPerSecondRequestMessage) */ {
 public:
  inline EstimateNetworkHashesPerSecondRequestMessage() : EstimateNetworkHashesPerSecondRequestMessage(nullptr) {}
  ~EstimateNetworkHashesPerSecondRequestMessage() override;
  explicit constexpr EstimateNetworkHashesPerSecondRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EstimateNetworkHashesPerSecondRequestMessage(const EstimateNetworkHashesPerSecondRequestMessage& from);
  EstimateNetworkHashesPerSecondRequestMessage(EstimateNetworkHashesPerSecondRequestMessage&& from) noexcept
    : EstimateNetworkHashesPerSecondRequestMessage() {
    *this = ::std::move(from);
  }

  inline EstimateNetworkHashesPerSecondRequestMessage& operator=(const EstimateNetworkHashesPerSecondRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateNetworkHashesPerSecondRequestMessage& operator=(EstimateNetworkHashesPerSecondRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimateNetworkHashesPerSecondRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EstimateNetworkHashesPerSecondRequestMessage* internal_default_instance() {
    return reinterpret_cast<const EstimateNetworkHashesPerSecondRequestMessage*>(
               &_EstimateNetworkHashesPerSecondRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(EstimateNetworkHashesPerSecondRequestMessage& a, EstimateNetworkHashesPerSecondRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateNetworkHashesPerSecondRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateNetworkHashesPerSecondRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EstimateNetworkHashesPerSecondRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EstimateNetworkHashesPerSecondRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EstimateNetworkHashesPerSecondRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EstimateNetworkHashesPerSecondRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateNetworkHashesPerSecondRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.EstimateNetworkHashesPerSecondRequestMessage";
  }
  protected:
  explicit EstimateNetworkHashesPerSecondRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartHashFieldNumber = 2,
    kWindowSizeFieldNumber = 1,
  };
  // string startHash = 2;
  void clear_starthash();
  const std::string& starthash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starthash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starthash();
  PROTOBUF_NODISCARD std::string* release_starthash();
  void set_allocated_starthash(std::string* starthash);
  private:
  const std::string& _internal_starthash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starthash(const std::string& value);
  std::string* _internal_mutable_starthash();
  public:

  // uint32 windowSize = 1;
  void clear_windowsize();
  uint32_t windowsize() const;
  void set_windowsize(uint32_t value);
  private:
  uint32_t _internal_windowsize() const;
  void _internal_set_windowsize(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.EstimateNetworkHashesPerSecondRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starthash_;
  uint32_t windowsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class EstimateNetworkHashesPerSecondResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.EstimateNetworkHashesPerSecondResponseMessage) */ {
 public:
  inline EstimateNetworkHashesPerSecondResponseMessage() : EstimateNetworkHashesPerSecondResponseMessage(nullptr) {}
  ~EstimateNetworkHashesPerSecondResponseMessage() override;
  explicit constexpr EstimateNetworkHashesPerSecondResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EstimateNetworkHashesPerSecondResponseMessage(const EstimateNetworkHashesPerSecondResponseMessage& from);
  EstimateNetworkHashesPerSecondResponseMessage(EstimateNetworkHashesPerSecondResponseMessage&& from) noexcept
    : EstimateNetworkHashesPerSecondResponseMessage() {
    *this = ::std::move(from);
  }

  inline EstimateNetworkHashesPerSecondResponseMessage& operator=(const EstimateNetworkHashesPerSecondResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateNetworkHashesPerSecondResponseMessage& operator=(EstimateNetworkHashesPerSecondResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimateNetworkHashesPerSecondResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EstimateNetworkHashesPerSecondResponseMessage* internal_default_instance() {
    return reinterpret_cast<const EstimateNetworkHashesPerSecondResponseMessage*>(
               &_EstimateNetworkHashesPerSecondResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(EstimateNetworkHashesPerSecondResponseMessage& a, EstimateNetworkHashesPerSecondResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateNetworkHashesPerSecondResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateNetworkHashesPerSecondResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EstimateNetworkHashesPerSecondResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EstimateNetworkHashesPerSecondResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EstimateNetworkHashesPerSecondResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EstimateNetworkHashesPerSecondResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateNetworkHashesPerSecondResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.EstimateNetworkHashesPerSecondResponseMessage";
  }
  protected:
  explicit EstimateNetworkHashesPerSecondResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
    kNetworkHashesPerSecondFieldNumber = 1,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // uint64 networkHashesPerSecond = 1;
  void clear_networkhashespersecond();
  uint64_t networkhashespersecond() const;
  void set_networkhashespersecond(uint64_t value);
  private:
  uint64_t _internal_networkhashespersecond() const;
  void _internal_set_networkhashespersecond(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.EstimateNetworkHashesPerSecondResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  uint64_t networkhashespersecond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyNewBlockTemplateRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.NotifyNewBlockTemplateRequestMessage) */ {
 public:
  inline NotifyNewBlockTemplateRequestMessage() : NotifyNewBlockTemplateRequestMessage(nullptr) {}
  explicit constexpr NotifyNewBlockTemplateRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyNewBlockTemplateRequestMessage(const NotifyNewBlockTemplateRequestMessage& from);
  NotifyNewBlockTemplateRequestMessage(NotifyNewBlockTemplateRequestMessage&& from) noexcept
    : NotifyNewBlockTemplateRequestMessage() {
    *this = ::std::move(from);
  }

  inline NotifyNewBlockTemplateRequestMessage& operator=(const NotifyNewBlockTemplateRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyNewBlockTemplateRequestMessage& operator=(NotifyNewBlockTemplateRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyNewBlockTemplateRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyNewBlockTemplateRequestMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyNewBlockTemplateRequestMessage*>(
               &_NotifyNewBlockTemplateRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(NotifyNewBlockTemplateRequestMessage& a, NotifyNewBlockTemplateRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyNewBlockTemplateRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyNewBlockTemplateRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyNewBlockTemplateRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyNewBlockTemplateRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NotifyNewBlockTemplateRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NotifyNewBlockTemplateRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyNewBlockTemplateRequestMessage";
  }
  protected:
  explicit NotifyNewBlockTemplateRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.NotifyNewBlockTemplateRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NotifyNewBlockTemplateResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.NotifyNewBlockTemplateResponseMessage) */ {
 public:
  inline NotifyNewBlockTemplateResponseMessage() : NotifyNewBlockTemplateResponseMessage(nullptr) {}
  ~NotifyNewBlockTemplateResponseMessage() override;
  explicit constexpr NotifyNewBlockTemplateResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyNewBlockTemplateResponseMessage(const NotifyNewBlockTemplateResponseMessage& from);
  NotifyNewBlockTemplateResponseMessage(NotifyNewBlockTemplateResponseMessage&& from) noexcept
    : NotifyNewBlockTemplateResponseMessage() {
    *this = ::std::move(from);
  }

  inline NotifyNewBlockTemplateResponseMessage& operator=(const NotifyNewBlockTemplateResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyNewBlockTemplateResponseMessage& operator=(NotifyNewBlockTemplateResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyNewBlockTemplateResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyNewBlockTemplateResponseMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyNewBlockTemplateResponseMessage*>(
               &_NotifyNewBlockTemplateResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(NotifyNewBlockTemplateResponseMessage& a, NotifyNewBlockTemplateResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyNewBlockTemplateResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyNewBlockTemplateResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyNewBlockTemplateResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyNewBlockTemplateResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyNewBlockTemplateResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyNewBlockTemplateResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyNewBlockTemplateResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NotifyNewBlockTemplateResponseMessage";
  }
  protected:
  explicit NotifyNewBlockTemplateResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.NotifyNewBlockTemplateResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NewBlockTemplateNotificationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.NewBlockTemplateNotificationMessage) */ {
 public:
  inline NewBlockTemplateNotificationMessage() : NewBlockTemplateNotificationMessage(nullptr) {}
  explicit constexpr NewBlockTemplateNotificationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewBlockTemplateNotificationMessage(const NewBlockTemplateNotificationMessage& from);
  NewBlockTemplateNotificationMessage(NewBlockTemplateNotificationMessage&& from) noexcept
    : NewBlockTemplateNotificationMessage() {
    *this = ::std::move(from);
  }

  inline NewBlockTemplateNotificationMessage& operator=(const NewBlockTemplateNotificationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewBlockTemplateNotificationMessage& operator=(NewBlockTemplateNotificationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewBlockTemplateNotificationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewBlockTemplateNotificationMessage* internal_default_instance() {
    return reinterpret_cast<const NewBlockTemplateNotificationMessage*>(
               &_NewBlockTemplateNotificationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(NewBlockTemplateNotificationMessage& a, NewBlockTemplateNotificationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NewBlockTemplateNotificationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewBlockTemplateNotificationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewBlockTemplateNotificationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewBlockTemplateNotificationMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NewBlockTemplateNotificationMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NewBlockTemplateNotificationMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.NewBlockTemplateNotificationMessage";
  }
  protected:
  explicit NewBlockTemplateNotificationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.NewBlockTemplateNotificationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MempoolEntryByAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.MempoolEntryByAddress) */ {
 public:
  inline MempoolEntryByAddress() : MempoolEntryByAddress(nullptr) {}
  ~MempoolEntryByAddress() override;
  explicit constexpr MempoolEntryByAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MempoolEntryByAddress(const MempoolEntryByAddress& from);
  MempoolEntryByAddress(MempoolEntryByAddress&& from) noexcept
    : MempoolEntryByAddress() {
    *this = ::std::move(from);
  }

  inline MempoolEntryByAddress& operator=(const MempoolEntryByAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline MempoolEntryByAddress& operator=(MempoolEntryByAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MempoolEntryByAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const MempoolEntryByAddress* internal_default_instance() {
    return reinterpret_cast<const MempoolEntryByAddress*>(
               &_MempoolEntryByAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(MempoolEntryByAddress& a, MempoolEntryByAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(MempoolEntryByAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MempoolEntryByAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MempoolEntryByAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MempoolEntryByAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MempoolEntryByAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MempoolEntryByAddress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MempoolEntryByAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.MempoolEntryByAddress";
  }
  protected:
  explicit MempoolEntryByAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendingFieldNumber = 2,
    kReceivingFieldNumber = 3,
    kAddressFieldNumber = 1,
  };
  // repeated .protowire.MempoolEntry sending = 2;
  int sending_size() const;
  private:
  int _internal_sending_size() const;
  public:
  void clear_sending();
  ::protowire::MempoolEntry* mutable_sending(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry >*
      mutable_sending();
  private:
  const ::protowire::MempoolEntry& _internal_sending(int index) const;
  ::protowire::MempoolEntry* _internal_add_sending();
  public:
  const ::protowire::MempoolEntry& sending(int index) const;
  ::protowire::MempoolEntry* add_sending();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry >&
      sending() const;

  // repeated .protowire.MempoolEntry receiving = 3;
  int receiving_size() const;
  private:
  int _internal_receiving_size() const;
  public:
  void clear_receiving();
  ::protowire::MempoolEntry* mutable_receiving(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry >*
      mutable_receiving();
  private:
  const ::protowire::MempoolEntry& _internal_receiving(int index) const;
  ::protowire::MempoolEntry* _internal_add_receiving();
  public:
  const ::protowire::MempoolEntry& receiving(int index) const;
  ::protowire::MempoolEntry* add_receiving();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry >&
      receiving() const;

  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:protowire.MempoolEntryByAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry > sending_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry > receiving_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolEntriesByAddressesRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetMempoolEntriesByAddressesRequestMessage) */ {
 public:
  inline GetMempoolEntriesByAddressesRequestMessage() : GetMempoolEntriesByAddressesRequestMessage(nullptr) {}
  ~GetMempoolEntriesByAddressesRequestMessage() override;
  explicit constexpr GetMempoolEntriesByAddressesRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMempoolEntriesByAddressesRequestMessage(const GetMempoolEntriesByAddressesRequestMessage& from);
  GetMempoolEntriesByAddressesRequestMessage(GetMempoolEntriesByAddressesRequestMessage&& from) noexcept
    : GetMempoolEntriesByAddressesRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetMempoolEntriesByAddressesRequestMessage& operator=(const GetMempoolEntriesByAddressesRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolEntriesByAddressesRequestMessage& operator=(GetMempoolEntriesByAddressesRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMempoolEntriesByAddressesRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMempoolEntriesByAddressesRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetMempoolEntriesByAddressesRequestMessage*>(
               &_GetMempoolEntriesByAddressesRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(GetMempoolEntriesByAddressesRequestMessage& a, GetMempoolEntriesByAddressesRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolEntriesByAddressesRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMempoolEntriesByAddressesRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMempoolEntriesByAddressesRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMempoolEntriesByAddressesRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMempoolEntriesByAddressesRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMempoolEntriesByAddressesRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolEntriesByAddressesRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetMempoolEntriesByAddressesRequestMessage";
  }
  protected:
  explicit GetMempoolEntriesByAddressesRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
    kIncludeOrphanPoolFieldNumber = 2,
    kFilterTransactionPoolFieldNumber = 3,
  };
  // repeated string addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // bool includeOrphanPool = 2;
  void clear_includeorphanpool();
  bool includeorphanpool() const;
  void set_includeorphanpool(bool value);
  private:
  bool _internal_includeorphanpool() const;
  void _internal_set_includeorphanpool(bool value);
  public:

  // bool filterTransactionPool = 3;
  void clear_filtertransactionpool();
  bool filtertransactionpool() const;
  void set_filtertransactionpool(bool value);
  private:
  bool _internal_filtertransactionpool() const;
  void _internal_set_filtertransactionpool(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetMempoolEntriesByAddressesRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  bool includeorphanpool_;
  bool filtertransactionpool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolEntriesByAddressesResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetMempoolEntriesByAddressesResponseMessage) */ {
 public:
  inline GetMempoolEntriesByAddressesResponseMessage() : GetMempoolEntriesByAddressesResponseMessage(nullptr) {}
  ~GetMempoolEntriesByAddressesResponseMessage() override;
  explicit constexpr GetMempoolEntriesByAddressesResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMempoolEntriesByAddressesResponseMessage(const GetMempoolEntriesByAddressesResponseMessage& from);
  GetMempoolEntriesByAddressesResponseMessage(GetMempoolEntriesByAddressesResponseMessage&& from) noexcept
    : GetMempoolEntriesByAddressesResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetMempoolEntriesByAddressesResponseMessage& operator=(const GetMempoolEntriesByAddressesResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolEntriesByAddressesResponseMessage& operator=(GetMempoolEntriesByAddressesResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMempoolEntriesByAddressesResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMempoolEntriesByAddressesResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetMempoolEntriesByAddressesResponseMessage*>(
               &_GetMempoolEntriesByAddressesResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(GetMempoolEntriesByAddressesResponseMessage& a, GetMempoolEntriesByAddressesResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolEntriesByAddressesResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMempoolEntriesByAddressesResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMempoolEntriesByAddressesResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMempoolEntriesByAddressesResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMempoolEntriesByAddressesResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMempoolEntriesByAddressesResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolEntriesByAddressesResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetMempoolEntriesByAddressesResponseMessage";
  }
  protected:
  explicit GetMempoolEntriesByAddressesResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kErrorFieldNumber = 1000,
  };
  // repeated .protowire.MempoolEntryByAddress entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::protowire::MempoolEntryByAddress* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntryByAddress >*
      mutable_entries();
  private:
  const ::protowire::MempoolEntryByAddress& _internal_entries(int index) const;
  ::protowire::MempoolEntryByAddress* _internal_add_entries();
  public:
  const ::protowire::MempoolEntryByAddress& entries(int index) const;
  ::protowire::MempoolEntryByAddress* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntryByAddress >&
      entries() const;

  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:protowire.GetMempoolEntriesByAddressesResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntryByAddress > entries_;
  ::protowire::RPCError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetCoinSupplyRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protowire.GetCoinSupplyRequestMessage) */ {
 public:
  inline GetCoinSupplyRequestMessage() : GetCoinSupplyRequestMessage(nullptr) {}
  explicit constexpr GetCoinSupplyRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCoinSupplyRequestMessage(const GetCoinSupplyRequestMessage& from);
  GetCoinSupplyRequestMessage(GetCoinSupplyRequestMessage&& from) noexcept
    : GetCoinSupplyRequestMessage() {
    *this = ::std::move(from);
  }

  inline GetCoinSupplyRequestMessage& operator=(const GetCoinSupplyRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCoinSupplyRequestMessage& operator=(GetCoinSupplyRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCoinSupplyRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCoinSupplyRequestMessage* internal_default_instance() {
    return reinterpret_cast<const GetCoinSupplyRequestMessage*>(
               &_GetCoinSupplyRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(GetCoinSupplyRequestMessage& a, GetCoinSupplyRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCoinSupplyRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCoinSupplyRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCoinSupplyRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCoinSupplyRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetCoinSupplyRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetCoinSupplyRequestMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetCoinSupplyRequestMessage";
  }
  protected:
  explicit GetCoinSupplyRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protowire.GetCoinSupplyRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetCoinSupplyResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.GetCoinSupplyResponseMessage) */ {
 public:
  inline GetCoinSupplyResponseMessage() : GetCoinSupplyResponseMessage(nullptr) {}
  ~GetCoinSupplyResponseMessage() override;
  explicit constexpr GetCoinSupplyResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCoinSupplyResponseMessage(const GetCoinSupplyResponseMessage& from);
  GetCoinSupplyResponseMessage(GetCoinSupplyResponseMessage&& from) noexcept
    : GetCoinSupplyResponseMessage() {
    *this = ::std::move(from);
  }

  inline GetCoinSupplyResponseMessage& operator=(const GetCoinSupplyResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCoinSupplyResponseMessage& operator=(GetCoinSupplyResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCoinSupplyResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCoinSupplyResponseMessage* internal_default_instance() {
    return reinterpret_cast<const GetCoinSupplyResponseMessage*>(
               &_GetCoinSupplyResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(GetCoinSupplyResponseMessage& a, GetCoinSupplyResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCoinSupplyResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCoinSupplyResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCoinSupplyResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCoinSupplyResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCoinSupplyResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCoinSupplyResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCoinSupplyResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.GetCoinSupplyResponseMessage";
  }
  protected:
  explicit GetCoinSupplyResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1000,
    kMaxSompiFieldNumber = 1,
    kCirculatingSompiFieldNumber = 2,
  };
  // .protowire.RPCError error = 1000;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::protowire::RPCError& error() const;
  PROTOBUF_NODISCARD ::protowire::RPCError* release_error();
  ::protowire::RPCError* mutable_error();
  void set_allocated_error(::protowire::RPCError* error);
  private:
  const ::protowire::RPCError& _internal_error() const;
  ::protowire::RPCError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::protowire::RPCError* error);
  ::protowire::RPCError* unsafe_arena_release_error();

  // uint64 maxSompi = 1;
  void clear_maxsompi();
  uint64_t maxsompi() const;
  void set_maxsompi(uint64_t value);
  private:
  uint64_t _internal_maxsompi() const;
  void _internal_set_maxsompi(uint64_t value);
  public:

  // uint64 circulatingSompi = 2;
  void clear_circulatingsompi();
  uint64_t circulatingsompi() const;
  void set_circulatingsompi(uint64_t value);
  private:
  uint64_t _internal_circulatingsompi() const;
  void _internal_set_circulatingsompi(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protowire.GetCoinSupplyResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protowire::RPCError* error_;
  uint64_t maxsompi_;
  uint64_t circulatingsompi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPCError

// string message = 1;
inline void RPCError::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& RPCError::message() const {
  // @@protoc_insertion_point(field_get:protowire.RPCError.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RPCError::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RPCError.message)
}
inline std::string* RPCError::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:protowire.RPCError.message)
  return _s;
}
inline const std::string& RPCError::_internal_message() const {
  return message_.Get();
}
inline void RPCError::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RPCError::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RPCError::release_message() {
  // @@protoc_insertion_point(field_release:protowire.RPCError.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RPCError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RPCError.message)
}

// -------------------------------------------------------------------

// RpcBlock

// .protowire.RpcBlockHeader header = 1;
inline bool RpcBlock::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RpcBlock::has_header() const {
  return _internal_has_header();
}
inline void RpcBlock::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protowire::RpcBlockHeader& RpcBlock::_internal_header() const {
  const ::protowire::RpcBlockHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcBlockHeader&>(
      ::protowire::_RpcBlockHeader_default_instance_);
}
inline const ::protowire::RpcBlockHeader& RpcBlock::header() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlock.header)
  return _internal_header();
}
inline void RpcBlock::unsafe_arena_set_allocated_header(
    ::protowire::RpcBlockHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RpcBlock.header)
}
inline ::protowire::RpcBlockHeader* RpcBlock::release_header() {
  
  ::protowire::RpcBlockHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcBlockHeader* RpcBlock::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:protowire.RpcBlock.header)
  
  ::protowire::RpcBlockHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protowire::RpcBlockHeader* RpcBlock::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcBlockHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::protowire::RpcBlockHeader* RpcBlock::mutable_header() {
  ::protowire::RpcBlockHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlock.header)
  return _msg;
}
inline void RpcBlock::set_allocated_header(::protowire::RpcBlockHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcBlockHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcBlock.header)
}

// repeated .protowire.RpcTransaction transactions = 2;
inline int RpcBlock::_internal_transactions_size() const {
  return transactions_.size();
}
inline int RpcBlock::transactions_size() const {
  return _internal_transactions_size();
}
inline void RpcBlock::clear_transactions() {
  transactions_.Clear();
}
inline ::protowire::RpcTransaction* RpcBlock::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlock.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransaction >*
RpcBlock::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:protowire.RpcBlock.transactions)
  return &transactions_;
}
inline const ::protowire::RpcTransaction& RpcBlock::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::protowire::RpcTransaction& RpcBlock::transactions(int index) const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlock.transactions)
  return _internal_transactions(index);
}
inline ::protowire::RpcTransaction* RpcBlock::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::protowire::RpcTransaction* RpcBlock::add_transactions() {
  ::protowire::RpcTransaction* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:protowire.RpcBlock.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransaction >&
RpcBlock::transactions() const {
  // @@protoc_insertion_point(field_list:protowire.RpcBlock.transactions)
  return transactions_;
}

// .protowire.RpcBlockVerboseData verboseData = 3;
inline bool RpcBlock::_internal_has_verbosedata() const {
  return this != internal_default_instance() && verbosedata_ != nullptr;
}
inline bool RpcBlock::has_verbosedata() const {
  return _internal_has_verbosedata();
}
inline void RpcBlock::clear_verbosedata() {
  if (GetArenaForAllocation() == nullptr && verbosedata_ != nullptr) {
    delete verbosedata_;
  }
  verbosedata_ = nullptr;
}
inline const ::protowire::RpcBlockVerboseData& RpcBlock::_internal_verbosedata() const {
  const ::protowire::RpcBlockVerboseData* p = verbosedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcBlockVerboseData&>(
      ::protowire::_RpcBlockVerboseData_default_instance_);
}
inline const ::protowire::RpcBlockVerboseData& RpcBlock::verbosedata() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlock.verboseData)
  return _internal_verbosedata();
}
inline void RpcBlock::unsafe_arena_set_allocated_verbosedata(
    ::protowire::RpcBlockVerboseData* verbosedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verbosedata_);
  }
  verbosedata_ = verbosedata;
  if (verbosedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RpcBlock.verboseData)
}
inline ::protowire::RpcBlockVerboseData* RpcBlock::release_verbosedata() {
  
  ::protowire::RpcBlockVerboseData* temp = verbosedata_;
  verbosedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcBlockVerboseData* RpcBlock::unsafe_arena_release_verbosedata() {
  // @@protoc_insertion_point(field_release:protowire.RpcBlock.verboseData)
  
  ::protowire::RpcBlockVerboseData* temp = verbosedata_;
  verbosedata_ = nullptr;
  return temp;
}
inline ::protowire::RpcBlockVerboseData* RpcBlock::_internal_mutable_verbosedata() {
  
  if (verbosedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcBlockVerboseData>(GetArenaForAllocation());
    verbosedata_ = p;
  }
  return verbosedata_;
}
inline ::protowire::RpcBlockVerboseData* RpcBlock::mutable_verbosedata() {
  ::protowire::RpcBlockVerboseData* _msg = _internal_mutable_verbosedata();
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlock.verboseData)
  return _msg;
}
inline void RpcBlock::set_allocated_verbosedata(::protowire::RpcBlockVerboseData* verbosedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete verbosedata_;
  }
  if (verbosedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcBlockVerboseData>::GetOwningArena(verbosedata);
    if (message_arena != submessage_arena) {
      verbosedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verbosedata, submessage_arena);
    }
    
  } else {
    
  }
  verbosedata_ = verbosedata;
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcBlock.verboseData)
}

// -------------------------------------------------------------------

// RpcBlockHeader

// uint32 version = 1;
inline void RpcBlockHeader::clear_version() {
  version_ = 0u;
}
inline uint32_t RpcBlockHeader::_internal_version() const {
  return version_;
}
inline uint32_t RpcBlockHeader::version() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockHeader.version)
  return _internal_version();
}
inline void RpcBlockHeader::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void RpcBlockHeader::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockHeader.version)
}

// repeated .protowire.RpcBlockLevelParents parents = 12;
inline int RpcBlockHeader::_internal_parents_size() const {
  return parents_.size();
}
inline int RpcBlockHeader::parents_size() const {
  return _internal_parents_size();
}
inline void RpcBlockHeader::clear_parents() {
  parents_.Clear();
}
inline ::protowire::RpcBlockLevelParents* RpcBlockHeader::mutable_parents(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlockHeader.parents)
  return parents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcBlockLevelParents >*
RpcBlockHeader::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:protowire.RpcBlockHeader.parents)
  return &parents_;
}
inline const ::protowire::RpcBlockLevelParents& RpcBlockHeader::_internal_parents(int index) const {
  return parents_.Get(index);
}
inline const ::protowire::RpcBlockLevelParents& RpcBlockHeader::parents(int index) const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockHeader.parents)
  return _internal_parents(index);
}
inline ::protowire::RpcBlockLevelParents* RpcBlockHeader::_internal_add_parents() {
  return parents_.Add();
}
inline ::protowire::RpcBlockLevelParents* RpcBlockHeader::add_parents() {
  ::protowire::RpcBlockLevelParents* _add = _internal_add_parents();
  // @@protoc_insertion_point(field_add:protowire.RpcBlockHeader.parents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcBlockLevelParents >&
RpcBlockHeader::parents() const {
  // @@protoc_insertion_point(field_list:protowire.RpcBlockHeader.parents)
  return parents_;
}

// string hashMerkleRoot = 3;
inline void RpcBlockHeader::clear_hashmerkleroot() {
  hashmerkleroot_.ClearToEmpty();
}
inline const std::string& RpcBlockHeader::hashmerkleroot() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockHeader.hashMerkleRoot)
  return _internal_hashmerkleroot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcBlockHeader::set_hashmerkleroot(ArgT0&& arg0, ArgT... args) {
 
 hashmerkleroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcBlockHeader.hashMerkleRoot)
}
inline std::string* RpcBlockHeader::mutable_hashmerkleroot() {
  std::string* _s = _internal_mutable_hashmerkleroot();
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlockHeader.hashMerkleRoot)
  return _s;
}
inline const std::string& RpcBlockHeader::_internal_hashmerkleroot() const {
  return hashmerkleroot_.Get();
}
inline void RpcBlockHeader::_internal_set_hashmerkleroot(const std::string& value) {
  
  hashmerkleroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcBlockHeader::_internal_mutable_hashmerkleroot() {
  
  return hashmerkleroot_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcBlockHeader::release_hashmerkleroot() {
  // @@protoc_insertion_point(field_release:protowire.RpcBlockHeader.hashMerkleRoot)
  return hashmerkleroot_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcBlockHeader::set_allocated_hashmerkleroot(std::string* hashmerkleroot) {
  if (hashmerkleroot != nullptr) {
    
  } else {
    
  }
  hashmerkleroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hashmerkleroot,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hashmerkleroot_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hashmerkleroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcBlockHeader.hashMerkleRoot)
}

// string acceptedIdMerkleRoot = 4;
inline void RpcBlockHeader::clear_acceptedidmerkleroot() {
  acceptedidmerkleroot_.ClearToEmpty();
}
inline const std::string& RpcBlockHeader::acceptedidmerkleroot() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockHeader.acceptedIdMerkleRoot)
  return _internal_acceptedidmerkleroot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcBlockHeader::set_acceptedidmerkleroot(ArgT0&& arg0, ArgT... args) {
 
 acceptedidmerkleroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcBlockHeader.acceptedIdMerkleRoot)
}
inline std::string* RpcBlockHeader::mutable_acceptedidmerkleroot() {
  std::string* _s = _internal_mutable_acceptedidmerkleroot();
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlockHeader.acceptedIdMerkleRoot)
  return _s;
}
inline const std::string& RpcBlockHeader::_internal_acceptedidmerkleroot() const {
  return acceptedidmerkleroot_.Get();
}
inline void RpcBlockHeader::_internal_set_acceptedidmerkleroot(const std::string& value) {
  
  acceptedidmerkleroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcBlockHeader::_internal_mutable_acceptedidmerkleroot() {
  
  return acceptedidmerkleroot_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcBlockHeader::release_acceptedidmerkleroot() {
  // @@protoc_insertion_point(field_release:protowire.RpcBlockHeader.acceptedIdMerkleRoot)
  return acceptedidmerkleroot_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcBlockHeader::set_allocated_acceptedidmerkleroot(std::string* acceptedidmerkleroot) {
  if (acceptedidmerkleroot != nullptr) {
    
  } else {
    
  }
  acceptedidmerkleroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acceptedidmerkleroot,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (acceptedidmerkleroot_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    acceptedidmerkleroot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcBlockHeader.acceptedIdMerkleRoot)
}

// string utxoCommitment = 5;
inline void RpcBlockHeader::clear_utxocommitment() {
  utxocommitment_.ClearToEmpty();
}
inline const std::string& RpcBlockHeader::utxocommitment() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockHeader.utxoCommitment)
  return _internal_utxocommitment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcBlockHeader::set_utxocommitment(ArgT0&& arg0, ArgT... args) {
 
 utxocommitment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcBlockHeader.utxoCommitment)
}
inline std::string* RpcBlockHeader::mutable_utxocommitment() {
  std::string* _s = _internal_mutable_utxocommitment();
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlockHeader.utxoCommitment)
  return _s;
}
inline const std::string& RpcBlockHeader::_internal_utxocommitment() const {
  return utxocommitment_.Get();
}
inline void RpcBlockHeader::_internal_set_utxocommitment(const std::string& value) {
  
  utxocommitment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcBlockHeader::_internal_mutable_utxocommitment() {
  
  return utxocommitment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcBlockHeader::release_utxocommitment() {
  // @@protoc_insertion_point(field_release:protowire.RpcBlockHeader.utxoCommitment)
  return utxocommitment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcBlockHeader::set_allocated_utxocommitment(std::string* utxocommitment) {
  if (utxocommitment != nullptr) {
    
  } else {
    
  }
  utxocommitment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), utxocommitment,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (utxocommitment_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    utxocommitment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcBlockHeader.utxoCommitment)
}

// int64 timestamp = 6;
inline void RpcBlockHeader::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t RpcBlockHeader::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t RpcBlockHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockHeader.timestamp)
  return _internal_timestamp();
}
inline void RpcBlockHeader::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void RpcBlockHeader::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockHeader.timestamp)
}

// uint32 bits = 7;
inline void RpcBlockHeader::clear_bits() {
  bits_ = 0u;
}
inline uint32_t RpcBlockHeader::_internal_bits() const {
  return bits_;
}
inline uint32_t RpcBlockHeader::bits() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockHeader.bits)
  return _internal_bits();
}
inline void RpcBlockHeader::_internal_set_bits(uint32_t value) {
  
  bits_ = value;
}
inline void RpcBlockHeader::set_bits(uint32_t value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockHeader.bits)
}

// uint64 nonce = 8;
inline void RpcBlockHeader::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline uint64_t RpcBlockHeader::_internal_nonce() const {
  return nonce_;
}
inline uint64_t RpcBlockHeader::nonce() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockHeader.nonce)
  return _internal_nonce();
}
inline void RpcBlockHeader::_internal_set_nonce(uint64_t value) {
  
  nonce_ = value;
}
inline void RpcBlockHeader::set_nonce(uint64_t value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockHeader.nonce)
}

// uint64 daaScore = 9;
inline void RpcBlockHeader::clear_daascore() {
  daascore_ = uint64_t{0u};
}
inline uint64_t RpcBlockHeader::_internal_daascore() const {
  return daascore_;
}
inline uint64_t RpcBlockHeader::daascore() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockHeader.daaScore)
  return _internal_daascore();
}
inline void RpcBlockHeader::_internal_set_daascore(uint64_t value) {
  
  daascore_ = value;
}
inline void RpcBlockHeader::set_daascore(uint64_t value) {
  _internal_set_daascore(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockHeader.daaScore)
}

// string blueWork = 10;
inline void RpcBlockHeader::clear_bluework() {
  bluework_.ClearToEmpty();
}
inline const std::string& RpcBlockHeader::bluework() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockHeader.blueWork)
  return _internal_bluework();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcBlockHeader::set_bluework(ArgT0&& arg0, ArgT... args) {
 
 bluework_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcBlockHeader.blueWork)
}
inline std::string* RpcBlockHeader::mutable_bluework() {
  std::string* _s = _internal_mutable_bluework();
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlockHeader.blueWork)
  return _s;
}
inline const std::string& RpcBlockHeader::_internal_bluework() const {
  return bluework_.Get();
}
inline void RpcBlockHeader::_internal_set_bluework(const std::string& value) {
  
  bluework_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcBlockHeader::_internal_mutable_bluework() {
  
  return bluework_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcBlockHeader::release_bluework() {
  // @@protoc_insertion_point(field_release:protowire.RpcBlockHeader.blueWork)
  return bluework_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcBlockHeader::set_allocated_bluework(std::string* bluework) {
  if (bluework != nullptr) {
    
  } else {
    
  }
  bluework_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bluework,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bluework_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bluework_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcBlockHeader.blueWork)
}

// string pruningPoint = 14;
inline void RpcBlockHeader::clear_pruningpoint() {
  pruningpoint_.ClearToEmpty();
}
inline const std::string& RpcBlockHeader::pruningpoint() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockHeader.pruningPoint)
  return _internal_pruningpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcBlockHeader::set_pruningpoint(ArgT0&& arg0, ArgT... args) {
 
 pruningpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcBlockHeader.pruningPoint)
}
inline std::string* RpcBlockHeader::mutable_pruningpoint() {
  std::string* _s = _internal_mutable_pruningpoint();
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlockHeader.pruningPoint)
  return _s;
}
inline const std::string& RpcBlockHeader::_internal_pruningpoint() const {
  return pruningpoint_.Get();
}
inline void RpcBlockHeader::_internal_set_pruningpoint(const std::string& value) {
  
  pruningpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcBlockHeader::_internal_mutable_pruningpoint() {
  
  return pruningpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcBlockHeader::release_pruningpoint() {
  // @@protoc_insertion_point(field_release:protowire.RpcBlockHeader.pruningPoint)
  return pruningpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcBlockHeader::set_allocated_pruningpoint(std::string* pruningpoint) {
  if (pruningpoint != nullptr) {
    
  } else {
    
  }
  pruningpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pruningpoint,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pruningpoint_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pruningpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcBlockHeader.pruningPoint)
}

// uint64 blueScore = 13;
inline void RpcBlockHeader::clear_bluescore() {
  bluescore_ = uint64_t{0u};
}
inline uint64_t RpcBlockHeader::_internal_bluescore() const {
  return bluescore_;
}
inline uint64_t RpcBlockHeader::bluescore() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockHeader.blueScore)
  return _internal_bluescore();
}
inline void RpcBlockHeader::_internal_set_bluescore(uint64_t value) {
  
  bluescore_ = value;
}
inline void RpcBlockHeader::set_bluescore(uint64_t value) {
  _internal_set_bluescore(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockHeader.blueScore)
}

// -------------------------------------------------------------------

// RpcBlockLevelParents

// repeated string parentHashes = 1;
inline int RpcBlockLevelParents::_internal_parenthashes_size() const {
  return parenthashes_.size();
}
inline int RpcBlockLevelParents::parenthashes_size() const {
  return _internal_parenthashes_size();
}
inline void RpcBlockLevelParents::clear_parenthashes() {
  parenthashes_.Clear();
}
inline std::string* RpcBlockLevelParents::add_parenthashes() {
  std::string* _s = _internal_add_parenthashes();
  // @@protoc_insertion_point(field_add_mutable:protowire.RpcBlockLevelParents.parentHashes)
  return _s;
}
inline const std::string& RpcBlockLevelParents::_internal_parenthashes(int index) const {
  return parenthashes_.Get(index);
}
inline const std::string& RpcBlockLevelParents::parenthashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockLevelParents.parentHashes)
  return _internal_parenthashes(index);
}
inline std::string* RpcBlockLevelParents::mutable_parenthashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlockLevelParents.parentHashes)
  return parenthashes_.Mutable(index);
}
inline void RpcBlockLevelParents::set_parenthashes(int index, const std::string& value) {
  parenthashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockLevelParents.parentHashes)
}
inline void RpcBlockLevelParents::set_parenthashes(int index, std::string&& value) {
  parenthashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.RpcBlockLevelParents.parentHashes)
}
inline void RpcBlockLevelParents::set_parenthashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parenthashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.RpcBlockLevelParents.parentHashes)
}
inline void RpcBlockLevelParents::set_parenthashes(int index, const char* value, size_t size) {
  parenthashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.RpcBlockLevelParents.parentHashes)
}
inline std::string* RpcBlockLevelParents::_internal_add_parenthashes() {
  return parenthashes_.Add();
}
inline void RpcBlockLevelParents::add_parenthashes(const std::string& value) {
  parenthashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.RpcBlockLevelParents.parentHashes)
}
inline void RpcBlockLevelParents::add_parenthashes(std::string&& value) {
  parenthashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.RpcBlockLevelParents.parentHashes)
}
inline void RpcBlockLevelParents::add_parenthashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parenthashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.RpcBlockLevelParents.parentHashes)
}
inline void RpcBlockLevelParents::add_parenthashes(const char* value, size_t size) {
  parenthashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.RpcBlockLevelParents.parentHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RpcBlockLevelParents::parenthashes() const {
  // @@protoc_insertion_point(field_list:protowire.RpcBlockLevelParents.parentHashes)
  return parenthashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RpcBlockLevelParents::mutable_parenthashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.RpcBlockLevelParents.parentHashes)
  return &parenthashes_;
}

// -------------------------------------------------------------------

// RpcBlockVerboseData

// string hash = 1;
inline void RpcBlockVerboseData::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& RpcBlockVerboseData::hash() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockVerboseData.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcBlockVerboseData::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.hash)
}
inline std::string* RpcBlockVerboseData::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlockVerboseData.hash)
  return _s;
}
inline const std::string& RpcBlockVerboseData::_internal_hash() const {
  return hash_.Get();
}
inline void RpcBlockVerboseData::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcBlockVerboseData::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcBlockVerboseData::release_hash() {
  // @@protoc_insertion_point(field_release:protowire.RpcBlockVerboseData.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcBlockVerboseData::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcBlockVerboseData.hash)
}

// double difficulty = 11;
inline void RpcBlockVerboseData::clear_difficulty() {
  difficulty_ = 0;
}
inline double RpcBlockVerboseData::_internal_difficulty() const {
  return difficulty_;
}
inline double RpcBlockVerboseData::difficulty() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockVerboseData.difficulty)
  return _internal_difficulty();
}
inline void RpcBlockVerboseData::_internal_set_difficulty(double value) {
  
  difficulty_ = value;
}
inline void RpcBlockVerboseData::set_difficulty(double value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.difficulty)
}

// string selectedParentHash = 13;
inline void RpcBlockVerboseData::clear_selectedparenthash() {
  selectedparenthash_.ClearToEmpty();
}
inline const std::string& RpcBlockVerboseData::selectedparenthash() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockVerboseData.selectedParentHash)
  return _internal_selectedparenthash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcBlockVerboseData::set_selectedparenthash(ArgT0&& arg0, ArgT... args) {
 
 selectedparenthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.selectedParentHash)
}
inline std::string* RpcBlockVerboseData::mutable_selectedparenthash() {
  std::string* _s = _internal_mutable_selectedparenthash();
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlockVerboseData.selectedParentHash)
  return _s;
}
inline const std::string& RpcBlockVerboseData::_internal_selectedparenthash() const {
  return selectedparenthash_.Get();
}
inline void RpcBlockVerboseData::_internal_set_selectedparenthash(const std::string& value) {
  
  selectedparenthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcBlockVerboseData::_internal_mutable_selectedparenthash() {
  
  return selectedparenthash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcBlockVerboseData::release_selectedparenthash() {
  // @@protoc_insertion_point(field_release:protowire.RpcBlockVerboseData.selectedParentHash)
  return selectedparenthash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcBlockVerboseData::set_allocated_selectedparenthash(std::string* selectedparenthash) {
  if (selectedparenthash != nullptr) {
    
  } else {
    
  }
  selectedparenthash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selectedparenthash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (selectedparenthash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    selectedparenthash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcBlockVerboseData.selectedParentHash)
}

// repeated string transactionIds = 14;
inline int RpcBlockVerboseData::_internal_transactionids_size() const {
  return transactionids_.size();
}
inline int RpcBlockVerboseData::transactionids_size() const {
  return _internal_transactionids_size();
}
inline void RpcBlockVerboseData::clear_transactionids() {
  transactionids_.Clear();
}
inline std::string* RpcBlockVerboseData::add_transactionids() {
  std::string* _s = _internal_add_transactionids();
  // @@protoc_insertion_point(field_add_mutable:protowire.RpcBlockVerboseData.transactionIds)
  return _s;
}
inline const std::string& RpcBlockVerboseData::_internal_transactionids(int index) const {
  return transactionids_.Get(index);
}
inline const std::string& RpcBlockVerboseData::transactionids(int index) const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockVerboseData.transactionIds)
  return _internal_transactionids(index);
}
inline std::string* RpcBlockVerboseData::mutable_transactionids(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlockVerboseData.transactionIds)
  return transactionids_.Mutable(index);
}
inline void RpcBlockVerboseData::set_transactionids(int index, const std::string& value) {
  transactionids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.transactionIds)
}
inline void RpcBlockVerboseData::set_transactionids(int index, std::string&& value) {
  transactionids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.transactionIds)
}
inline void RpcBlockVerboseData::set_transactionids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transactionids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.RpcBlockVerboseData.transactionIds)
}
inline void RpcBlockVerboseData::set_transactionids(int index, const char* value, size_t size) {
  transactionids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.RpcBlockVerboseData.transactionIds)
}
inline std::string* RpcBlockVerboseData::_internal_add_transactionids() {
  return transactionids_.Add();
}
inline void RpcBlockVerboseData::add_transactionids(const std::string& value) {
  transactionids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.RpcBlockVerboseData.transactionIds)
}
inline void RpcBlockVerboseData::add_transactionids(std::string&& value) {
  transactionids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.RpcBlockVerboseData.transactionIds)
}
inline void RpcBlockVerboseData::add_transactionids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transactionids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.RpcBlockVerboseData.transactionIds)
}
inline void RpcBlockVerboseData::add_transactionids(const char* value, size_t size) {
  transactionids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.RpcBlockVerboseData.transactionIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RpcBlockVerboseData::transactionids() const {
  // @@protoc_insertion_point(field_list:protowire.RpcBlockVerboseData.transactionIds)
  return transactionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RpcBlockVerboseData::mutable_transactionids() {
  // @@protoc_insertion_point(field_mutable_list:protowire.RpcBlockVerboseData.transactionIds)
  return &transactionids_;
}

// bool isHeaderOnly = 15;
inline void RpcBlockVerboseData::clear_isheaderonly() {
  isheaderonly_ = false;
}
inline bool RpcBlockVerboseData::_internal_isheaderonly() const {
  return isheaderonly_;
}
inline bool RpcBlockVerboseData::isheaderonly() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockVerboseData.isHeaderOnly)
  return _internal_isheaderonly();
}
inline void RpcBlockVerboseData::_internal_set_isheaderonly(bool value) {
  
  isheaderonly_ = value;
}
inline void RpcBlockVerboseData::set_isheaderonly(bool value) {
  _internal_set_isheaderonly(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.isHeaderOnly)
}

// uint64 blueScore = 16;
inline void RpcBlockVerboseData::clear_bluescore() {
  bluescore_ = uint64_t{0u};
}
inline uint64_t RpcBlockVerboseData::_internal_bluescore() const {
  return bluescore_;
}
inline uint64_t RpcBlockVerboseData::bluescore() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockVerboseData.blueScore)
  return _internal_bluescore();
}
inline void RpcBlockVerboseData::_internal_set_bluescore(uint64_t value) {
  
  bluescore_ = value;
}
inline void RpcBlockVerboseData::set_bluescore(uint64_t value) {
  _internal_set_bluescore(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.blueScore)
}

// repeated string childrenHashes = 17;
inline int RpcBlockVerboseData::_internal_childrenhashes_size() const {
  return childrenhashes_.size();
}
inline int RpcBlockVerboseData::childrenhashes_size() const {
  return _internal_childrenhashes_size();
}
inline void RpcBlockVerboseData::clear_childrenhashes() {
  childrenhashes_.Clear();
}
inline std::string* RpcBlockVerboseData::add_childrenhashes() {
  std::string* _s = _internal_add_childrenhashes();
  // @@protoc_insertion_point(field_add_mutable:protowire.RpcBlockVerboseData.childrenHashes)
  return _s;
}
inline const std::string& RpcBlockVerboseData::_internal_childrenhashes(int index) const {
  return childrenhashes_.Get(index);
}
inline const std::string& RpcBlockVerboseData::childrenhashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockVerboseData.childrenHashes)
  return _internal_childrenhashes(index);
}
inline std::string* RpcBlockVerboseData::mutable_childrenhashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlockVerboseData.childrenHashes)
  return childrenhashes_.Mutable(index);
}
inline void RpcBlockVerboseData::set_childrenhashes(int index, const std::string& value) {
  childrenhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.childrenHashes)
}
inline void RpcBlockVerboseData::set_childrenhashes(int index, std::string&& value) {
  childrenhashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.childrenHashes)
}
inline void RpcBlockVerboseData::set_childrenhashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  childrenhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.RpcBlockVerboseData.childrenHashes)
}
inline void RpcBlockVerboseData::set_childrenhashes(int index, const char* value, size_t size) {
  childrenhashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.RpcBlockVerboseData.childrenHashes)
}
inline std::string* RpcBlockVerboseData::_internal_add_childrenhashes() {
  return childrenhashes_.Add();
}
inline void RpcBlockVerboseData::add_childrenhashes(const std::string& value) {
  childrenhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.RpcBlockVerboseData.childrenHashes)
}
inline void RpcBlockVerboseData::add_childrenhashes(std::string&& value) {
  childrenhashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.RpcBlockVerboseData.childrenHashes)
}
inline void RpcBlockVerboseData::add_childrenhashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  childrenhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.RpcBlockVerboseData.childrenHashes)
}
inline void RpcBlockVerboseData::add_childrenhashes(const char* value, size_t size) {
  childrenhashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.RpcBlockVerboseData.childrenHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RpcBlockVerboseData::childrenhashes() const {
  // @@protoc_insertion_point(field_list:protowire.RpcBlockVerboseData.childrenHashes)
  return childrenhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RpcBlockVerboseData::mutable_childrenhashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.RpcBlockVerboseData.childrenHashes)
  return &childrenhashes_;
}

// repeated string mergeSetBluesHashes = 18;
inline int RpcBlockVerboseData::_internal_mergesetblueshashes_size() const {
  return mergesetblueshashes_.size();
}
inline int RpcBlockVerboseData::mergesetblueshashes_size() const {
  return _internal_mergesetblueshashes_size();
}
inline void RpcBlockVerboseData::clear_mergesetblueshashes() {
  mergesetblueshashes_.Clear();
}
inline std::string* RpcBlockVerboseData::add_mergesetblueshashes() {
  std::string* _s = _internal_add_mergesetblueshashes();
  // @@protoc_insertion_point(field_add_mutable:protowire.RpcBlockVerboseData.mergeSetBluesHashes)
  return _s;
}
inline const std::string& RpcBlockVerboseData::_internal_mergesetblueshashes(int index) const {
  return mergesetblueshashes_.Get(index);
}
inline const std::string& RpcBlockVerboseData::mergesetblueshashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockVerboseData.mergeSetBluesHashes)
  return _internal_mergesetblueshashes(index);
}
inline std::string* RpcBlockVerboseData::mutable_mergesetblueshashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlockVerboseData.mergeSetBluesHashes)
  return mergesetblueshashes_.Mutable(index);
}
inline void RpcBlockVerboseData::set_mergesetblueshashes(int index, const std::string& value) {
  mergesetblueshashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.mergeSetBluesHashes)
}
inline void RpcBlockVerboseData::set_mergesetblueshashes(int index, std::string&& value) {
  mergesetblueshashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.mergeSetBluesHashes)
}
inline void RpcBlockVerboseData::set_mergesetblueshashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mergesetblueshashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.RpcBlockVerboseData.mergeSetBluesHashes)
}
inline void RpcBlockVerboseData::set_mergesetblueshashes(int index, const char* value, size_t size) {
  mergesetblueshashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.RpcBlockVerboseData.mergeSetBluesHashes)
}
inline std::string* RpcBlockVerboseData::_internal_add_mergesetblueshashes() {
  return mergesetblueshashes_.Add();
}
inline void RpcBlockVerboseData::add_mergesetblueshashes(const std::string& value) {
  mergesetblueshashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.RpcBlockVerboseData.mergeSetBluesHashes)
}
inline void RpcBlockVerboseData::add_mergesetblueshashes(std::string&& value) {
  mergesetblueshashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.RpcBlockVerboseData.mergeSetBluesHashes)
}
inline void RpcBlockVerboseData::add_mergesetblueshashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mergesetblueshashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.RpcBlockVerboseData.mergeSetBluesHashes)
}
inline void RpcBlockVerboseData::add_mergesetblueshashes(const char* value, size_t size) {
  mergesetblueshashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.RpcBlockVerboseData.mergeSetBluesHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RpcBlockVerboseData::mergesetblueshashes() const {
  // @@protoc_insertion_point(field_list:protowire.RpcBlockVerboseData.mergeSetBluesHashes)
  return mergesetblueshashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RpcBlockVerboseData::mutable_mergesetblueshashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.RpcBlockVerboseData.mergeSetBluesHashes)
  return &mergesetblueshashes_;
}

// repeated string mergeSetRedsHashes = 19;
inline int RpcBlockVerboseData::_internal_mergesetredshashes_size() const {
  return mergesetredshashes_.size();
}
inline int RpcBlockVerboseData::mergesetredshashes_size() const {
  return _internal_mergesetredshashes_size();
}
inline void RpcBlockVerboseData::clear_mergesetredshashes() {
  mergesetredshashes_.Clear();
}
inline std::string* RpcBlockVerboseData::add_mergesetredshashes() {
  std::string* _s = _internal_add_mergesetredshashes();
  // @@protoc_insertion_point(field_add_mutable:protowire.RpcBlockVerboseData.mergeSetRedsHashes)
  return _s;
}
inline const std::string& RpcBlockVerboseData::_internal_mergesetredshashes(int index) const {
  return mergesetredshashes_.Get(index);
}
inline const std::string& RpcBlockVerboseData::mergesetredshashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockVerboseData.mergeSetRedsHashes)
  return _internal_mergesetredshashes(index);
}
inline std::string* RpcBlockVerboseData::mutable_mergesetredshashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.RpcBlockVerboseData.mergeSetRedsHashes)
  return mergesetredshashes_.Mutable(index);
}
inline void RpcBlockVerboseData::set_mergesetredshashes(int index, const std::string& value) {
  mergesetredshashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.mergeSetRedsHashes)
}
inline void RpcBlockVerboseData::set_mergesetredshashes(int index, std::string&& value) {
  mergesetredshashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.mergeSetRedsHashes)
}
inline void RpcBlockVerboseData::set_mergesetredshashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mergesetredshashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.RpcBlockVerboseData.mergeSetRedsHashes)
}
inline void RpcBlockVerboseData::set_mergesetredshashes(int index, const char* value, size_t size) {
  mergesetredshashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.RpcBlockVerboseData.mergeSetRedsHashes)
}
inline std::string* RpcBlockVerboseData::_internal_add_mergesetredshashes() {
  return mergesetredshashes_.Add();
}
inline void RpcBlockVerboseData::add_mergesetredshashes(const std::string& value) {
  mergesetredshashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.RpcBlockVerboseData.mergeSetRedsHashes)
}
inline void RpcBlockVerboseData::add_mergesetredshashes(std::string&& value) {
  mergesetredshashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.RpcBlockVerboseData.mergeSetRedsHashes)
}
inline void RpcBlockVerboseData::add_mergesetredshashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mergesetredshashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.RpcBlockVerboseData.mergeSetRedsHashes)
}
inline void RpcBlockVerboseData::add_mergesetredshashes(const char* value, size_t size) {
  mergesetredshashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.RpcBlockVerboseData.mergeSetRedsHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RpcBlockVerboseData::mergesetredshashes() const {
  // @@protoc_insertion_point(field_list:protowire.RpcBlockVerboseData.mergeSetRedsHashes)
  return mergesetredshashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RpcBlockVerboseData::mutable_mergesetredshashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.RpcBlockVerboseData.mergeSetRedsHashes)
  return &mergesetredshashes_;
}

// bool isChainBlock = 20;
inline void RpcBlockVerboseData::clear_ischainblock() {
  ischainblock_ = false;
}
inline bool RpcBlockVerboseData::_internal_ischainblock() const {
  return ischainblock_;
}
inline bool RpcBlockVerboseData::ischainblock() const {
  // @@protoc_insertion_point(field_get:protowire.RpcBlockVerboseData.isChainBlock)
  return _internal_ischainblock();
}
inline void RpcBlockVerboseData::_internal_set_ischainblock(bool value) {
  
  ischainblock_ = value;
}
inline void RpcBlockVerboseData::set_ischainblock(bool value) {
  _internal_set_ischainblock(value);
  // @@protoc_insertion_point(field_set:protowire.RpcBlockVerboseData.isChainBlock)
}

// -------------------------------------------------------------------

// RpcTransaction

// uint32 version = 1;
inline void RpcTransaction::clear_version() {
  version_ = 0u;
}
inline uint32_t RpcTransaction::_internal_version() const {
  return version_;
}
inline uint32_t RpcTransaction::version() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransaction.version)
  return _internal_version();
}
inline void RpcTransaction::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void RpcTransaction::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:protowire.RpcTransaction.version)
}

// repeated .protowire.RpcTransactionInput inputs = 2;
inline int RpcTransaction::_internal_inputs_size() const {
  return inputs_.size();
}
inline int RpcTransaction::inputs_size() const {
  return _internal_inputs_size();
}
inline void RpcTransaction::clear_inputs() {
  inputs_.Clear();
}
inline ::protowire::RpcTransactionInput* RpcTransaction::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransaction.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransactionInput >*
RpcTransaction::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:protowire.RpcTransaction.inputs)
  return &inputs_;
}
inline const ::protowire::RpcTransactionInput& RpcTransaction::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::protowire::RpcTransactionInput& RpcTransaction::inputs(int index) const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransaction.inputs)
  return _internal_inputs(index);
}
inline ::protowire::RpcTransactionInput* RpcTransaction::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::protowire::RpcTransactionInput* RpcTransaction::add_inputs() {
  ::protowire::RpcTransactionInput* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:protowire.RpcTransaction.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransactionInput >&
RpcTransaction::inputs() const {
  // @@protoc_insertion_point(field_list:protowire.RpcTransaction.inputs)
  return inputs_;
}

// repeated .protowire.RpcTransactionOutput outputs = 3;
inline int RpcTransaction::_internal_outputs_size() const {
  return outputs_.size();
}
inline int RpcTransaction::outputs_size() const {
  return _internal_outputs_size();
}
inline void RpcTransaction::clear_outputs() {
  outputs_.Clear();
}
inline ::protowire::RpcTransactionOutput* RpcTransaction::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransaction.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransactionOutput >*
RpcTransaction::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:protowire.RpcTransaction.outputs)
  return &outputs_;
}
inline const ::protowire::RpcTransactionOutput& RpcTransaction::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::protowire::RpcTransactionOutput& RpcTransaction::outputs(int index) const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransaction.outputs)
  return _internal_outputs(index);
}
inline ::protowire::RpcTransactionOutput* RpcTransaction::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::protowire::RpcTransactionOutput* RpcTransaction::add_outputs() {
  ::protowire::RpcTransactionOutput* _add = _internal_add_outputs();
  // @@protoc_insertion_point(field_add:protowire.RpcTransaction.outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcTransactionOutput >&
RpcTransaction::outputs() const {
  // @@protoc_insertion_point(field_list:protowire.RpcTransaction.outputs)
  return outputs_;
}

// uint64 lockTime = 4;
inline void RpcTransaction::clear_locktime() {
  locktime_ = uint64_t{0u};
}
inline uint64_t RpcTransaction::_internal_locktime() const {
  return locktime_;
}
inline uint64_t RpcTransaction::locktime() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransaction.lockTime)
  return _internal_locktime();
}
inline void RpcTransaction::_internal_set_locktime(uint64_t value) {
  
  locktime_ = value;
}
inline void RpcTransaction::set_locktime(uint64_t value) {
  _internal_set_locktime(value);
  // @@protoc_insertion_point(field_set:protowire.RpcTransaction.lockTime)
}

// string subnetworkId = 5;
inline void RpcTransaction::clear_subnetworkid() {
  subnetworkid_.ClearToEmpty();
}
inline const std::string& RpcTransaction::subnetworkid() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransaction.subnetworkId)
  return _internal_subnetworkid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcTransaction::set_subnetworkid(ArgT0&& arg0, ArgT... args) {
 
 subnetworkid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcTransaction.subnetworkId)
}
inline std::string* RpcTransaction::mutable_subnetworkid() {
  std::string* _s = _internal_mutable_subnetworkid();
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransaction.subnetworkId)
  return _s;
}
inline const std::string& RpcTransaction::_internal_subnetworkid() const {
  return subnetworkid_.Get();
}
inline void RpcTransaction::_internal_set_subnetworkid(const std::string& value) {
  
  subnetworkid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcTransaction::_internal_mutable_subnetworkid() {
  
  return subnetworkid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcTransaction::release_subnetworkid() {
  // @@protoc_insertion_point(field_release:protowire.RpcTransaction.subnetworkId)
  return subnetworkid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcTransaction::set_allocated_subnetworkid(std::string* subnetworkid) {
  if (subnetworkid != nullptr) {
    
  } else {
    
  }
  subnetworkid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subnetworkid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subnetworkid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subnetworkid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcTransaction.subnetworkId)
}

// uint64 gas = 6;
inline void RpcTransaction::clear_gas() {
  gas_ = uint64_t{0u};
}
inline uint64_t RpcTransaction::_internal_gas() const {
  return gas_;
}
inline uint64_t RpcTransaction::gas() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransaction.gas)
  return _internal_gas();
}
inline void RpcTransaction::_internal_set_gas(uint64_t value) {
  
  gas_ = value;
}
inline void RpcTransaction::set_gas(uint64_t value) {
  _internal_set_gas(value);
  // @@protoc_insertion_point(field_set:protowire.RpcTransaction.gas)
}

// string payload = 8;
inline void RpcTransaction::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& RpcTransaction::payload() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransaction.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcTransaction::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcTransaction.payload)
}
inline std::string* RpcTransaction::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransaction.payload)
  return _s;
}
inline const std::string& RpcTransaction::_internal_payload() const {
  return payload_.Get();
}
inline void RpcTransaction::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcTransaction::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcTransaction::release_payload() {
  // @@protoc_insertion_point(field_release:protowire.RpcTransaction.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcTransaction::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcTransaction.payload)
}

// .protowire.RpcTransactionVerboseData verboseData = 9;
inline bool RpcTransaction::_internal_has_verbosedata() const {
  return this != internal_default_instance() && verbosedata_ != nullptr;
}
inline bool RpcTransaction::has_verbosedata() const {
  return _internal_has_verbosedata();
}
inline void RpcTransaction::clear_verbosedata() {
  if (GetArenaForAllocation() == nullptr && verbosedata_ != nullptr) {
    delete verbosedata_;
  }
  verbosedata_ = nullptr;
}
inline const ::protowire::RpcTransactionVerboseData& RpcTransaction::_internal_verbosedata() const {
  const ::protowire::RpcTransactionVerboseData* p = verbosedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcTransactionVerboseData&>(
      ::protowire::_RpcTransactionVerboseData_default_instance_);
}
inline const ::protowire::RpcTransactionVerboseData& RpcTransaction::verbosedata() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransaction.verboseData)
  return _internal_verbosedata();
}
inline void RpcTransaction::unsafe_arena_set_allocated_verbosedata(
    ::protowire::RpcTransactionVerboseData* verbosedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verbosedata_);
  }
  verbosedata_ = verbosedata;
  if (verbosedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RpcTransaction.verboseData)
}
inline ::protowire::RpcTransactionVerboseData* RpcTransaction::release_verbosedata() {
  
  ::protowire::RpcTransactionVerboseData* temp = verbosedata_;
  verbosedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcTransactionVerboseData* RpcTransaction::unsafe_arena_release_verbosedata() {
  // @@protoc_insertion_point(field_release:protowire.RpcTransaction.verboseData)
  
  ::protowire::RpcTransactionVerboseData* temp = verbosedata_;
  verbosedata_ = nullptr;
  return temp;
}
inline ::protowire::RpcTransactionVerboseData* RpcTransaction::_internal_mutable_verbosedata() {
  
  if (verbosedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcTransactionVerboseData>(GetArenaForAllocation());
    verbosedata_ = p;
  }
  return verbosedata_;
}
inline ::protowire::RpcTransactionVerboseData* RpcTransaction::mutable_verbosedata() {
  ::protowire::RpcTransactionVerboseData* _msg = _internal_mutable_verbosedata();
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransaction.verboseData)
  return _msg;
}
inline void RpcTransaction::set_allocated_verbosedata(::protowire::RpcTransactionVerboseData* verbosedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete verbosedata_;
  }
  if (verbosedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcTransactionVerboseData>::GetOwningArena(verbosedata);
    if (message_arena != submessage_arena) {
      verbosedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verbosedata, submessage_arena);
    }
    
  } else {
    
  }
  verbosedata_ = verbosedata;
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcTransaction.verboseData)
}

// -------------------------------------------------------------------

// RpcTransactionInput

// .protowire.RpcOutpoint previousOutpoint = 1;
inline bool RpcTransactionInput::_internal_has_previousoutpoint() const {
  return this != internal_default_instance() && previousoutpoint_ != nullptr;
}
inline bool RpcTransactionInput::has_previousoutpoint() const {
  return _internal_has_previousoutpoint();
}
inline void RpcTransactionInput::clear_previousoutpoint() {
  if (GetArenaForAllocation() == nullptr && previousoutpoint_ != nullptr) {
    delete previousoutpoint_;
  }
  previousoutpoint_ = nullptr;
}
inline const ::protowire::RpcOutpoint& RpcTransactionInput::_internal_previousoutpoint() const {
  const ::protowire::RpcOutpoint* p = previousoutpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcOutpoint&>(
      ::protowire::_RpcOutpoint_default_instance_);
}
inline const ::protowire::RpcOutpoint& RpcTransactionInput::previousoutpoint() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionInput.previousOutpoint)
  return _internal_previousoutpoint();
}
inline void RpcTransactionInput::unsafe_arena_set_allocated_previousoutpoint(
    ::protowire::RpcOutpoint* previousoutpoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previousoutpoint_);
  }
  previousoutpoint_ = previousoutpoint;
  if (previousoutpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RpcTransactionInput.previousOutpoint)
}
inline ::protowire::RpcOutpoint* RpcTransactionInput::release_previousoutpoint() {
  
  ::protowire::RpcOutpoint* temp = previousoutpoint_;
  previousoutpoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcOutpoint* RpcTransactionInput::unsafe_arena_release_previousoutpoint() {
  // @@protoc_insertion_point(field_release:protowire.RpcTransactionInput.previousOutpoint)
  
  ::protowire::RpcOutpoint* temp = previousoutpoint_;
  previousoutpoint_ = nullptr;
  return temp;
}
inline ::protowire::RpcOutpoint* RpcTransactionInput::_internal_mutable_previousoutpoint() {
  
  if (previousoutpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcOutpoint>(GetArenaForAllocation());
    previousoutpoint_ = p;
  }
  return previousoutpoint_;
}
inline ::protowire::RpcOutpoint* RpcTransactionInput::mutable_previousoutpoint() {
  ::protowire::RpcOutpoint* _msg = _internal_mutable_previousoutpoint();
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransactionInput.previousOutpoint)
  return _msg;
}
inline void RpcTransactionInput::set_allocated_previousoutpoint(::protowire::RpcOutpoint* previousoutpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete previousoutpoint_;
  }
  if (previousoutpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcOutpoint>::GetOwningArena(previousoutpoint);
    if (message_arena != submessage_arena) {
      previousoutpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previousoutpoint, submessage_arena);
    }
    
  } else {
    
  }
  previousoutpoint_ = previousoutpoint;
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcTransactionInput.previousOutpoint)
}

// string signatureScript = 2;
inline void RpcTransactionInput::clear_signaturescript() {
  signaturescript_.ClearToEmpty();
}
inline const std::string& RpcTransactionInput::signaturescript() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionInput.signatureScript)
  return _internal_signaturescript();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcTransactionInput::set_signaturescript(ArgT0&& arg0, ArgT... args) {
 
 signaturescript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcTransactionInput.signatureScript)
}
inline std::string* RpcTransactionInput::mutable_signaturescript() {
  std::string* _s = _internal_mutable_signaturescript();
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransactionInput.signatureScript)
  return _s;
}
inline const std::string& RpcTransactionInput::_internal_signaturescript() const {
  return signaturescript_.Get();
}
inline void RpcTransactionInput::_internal_set_signaturescript(const std::string& value) {
  
  signaturescript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcTransactionInput::_internal_mutable_signaturescript() {
  
  return signaturescript_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcTransactionInput::release_signaturescript() {
  // @@protoc_insertion_point(field_release:protowire.RpcTransactionInput.signatureScript)
  return signaturescript_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcTransactionInput::set_allocated_signaturescript(std::string* signaturescript) {
  if (signaturescript != nullptr) {
    
  } else {
    
  }
  signaturescript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signaturescript,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signaturescript_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signaturescript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcTransactionInput.signatureScript)
}

// uint64 sequence = 3;
inline void RpcTransactionInput::clear_sequence() {
  sequence_ = uint64_t{0u};
}
inline uint64_t RpcTransactionInput::_internal_sequence() const {
  return sequence_;
}
inline uint64_t RpcTransactionInput::sequence() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionInput.sequence)
  return _internal_sequence();
}
inline void RpcTransactionInput::_internal_set_sequence(uint64_t value) {
  
  sequence_ = value;
}
inline void RpcTransactionInput::set_sequence(uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:protowire.RpcTransactionInput.sequence)
}

// uint32 sigOpCount = 5;
inline void RpcTransactionInput::clear_sigopcount() {
  sigopcount_ = 0u;
}
inline uint32_t RpcTransactionInput::_internal_sigopcount() const {
  return sigopcount_;
}
inline uint32_t RpcTransactionInput::sigopcount() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionInput.sigOpCount)
  return _internal_sigopcount();
}
inline void RpcTransactionInput::_internal_set_sigopcount(uint32_t value) {
  
  sigopcount_ = value;
}
inline void RpcTransactionInput::set_sigopcount(uint32_t value) {
  _internal_set_sigopcount(value);
  // @@protoc_insertion_point(field_set:protowire.RpcTransactionInput.sigOpCount)
}

// .protowire.RpcTransactionInputVerboseData verboseData = 4;
inline bool RpcTransactionInput::_internal_has_verbosedata() const {
  return this != internal_default_instance() && verbosedata_ != nullptr;
}
inline bool RpcTransactionInput::has_verbosedata() const {
  return _internal_has_verbosedata();
}
inline void RpcTransactionInput::clear_verbosedata() {
  if (GetArenaForAllocation() == nullptr && verbosedata_ != nullptr) {
    delete verbosedata_;
  }
  verbosedata_ = nullptr;
}
inline const ::protowire::RpcTransactionInputVerboseData& RpcTransactionInput::_internal_verbosedata() const {
  const ::protowire::RpcTransactionInputVerboseData* p = verbosedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcTransactionInputVerboseData&>(
      ::protowire::_RpcTransactionInputVerboseData_default_instance_);
}
inline const ::protowire::RpcTransactionInputVerboseData& RpcTransactionInput::verbosedata() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionInput.verboseData)
  return _internal_verbosedata();
}
inline void RpcTransactionInput::unsafe_arena_set_allocated_verbosedata(
    ::protowire::RpcTransactionInputVerboseData* verbosedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verbosedata_);
  }
  verbosedata_ = verbosedata;
  if (verbosedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RpcTransactionInput.verboseData)
}
inline ::protowire::RpcTransactionInputVerboseData* RpcTransactionInput::release_verbosedata() {
  
  ::protowire::RpcTransactionInputVerboseData* temp = verbosedata_;
  verbosedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcTransactionInputVerboseData* RpcTransactionInput::unsafe_arena_release_verbosedata() {
  // @@protoc_insertion_point(field_release:protowire.RpcTransactionInput.verboseData)
  
  ::protowire::RpcTransactionInputVerboseData* temp = verbosedata_;
  verbosedata_ = nullptr;
  return temp;
}
inline ::protowire::RpcTransactionInputVerboseData* RpcTransactionInput::_internal_mutable_verbosedata() {
  
  if (verbosedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcTransactionInputVerboseData>(GetArenaForAllocation());
    verbosedata_ = p;
  }
  return verbosedata_;
}
inline ::protowire::RpcTransactionInputVerboseData* RpcTransactionInput::mutable_verbosedata() {
  ::protowire::RpcTransactionInputVerboseData* _msg = _internal_mutable_verbosedata();
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransactionInput.verboseData)
  return _msg;
}
inline void RpcTransactionInput::set_allocated_verbosedata(::protowire::RpcTransactionInputVerboseData* verbosedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete verbosedata_;
  }
  if (verbosedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcTransactionInputVerboseData>::GetOwningArena(verbosedata);
    if (message_arena != submessage_arena) {
      verbosedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verbosedata, submessage_arena);
    }
    
  } else {
    
  }
  verbosedata_ = verbosedata;
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcTransactionInput.verboseData)
}

// -------------------------------------------------------------------

// RpcScriptPublicKey

// uint32 version = 1;
inline void RpcScriptPublicKey::clear_version() {
  version_ = 0u;
}
inline uint32_t RpcScriptPublicKey::_internal_version() const {
  return version_;
}
inline uint32_t RpcScriptPublicKey::version() const {
  // @@protoc_insertion_point(field_get:protowire.RpcScriptPublicKey.version)
  return _internal_version();
}
inline void RpcScriptPublicKey::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void RpcScriptPublicKey::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:protowire.RpcScriptPublicKey.version)
}

// string scriptPublicKey = 2;
inline void RpcScriptPublicKey::clear_scriptpublickey() {
  scriptpublickey_.ClearToEmpty();
}
inline const std::string& RpcScriptPublicKey::scriptpublickey() const {
  // @@protoc_insertion_point(field_get:protowire.RpcScriptPublicKey.scriptPublicKey)
  return _internal_scriptpublickey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcScriptPublicKey::set_scriptpublickey(ArgT0&& arg0, ArgT... args) {
 
 scriptpublickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcScriptPublicKey.scriptPublicKey)
}
inline std::string* RpcScriptPublicKey::mutable_scriptpublickey() {
  std::string* _s = _internal_mutable_scriptpublickey();
  // @@protoc_insertion_point(field_mutable:protowire.RpcScriptPublicKey.scriptPublicKey)
  return _s;
}
inline const std::string& RpcScriptPublicKey::_internal_scriptpublickey() const {
  return scriptpublickey_.Get();
}
inline void RpcScriptPublicKey::_internal_set_scriptpublickey(const std::string& value) {
  
  scriptpublickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcScriptPublicKey::_internal_mutable_scriptpublickey() {
  
  return scriptpublickey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcScriptPublicKey::release_scriptpublickey() {
  // @@protoc_insertion_point(field_release:protowire.RpcScriptPublicKey.scriptPublicKey)
  return scriptpublickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcScriptPublicKey::set_allocated_scriptpublickey(std::string* scriptpublickey) {
  if (scriptpublickey != nullptr) {
    
  } else {
    
  }
  scriptpublickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scriptpublickey,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (scriptpublickey_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    scriptpublickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcScriptPublicKey.scriptPublicKey)
}

// -------------------------------------------------------------------

// RpcTransactionOutput

// uint64 amount = 1;
inline void RpcTransactionOutput::clear_amount() {
  amount_ = uint64_t{0u};
}
inline uint64_t RpcTransactionOutput::_internal_amount() const {
  return amount_;
}
inline uint64_t RpcTransactionOutput::amount() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionOutput.amount)
  return _internal_amount();
}
inline void RpcTransactionOutput::_internal_set_amount(uint64_t value) {
  
  amount_ = value;
}
inline void RpcTransactionOutput::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:protowire.RpcTransactionOutput.amount)
}

// .protowire.RpcScriptPublicKey scriptPublicKey = 2;
inline bool RpcTransactionOutput::_internal_has_scriptpublickey() const {
  return this != internal_default_instance() && scriptpublickey_ != nullptr;
}
inline bool RpcTransactionOutput::has_scriptpublickey() const {
  return _internal_has_scriptpublickey();
}
inline void RpcTransactionOutput::clear_scriptpublickey() {
  if (GetArenaForAllocation() == nullptr && scriptpublickey_ != nullptr) {
    delete scriptpublickey_;
  }
  scriptpublickey_ = nullptr;
}
inline const ::protowire::RpcScriptPublicKey& RpcTransactionOutput::_internal_scriptpublickey() const {
  const ::protowire::RpcScriptPublicKey* p = scriptpublickey_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcScriptPublicKey&>(
      ::protowire::_RpcScriptPublicKey_default_instance_);
}
inline const ::protowire::RpcScriptPublicKey& RpcTransactionOutput::scriptpublickey() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionOutput.scriptPublicKey)
  return _internal_scriptpublickey();
}
inline void RpcTransactionOutput::unsafe_arena_set_allocated_scriptpublickey(
    ::protowire::RpcScriptPublicKey* scriptpublickey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scriptpublickey_);
  }
  scriptpublickey_ = scriptpublickey;
  if (scriptpublickey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RpcTransactionOutput.scriptPublicKey)
}
inline ::protowire::RpcScriptPublicKey* RpcTransactionOutput::release_scriptpublickey() {
  
  ::protowire::RpcScriptPublicKey* temp = scriptpublickey_;
  scriptpublickey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcScriptPublicKey* RpcTransactionOutput::unsafe_arena_release_scriptpublickey() {
  // @@protoc_insertion_point(field_release:protowire.RpcTransactionOutput.scriptPublicKey)
  
  ::protowire::RpcScriptPublicKey* temp = scriptpublickey_;
  scriptpublickey_ = nullptr;
  return temp;
}
inline ::protowire::RpcScriptPublicKey* RpcTransactionOutput::_internal_mutable_scriptpublickey() {
  
  if (scriptpublickey_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcScriptPublicKey>(GetArenaForAllocation());
    scriptpublickey_ = p;
  }
  return scriptpublickey_;
}
inline ::protowire::RpcScriptPublicKey* RpcTransactionOutput::mutable_scriptpublickey() {
  ::protowire::RpcScriptPublicKey* _msg = _internal_mutable_scriptpublickey();
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransactionOutput.scriptPublicKey)
  return _msg;
}
inline void RpcTransactionOutput::set_allocated_scriptpublickey(::protowire::RpcScriptPublicKey* scriptpublickey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scriptpublickey_;
  }
  if (scriptpublickey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcScriptPublicKey>::GetOwningArena(scriptpublickey);
    if (message_arena != submessage_arena) {
      scriptpublickey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptpublickey, submessage_arena);
    }
    
  } else {
    
  }
  scriptpublickey_ = scriptpublickey;
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcTransactionOutput.scriptPublicKey)
}

// .protowire.RpcTransactionOutputVerboseData verboseData = 3;
inline bool RpcTransactionOutput::_internal_has_verbosedata() const {
  return this != internal_default_instance() && verbosedata_ != nullptr;
}
inline bool RpcTransactionOutput::has_verbosedata() const {
  return _internal_has_verbosedata();
}
inline void RpcTransactionOutput::clear_verbosedata() {
  if (GetArenaForAllocation() == nullptr && verbosedata_ != nullptr) {
    delete verbosedata_;
  }
  verbosedata_ = nullptr;
}
inline const ::protowire::RpcTransactionOutputVerboseData& RpcTransactionOutput::_internal_verbosedata() const {
  const ::protowire::RpcTransactionOutputVerboseData* p = verbosedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcTransactionOutputVerboseData&>(
      ::protowire::_RpcTransactionOutputVerboseData_default_instance_);
}
inline const ::protowire::RpcTransactionOutputVerboseData& RpcTransactionOutput::verbosedata() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionOutput.verboseData)
  return _internal_verbosedata();
}
inline void RpcTransactionOutput::unsafe_arena_set_allocated_verbosedata(
    ::protowire::RpcTransactionOutputVerboseData* verbosedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verbosedata_);
  }
  verbosedata_ = verbosedata;
  if (verbosedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RpcTransactionOutput.verboseData)
}
inline ::protowire::RpcTransactionOutputVerboseData* RpcTransactionOutput::release_verbosedata() {
  
  ::protowire::RpcTransactionOutputVerboseData* temp = verbosedata_;
  verbosedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcTransactionOutputVerboseData* RpcTransactionOutput::unsafe_arena_release_verbosedata() {
  // @@protoc_insertion_point(field_release:protowire.RpcTransactionOutput.verboseData)
  
  ::protowire::RpcTransactionOutputVerboseData* temp = verbosedata_;
  verbosedata_ = nullptr;
  return temp;
}
inline ::protowire::RpcTransactionOutputVerboseData* RpcTransactionOutput::_internal_mutable_verbosedata() {
  
  if (verbosedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcTransactionOutputVerboseData>(GetArenaForAllocation());
    verbosedata_ = p;
  }
  return verbosedata_;
}
inline ::protowire::RpcTransactionOutputVerboseData* RpcTransactionOutput::mutable_verbosedata() {
  ::protowire::RpcTransactionOutputVerboseData* _msg = _internal_mutable_verbosedata();
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransactionOutput.verboseData)
  return _msg;
}
inline void RpcTransactionOutput::set_allocated_verbosedata(::protowire::RpcTransactionOutputVerboseData* verbosedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete verbosedata_;
  }
  if (verbosedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcTransactionOutputVerboseData>::GetOwningArena(verbosedata);
    if (message_arena != submessage_arena) {
      verbosedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verbosedata, submessage_arena);
    }
    
  } else {
    
  }
  verbosedata_ = verbosedata;
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcTransactionOutput.verboseData)
}

// -------------------------------------------------------------------

// RpcOutpoint

// string transactionId = 1;
inline void RpcOutpoint::clear_transactionid() {
  transactionid_.ClearToEmpty();
}
inline const std::string& RpcOutpoint::transactionid() const {
  // @@protoc_insertion_point(field_get:protowire.RpcOutpoint.transactionId)
  return _internal_transactionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcOutpoint::set_transactionid(ArgT0&& arg0, ArgT... args) {
 
 transactionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcOutpoint.transactionId)
}
inline std::string* RpcOutpoint::mutable_transactionid() {
  std::string* _s = _internal_mutable_transactionid();
  // @@protoc_insertion_point(field_mutable:protowire.RpcOutpoint.transactionId)
  return _s;
}
inline const std::string& RpcOutpoint::_internal_transactionid() const {
  return transactionid_.Get();
}
inline void RpcOutpoint::_internal_set_transactionid(const std::string& value) {
  
  transactionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcOutpoint::_internal_mutable_transactionid() {
  
  return transactionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcOutpoint::release_transactionid() {
  // @@protoc_insertion_point(field_release:protowire.RpcOutpoint.transactionId)
  return transactionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcOutpoint::set_allocated_transactionid(std::string* transactionid) {
  if (transactionid != nullptr) {
    
  } else {
    
  }
  transactionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transactionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (transactionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    transactionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcOutpoint.transactionId)
}

// uint32 index = 2;
inline void RpcOutpoint::clear_index() {
  index_ = 0u;
}
inline uint32_t RpcOutpoint::_internal_index() const {
  return index_;
}
inline uint32_t RpcOutpoint::index() const {
  // @@protoc_insertion_point(field_get:protowire.RpcOutpoint.index)
  return _internal_index();
}
inline void RpcOutpoint::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void RpcOutpoint::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:protowire.RpcOutpoint.index)
}

// -------------------------------------------------------------------

// RpcUtxoEntry

// uint64 amount = 1;
inline void RpcUtxoEntry::clear_amount() {
  amount_ = uint64_t{0u};
}
inline uint64_t RpcUtxoEntry::_internal_amount() const {
  return amount_;
}
inline uint64_t RpcUtxoEntry::amount() const {
  // @@protoc_insertion_point(field_get:protowire.RpcUtxoEntry.amount)
  return _internal_amount();
}
inline void RpcUtxoEntry::_internal_set_amount(uint64_t value) {
  
  amount_ = value;
}
inline void RpcUtxoEntry::set_amount(uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:protowire.RpcUtxoEntry.amount)
}

// .protowire.RpcScriptPublicKey scriptPublicKey = 2;
inline bool RpcUtxoEntry::_internal_has_scriptpublickey() const {
  return this != internal_default_instance() && scriptpublickey_ != nullptr;
}
inline bool RpcUtxoEntry::has_scriptpublickey() const {
  return _internal_has_scriptpublickey();
}
inline void RpcUtxoEntry::clear_scriptpublickey() {
  if (GetArenaForAllocation() == nullptr && scriptpublickey_ != nullptr) {
    delete scriptpublickey_;
  }
  scriptpublickey_ = nullptr;
}
inline const ::protowire::RpcScriptPublicKey& RpcUtxoEntry::_internal_scriptpublickey() const {
  const ::protowire::RpcScriptPublicKey* p = scriptpublickey_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcScriptPublicKey&>(
      ::protowire::_RpcScriptPublicKey_default_instance_);
}
inline const ::protowire::RpcScriptPublicKey& RpcUtxoEntry::scriptpublickey() const {
  // @@protoc_insertion_point(field_get:protowire.RpcUtxoEntry.scriptPublicKey)
  return _internal_scriptpublickey();
}
inline void RpcUtxoEntry::unsafe_arena_set_allocated_scriptpublickey(
    ::protowire::RpcScriptPublicKey* scriptpublickey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scriptpublickey_);
  }
  scriptpublickey_ = scriptpublickey;
  if (scriptpublickey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.RpcUtxoEntry.scriptPublicKey)
}
inline ::protowire::RpcScriptPublicKey* RpcUtxoEntry::release_scriptpublickey() {
  
  ::protowire::RpcScriptPublicKey* temp = scriptpublickey_;
  scriptpublickey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcScriptPublicKey* RpcUtxoEntry::unsafe_arena_release_scriptpublickey() {
  // @@protoc_insertion_point(field_release:protowire.RpcUtxoEntry.scriptPublicKey)
  
  ::protowire::RpcScriptPublicKey* temp = scriptpublickey_;
  scriptpublickey_ = nullptr;
  return temp;
}
inline ::protowire::RpcScriptPublicKey* RpcUtxoEntry::_internal_mutable_scriptpublickey() {
  
  if (scriptpublickey_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcScriptPublicKey>(GetArenaForAllocation());
    scriptpublickey_ = p;
  }
  return scriptpublickey_;
}
inline ::protowire::RpcScriptPublicKey* RpcUtxoEntry::mutable_scriptpublickey() {
  ::protowire::RpcScriptPublicKey* _msg = _internal_mutable_scriptpublickey();
  // @@protoc_insertion_point(field_mutable:protowire.RpcUtxoEntry.scriptPublicKey)
  return _msg;
}
inline void RpcUtxoEntry::set_allocated_scriptpublickey(::protowire::RpcScriptPublicKey* scriptpublickey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete scriptpublickey_;
  }
  if (scriptpublickey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcScriptPublicKey>::GetOwningArena(scriptpublickey);
    if (message_arena != submessage_arena) {
      scriptpublickey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptpublickey, submessage_arena);
    }
    
  } else {
    
  }
  scriptpublickey_ = scriptpublickey;
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcUtxoEntry.scriptPublicKey)
}

// uint64 blockDaaScore = 3;
inline void RpcUtxoEntry::clear_blockdaascore() {
  blockdaascore_ = uint64_t{0u};
}
inline uint64_t RpcUtxoEntry::_internal_blockdaascore() const {
  return blockdaascore_;
}
inline uint64_t RpcUtxoEntry::blockdaascore() const {
  // @@protoc_insertion_point(field_get:protowire.RpcUtxoEntry.blockDaaScore)
  return _internal_blockdaascore();
}
inline void RpcUtxoEntry::_internal_set_blockdaascore(uint64_t value) {
  
  blockdaascore_ = value;
}
inline void RpcUtxoEntry::set_blockdaascore(uint64_t value) {
  _internal_set_blockdaascore(value);
  // @@protoc_insertion_point(field_set:protowire.RpcUtxoEntry.blockDaaScore)
}

// bool isCoinbase = 4;
inline void RpcUtxoEntry::clear_iscoinbase() {
  iscoinbase_ = false;
}
inline bool RpcUtxoEntry::_internal_iscoinbase() const {
  return iscoinbase_;
}
inline bool RpcUtxoEntry::iscoinbase() const {
  // @@protoc_insertion_point(field_get:protowire.RpcUtxoEntry.isCoinbase)
  return _internal_iscoinbase();
}
inline void RpcUtxoEntry::_internal_set_iscoinbase(bool value) {
  
  iscoinbase_ = value;
}
inline void RpcUtxoEntry::set_iscoinbase(bool value) {
  _internal_set_iscoinbase(value);
  // @@protoc_insertion_point(field_set:protowire.RpcUtxoEntry.isCoinbase)
}

// -------------------------------------------------------------------

// RpcTransactionVerboseData

// string transactionId = 1;
inline void RpcTransactionVerboseData::clear_transactionid() {
  transactionid_.ClearToEmpty();
}
inline const std::string& RpcTransactionVerboseData::transactionid() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionVerboseData.transactionId)
  return _internal_transactionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcTransactionVerboseData::set_transactionid(ArgT0&& arg0, ArgT... args) {
 
 transactionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcTransactionVerboseData.transactionId)
}
inline std::string* RpcTransactionVerboseData::mutable_transactionid() {
  std::string* _s = _internal_mutable_transactionid();
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransactionVerboseData.transactionId)
  return _s;
}
inline const std::string& RpcTransactionVerboseData::_internal_transactionid() const {
  return transactionid_.Get();
}
inline void RpcTransactionVerboseData::_internal_set_transactionid(const std::string& value) {
  
  transactionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcTransactionVerboseData::_internal_mutable_transactionid() {
  
  return transactionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcTransactionVerboseData::release_transactionid() {
  // @@protoc_insertion_point(field_release:protowire.RpcTransactionVerboseData.transactionId)
  return transactionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcTransactionVerboseData::set_allocated_transactionid(std::string* transactionid) {
  if (transactionid != nullptr) {
    
  } else {
    
  }
  transactionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transactionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (transactionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    transactionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcTransactionVerboseData.transactionId)
}

// string hash = 2;
inline void RpcTransactionVerboseData::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& RpcTransactionVerboseData::hash() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionVerboseData.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcTransactionVerboseData::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcTransactionVerboseData.hash)
}
inline std::string* RpcTransactionVerboseData::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransactionVerboseData.hash)
  return _s;
}
inline const std::string& RpcTransactionVerboseData::_internal_hash() const {
  return hash_.Get();
}
inline void RpcTransactionVerboseData::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcTransactionVerboseData::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcTransactionVerboseData::release_hash() {
  // @@protoc_insertion_point(field_release:protowire.RpcTransactionVerboseData.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcTransactionVerboseData::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcTransactionVerboseData.hash)
}

// uint64 mass = 4;
inline void RpcTransactionVerboseData::clear_mass() {
  mass_ = uint64_t{0u};
}
inline uint64_t RpcTransactionVerboseData::_internal_mass() const {
  return mass_;
}
inline uint64_t RpcTransactionVerboseData::mass() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionVerboseData.mass)
  return _internal_mass();
}
inline void RpcTransactionVerboseData::_internal_set_mass(uint64_t value) {
  
  mass_ = value;
}
inline void RpcTransactionVerboseData::set_mass(uint64_t value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:protowire.RpcTransactionVerboseData.mass)
}

// string blockHash = 12;
inline void RpcTransactionVerboseData::clear_blockhash() {
  blockhash_.ClearToEmpty();
}
inline const std::string& RpcTransactionVerboseData::blockhash() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionVerboseData.blockHash)
  return _internal_blockhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcTransactionVerboseData::set_blockhash(ArgT0&& arg0, ArgT... args) {
 
 blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcTransactionVerboseData.blockHash)
}
inline std::string* RpcTransactionVerboseData::mutable_blockhash() {
  std::string* _s = _internal_mutable_blockhash();
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransactionVerboseData.blockHash)
  return _s;
}
inline const std::string& RpcTransactionVerboseData::_internal_blockhash() const {
  return blockhash_.Get();
}
inline void RpcTransactionVerboseData::_internal_set_blockhash(const std::string& value) {
  
  blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcTransactionVerboseData::_internal_mutable_blockhash() {
  
  return blockhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcTransactionVerboseData::release_blockhash() {
  // @@protoc_insertion_point(field_release:protowire.RpcTransactionVerboseData.blockHash)
  return blockhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcTransactionVerboseData::set_allocated_blockhash(std::string* blockhash) {
  if (blockhash != nullptr) {
    
  } else {
    
  }
  blockhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockhash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (blockhash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    blockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcTransactionVerboseData.blockHash)
}

// uint64 blockTime = 14;
inline void RpcTransactionVerboseData::clear_blocktime() {
  blocktime_ = uint64_t{0u};
}
inline uint64_t RpcTransactionVerboseData::_internal_blocktime() const {
  return blocktime_;
}
inline uint64_t RpcTransactionVerboseData::blocktime() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionVerboseData.blockTime)
  return _internal_blocktime();
}
inline void RpcTransactionVerboseData::_internal_set_blocktime(uint64_t value) {
  
  blocktime_ = value;
}
inline void RpcTransactionVerboseData::set_blocktime(uint64_t value) {
  _internal_set_blocktime(value);
  // @@protoc_insertion_point(field_set:protowire.RpcTransactionVerboseData.blockTime)
}

// -------------------------------------------------------------------

// RpcTransactionInputVerboseData

// -------------------------------------------------------------------

// RpcTransactionOutputVerboseData

// string scriptPublicKeyType = 5;
inline void RpcTransactionOutputVerboseData::clear_scriptpublickeytype() {
  scriptpublickeytype_.ClearToEmpty();
}
inline const std::string& RpcTransactionOutputVerboseData::scriptpublickeytype() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionOutputVerboseData.scriptPublicKeyType)
  return _internal_scriptpublickeytype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcTransactionOutputVerboseData::set_scriptpublickeytype(ArgT0&& arg0, ArgT... args) {
 
 scriptpublickeytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcTransactionOutputVerboseData.scriptPublicKeyType)
}
inline std::string* RpcTransactionOutputVerboseData::mutable_scriptpublickeytype() {
  std::string* _s = _internal_mutable_scriptpublickeytype();
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransactionOutputVerboseData.scriptPublicKeyType)
  return _s;
}
inline const std::string& RpcTransactionOutputVerboseData::_internal_scriptpublickeytype() const {
  return scriptpublickeytype_.Get();
}
inline void RpcTransactionOutputVerboseData::_internal_set_scriptpublickeytype(const std::string& value) {
  
  scriptpublickeytype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcTransactionOutputVerboseData::_internal_mutable_scriptpublickeytype() {
  
  return scriptpublickeytype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcTransactionOutputVerboseData::release_scriptpublickeytype() {
  // @@protoc_insertion_point(field_release:protowire.RpcTransactionOutputVerboseData.scriptPublicKeyType)
  return scriptpublickeytype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcTransactionOutputVerboseData::set_allocated_scriptpublickeytype(std::string* scriptpublickeytype) {
  if (scriptpublickeytype != nullptr) {
    
  } else {
    
  }
  scriptpublickeytype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scriptpublickeytype,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (scriptpublickeytype_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    scriptpublickeytype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcTransactionOutputVerboseData.scriptPublicKeyType)
}

// string scriptPublicKeyAddress = 6;
inline void RpcTransactionOutputVerboseData::clear_scriptpublickeyaddress() {
  scriptpublickeyaddress_.ClearToEmpty();
}
inline const std::string& RpcTransactionOutputVerboseData::scriptpublickeyaddress() const {
  // @@protoc_insertion_point(field_get:protowire.RpcTransactionOutputVerboseData.scriptPublicKeyAddress)
  return _internal_scriptpublickeyaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcTransactionOutputVerboseData::set_scriptpublickeyaddress(ArgT0&& arg0, ArgT... args) {
 
 scriptpublickeyaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.RpcTransactionOutputVerboseData.scriptPublicKeyAddress)
}
inline std::string* RpcTransactionOutputVerboseData::mutable_scriptpublickeyaddress() {
  std::string* _s = _internal_mutable_scriptpublickeyaddress();
  // @@protoc_insertion_point(field_mutable:protowire.RpcTransactionOutputVerboseData.scriptPublicKeyAddress)
  return _s;
}
inline const std::string& RpcTransactionOutputVerboseData::_internal_scriptpublickeyaddress() const {
  return scriptpublickeyaddress_.Get();
}
inline void RpcTransactionOutputVerboseData::_internal_set_scriptpublickeyaddress(const std::string& value) {
  
  scriptpublickeyaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RpcTransactionOutputVerboseData::_internal_mutable_scriptpublickeyaddress() {
  
  return scriptpublickeyaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RpcTransactionOutputVerboseData::release_scriptpublickeyaddress() {
  // @@protoc_insertion_point(field_release:protowire.RpcTransactionOutputVerboseData.scriptPublicKeyAddress)
  return scriptpublickeyaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RpcTransactionOutputVerboseData::set_allocated_scriptpublickeyaddress(std::string* scriptpublickeyaddress) {
  if (scriptpublickeyaddress != nullptr) {
    
  } else {
    
  }
  scriptpublickeyaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scriptpublickeyaddress,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (scriptpublickeyaddress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    scriptpublickeyaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.RpcTransactionOutputVerboseData.scriptPublicKeyAddress)
}

// -------------------------------------------------------------------

// GetCurrentNetworkRequestMessage

// -------------------------------------------------------------------

// GetCurrentNetworkResponseMessage

// string currentNetwork = 1;
inline void GetCurrentNetworkResponseMessage::clear_currentnetwork() {
  currentnetwork_.ClearToEmpty();
}
inline const std::string& GetCurrentNetworkResponseMessage::currentnetwork() const {
  // @@protoc_insertion_point(field_get:protowire.GetCurrentNetworkResponseMessage.currentNetwork)
  return _internal_currentnetwork();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCurrentNetworkResponseMessage::set_currentnetwork(ArgT0&& arg0, ArgT... args) {
 
 currentnetwork_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetCurrentNetworkResponseMessage.currentNetwork)
}
inline std::string* GetCurrentNetworkResponseMessage::mutable_currentnetwork() {
  std::string* _s = _internal_mutable_currentnetwork();
  // @@protoc_insertion_point(field_mutable:protowire.GetCurrentNetworkResponseMessage.currentNetwork)
  return _s;
}
inline const std::string& GetCurrentNetworkResponseMessage::_internal_currentnetwork() const {
  return currentnetwork_.Get();
}
inline void GetCurrentNetworkResponseMessage::_internal_set_currentnetwork(const std::string& value) {
  
  currentnetwork_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCurrentNetworkResponseMessage::_internal_mutable_currentnetwork() {
  
  return currentnetwork_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCurrentNetworkResponseMessage::release_currentnetwork() {
  // @@protoc_insertion_point(field_release:protowire.GetCurrentNetworkResponseMessage.currentNetwork)
  return currentnetwork_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCurrentNetworkResponseMessage::set_allocated_currentnetwork(std::string* currentnetwork) {
  if (currentnetwork != nullptr) {
    
  } else {
    
  }
  currentnetwork_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currentnetwork,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (currentnetwork_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    currentnetwork_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetCurrentNetworkResponseMessage.currentNetwork)
}

// .protowire.RPCError error = 1000;
inline bool GetCurrentNetworkResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetCurrentNetworkResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetCurrentNetworkResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetCurrentNetworkResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetCurrentNetworkResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetCurrentNetworkResponseMessage.error)
  return _internal_error();
}
inline void GetCurrentNetworkResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetCurrentNetworkResponseMessage.error)
}
inline ::protowire::RPCError* GetCurrentNetworkResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetCurrentNetworkResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetCurrentNetworkResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetCurrentNetworkResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetCurrentNetworkResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetCurrentNetworkResponseMessage.error)
  return _msg;
}
inline void GetCurrentNetworkResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetCurrentNetworkResponseMessage.error)
}

// -------------------------------------------------------------------

// SubmitBlockRequestMessage

// .protowire.RpcBlock block = 2;
inline bool SubmitBlockRequestMessage::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool SubmitBlockRequestMessage::has_block() const {
  return _internal_has_block();
}
inline void SubmitBlockRequestMessage::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::protowire::RpcBlock& SubmitBlockRequestMessage::_internal_block() const {
  const ::protowire::RpcBlock* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcBlock&>(
      ::protowire::_RpcBlock_default_instance_);
}
inline const ::protowire::RpcBlock& SubmitBlockRequestMessage::block() const {
  // @@protoc_insertion_point(field_get:protowire.SubmitBlockRequestMessage.block)
  return _internal_block();
}
inline void SubmitBlockRequestMessage::unsafe_arena_set_allocated_block(
    ::protowire::RpcBlock* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.SubmitBlockRequestMessage.block)
}
inline ::protowire::RpcBlock* SubmitBlockRequestMessage::release_block() {
  
  ::protowire::RpcBlock* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcBlock* SubmitBlockRequestMessage::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:protowire.SubmitBlockRequestMessage.block)
  
  ::protowire::RpcBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::protowire::RpcBlock* SubmitBlockRequestMessage::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcBlock>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::protowire::RpcBlock* SubmitBlockRequestMessage::mutable_block() {
  ::protowire::RpcBlock* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:protowire.SubmitBlockRequestMessage.block)
  return _msg;
}
inline void SubmitBlockRequestMessage::set_allocated_block(::protowire::RpcBlock* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcBlock>::GetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:protowire.SubmitBlockRequestMessage.block)
}

// bool allowNonDAABlocks = 3;
inline void SubmitBlockRequestMessage::clear_allownondaablocks() {
  allownondaablocks_ = false;
}
inline bool SubmitBlockRequestMessage::_internal_allownondaablocks() const {
  return allownondaablocks_;
}
inline bool SubmitBlockRequestMessage::allownondaablocks() const {
  // @@protoc_insertion_point(field_get:protowire.SubmitBlockRequestMessage.allowNonDAABlocks)
  return _internal_allownondaablocks();
}
inline void SubmitBlockRequestMessage::_internal_set_allownondaablocks(bool value) {
  
  allownondaablocks_ = value;
}
inline void SubmitBlockRequestMessage::set_allownondaablocks(bool value) {
  _internal_set_allownondaablocks(value);
  // @@protoc_insertion_point(field_set:protowire.SubmitBlockRequestMessage.allowNonDAABlocks)
}

// -------------------------------------------------------------------

// SubmitBlockResponseMessage

// .protowire.SubmitBlockResponseMessage.RejectReason rejectReason = 1;
inline void SubmitBlockResponseMessage::clear_rejectreason() {
  rejectreason_ = 0;
}
inline ::protowire::SubmitBlockResponseMessage_RejectReason SubmitBlockResponseMessage::_internal_rejectreason() const {
  return static_cast< ::protowire::SubmitBlockResponseMessage_RejectReason >(rejectreason_);
}
inline ::protowire::SubmitBlockResponseMessage_RejectReason SubmitBlockResponseMessage::rejectreason() const {
  // @@protoc_insertion_point(field_get:protowire.SubmitBlockResponseMessage.rejectReason)
  return _internal_rejectreason();
}
inline void SubmitBlockResponseMessage::_internal_set_rejectreason(::protowire::SubmitBlockResponseMessage_RejectReason value) {
  
  rejectreason_ = value;
}
inline void SubmitBlockResponseMessage::set_rejectreason(::protowire::SubmitBlockResponseMessage_RejectReason value) {
  _internal_set_rejectreason(value);
  // @@protoc_insertion_point(field_set:protowire.SubmitBlockResponseMessage.rejectReason)
}

// .protowire.RPCError error = 1000;
inline bool SubmitBlockResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool SubmitBlockResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void SubmitBlockResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& SubmitBlockResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& SubmitBlockResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.SubmitBlockResponseMessage.error)
  return _internal_error();
}
inline void SubmitBlockResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.SubmitBlockResponseMessage.error)
}
inline ::protowire::RPCError* SubmitBlockResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* SubmitBlockResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.SubmitBlockResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* SubmitBlockResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* SubmitBlockResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.SubmitBlockResponseMessage.error)
  return _msg;
}
inline void SubmitBlockResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.SubmitBlockResponseMessage.error)
}

// -------------------------------------------------------------------

// GetBlockTemplateRequestMessage

// string payAddress = 1;
inline void GetBlockTemplateRequestMessage::clear_payaddress() {
  payaddress_.ClearToEmpty();
}
inline const std::string& GetBlockTemplateRequestMessage::payaddress() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockTemplateRequestMessage.payAddress)
  return _internal_payaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockTemplateRequestMessage::set_payaddress(ArgT0&& arg0, ArgT... args) {
 
 payaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetBlockTemplateRequestMessage.payAddress)
}
inline std::string* GetBlockTemplateRequestMessage::mutable_payaddress() {
  std::string* _s = _internal_mutable_payaddress();
  // @@protoc_insertion_point(field_mutable:protowire.GetBlockTemplateRequestMessage.payAddress)
  return _s;
}
inline const std::string& GetBlockTemplateRequestMessage::_internal_payaddress() const {
  return payaddress_.Get();
}
inline void GetBlockTemplateRequestMessage::_internal_set_payaddress(const std::string& value) {
  
  payaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockTemplateRequestMessage::_internal_mutable_payaddress() {
  
  return payaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockTemplateRequestMessage::release_payaddress() {
  // @@protoc_insertion_point(field_release:protowire.GetBlockTemplateRequestMessage.payAddress)
  return payaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockTemplateRequestMessage::set_allocated_payaddress(std::string* payaddress) {
  if (payaddress != nullptr) {
    
  } else {
    
  }
  payaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payaddress,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payaddress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBlockTemplateRequestMessage.payAddress)
}

// string extraData = 2;
inline void GetBlockTemplateRequestMessage::clear_extradata() {
  extradata_.ClearToEmpty();
}
inline const std::string& GetBlockTemplateRequestMessage::extradata() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockTemplateRequestMessage.extraData)
  return _internal_extradata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockTemplateRequestMessage::set_extradata(ArgT0&& arg0, ArgT... args) {
 
 extradata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetBlockTemplateRequestMessage.extraData)
}
inline std::string* GetBlockTemplateRequestMessage::mutable_extradata() {
  std::string* _s = _internal_mutable_extradata();
  // @@protoc_insertion_point(field_mutable:protowire.GetBlockTemplateRequestMessage.extraData)
  return _s;
}
inline const std::string& GetBlockTemplateRequestMessage::_internal_extradata() const {
  return extradata_.Get();
}
inline void GetBlockTemplateRequestMessage::_internal_set_extradata(const std::string& value) {
  
  extradata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockTemplateRequestMessage::_internal_mutable_extradata() {
  
  return extradata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockTemplateRequestMessage::release_extradata() {
  // @@protoc_insertion_point(field_release:protowire.GetBlockTemplateRequestMessage.extraData)
  return extradata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockTemplateRequestMessage::set_allocated_extradata(std::string* extradata) {
  if (extradata != nullptr) {
    
  } else {
    
  }
  extradata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extradata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (extradata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    extradata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBlockTemplateRequestMessage.extraData)
}

// -------------------------------------------------------------------

// GetBlockTemplateResponseMessage

// .protowire.RpcBlock block = 3;
inline bool GetBlockTemplateResponseMessage::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool GetBlockTemplateResponseMessage::has_block() const {
  return _internal_has_block();
}
inline void GetBlockTemplateResponseMessage::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::protowire::RpcBlock& GetBlockTemplateResponseMessage::_internal_block() const {
  const ::protowire::RpcBlock* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcBlock&>(
      ::protowire::_RpcBlock_default_instance_);
}
inline const ::protowire::RpcBlock& GetBlockTemplateResponseMessage::block() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockTemplateResponseMessage.block)
  return _internal_block();
}
inline void GetBlockTemplateResponseMessage::unsafe_arena_set_allocated_block(
    ::protowire::RpcBlock* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetBlockTemplateResponseMessage.block)
}
inline ::protowire::RpcBlock* GetBlockTemplateResponseMessage::release_block() {
  
  ::protowire::RpcBlock* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcBlock* GetBlockTemplateResponseMessage::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:protowire.GetBlockTemplateResponseMessage.block)
  
  ::protowire::RpcBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::protowire::RpcBlock* GetBlockTemplateResponseMessage::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcBlock>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::protowire::RpcBlock* GetBlockTemplateResponseMessage::mutable_block() {
  ::protowire::RpcBlock* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:protowire.GetBlockTemplateResponseMessage.block)
  return _msg;
}
inline void GetBlockTemplateResponseMessage::set_allocated_block(::protowire::RpcBlock* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcBlock>::GetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBlockTemplateResponseMessage.block)
}

// bool isSynced = 2;
inline void GetBlockTemplateResponseMessage::clear_issynced() {
  issynced_ = false;
}
inline bool GetBlockTemplateResponseMessage::_internal_issynced() const {
  return issynced_;
}
inline bool GetBlockTemplateResponseMessage::issynced() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockTemplateResponseMessage.isSynced)
  return _internal_issynced();
}
inline void GetBlockTemplateResponseMessage::_internal_set_issynced(bool value) {
  
  issynced_ = value;
}
inline void GetBlockTemplateResponseMessage::set_issynced(bool value) {
  _internal_set_issynced(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlockTemplateResponseMessage.isSynced)
}

// .protowire.RPCError error = 1000;
inline bool GetBlockTemplateResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetBlockTemplateResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetBlockTemplateResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetBlockTemplateResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetBlockTemplateResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockTemplateResponseMessage.error)
  return _internal_error();
}
inline void GetBlockTemplateResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetBlockTemplateResponseMessage.error)
}
inline ::protowire::RPCError* GetBlockTemplateResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetBlockTemplateResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetBlockTemplateResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetBlockTemplateResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetBlockTemplateResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetBlockTemplateResponseMessage.error)
  return _msg;
}
inline void GetBlockTemplateResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBlockTemplateResponseMessage.error)
}

// -------------------------------------------------------------------

// NotifyBlockAddedRequestMessage

// -------------------------------------------------------------------

// NotifyBlockAddedResponseMessage

// .protowire.RPCError error = 1000;
inline bool NotifyBlockAddedResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool NotifyBlockAddedResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void NotifyBlockAddedResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& NotifyBlockAddedResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& NotifyBlockAddedResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.NotifyBlockAddedResponseMessage.error)
  return _internal_error();
}
inline void NotifyBlockAddedResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.NotifyBlockAddedResponseMessage.error)
}
inline ::protowire::RPCError* NotifyBlockAddedResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* NotifyBlockAddedResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.NotifyBlockAddedResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* NotifyBlockAddedResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* NotifyBlockAddedResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.NotifyBlockAddedResponseMessage.error)
  return _msg;
}
inline void NotifyBlockAddedResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.NotifyBlockAddedResponseMessage.error)
}

// -------------------------------------------------------------------

// BlockAddedNotificationMessage

// .protowire.RpcBlock block = 3;
inline bool BlockAddedNotificationMessage::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool BlockAddedNotificationMessage::has_block() const {
  return _internal_has_block();
}
inline void BlockAddedNotificationMessage::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::protowire::RpcBlock& BlockAddedNotificationMessage::_internal_block() const {
  const ::protowire::RpcBlock* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcBlock&>(
      ::protowire::_RpcBlock_default_instance_);
}
inline const ::protowire::RpcBlock& BlockAddedNotificationMessage::block() const {
  // @@protoc_insertion_point(field_get:protowire.BlockAddedNotificationMessage.block)
  return _internal_block();
}
inline void BlockAddedNotificationMessage::unsafe_arena_set_allocated_block(
    ::protowire::RpcBlock* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.BlockAddedNotificationMessage.block)
}
inline ::protowire::RpcBlock* BlockAddedNotificationMessage::release_block() {
  
  ::protowire::RpcBlock* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcBlock* BlockAddedNotificationMessage::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:protowire.BlockAddedNotificationMessage.block)
  
  ::protowire::RpcBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::protowire::RpcBlock* BlockAddedNotificationMessage::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcBlock>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::protowire::RpcBlock* BlockAddedNotificationMessage::mutable_block() {
  ::protowire::RpcBlock* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:protowire.BlockAddedNotificationMessage.block)
  return _msg;
}
inline void BlockAddedNotificationMessage::set_allocated_block(::protowire::RpcBlock* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcBlock>::GetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:protowire.BlockAddedNotificationMessage.block)
}

// -------------------------------------------------------------------

// GetPeerAddressesRequestMessage

// -------------------------------------------------------------------

// GetPeerAddressesResponseMessage

// repeated .protowire.GetPeerAddressesKnownAddressMessage addresses = 1;
inline int GetPeerAddressesResponseMessage::_internal_addresses_size() const {
  return addresses_.size();
}
inline int GetPeerAddressesResponseMessage::addresses_size() const {
  return _internal_addresses_size();
}
inline void GetPeerAddressesResponseMessage::clear_addresses() {
  addresses_.Clear();
}
inline ::protowire::GetPeerAddressesKnownAddressMessage* GetPeerAddressesResponseMessage::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetPeerAddressesResponseMessage.addresses)
  return addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetPeerAddressesKnownAddressMessage >*
GetPeerAddressesResponseMessage::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetPeerAddressesResponseMessage.addresses)
  return &addresses_;
}
inline const ::protowire::GetPeerAddressesKnownAddressMessage& GetPeerAddressesResponseMessage::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const ::protowire::GetPeerAddressesKnownAddressMessage& GetPeerAddressesResponseMessage::addresses(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetPeerAddressesResponseMessage.addresses)
  return _internal_addresses(index);
}
inline ::protowire::GetPeerAddressesKnownAddressMessage* GetPeerAddressesResponseMessage::_internal_add_addresses() {
  return addresses_.Add();
}
inline ::protowire::GetPeerAddressesKnownAddressMessage* GetPeerAddressesResponseMessage::add_addresses() {
  ::protowire::GetPeerAddressesKnownAddressMessage* _add = _internal_add_addresses();
  // @@protoc_insertion_point(field_add:protowire.GetPeerAddressesResponseMessage.addresses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetPeerAddressesKnownAddressMessage >&
GetPeerAddressesResponseMessage::addresses() const {
  // @@protoc_insertion_point(field_list:protowire.GetPeerAddressesResponseMessage.addresses)
  return addresses_;
}

// repeated .protowire.GetPeerAddressesKnownAddressMessage bannedAddresses = 2;
inline int GetPeerAddressesResponseMessage::_internal_bannedaddresses_size() const {
  return bannedaddresses_.size();
}
inline int GetPeerAddressesResponseMessage::bannedaddresses_size() const {
  return _internal_bannedaddresses_size();
}
inline void GetPeerAddressesResponseMessage::clear_bannedaddresses() {
  bannedaddresses_.Clear();
}
inline ::protowire::GetPeerAddressesKnownAddressMessage* GetPeerAddressesResponseMessage::mutable_bannedaddresses(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetPeerAddressesResponseMessage.bannedAddresses)
  return bannedaddresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetPeerAddressesKnownAddressMessage >*
GetPeerAddressesResponseMessage::mutable_bannedaddresses() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetPeerAddressesResponseMessage.bannedAddresses)
  return &bannedaddresses_;
}
inline const ::protowire::GetPeerAddressesKnownAddressMessage& GetPeerAddressesResponseMessage::_internal_bannedaddresses(int index) const {
  return bannedaddresses_.Get(index);
}
inline const ::protowire::GetPeerAddressesKnownAddressMessage& GetPeerAddressesResponseMessage::bannedaddresses(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetPeerAddressesResponseMessage.bannedAddresses)
  return _internal_bannedaddresses(index);
}
inline ::protowire::GetPeerAddressesKnownAddressMessage* GetPeerAddressesResponseMessage::_internal_add_bannedaddresses() {
  return bannedaddresses_.Add();
}
inline ::protowire::GetPeerAddressesKnownAddressMessage* GetPeerAddressesResponseMessage::add_bannedaddresses() {
  ::protowire::GetPeerAddressesKnownAddressMessage* _add = _internal_add_bannedaddresses();
  // @@protoc_insertion_point(field_add:protowire.GetPeerAddressesResponseMessage.bannedAddresses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetPeerAddressesKnownAddressMessage >&
GetPeerAddressesResponseMessage::bannedaddresses() const {
  // @@protoc_insertion_point(field_list:protowire.GetPeerAddressesResponseMessage.bannedAddresses)
  return bannedaddresses_;
}

// .protowire.RPCError error = 1000;
inline bool GetPeerAddressesResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetPeerAddressesResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetPeerAddressesResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetPeerAddressesResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetPeerAddressesResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetPeerAddressesResponseMessage.error)
  return _internal_error();
}
inline void GetPeerAddressesResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetPeerAddressesResponseMessage.error)
}
inline ::protowire::RPCError* GetPeerAddressesResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetPeerAddressesResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetPeerAddressesResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetPeerAddressesResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetPeerAddressesResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetPeerAddressesResponseMessage.error)
  return _msg;
}
inline void GetPeerAddressesResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetPeerAddressesResponseMessage.error)
}

// -------------------------------------------------------------------

// GetPeerAddressesKnownAddressMessage

// string Addr = 1;
inline void GetPeerAddressesKnownAddressMessage::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& GetPeerAddressesKnownAddressMessage::addr() const {
  // @@protoc_insertion_point(field_get:protowire.GetPeerAddressesKnownAddressMessage.Addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPeerAddressesKnownAddressMessage::set_addr(ArgT0&& arg0, ArgT... args) {
 
 addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetPeerAddressesKnownAddressMessage.Addr)
}
inline std::string* GetPeerAddressesKnownAddressMessage::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:protowire.GetPeerAddressesKnownAddressMessage.Addr)
  return _s;
}
inline const std::string& GetPeerAddressesKnownAddressMessage::_internal_addr() const {
  return addr_.Get();
}
inline void GetPeerAddressesKnownAddressMessage::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPeerAddressesKnownAddressMessage::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPeerAddressesKnownAddressMessage::release_addr() {
  // @@protoc_insertion_point(field_release:protowire.GetPeerAddressesKnownAddressMessage.Addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPeerAddressesKnownAddressMessage::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (addr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetPeerAddressesKnownAddressMessage.Addr)
}

// -------------------------------------------------------------------

// GetSelectedTipHashRequestMessage

// -------------------------------------------------------------------

// GetSelectedTipHashResponseMessage

// string selectedTipHash = 1;
inline void GetSelectedTipHashResponseMessage::clear_selectedtiphash() {
  selectedtiphash_.ClearToEmpty();
}
inline const std::string& GetSelectedTipHashResponseMessage::selectedtiphash() const {
  // @@protoc_insertion_point(field_get:protowire.GetSelectedTipHashResponseMessage.selectedTipHash)
  return _internal_selectedtiphash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSelectedTipHashResponseMessage::set_selectedtiphash(ArgT0&& arg0, ArgT... args) {
 
 selectedtiphash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetSelectedTipHashResponseMessage.selectedTipHash)
}
inline std::string* GetSelectedTipHashResponseMessage::mutable_selectedtiphash() {
  std::string* _s = _internal_mutable_selectedtiphash();
  // @@protoc_insertion_point(field_mutable:protowire.GetSelectedTipHashResponseMessage.selectedTipHash)
  return _s;
}
inline const std::string& GetSelectedTipHashResponseMessage::_internal_selectedtiphash() const {
  return selectedtiphash_.Get();
}
inline void GetSelectedTipHashResponseMessage::_internal_set_selectedtiphash(const std::string& value) {
  
  selectedtiphash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetSelectedTipHashResponseMessage::_internal_mutable_selectedtiphash() {
  
  return selectedtiphash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetSelectedTipHashResponseMessage::release_selectedtiphash() {
  // @@protoc_insertion_point(field_release:protowire.GetSelectedTipHashResponseMessage.selectedTipHash)
  return selectedtiphash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetSelectedTipHashResponseMessage::set_allocated_selectedtiphash(std::string* selectedtiphash) {
  if (selectedtiphash != nullptr) {
    
  } else {
    
  }
  selectedtiphash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selectedtiphash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (selectedtiphash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    selectedtiphash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetSelectedTipHashResponseMessage.selectedTipHash)
}

// .protowire.RPCError error = 1000;
inline bool GetSelectedTipHashResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetSelectedTipHashResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetSelectedTipHashResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetSelectedTipHashResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetSelectedTipHashResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetSelectedTipHashResponseMessage.error)
  return _internal_error();
}
inline void GetSelectedTipHashResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetSelectedTipHashResponseMessage.error)
}
inline ::protowire::RPCError* GetSelectedTipHashResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetSelectedTipHashResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetSelectedTipHashResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetSelectedTipHashResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetSelectedTipHashResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetSelectedTipHashResponseMessage.error)
  return _msg;
}
inline void GetSelectedTipHashResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetSelectedTipHashResponseMessage.error)
}

// -------------------------------------------------------------------

// GetMempoolEntryRequestMessage

// string txId = 1;
inline void GetMempoolEntryRequestMessage::clear_txid() {
  txid_.ClearToEmpty();
}
inline const std::string& GetMempoolEntryRequestMessage::txid() const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntryRequestMessage.txId)
  return _internal_txid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMempoolEntryRequestMessage::set_txid(ArgT0&& arg0, ArgT... args) {
 
 txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetMempoolEntryRequestMessage.txId)
}
inline std::string* GetMempoolEntryRequestMessage::mutable_txid() {
  std::string* _s = _internal_mutable_txid();
  // @@protoc_insertion_point(field_mutable:protowire.GetMempoolEntryRequestMessage.txId)
  return _s;
}
inline const std::string& GetMempoolEntryRequestMessage::_internal_txid() const {
  return txid_.Get();
}
inline void GetMempoolEntryRequestMessage::_internal_set_txid(const std::string& value) {
  
  txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetMempoolEntryRequestMessage::_internal_mutable_txid() {
  
  return txid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetMempoolEntryRequestMessage::release_txid() {
  // @@protoc_insertion_point(field_release:protowire.GetMempoolEntryRequestMessage.txId)
  return txid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetMempoolEntryRequestMessage::set_allocated_txid(std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (txid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetMempoolEntryRequestMessage.txId)
}

// bool includeOrphanPool = 2;
inline void GetMempoolEntryRequestMessage::clear_includeorphanpool() {
  includeorphanpool_ = false;
}
inline bool GetMempoolEntryRequestMessage::_internal_includeorphanpool() const {
  return includeorphanpool_;
}
inline bool GetMempoolEntryRequestMessage::includeorphanpool() const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntryRequestMessage.includeOrphanPool)
  return _internal_includeorphanpool();
}
inline void GetMempoolEntryRequestMessage::_internal_set_includeorphanpool(bool value) {
  
  includeorphanpool_ = value;
}
inline void GetMempoolEntryRequestMessage::set_includeorphanpool(bool value) {
  _internal_set_includeorphanpool(value);
  // @@protoc_insertion_point(field_set:protowire.GetMempoolEntryRequestMessage.includeOrphanPool)
}

// bool filterTransactionPool = 3;
inline void GetMempoolEntryRequestMessage::clear_filtertransactionpool() {
  filtertransactionpool_ = false;
}
inline bool GetMempoolEntryRequestMessage::_internal_filtertransactionpool() const {
  return filtertransactionpool_;
}
inline bool GetMempoolEntryRequestMessage::filtertransactionpool() const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntryRequestMessage.filterTransactionPool)
  return _internal_filtertransactionpool();
}
inline void GetMempoolEntryRequestMessage::_internal_set_filtertransactionpool(bool value) {
  
  filtertransactionpool_ = value;
}
inline void GetMempoolEntryRequestMessage::set_filtertransactionpool(bool value) {
  _internal_set_filtertransactionpool(value);
  // @@protoc_insertion_point(field_set:protowire.GetMempoolEntryRequestMessage.filterTransactionPool)
}

// -------------------------------------------------------------------

// GetMempoolEntryResponseMessage

// .protowire.MempoolEntry entry = 1;
inline bool GetMempoolEntryResponseMessage::_internal_has_entry() const {
  return this != internal_default_instance() && entry_ != nullptr;
}
inline bool GetMempoolEntryResponseMessage::has_entry() const {
  return _internal_has_entry();
}
inline void GetMempoolEntryResponseMessage::clear_entry() {
  if (GetArenaForAllocation() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
}
inline const ::protowire::MempoolEntry& GetMempoolEntryResponseMessage::_internal_entry() const {
  const ::protowire::MempoolEntry* p = entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::MempoolEntry&>(
      ::protowire::_MempoolEntry_default_instance_);
}
inline const ::protowire::MempoolEntry& GetMempoolEntryResponseMessage::entry() const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntryResponseMessage.entry)
  return _internal_entry();
}
inline void GetMempoolEntryResponseMessage::unsafe_arena_set_allocated_entry(
    ::protowire::MempoolEntry* entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  entry_ = entry;
  if (entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetMempoolEntryResponseMessage.entry)
}
inline ::protowire::MempoolEntry* GetMempoolEntryResponseMessage::release_entry() {
  
  ::protowire::MempoolEntry* temp = entry_;
  entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::MempoolEntry* GetMempoolEntryResponseMessage::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:protowire.GetMempoolEntryResponseMessage.entry)
  
  ::protowire::MempoolEntry* temp = entry_;
  entry_ = nullptr;
  return temp;
}
inline ::protowire::MempoolEntry* GetMempoolEntryResponseMessage::_internal_mutable_entry() {
  
  if (entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::MempoolEntry>(GetArenaForAllocation());
    entry_ = p;
  }
  return entry_;
}
inline ::protowire::MempoolEntry* GetMempoolEntryResponseMessage::mutable_entry() {
  ::protowire::MempoolEntry* _msg = _internal_mutable_entry();
  // @@protoc_insertion_point(field_mutable:protowire.GetMempoolEntryResponseMessage.entry)
  return _msg;
}
inline void GetMempoolEntryResponseMessage::set_allocated_entry(::protowire::MempoolEntry* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete entry_;
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::MempoolEntry>::GetOwningArena(entry);
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    
  } else {
    
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetMempoolEntryResponseMessage.entry)
}

// .protowire.RPCError error = 1000;
inline bool GetMempoolEntryResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetMempoolEntryResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetMempoolEntryResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetMempoolEntryResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetMempoolEntryResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntryResponseMessage.error)
  return _internal_error();
}
inline void GetMempoolEntryResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetMempoolEntryResponseMessage.error)
}
inline ::protowire::RPCError* GetMempoolEntryResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetMempoolEntryResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetMempoolEntryResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetMempoolEntryResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetMempoolEntryResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetMempoolEntryResponseMessage.error)
  return _msg;
}
inline void GetMempoolEntryResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetMempoolEntryResponseMessage.error)
}

// -------------------------------------------------------------------

// GetMempoolEntriesRequestMessage

// bool includeOrphanPool = 1;
inline void GetMempoolEntriesRequestMessage::clear_includeorphanpool() {
  includeorphanpool_ = false;
}
inline bool GetMempoolEntriesRequestMessage::_internal_includeorphanpool() const {
  return includeorphanpool_;
}
inline bool GetMempoolEntriesRequestMessage::includeorphanpool() const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntriesRequestMessage.includeOrphanPool)
  return _internal_includeorphanpool();
}
inline void GetMempoolEntriesRequestMessage::_internal_set_includeorphanpool(bool value) {
  
  includeorphanpool_ = value;
}
inline void GetMempoolEntriesRequestMessage::set_includeorphanpool(bool value) {
  _internal_set_includeorphanpool(value);
  // @@protoc_insertion_point(field_set:protowire.GetMempoolEntriesRequestMessage.includeOrphanPool)
}

// bool filterTransactionPool = 2;
inline void GetMempoolEntriesRequestMessage::clear_filtertransactionpool() {
  filtertransactionpool_ = false;
}
inline bool GetMempoolEntriesRequestMessage::_internal_filtertransactionpool() const {
  return filtertransactionpool_;
}
inline bool GetMempoolEntriesRequestMessage::filtertransactionpool() const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntriesRequestMessage.filterTransactionPool)
  return _internal_filtertransactionpool();
}
inline void GetMempoolEntriesRequestMessage::_internal_set_filtertransactionpool(bool value) {
  
  filtertransactionpool_ = value;
}
inline void GetMempoolEntriesRequestMessage::set_filtertransactionpool(bool value) {
  _internal_set_filtertransactionpool(value);
  // @@protoc_insertion_point(field_set:protowire.GetMempoolEntriesRequestMessage.filterTransactionPool)
}

// -------------------------------------------------------------------

// GetMempoolEntriesResponseMessage

// repeated .protowire.MempoolEntry entries = 1;
inline int GetMempoolEntriesResponseMessage::_internal_entries_size() const {
  return entries_.size();
}
inline int GetMempoolEntriesResponseMessage::entries_size() const {
  return _internal_entries_size();
}
inline void GetMempoolEntriesResponseMessage::clear_entries() {
  entries_.Clear();
}
inline ::protowire::MempoolEntry* GetMempoolEntriesResponseMessage::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetMempoolEntriesResponseMessage.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry >*
GetMempoolEntriesResponseMessage::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetMempoolEntriesResponseMessage.entries)
  return &entries_;
}
inline const ::protowire::MempoolEntry& GetMempoolEntriesResponseMessage::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::protowire::MempoolEntry& GetMempoolEntriesResponseMessage::entries(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntriesResponseMessage.entries)
  return _internal_entries(index);
}
inline ::protowire::MempoolEntry* GetMempoolEntriesResponseMessage::_internal_add_entries() {
  return entries_.Add();
}
inline ::protowire::MempoolEntry* GetMempoolEntriesResponseMessage::add_entries() {
  ::protowire::MempoolEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:protowire.GetMempoolEntriesResponseMessage.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry >&
GetMempoolEntriesResponseMessage::entries() const {
  // @@protoc_insertion_point(field_list:protowire.GetMempoolEntriesResponseMessage.entries)
  return entries_;
}

// .protowire.RPCError error = 1000;
inline bool GetMempoolEntriesResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetMempoolEntriesResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetMempoolEntriesResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetMempoolEntriesResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetMempoolEntriesResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntriesResponseMessage.error)
  return _internal_error();
}
inline void GetMempoolEntriesResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetMempoolEntriesResponseMessage.error)
}
inline ::protowire::RPCError* GetMempoolEntriesResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetMempoolEntriesResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetMempoolEntriesResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetMempoolEntriesResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetMempoolEntriesResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetMempoolEntriesResponseMessage.error)
  return _msg;
}
inline void GetMempoolEntriesResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetMempoolEntriesResponseMessage.error)
}

// -------------------------------------------------------------------

// MempoolEntry

// uint64 fee = 1;
inline void MempoolEntry::clear_fee() {
  fee_ = uint64_t{0u};
}
inline uint64_t MempoolEntry::_internal_fee() const {
  return fee_;
}
inline uint64_t MempoolEntry::fee() const {
  // @@protoc_insertion_point(field_get:protowire.MempoolEntry.fee)
  return _internal_fee();
}
inline void MempoolEntry::_internal_set_fee(uint64_t value) {
  
  fee_ = value;
}
inline void MempoolEntry::set_fee(uint64_t value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:protowire.MempoolEntry.fee)
}

// .protowire.RpcTransaction transaction = 3;
inline bool MempoolEntry::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool MempoolEntry::has_transaction() const {
  return _internal_has_transaction();
}
inline void MempoolEntry::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::protowire::RpcTransaction& MempoolEntry::_internal_transaction() const {
  const ::protowire::RpcTransaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcTransaction&>(
      ::protowire::_RpcTransaction_default_instance_);
}
inline const ::protowire::RpcTransaction& MempoolEntry::transaction() const {
  // @@protoc_insertion_point(field_get:protowire.MempoolEntry.transaction)
  return _internal_transaction();
}
inline void MempoolEntry::unsafe_arena_set_allocated_transaction(
    ::protowire::RpcTransaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.MempoolEntry.transaction)
}
inline ::protowire::RpcTransaction* MempoolEntry::release_transaction() {
  
  ::protowire::RpcTransaction* temp = transaction_;
  transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcTransaction* MempoolEntry::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:protowire.MempoolEntry.transaction)
  
  ::protowire::RpcTransaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::protowire::RpcTransaction* MempoolEntry::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcTransaction>(GetArenaForAllocation());
    transaction_ = p;
  }
  return transaction_;
}
inline ::protowire::RpcTransaction* MempoolEntry::mutable_transaction() {
  ::protowire::RpcTransaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:protowire.MempoolEntry.transaction)
  return _msg;
}
inline void MempoolEntry::set_allocated_transaction(::protowire::RpcTransaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcTransaction>::GetOwningArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:protowire.MempoolEntry.transaction)
}

// bool isOrphan = 4;
inline void MempoolEntry::clear_isorphan() {
  isorphan_ = false;
}
inline bool MempoolEntry::_internal_isorphan() const {
  return isorphan_;
}
inline bool MempoolEntry::isorphan() const {
  // @@protoc_insertion_point(field_get:protowire.MempoolEntry.isOrphan)
  return _internal_isorphan();
}
inline void MempoolEntry::_internal_set_isorphan(bool value) {
  
  isorphan_ = value;
}
inline void MempoolEntry::set_isorphan(bool value) {
  _internal_set_isorphan(value);
  // @@protoc_insertion_point(field_set:protowire.MempoolEntry.isOrphan)
}

// -------------------------------------------------------------------

// GetConnectedPeerInfoRequestMessage

// -------------------------------------------------------------------

// GetConnectedPeerInfoResponseMessage

// repeated .protowire.GetConnectedPeerInfoMessage infos = 1;
inline int GetConnectedPeerInfoResponseMessage::_internal_infos_size() const {
  return infos_.size();
}
inline int GetConnectedPeerInfoResponseMessage::infos_size() const {
  return _internal_infos_size();
}
inline void GetConnectedPeerInfoResponseMessage::clear_infos() {
  infos_.Clear();
}
inline ::protowire::GetConnectedPeerInfoMessage* GetConnectedPeerInfoResponseMessage::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetConnectedPeerInfoResponseMessage.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetConnectedPeerInfoMessage >*
GetConnectedPeerInfoResponseMessage::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetConnectedPeerInfoResponseMessage.infos)
  return &infos_;
}
inline const ::protowire::GetConnectedPeerInfoMessage& GetConnectedPeerInfoResponseMessage::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::protowire::GetConnectedPeerInfoMessage& GetConnectedPeerInfoResponseMessage::infos(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetConnectedPeerInfoResponseMessage.infos)
  return _internal_infos(index);
}
inline ::protowire::GetConnectedPeerInfoMessage* GetConnectedPeerInfoResponseMessage::_internal_add_infos() {
  return infos_.Add();
}
inline ::protowire::GetConnectedPeerInfoMessage* GetConnectedPeerInfoResponseMessage::add_infos() {
  ::protowire::GetConnectedPeerInfoMessage* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:protowire.GetConnectedPeerInfoResponseMessage.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::GetConnectedPeerInfoMessage >&
GetConnectedPeerInfoResponseMessage::infos() const {
  // @@protoc_insertion_point(field_list:protowire.GetConnectedPeerInfoResponseMessage.infos)
  return infos_;
}

// .protowire.RPCError error = 1000;
inline bool GetConnectedPeerInfoResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetConnectedPeerInfoResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetConnectedPeerInfoResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetConnectedPeerInfoResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetConnectedPeerInfoResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetConnectedPeerInfoResponseMessage.error)
  return _internal_error();
}
inline void GetConnectedPeerInfoResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetConnectedPeerInfoResponseMessage.error)
}
inline ::protowire::RPCError* GetConnectedPeerInfoResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetConnectedPeerInfoResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetConnectedPeerInfoResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetConnectedPeerInfoResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetConnectedPeerInfoResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetConnectedPeerInfoResponseMessage.error)
  return _msg;
}
inline void GetConnectedPeerInfoResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetConnectedPeerInfoResponseMessage.error)
}

// -------------------------------------------------------------------

// GetConnectedPeerInfoMessage

// string id = 1;
inline void GetConnectedPeerInfoMessage::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetConnectedPeerInfoMessage::id() const {
  // @@protoc_insertion_point(field_get:protowire.GetConnectedPeerInfoMessage.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetConnectedPeerInfoMessage::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetConnectedPeerInfoMessage.id)
}
inline std::string* GetConnectedPeerInfoMessage::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:protowire.GetConnectedPeerInfoMessage.id)
  return _s;
}
inline const std::string& GetConnectedPeerInfoMessage::_internal_id() const {
  return id_.Get();
}
inline void GetConnectedPeerInfoMessage::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetConnectedPeerInfoMessage::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetConnectedPeerInfoMessage::release_id() {
  // @@protoc_insertion_point(field_release:protowire.GetConnectedPeerInfoMessage.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetConnectedPeerInfoMessage::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetConnectedPeerInfoMessage.id)
}

// string address = 2;
inline void GetConnectedPeerInfoMessage::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& GetConnectedPeerInfoMessage::address() const {
  // @@protoc_insertion_point(field_get:protowire.GetConnectedPeerInfoMessage.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetConnectedPeerInfoMessage::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetConnectedPeerInfoMessage.address)
}
inline std::string* GetConnectedPeerInfoMessage::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:protowire.GetConnectedPeerInfoMessage.address)
  return _s;
}
inline const std::string& GetConnectedPeerInfoMessage::_internal_address() const {
  return address_.Get();
}
inline void GetConnectedPeerInfoMessage::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetConnectedPeerInfoMessage::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetConnectedPeerInfoMessage::release_address() {
  // @@protoc_insertion_point(field_release:protowire.GetConnectedPeerInfoMessage.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetConnectedPeerInfoMessage::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetConnectedPeerInfoMessage.address)
}

// int64 lastPingDuration = 3;
inline void GetConnectedPeerInfoMessage::clear_lastpingduration() {
  lastpingduration_ = int64_t{0};
}
inline int64_t GetConnectedPeerInfoMessage::_internal_lastpingduration() const {
  return lastpingduration_;
}
inline int64_t GetConnectedPeerInfoMessage::lastpingduration() const {
  // @@protoc_insertion_point(field_get:protowire.GetConnectedPeerInfoMessage.lastPingDuration)
  return _internal_lastpingduration();
}
inline void GetConnectedPeerInfoMessage::_internal_set_lastpingduration(int64_t value) {
  
  lastpingduration_ = value;
}
inline void GetConnectedPeerInfoMessage::set_lastpingduration(int64_t value) {
  _internal_set_lastpingduration(value);
  // @@protoc_insertion_point(field_set:protowire.GetConnectedPeerInfoMessage.lastPingDuration)
}

// bool isOutbound = 6;
inline void GetConnectedPeerInfoMessage::clear_isoutbound() {
  isoutbound_ = false;
}
inline bool GetConnectedPeerInfoMessage::_internal_isoutbound() const {
  return isoutbound_;
}
inline bool GetConnectedPeerInfoMessage::isoutbound() const {
  // @@protoc_insertion_point(field_get:protowire.GetConnectedPeerInfoMessage.isOutbound)
  return _internal_isoutbound();
}
inline void GetConnectedPeerInfoMessage::_internal_set_isoutbound(bool value) {
  
  isoutbound_ = value;
}
inline void GetConnectedPeerInfoMessage::set_isoutbound(bool value) {
  _internal_set_isoutbound(value);
  // @@protoc_insertion_point(field_set:protowire.GetConnectedPeerInfoMessage.isOutbound)
}

// int64 timeOffset = 7;
inline void GetConnectedPeerInfoMessage::clear_timeoffset() {
  timeoffset_ = int64_t{0};
}
inline int64_t GetConnectedPeerInfoMessage::_internal_timeoffset() const {
  return timeoffset_;
}
inline int64_t GetConnectedPeerInfoMessage::timeoffset() const {
  // @@protoc_insertion_point(field_get:protowire.GetConnectedPeerInfoMessage.timeOffset)
  return _internal_timeoffset();
}
inline void GetConnectedPeerInfoMessage::_internal_set_timeoffset(int64_t value) {
  
  timeoffset_ = value;
}
inline void GetConnectedPeerInfoMessage::set_timeoffset(int64_t value) {
  _internal_set_timeoffset(value);
  // @@protoc_insertion_point(field_set:protowire.GetConnectedPeerInfoMessage.timeOffset)
}

// string userAgent = 8;
inline void GetConnectedPeerInfoMessage::clear_useragent() {
  useragent_.ClearToEmpty();
}
inline const std::string& GetConnectedPeerInfoMessage::useragent() const {
  // @@protoc_insertion_point(field_get:protowire.GetConnectedPeerInfoMessage.userAgent)
  return _internal_useragent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetConnectedPeerInfoMessage::set_useragent(ArgT0&& arg0, ArgT... args) {
 
 useragent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetConnectedPeerInfoMessage.userAgent)
}
inline std::string* GetConnectedPeerInfoMessage::mutable_useragent() {
  std::string* _s = _internal_mutable_useragent();
  // @@protoc_insertion_point(field_mutable:protowire.GetConnectedPeerInfoMessage.userAgent)
  return _s;
}
inline const std::string& GetConnectedPeerInfoMessage::_internal_useragent() const {
  return useragent_.Get();
}
inline void GetConnectedPeerInfoMessage::_internal_set_useragent(const std::string& value) {
  
  useragent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetConnectedPeerInfoMessage::_internal_mutable_useragent() {
  
  return useragent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetConnectedPeerInfoMessage::release_useragent() {
  // @@protoc_insertion_point(field_release:protowire.GetConnectedPeerInfoMessage.userAgent)
  return useragent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetConnectedPeerInfoMessage::set_allocated_useragent(std::string* useragent) {
  if (useragent != nullptr) {
    
  } else {
    
  }
  useragent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), useragent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (useragent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    useragent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetConnectedPeerInfoMessage.userAgent)
}

// uint32 advertisedProtocolVersion = 9;
inline void GetConnectedPeerInfoMessage::clear_advertisedprotocolversion() {
  advertisedprotocolversion_ = 0u;
}
inline uint32_t GetConnectedPeerInfoMessage::_internal_advertisedprotocolversion() const {
  return advertisedprotocolversion_;
}
inline uint32_t GetConnectedPeerInfoMessage::advertisedprotocolversion() const {
  // @@protoc_insertion_point(field_get:protowire.GetConnectedPeerInfoMessage.advertisedProtocolVersion)
  return _internal_advertisedprotocolversion();
}
inline void GetConnectedPeerInfoMessage::_internal_set_advertisedprotocolversion(uint32_t value) {
  
  advertisedprotocolversion_ = value;
}
inline void GetConnectedPeerInfoMessage::set_advertisedprotocolversion(uint32_t value) {
  _internal_set_advertisedprotocolversion(value);
  // @@protoc_insertion_point(field_set:protowire.GetConnectedPeerInfoMessage.advertisedProtocolVersion)
}

// int64 timeConnected = 10;
inline void GetConnectedPeerInfoMessage::clear_timeconnected() {
  timeconnected_ = int64_t{0};
}
inline int64_t GetConnectedPeerInfoMessage::_internal_timeconnected() const {
  return timeconnected_;
}
inline int64_t GetConnectedPeerInfoMessage::timeconnected() const {
  // @@protoc_insertion_point(field_get:protowire.GetConnectedPeerInfoMessage.timeConnected)
  return _internal_timeconnected();
}
inline void GetConnectedPeerInfoMessage::_internal_set_timeconnected(int64_t value) {
  
  timeconnected_ = value;
}
inline void GetConnectedPeerInfoMessage::set_timeconnected(int64_t value) {
  _internal_set_timeconnected(value);
  // @@protoc_insertion_point(field_set:protowire.GetConnectedPeerInfoMessage.timeConnected)
}

// bool isIbdPeer = 11;
inline void GetConnectedPeerInfoMessage::clear_isibdpeer() {
  isibdpeer_ = false;
}
inline bool GetConnectedPeerInfoMessage::_internal_isibdpeer() const {
  return isibdpeer_;
}
inline bool GetConnectedPeerInfoMessage::isibdpeer() const {
  // @@protoc_insertion_point(field_get:protowire.GetConnectedPeerInfoMessage.isIbdPeer)
  return _internal_isibdpeer();
}
inline void GetConnectedPeerInfoMessage::_internal_set_isibdpeer(bool value) {
  
  isibdpeer_ = value;
}
inline void GetConnectedPeerInfoMessage::set_isibdpeer(bool value) {
  _internal_set_isibdpeer(value);
  // @@protoc_insertion_point(field_set:protowire.GetConnectedPeerInfoMessage.isIbdPeer)
}

// -------------------------------------------------------------------

// AddPeerRequestMessage

// string address = 1;
inline void AddPeerRequestMessage::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& AddPeerRequestMessage::address() const {
  // @@protoc_insertion_point(field_get:protowire.AddPeerRequestMessage.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPeerRequestMessage::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.AddPeerRequestMessage.address)
}
inline std::string* AddPeerRequestMessage::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:protowire.AddPeerRequestMessage.address)
  return _s;
}
inline const std::string& AddPeerRequestMessage::_internal_address() const {
  return address_.Get();
}
inline void AddPeerRequestMessage::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPeerRequestMessage::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPeerRequestMessage::release_address() {
  // @@protoc_insertion_point(field_release:protowire.AddPeerRequestMessage.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPeerRequestMessage::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.AddPeerRequestMessage.address)
}

// bool isPermanent = 2;
inline void AddPeerRequestMessage::clear_ispermanent() {
  ispermanent_ = false;
}
inline bool AddPeerRequestMessage::_internal_ispermanent() const {
  return ispermanent_;
}
inline bool AddPeerRequestMessage::ispermanent() const {
  // @@protoc_insertion_point(field_get:protowire.AddPeerRequestMessage.isPermanent)
  return _internal_ispermanent();
}
inline void AddPeerRequestMessage::_internal_set_ispermanent(bool value) {
  
  ispermanent_ = value;
}
inline void AddPeerRequestMessage::set_ispermanent(bool value) {
  _internal_set_ispermanent(value);
  // @@protoc_insertion_point(field_set:protowire.AddPeerRequestMessage.isPermanent)
}

// -------------------------------------------------------------------

// AddPeerResponseMessage

// .protowire.RPCError error = 1000;
inline bool AddPeerResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool AddPeerResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void AddPeerResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& AddPeerResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& AddPeerResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.AddPeerResponseMessage.error)
  return _internal_error();
}
inline void AddPeerResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.AddPeerResponseMessage.error)
}
inline ::protowire::RPCError* AddPeerResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* AddPeerResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.AddPeerResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* AddPeerResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* AddPeerResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.AddPeerResponseMessage.error)
  return _msg;
}
inline void AddPeerResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.AddPeerResponseMessage.error)
}

// -------------------------------------------------------------------

// SubmitTransactionRequestMessage

// .protowire.RpcTransaction transaction = 1;
inline bool SubmitTransactionRequestMessage::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool SubmitTransactionRequestMessage::has_transaction() const {
  return _internal_has_transaction();
}
inline void SubmitTransactionRequestMessage::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::protowire::RpcTransaction& SubmitTransactionRequestMessage::_internal_transaction() const {
  const ::protowire::RpcTransaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcTransaction&>(
      ::protowire::_RpcTransaction_default_instance_);
}
inline const ::protowire::RpcTransaction& SubmitTransactionRequestMessage::transaction() const {
  // @@protoc_insertion_point(field_get:protowire.SubmitTransactionRequestMessage.transaction)
  return _internal_transaction();
}
inline void SubmitTransactionRequestMessage::unsafe_arena_set_allocated_transaction(
    ::protowire::RpcTransaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.SubmitTransactionRequestMessage.transaction)
}
inline ::protowire::RpcTransaction* SubmitTransactionRequestMessage::release_transaction() {
  
  ::protowire::RpcTransaction* temp = transaction_;
  transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcTransaction* SubmitTransactionRequestMessage::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:protowire.SubmitTransactionRequestMessage.transaction)
  
  ::protowire::RpcTransaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::protowire::RpcTransaction* SubmitTransactionRequestMessage::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcTransaction>(GetArenaForAllocation());
    transaction_ = p;
  }
  return transaction_;
}
inline ::protowire::RpcTransaction* SubmitTransactionRequestMessage::mutable_transaction() {
  ::protowire::RpcTransaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:protowire.SubmitTransactionRequestMessage.transaction)
  return _msg;
}
inline void SubmitTransactionRequestMessage::set_allocated_transaction(::protowire::RpcTransaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcTransaction>::GetOwningArena(transaction);
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:protowire.SubmitTransactionRequestMessage.transaction)
}

// bool allowOrphan = 2;
inline void SubmitTransactionRequestMessage::clear_alloworphan() {
  alloworphan_ = false;
}
inline bool SubmitTransactionRequestMessage::_internal_alloworphan() const {
  return alloworphan_;
}
inline bool SubmitTransactionRequestMessage::alloworphan() const {
  // @@protoc_insertion_point(field_get:protowire.SubmitTransactionRequestMessage.allowOrphan)
  return _internal_alloworphan();
}
inline void SubmitTransactionRequestMessage::_internal_set_alloworphan(bool value) {
  
  alloworphan_ = value;
}
inline void SubmitTransactionRequestMessage::set_alloworphan(bool value) {
  _internal_set_alloworphan(value);
  // @@protoc_insertion_point(field_set:protowire.SubmitTransactionRequestMessage.allowOrphan)
}

// -------------------------------------------------------------------

// SubmitTransactionResponseMessage

// string transactionId = 1;
inline void SubmitTransactionResponseMessage::clear_transactionid() {
  transactionid_.ClearToEmpty();
}
inline const std::string& SubmitTransactionResponseMessage::transactionid() const {
  // @@protoc_insertion_point(field_get:protowire.SubmitTransactionResponseMessage.transactionId)
  return _internal_transactionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubmitTransactionResponseMessage::set_transactionid(ArgT0&& arg0, ArgT... args) {
 
 transactionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.SubmitTransactionResponseMessage.transactionId)
}
inline std::string* SubmitTransactionResponseMessage::mutable_transactionid() {
  std::string* _s = _internal_mutable_transactionid();
  // @@protoc_insertion_point(field_mutable:protowire.SubmitTransactionResponseMessage.transactionId)
  return _s;
}
inline const std::string& SubmitTransactionResponseMessage::_internal_transactionid() const {
  return transactionid_.Get();
}
inline void SubmitTransactionResponseMessage::_internal_set_transactionid(const std::string& value) {
  
  transactionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SubmitTransactionResponseMessage::_internal_mutable_transactionid() {
  
  return transactionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SubmitTransactionResponseMessage::release_transactionid() {
  // @@protoc_insertion_point(field_release:protowire.SubmitTransactionResponseMessage.transactionId)
  return transactionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SubmitTransactionResponseMessage::set_allocated_transactionid(std::string* transactionid) {
  if (transactionid != nullptr) {
    
  } else {
    
  }
  transactionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transactionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (transactionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    transactionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.SubmitTransactionResponseMessage.transactionId)
}

// .protowire.RPCError error = 1000;
inline bool SubmitTransactionResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool SubmitTransactionResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void SubmitTransactionResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& SubmitTransactionResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& SubmitTransactionResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.SubmitTransactionResponseMessage.error)
  return _internal_error();
}
inline void SubmitTransactionResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.SubmitTransactionResponseMessage.error)
}
inline ::protowire::RPCError* SubmitTransactionResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* SubmitTransactionResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.SubmitTransactionResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* SubmitTransactionResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* SubmitTransactionResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.SubmitTransactionResponseMessage.error)
  return _msg;
}
inline void SubmitTransactionResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.SubmitTransactionResponseMessage.error)
}

// -------------------------------------------------------------------

// NotifyVirtualSelectedParentChainChangedRequestMessage

// bool includeAcceptedTransactionIds = 1;
inline void NotifyVirtualSelectedParentChainChangedRequestMessage::clear_includeacceptedtransactionids() {
  includeacceptedtransactionids_ = false;
}
inline bool NotifyVirtualSelectedParentChainChangedRequestMessage::_internal_includeacceptedtransactionids() const {
  return includeacceptedtransactionids_;
}
inline bool NotifyVirtualSelectedParentChainChangedRequestMessage::includeacceptedtransactionids() const {
  // @@protoc_insertion_point(field_get:protowire.NotifyVirtualSelectedParentChainChangedRequestMessage.includeAcceptedTransactionIds)
  return _internal_includeacceptedtransactionids();
}
inline void NotifyVirtualSelectedParentChainChangedRequestMessage::_internal_set_includeacceptedtransactionids(bool value) {
  
  includeacceptedtransactionids_ = value;
}
inline void NotifyVirtualSelectedParentChainChangedRequestMessage::set_includeacceptedtransactionids(bool value) {
  _internal_set_includeacceptedtransactionids(value);
  // @@protoc_insertion_point(field_set:protowire.NotifyVirtualSelectedParentChainChangedRequestMessage.includeAcceptedTransactionIds)
}

// -------------------------------------------------------------------

// NotifyVirtualSelectedParentChainChangedResponseMessage

// .protowire.RPCError error = 1000;
inline bool NotifyVirtualSelectedParentChainChangedResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool NotifyVirtualSelectedParentChainChangedResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void NotifyVirtualSelectedParentChainChangedResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& NotifyVirtualSelectedParentChainChangedResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& NotifyVirtualSelectedParentChainChangedResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.NotifyVirtualSelectedParentChainChangedResponseMessage.error)
  return _internal_error();
}
inline void NotifyVirtualSelectedParentChainChangedResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.NotifyVirtualSelectedParentChainChangedResponseMessage.error)
}
inline ::protowire::RPCError* NotifyVirtualSelectedParentChainChangedResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* NotifyVirtualSelectedParentChainChangedResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.NotifyVirtualSelectedParentChainChangedResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* NotifyVirtualSelectedParentChainChangedResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* NotifyVirtualSelectedParentChainChangedResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.NotifyVirtualSelectedParentChainChangedResponseMessage.error)
  return _msg;
}
inline void NotifyVirtualSelectedParentChainChangedResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.NotifyVirtualSelectedParentChainChangedResponseMessage.error)
}

// -------------------------------------------------------------------

// VirtualSelectedParentChainChangedNotificationMessage

// repeated string removedChainBlockHashes = 1;
inline int VirtualSelectedParentChainChangedNotificationMessage::_internal_removedchainblockhashes_size() const {
  return removedchainblockhashes_.size();
}
inline int VirtualSelectedParentChainChangedNotificationMessage::removedchainblockhashes_size() const {
  return _internal_removedchainblockhashes_size();
}
inline void VirtualSelectedParentChainChangedNotificationMessage::clear_removedchainblockhashes() {
  removedchainblockhashes_.Clear();
}
inline std::string* VirtualSelectedParentChainChangedNotificationMessage::add_removedchainblockhashes() {
  std::string* _s = _internal_add_removedchainblockhashes();
  // @@protoc_insertion_point(field_add_mutable:protowire.VirtualSelectedParentChainChangedNotificationMessage.removedChainBlockHashes)
  return _s;
}
inline const std::string& VirtualSelectedParentChainChangedNotificationMessage::_internal_removedchainblockhashes(int index) const {
  return removedchainblockhashes_.Get(index);
}
inline const std::string& VirtualSelectedParentChainChangedNotificationMessage::removedchainblockhashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.VirtualSelectedParentChainChangedNotificationMessage.removedChainBlockHashes)
  return _internal_removedchainblockhashes(index);
}
inline std::string* VirtualSelectedParentChainChangedNotificationMessage::mutable_removedchainblockhashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.VirtualSelectedParentChainChangedNotificationMessage.removedChainBlockHashes)
  return removedchainblockhashes_.Mutable(index);
}
inline void VirtualSelectedParentChainChangedNotificationMessage::set_removedchainblockhashes(int index, const std::string& value) {
  removedchainblockhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.VirtualSelectedParentChainChangedNotificationMessage.removedChainBlockHashes)
}
inline void VirtualSelectedParentChainChangedNotificationMessage::set_removedchainblockhashes(int index, std::string&& value) {
  removedchainblockhashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.VirtualSelectedParentChainChangedNotificationMessage.removedChainBlockHashes)
}
inline void VirtualSelectedParentChainChangedNotificationMessage::set_removedchainblockhashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  removedchainblockhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.VirtualSelectedParentChainChangedNotificationMessage.removedChainBlockHashes)
}
inline void VirtualSelectedParentChainChangedNotificationMessage::set_removedchainblockhashes(int index, const char* value, size_t size) {
  removedchainblockhashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.VirtualSelectedParentChainChangedNotificationMessage.removedChainBlockHashes)
}
inline std::string* VirtualSelectedParentChainChangedNotificationMessage::_internal_add_removedchainblockhashes() {
  return removedchainblockhashes_.Add();
}
inline void VirtualSelectedParentChainChangedNotificationMessage::add_removedchainblockhashes(const std::string& value) {
  removedchainblockhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.VirtualSelectedParentChainChangedNotificationMessage.removedChainBlockHashes)
}
inline void VirtualSelectedParentChainChangedNotificationMessage::add_removedchainblockhashes(std::string&& value) {
  removedchainblockhashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.VirtualSelectedParentChainChangedNotificationMessage.removedChainBlockHashes)
}
inline void VirtualSelectedParentChainChangedNotificationMessage::add_removedchainblockhashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  removedchainblockhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.VirtualSelectedParentChainChangedNotificationMessage.removedChainBlockHashes)
}
inline void VirtualSelectedParentChainChangedNotificationMessage::add_removedchainblockhashes(const char* value, size_t size) {
  removedchainblockhashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.VirtualSelectedParentChainChangedNotificationMessage.removedChainBlockHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VirtualSelectedParentChainChangedNotificationMessage::removedchainblockhashes() const {
  // @@protoc_insertion_point(field_list:protowire.VirtualSelectedParentChainChangedNotificationMessage.removedChainBlockHashes)
  return removedchainblockhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VirtualSelectedParentChainChangedNotificationMessage::mutable_removedchainblockhashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.VirtualSelectedParentChainChangedNotificationMessage.removedChainBlockHashes)
  return &removedchainblockhashes_;
}

// repeated string addedChainBlockHashes = 3;
inline int VirtualSelectedParentChainChangedNotificationMessage::_internal_addedchainblockhashes_size() const {
  return addedchainblockhashes_.size();
}
inline int VirtualSelectedParentChainChangedNotificationMessage::addedchainblockhashes_size() const {
  return _internal_addedchainblockhashes_size();
}
inline void VirtualSelectedParentChainChangedNotificationMessage::clear_addedchainblockhashes() {
  addedchainblockhashes_.Clear();
}
inline std::string* VirtualSelectedParentChainChangedNotificationMessage::add_addedchainblockhashes() {
  std::string* _s = _internal_add_addedchainblockhashes();
  // @@protoc_insertion_point(field_add_mutable:protowire.VirtualSelectedParentChainChangedNotificationMessage.addedChainBlockHashes)
  return _s;
}
inline const std::string& VirtualSelectedParentChainChangedNotificationMessage::_internal_addedchainblockhashes(int index) const {
  return addedchainblockhashes_.Get(index);
}
inline const std::string& VirtualSelectedParentChainChangedNotificationMessage::addedchainblockhashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.VirtualSelectedParentChainChangedNotificationMessage.addedChainBlockHashes)
  return _internal_addedchainblockhashes(index);
}
inline std::string* VirtualSelectedParentChainChangedNotificationMessage::mutable_addedchainblockhashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.VirtualSelectedParentChainChangedNotificationMessage.addedChainBlockHashes)
  return addedchainblockhashes_.Mutable(index);
}
inline void VirtualSelectedParentChainChangedNotificationMessage::set_addedchainblockhashes(int index, const std::string& value) {
  addedchainblockhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.VirtualSelectedParentChainChangedNotificationMessage.addedChainBlockHashes)
}
inline void VirtualSelectedParentChainChangedNotificationMessage::set_addedchainblockhashes(int index, std::string&& value) {
  addedchainblockhashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.VirtualSelectedParentChainChangedNotificationMessage.addedChainBlockHashes)
}
inline void VirtualSelectedParentChainChangedNotificationMessage::set_addedchainblockhashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addedchainblockhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.VirtualSelectedParentChainChangedNotificationMessage.addedChainBlockHashes)
}
inline void VirtualSelectedParentChainChangedNotificationMessage::set_addedchainblockhashes(int index, const char* value, size_t size) {
  addedchainblockhashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.VirtualSelectedParentChainChangedNotificationMessage.addedChainBlockHashes)
}
inline std::string* VirtualSelectedParentChainChangedNotificationMessage::_internal_add_addedchainblockhashes() {
  return addedchainblockhashes_.Add();
}
inline void VirtualSelectedParentChainChangedNotificationMessage::add_addedchainblockhashes(const std::string& value) {
  addedchainblockhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.VirtualSelectedParentChainChangedNotificationMessage.addedChainBlockHashes)
}
inline void VirtualSelectedParentChainChangedNotificationMessage::add_addedchainblockhashes(std::string&& value) {
  addedchainblockhashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.VirtualSelectedParentChainChangedNotificationMessage.addedChainBlockHashes)
}
inline void VirtualSelectedParentChainChangedNotificationMessage::add_addedchainblockhashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addedchainblockhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.VirtualSelectedParentChainChangedNotificationMessage.addedChainBlockHashes)
}
inline void VirtualSelectedParentChainChangedNotificationMessage::add_addedchainblockhashes(const char* value, size_t size) {
  addedchainblockhashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.VirtualSelectedParentChainChangedNotificationMessage.addedChainBlockHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VirtualSelectedParentChainChangedNotificationMessage::addedchainblockhashes() const {
  // @@protoc_insertion_point(field_list:protowire.VirtualSelectedParentChainChangedNotificationMessage.addedChainBlockHashes)
  return addedchainblockhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VirtualSelectedParentChainChangedNotificationMessage::mutable_addedchainblockhashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.VirtualSelectedParentChainChangedNotificationMessage.addedChainBlockHashes)
  return &addedchainblockhashes_;
}

// repeated .protowire.AcceptedTransactionIds acceptedTransactionIds = 2;
inline int VirtualSelectedParentChainChangedNotificationMessage::_internal_acceptedtransactionids_size() const {
  return acceptedtransactionids_.size();
}
inline int VirtualSelectedParentChainChangedNotificationMessage::acceptedtransactionids_size() const {
  return _internal_acceptedtransactionids_size();
}
inline void VirtualSelectedParentChainChangedNotificationMessage::clear_acceptedtransactionids() {
  acceptedtransactionids_.Clear();
}
inline ::protowire::AcceptedTransactionIds* VirtualSelectedParentChainChangedNotificationMessage::mutable_acceptedtransactionids(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.VirtualSelectedParentChainChangedNotificationMessage.acceptedTransactionIds)
  return acceptedtransactionids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::AcceptedTransactionIds >*
VirtualSelectedParentChainChangedNotificationMessage::mutable_acceptedtransactionids() {
  // @@protoc_insertion_point(field_mutable_list:protowire.VirtualSelectedParentChainChangedNotificationMessage.acceptedTransactionIds)
  return &acceptedtransactionids_;
}
inline const ::protowire::AcceptedTransactionIds& VirtualSelectedParentChainChangedNotificationMessage::_internal_acceptedtransactionids(int index) const {
  return acceptedtransactionids_.Get(index);
}
inline const ::protowire::AcceptedTransactionIds& VirtualSelectedParentChainChangedNotificationMessage::acceptedtransactionids(int index) const {
  // @@protoc_insertion_point(field_get:protowire.VirtualSelectedParentChainChangedNotificationMessage.acceptedTransactionIds)
  return _internal_acceptedtransactionids(index);
}
inline ::protowire::AcceptedTransactionIds* VirtualSelectedParentChainChangedNotificationMessage::_internal_add_acceptedtransactionids() {
  return acceptedtransactionids_.Add();
}
inline ::protowire::AcceptedTransactionIds* VirtualSelectedParentChainChangedNotificationMessage::add_acceptedtransactionids() {
  ::protowire::AcceptedTransactionIds* _add = _internal_add_acceptedtransactionids();
  // @@protoc_insertion_point(field_add:protowire.VirtualSelectedParentChainChangedNotificationMessage.acceptedTransactionIds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::AcceptedTransactionIds >&
VirtualSelectedParentChainChangedNotificationMessage::acceptedtransactionids() const {
  // @@protoc_insertion_point(field_list:protowire.VirtualSelectedParentChainChangedNotificationMessage.acceptedTransactionIds)
  return acceptedtransactionids_;
}

// -------------------------------------------------------------------

// GetBlockRequestMessage

// string hash = 1;
inline void GetBlockRequestMessage::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& GetBlockRequestMessage::hash() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockRequestMessage.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockRequestMessage::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetBlockRequestMessage.hash)
}
inline std::string* GetBlockRequestMessage::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:protowire.GetBlockRequestMessage.hash)
  return _s;
}
inline const std::string& GetBlockRequestMessage::_internal_hash() const {
  return hash_.Get();
}
inline void GetBlockRequestMessage::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockRequestMessage::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockRequestMessage::release_hash() {
  // @@protoc_insertion_point(field_release:protowire.GetBlockRequestMessage.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockRequestMessage::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBlockRequestMessage.hash)
}

// bool includeTransactions = 3;
inline void GetBlockRequestMessage::clear_includetransactions() {
  includetransactions_ = false;
}
inline bool GetBlockRequestMessage::_internal_includetransactions() const {
  return includetransactions_;
}
inline bool GetBlockRequestMessage::includetransactions() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockRequestMessage.includeTransactions)
  return _internal_includetransactions();
}
inline void GetBlockRequestMessage::_internal_set_includetransactions(bool value) {
  
  includetransactions_ = value;
}
inline void GetBlockRequestMessage::set_includetransactions(bool value) {
  _internal_set_includetransactions(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlockRequestMessage.includeTransactions)
}

// -------------------------------------------------------------------

// GetBlockResponseMessage

// .protowire.RpcBlock block = 3;
inline bool GetBlockResponseMessage::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool GetBlockResponseMessage::has_block() const {
  return _internal_has_block();
}
inline void GetBlockResponseMessage::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::protowire::RpcBlock& GetBlockResponseMessage::_internal_block() const {
  const ::protowire::RpcBlock* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcBlock&>(
      ::protowire::_RpcBlock_default_instance_);
}
inline const ::protowire::RpcBlock& GetBlockResponseMessage::block() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockResponseMessage.block)
  return _internal_block();
}
inline void GetBlockResponseMessage::unsafe_arena_set_allocated_block(
    ::protowire::RpcBlock* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetBlockResponseMessage.block)
}
inline ::protowire::RpcBlock* GetBlockResponseMessage::release_block() {
  
  ::protowire::RpcBlock* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcBlock* GetBlockResponseMessage::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:protowire.GetBlockResponseMessage.block)
  
  ::protowire::RpcBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::protowire::RpcBlock* GetBlockResponseMessage::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcBlock>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::protowire::RpcBlock* GetBlockResponseMessage::mutable_block() {
  ::protowire::RpcBlock* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:protowire.GetBlockResponseMessage.block)
  return _msg;
}
inline void GetBlockResponseMessage::set_allocated_block(::protowire::RpcBlock* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcBlock>::GetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBlockResponseMessage.block)
}

// .protowire.RPCError error = 1000;
inline bool GetBlockResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetBlockResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetBlockResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetBlockResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetBlockResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockResponseMessage.error)
  return _internal_error();
}
inline void GetBlockResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetBlockResponseMessage.error)
}
inline ::protowire::RPCError* GetBlockResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetBlockResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetBlockResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetBlockResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetBlockResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetBlockResponseMessage.error)
  return _msg;
}
inline void GetBlockResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBlockResponseMessage.error)
}

// -------------------------------------------------------------------

// GetSubnetworkRequestMessage

// string subnetworkId = 1;
inline void GetSubnetworkRequestMessage::clear_subnetworkid() {
  subnetworkid_.ClearToEmpty();
}
inline const std::string& GetSubnetworkRequestMessage::subnetworkid() const {
  // @@protoc_insertion_point(field_get:protowire.GetSubnetworkRequestMessage.subnetworkId)
  return _internal_subnetworkid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSubnetworkRequestMessage::set_subnetworkid(ArgT0&& arg0, ArgT... args) {
 
 subnetworkid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetSubnetworkRequestMessage.subnetworkId)
}
inline std::string* GetSubnetworkRequestMessage::mutable_subnetworkid() {
  std::string* _s = _internal_mutable_subnetworkid();
  // @@protoc_insertion_point(field_mutable:protowire.GetSubnetworkRequestMessage.subnetworkId)
  return _s;
}
inline const std::string& GetSubnetworkRequestMessage::_internal_subnetworkid() const {
  return subnetworkid_.Get();
}
inline void GetSubnetworkRequestMessage::_internal_set_subnetworkid(const std::string& value) {
  
  subnetworkid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetSubnetworkRequestMessage::_internal_mutable_subnetworkid() {
  
  return subnetworkid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetSubnetworkRequestMessage::release_subnetworkid() {
  // @@protoc_insertion_point(field_release:protowire.GetSubnetworkRequestMessage.subnetworkId)
  return subnetworkid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetSubnetworkRequestMessage::set_allocated_subnetworkid(std::string* subnetworkid) {
  if (subnetworkid != nullptr) {
    
  } else {
    
  }
  subnetworkid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subnetworkid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subnetworkid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subnetworkid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetSubnetworkRequestMessage.subnetworkId)
}

// -------------------------------------------------------------------

// GetSubnetworkResponseMessage

// uint64 gasLimit = 1;
inline void GetSubnetworkResponseMessage::clear_gaslimit() {
  gaslimit_ = uint64_t{0u};
}
inline uint64_t GetSubnetworkResponseMessage::_internal_gaslimit() const {
  return gaslimit_;
}
inline uint64_t GetSubnetworkResponseMessage::gaslimit() const {
  // @@protoc_insertion_point(field_get:protowire.GetSubnetworkResponseMessage.gasLimit)
  return _internal_gaslimit();
}
inline void GetSubnetworkResponseMessage::_internal_set_gaslimit(uint64_t value) {
  
  gaslimit_ = value;
}
inline void GetSubnetworkResponseMessage::set_gaslimit(uint64_t value) {
  _internal_set_gaslimit(value);
  // @@protoc_insertion_point(field_set:protowire.GetSubnetworkResponseMessage.gasLimit)
}

// .protowire.RPCError error = 1000;
inline bool GetSubnetworkResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetSubnetworkResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetSubnetworkResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetSubnetworkResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetSubnetworkResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetSubnetworkResponseMessage.error)
  return _internal_error();
}
inline void GetSubnetworkResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetSubnetworkResponseMessage.error)
}
inline ::protowire::RPCError* GetSubnetworkResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetSubnetworkResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetSubnetworkResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetSubnetworkResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetSubnetworkResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetSubnetworkResponseMessage.error)
  return _msg;
}
inline void GetSubnetworkResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetSubnetworkResponseMessage.error)
}

// -------------------------------------------------------------------

// GetVirtualSelectedParentChainFromBlockRequestMessage

// string startHash = 1;
inline void GetVirtualSelectedParentChainFromBlockRequestMessage::clear_starthash() {
  starthash_.ClearToEmpty();
}
inline const std::string& GetVirtualSelectedParentChainFromBlockRequestMessage::starthash() const {
  // @@protoc_insertion_point(field_get:protowire.GetVirtualSelectedParentChainFromBlockRequestMessage.startHash)
  return _internal_starthash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVirtualSelectedParentChainFromBlockRequestMessage::set_starthash(ArgT0&& arg0, ArgT... args) {
 
 starthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetVirtualSelectedParentChainFromBlockRequestMessage.startHash)
}
inline std::string* GetVirtualSelectedParentChainFromBlockRequestMessage::mutable_starthash() {
  std::string* _s = _internal_mutable_starthash();
  // @@protoc_insertion_point(field_mutable:protowire.GetVirtualSelectedParentChainFromBlockRequestMessage.startHash)
  return _s;
}
inline const std::string& GetVirtualSelectedParentChainFromBlockRequestMessage::_internal_starthash() const {
  return starthash_.Get();
}
inline void GetVirtualSelectedParentChainFromBlockRequestMessage::_internal_set_starthash(const std::string& value) {
  
  starthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetVirtualSelectedParentChainFromBlockRequestMessage::_internal_mutable_starthash() {
  
  return starthash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetVirtualSelectedParentChainFromBlockRequestMessage::release_starthash() {
  // @@protoc_insertion_point(field_release:protowire.GetVirtualSelectedParentChainFromBlockRequestMessage.startHash)
  return starthash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetVirtualSelectedParentChainFromBlockRequestMessage::set_allocated_starthash(std::string* starthash) {
  if (starthash != nullptr) {
    
  } else {
    
  }
  starthash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), starthash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (starthash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    starthash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetVirtualSelectedParentChainFromBlockRequestMessage.startHash)
}

// bool includeAcceptedTransactionIds = 2;
inline void GetVirtualSelectedParentChainFromBlockRequestMessage::clear_includeacceptedtransactionids() {
  includeacceptedtransactionids_ = false;
}
inline bool GetVirtualSelectedParentChainFromBlockRequestMessage::_internal_includeacceptedtransactionids() const {
  return includeacceptedtransactionids_;
}
inline bool GetVirtualSelectedParentChainFromBlockRequestMessage::includeacceptedtransactionids() const {
  // @@protoc_insertion_point(field_get:protowire.GetVirtualSelectedParentChainFromBlockRequestMessage.includeAcceptedTransactionIds)
  return _internal_includeacceptedtransactionids();
}
inline void GetVirtualSelectedParentChainFromBlockRequestMessage::_internal_set_includeacceptedtransactionids(bool value) {
  
  includeacceptedtransactionids_ = value;
}
inline void GetVirtualSelectedParentChainFromBlockRequestMessage::set_includeacceptedtransactionids(bool value) {
  _internal_set_includeacceptedtransactionids(value);
  // @@protoc_insertion_point(field_set:protowire.GetVirtualSelectedParentChainFromBlockRequestMessage.includeAcceptedTransactionIds)
}

// -------------------------------------------------------------------

// AcceptedTransactionIds

// string acceptingBlockHash = 1;
inline void AcceptedTransactionIds::clear_acceptingblockhash() {
  acceptingblockhash_.ClearToEmpty();
}
inline const std::string& AcceptedTransactionIds::acceptingblockhash() const {
  // @@protoc_insertion_point(field_get:protowire.AcceptedTransactionIds.acceptingBlockHash)
  return _internal_acceptingblockhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AcceptedTransactionIds::set_acceptingblockhash(ArgT0&& arg0, ArgT... args) {
 
 acceptingblockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.AcceptedTransactionIds.acceptingBlockHash)
}
inline std::string* AcceptedTransactionIds::mutable_acceptingblockhash() {
  std::string* _s = _internal_mutable_acceptingblockhash();
  // @@protoc_insertion_point(field_mutable:protowire.AcceptedTransactionIds.acceptingBlockHash)
  return _s;
}
inline const std::string& AcceptedTransactionIds::_internal_acceptingblockhash() const {
  return acceptingblockhash_.Get();
}
inline void AcceptedTransactionIds::_internal_set_acceptingblockhash(const std::string& value) {
  
  acceptingblockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AcceptedTransactionIds::_internal_mutable_acceptingblockhash() {
  
  return acceptingblockhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AcceptedTransactionIds::release_acceptingblockhash() {
  // @@protoc_insertion_point(field_release:protowire.AcceptedTransactionIds.acceptingBlockHash)
  return acceptingblockhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AcceptedTransactionIds::set_allocated_acceptingblockhash(std::string* acceptingblockhash) {
  if (acceptingblockhash != nullptr) {
    
  } else {
    
  }
  acceptingblockhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acceptingblockhash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (acceptingblockhash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    acceptingblockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.AcceptedTransactionIds.acceptingBlockHash)
}

// repeated string acceptedTransactionIds = 2;
inline int AcceptedTransactionIds::_internal_acceptedtransactionids_size() const {
  return acceptedtransactionids_.size();
}
inline int AcceptedTransactionIds::acceptedtransactionids_size() const {
  return _internal_acceptedtransactionids_size();
}
inline void AcceptedTransactionIds::clear_acceptedtransactionids() {
  acceptedtransactionids_.Clear();
}
inline std::string* AcceptedTransactionIds::add_acceptedtransactionids() {
  std::string* _s = _internal_add_acceptedtransactionids();
  // @@protoc_insertion_point(field_add_mutable:protowire.AcceptedTransactionIds.acceptedTransactionIds)
  return _s;
}
inline const std::string& AcceptedTransactionIds::_internal_acceptedtransactionids(int index) const {
  return acceptedtransactionids_.Get(index);
}
inline const std::string& AcceptedTransactionIds::acceptedtransactionids(int index) const {
  // @@protoc_insertion_point(field_get:protowire.AcceptedTransactionIds.acceptedTransactionIds)
  return _internal_acceptedtransactionids(index);
}
inline std::string* AcceptedTransactionIds::mutable_acceptedtransactionids(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.AcceptedTransactionIds.acceptedTransactionIds)
  return acceptedtransactionids_.Mutable(index);
}
inline void AcceptedTransactionIds::set_acceptedtransactionids(int index, const std::string& value) {
  acceptedtransactionids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.AcceptedTransactionIds.acceptedTransactionIds)
}
inline void AcceptedTransactionIds::set_acceptedtransactionids(int index, std::string&& value) {
  acceptedtransactionids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.AcceptedTransactionIds.acceptedTransactionIds)
}
inline void AcceptedTransactionIds::set_acceptedtransactionids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  acceptedtransactionids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.AcceptedTransactionIds.acceptedTransactionIds)
}
inline void AcceptedTransactionIds::set_acceptedtransactionids(int index, const char* value, size_t size) {
  acceptedtransactionids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.AcceptedTransactionIds.acceptedTransactionIds)
}
inline std::string* AcceptedTransactionIds::_internal_add_acceptedtransactionids() {
  return acceptedtransactionids_.Add();
}
inline void AcceptedTransactionIds::add_acceptedtransactionids(const std::string& value) {
  acceptedtransactionids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.AcceptedTransactionIds.acceptedTransactionIds)
}
inline void AcceptedTransactionIds::add_acceptedtransactionids(std::string&& value) {
  acceptedtransactionids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.AcceptedTransactionIds.acceptedTransactionIds)
}
inline void AcceptedTransactionIds::add_acceptedtransactionids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  acceptedtransactionids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.AcceptedTransactionIds.acceptedTransactionIds)
}
inline void AcceptedTransactionIds::add_acceptedtransactionids(const char* value, size_t size) {
  acceptedtransactionids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.AcceptedTransactionIds.acceptedTransactionIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AcceptedTransactionIds::acceptedtransactionids() const {
  // @@protoc_insertion_point(field_list:protowire.AcceptedTransactionIds.acceptedTransactionIds)
  return acceptedtransactionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AcceptedTransactionIds::mutable_acceptedtransactionids() {
  // @@protoc_insertion_point(field_mutable_list:protowire.AcceptedTransactionIds.acceptedTransactionIds)
  return &acceptedtransactionids_;
}

// -------------------------------------------------------------------

// GetVirtualSelectedParentChainFromBlockResponseMessage

// repeated string removedChainBlockHashes = 1;
inline int GetVirtualSelectedParentChainFromBlockResponseMessage::_internal_removedchainblockhashes_size() const {
  return removedchainblockhashes_.size();
}
inline int GetVirtualSelectedParentChainFromBlockResponseMessage::removedchainblockhashes_size() const {
  return _internal_removedchainblockhashes_size();
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::clear_removedchainblockhashes() {
  removedchainblockhashes_.Clear();
}
inline std::string* GetVirtualSelectedParentChainFromBlockResponseMessage::add_removedchainblockhashes() {
  std::string* _s = _internal_add_removedchainblockhashes();
  // @@protoc_insertion_point(field_add_mutable:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.removedChainBlockHashes)
  return _s;
}
inline const std::string& GetVirtualSelectedParentChainFromBlockResponseMessage::_internal_removedchainblockhashes(int index) const {
  return removedchainblockhashes_.Get(index);
}
inline const std::string& GetVirtualSelectedParentChainFromBlockResponseMessage::removedchainblockhashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.removedChainBlockHashes)
  return _internal_removedchainblockhashes(index);
}
inline std::string* GetVirtualSelectedParentChainFromBlockResponseMessage::mutable_removedchainblockhashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.removedChainBlockHashes)
  return removedchainblockhashes_.Mutable(index);
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::set_removedchainblockhashes(int index, const std::string& value) {
  removedchainblockhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.removedChainBlockHashes)
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::set_removedchainblockhashes(int index, std::string&& value) {
  removedchainblockhashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.removedChainBlockHashes)
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::set_removedchainblockhashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  removedchainblockhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.removedChainBlockHashes)
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::set_removedchainblockhashes(int index, const char* value, size_t size) {
  removedchainblockhashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.removedChainBlockHashes)
}
inline std::string* GetVirtualSelectedParentChainFromBlockResponseMessage::_internal_add_removedchainblockhashes() {
  return removedchainblockhashes_.Add();
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::add_removedchainblockhashes(const std::string& value) {
  removedchainblockhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.removedChainBlockHashes)
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::add_removedchainblockhashes(std::string&& value) {
  removedchainblockhashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.removedChainBlockHashes)
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::add_removedchainblockhashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  removedchainblockhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.removedChainBlockHashes)
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::add_removedchainblockhashes(const char* value, size_t size) {
  removedchainblockhashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.removedChainBlockHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetVirtualSelectedParentChainFromBlockResponseMessage::removedchainblockhashes() const {
  // @@protoc_insertion_point(field_list:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.removedChainBlockHashes)
  return removedchainblockhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetVirtualSelectedParentChainFromBlockResponseMessage::mutable_removedchainblockhashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.removedChainBlockHashes)
  return &removedchainblockhashes_;
}

// repeated string addedChainBlockHashes = 3;
inline int GetVirtualSelectedParentChainFromBlockResponseMessage::_internal_addedchainblockhashes_size() const {
  return addedchainblockhashes_.size();
}
inline int GetVirtualSelectedParentChainFromBlockResponseMessage::addedchainblockhashes_size() const {
  return _internal_addedchainblockhashes_size();
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::clear_addedchainblockhashes() {
  addedchainblockhashes_.Clear();
}
inline std::string* GetVirtualSelectedParentChainFromBlockResponseMessage::add_addedchainblockhashes() {
  std::string* _s = _internal_add_addedchainblockhashes();
  // @@protoc_insertion_point(field_add_mutable:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.addedChainBlockHashes)
  return _s;
}
inline const std::string& GetVirtualSelectedParentChainFromBlockResponseMessage::_internal_addedchainblockhashes(int index) const {
  return addedchainblockhashes_.Get(index);
}
inline const std::string& GetVirtualSelectedParentChainFromBlockResponseMessage::addedchainblockhashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.addedChainBlockHashes)
  return _internal_addedchainblockhashes(index);
}
inline std::string* GetVirtualSelectedParentChainFromBlockResponseMessage::mutable_addedchainblockhashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.addedChainBlockHashes)
  return addedchainblockhashes_.Mutable(index);
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::set_addedchainblockhashes(int index, const std::string& value) {
  addedchainblockhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.addedChainBlockHashes)
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::set_addedchainblockhashes(int index, std::string&& value) {
  addedchainblockhashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.addedChainBlockHashes)
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::set_addedchainblockhashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addedchainblockhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.addedChainBlockHashes)
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::set_addedchainblockhashes(int index, const char* value, size_t size) {
  addedchainblockhashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.addedChainBlockHashes)
}
inline std::string* GetVirtualSelectedParentChainFromBlockResponseMessage::_internal_add_addedchainblockhashes() {
  return addedchainblockhashes_.Add();
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::add_addedchainblockhashes(const std::string& value) {
  addedchainblockhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.addedChainBlockHashes)
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::add_addedchainblockhashes(std::string&& value) {
  addedchainblockhashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.addedChainBlockHashes)
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::add_addedchainblockhashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addedchainblockhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.addedChainBlockHashes)
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::add_addedchainblockhashes(const char* value, size_t size) {
  addedchainblockhashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.addedChainBlockHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetVirtualSelectedParentChainFromBlockResponseMessage::addedchainblockhashes() const {
  // @@protoc_insertion_point(field_list:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.addedChainBlockHashes)
  return addedchainblockhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetVirtualSelectedParentChainFromBlockResponseMessage::mutable_addedchainblockhashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.addedChainBlockHashes)
  return &addedchainblockhashes_;
}

// repeated .protowire.AcceptedTransactionIds acceptedTransactionIds = 2;
inline int GetVirtualSelectedParentChainFromBlockResponseMessage::_internal_acceptedtransactionids_size() const {
  return acceptedtransactionids_.size();
}
inline int GetVirtualSelectedParentChainFromBlockResponseMessage::acceptedtransactionids_size() const {
  return _internal_acceptedtransactionids_size();
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::clear_acceptedtransactionids() {
  acceptedtransactionids_.Clear();
}
inline ::protowire::AcceptedTransactionIds* GetVirtualSelectedParentChainFromBlockResponseMessage::mutable_acceptedtransactionids(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.acceptedTransactionIds)
  return acceptedtransactionids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::AcceptedTransactionIds >*
GetVirtualSelectedParentChainFromBlockResponseMessage::mutable_acceptedtransactionids() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.acceptedTransactionIds)
  return &acceptedtransactionids_;
}
inline const ::protowire::AcceptedTransactionIds& GetVirtualSelectedParentChainFromBlockResponseMessage::_internal_acceptedtransactionids(int index) const {
  return acceptedtransactionids_.Get(index);
}
inline const ::protowire::AcceptedTransactionIds& GetVirtualSelectedParentChainFromBlockResponseMessage::acceptedtransactionids(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.acceptedTransactionIds)
  return _internal_acceptedtransactionids(index);
}
inline ::protowire::AcceptedTransactionIds* GetVirtualSelectedParentChainFromBlockResponseMessage::_internal_add_acceptedtransactionids() {
  return acceptedtransactionids_.Add();
}
inline ::protowire::AcceptedTransactionIds* GetVirtualSelectedParentChainFromBlockResponseMessage::add_acceptedtransactionids() {
  ::protowire::AcceptedTransactionIds* _add = _internal_add_acceptedtransactionids();
  // @@protoc_insertion_point(field_add:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.acceptedTransactionIds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::AcceptedTransactionIds >&
GetVirtualSelectedParentChainFromBlockResponseMessage::acceptedtransactionids() const {
  // @@protoc_insertion_point(field_list:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.acceptedTransactionIds)
  return acceptedtransactionids_;
}

// .protowire.RPCError error = 1000;
inline bool GetVirtualSelectedParentChainFromBlockResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetVirtualSelectedParentChainFromBlockResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetVirtualSelectedParentChainFromBlockResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetVirtualSelectedParentChainFromBlockResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.error)
  return _internal_error();
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.error)
}
inline ::protowire::RPCError* GetVirtualSelectedParentChainFromBlockResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetVirtualSelectedParentChainFromBlockResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetVirtualSelectedParentChainFromBlockResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetVirtualSelectedParentChainFromBlockResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.error)
  return _msg;
}
inline void GetVirtualSelectedParentChainFromBlockResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetVirtualSelectedParentChainFromBlockResponseMessage.error)
}

// -------------------------------------------------------------------

// GetBlocksRequestMessage

// string lowHash = 1;
inline void GetBlocksRequestMessage::clear_lowhash() {
  lowhash_.ClearToEmpty();
}
inline const std::string& GetBlocksRequestMessage::lowhash() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlocksRequestMessage.lowHash)
  return _internal_lowhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlocksRequestMessage::set_lowhash(ArgT0&& arg0, ArgT... args) {
 
 lowhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetBlocksRequestMessage.lowHash)
}
inline std::string* GetBlocksRequestMessage::mutable_lowhash() {
  std::string* _s = _internal_mutable_lowhash();
  // @@protoc_insertion_point(field_mutable:protowire.GetBlocksRequestMessage.lowHash)
  return _s;
}
inline const std::string& GetBlocksRequestMessage::_internal_lowhash() const {
  return lowhash_.Get();
}
inline void GetBlocksRequestMessage::_internal_set_lowhash(const std::string& value) {
  
  lowhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlocksRequestMessage::_internal_mutable_lowhash() {
  
  return lowhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlocksRequestMessage::release_lowhash() {
  // @@protoc_insertion_point(field_release:protowire.GetBlocksRequestMessage.lowHash)
  return lowhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlocksRequestMessage::set_allocated_lowhash(std::string* lowhash) {
  if (lowhash != nullptr) {
    
  } else {
    
  }
  lowhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lowhash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lowhash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lowhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBlocksRequestMessage.lowHash)
}

// bool includeBlocks = 2;
inline void GetBlocksRequestMessage::clear_includeblocks() {
  includeblocks_ = false;
}
inline bool GetBlocksRequestMessage::_internal_includeblocks() const {
  return includeblocks_;
}
inline bool GetBlocksRequestMessage::includeblocks() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlocksRequestMessage.includeBlocks)
  return _internal_includeblocks();
}
inline void GetBlocksRequestMessage::_internal_set_includeblocks(bool value) {
  
  includeblocks_ = value;
}
inline void GetBlocksRequestMessage::set_includeblocks(bool value) {
  _internal_set_includeblocks(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlocksRequestMessage.includeBlocks)
}

// bool includeTransactions = 3;
inline void GetBlocksRequestMessage::clear_includetransactions() {
  includetransactions_ = false;
}
inline bool GetBlocksRequestMessage::_internal_includetransactions() const {
  return includetransactions_;
}
inline bool GetBlocksRequestMessage::includetransactions() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlocksRequestMessage.includeTransactions)
  return _internal_includetransactions();
}
inline void GetBlocksRequestMessage::_internal_set_includetransactions(bool value) {
  
  includetransactions_ = value;
}
inline void GetBlocksRequestMessage::set_includetransactions(bool value) {
  _internal_set_includetransactions(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlocksRequestMessage.includeTransactions)
}

// -------------------------------------------------------------------

// GetBlocksResponseMessage

// repeated string blockHashes = 4;
inline int GetBlocksResponseMessage::_internal_blockhashes_size() const {
  return blockhashes_.size();
}
inline int GetBlocksResponseMessage::blockhashes_size() const {
  return _internal_blockhashes_size();
}
inline void GetBlocksResponseMessage::clear_blockhashes() {
  blockhashes_.Clear();
}
inline std::string* GetBlocksResponseMessage::add_blockhashes() {
  std::string* _s = _internal_add_blockhashes();
  // @@protoc_insertion_point(field_add_mutable:protowire.GetBlocksResponseMessage.blockHashes)
  return _s;
}
inline const std::string& GetBlocksResponseMessage::_internal_blockhashes(int index) const {
  return blockhashes_.Get(index);
}
inline const std::string& GetBlocksResponseMessage::blockhashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetBlocksResponseMessage.blockHashes)
  return _internal_blockhashes(index);
}
inline std::string* GetBlocksResponseMessage::mutable_blockhashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetBlocksResponseMessage.blockHashes)
  return blockhashes_.Mutable(index);
}
inline void GetBlocksResponseMessage::set_blockhashes(int index, const std::string& value) {
  blockhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlocksResponseMessage.blockHashes)
}
inline void GetBlocksResponseMessage::set_blockhashes(int index, std::string&& value) {
  blockhashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.GetBlocksResponseMessage.blockHashes)
}
inline void GetBlocksResponseMessage::set_blockhashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blockhashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.GetBlocksResponseMessage.blockHashes)
}
inline void GetBlocksResponseMessage::set_blockhashes(int index, const char* value, size_t size) {
  blockhashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.GetBlocksResponseMessage.blockHashes)
}
inline std::string* GetBlocksResponseMessage::_internal_add_blockhashes() {
  return blockhashes_.Add();
}
inline void GetBlocksResponseMessage::add_blockhashes(const std::string& value) {
  blockhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.GetBlocksResponseMessage.blockHashes)
}
inline void GetBlocksResponseMessage::add_blockhashes(std::string&& value) {
  blockhashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.GetBlocksResponseMessage.blockHashes)
}
inline void GetBlocksResponseMessage::add_blockhashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blockhashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.GetBlocksResponseMessage.blockHashes)
}
inline void GetBlocksResponseMessage::add_blockhashes(const char* value, size_t size) {
  blockhashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.GetBlocksResponseMessage.blockHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetBlocksResponseMessage::blockhashes() const {
  // @@protoc_insertion_point(field_list:protowire.GetBlocksResponseMessage.blockHashes)
  return blockhashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetBlocksResponseMessage::mutable_blockhashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetBlocksResponseMessage.blockHashes)
  return &blockhashes_;
}

// repeated .protowire.RpcBlock blocks = 3;
inline int GetBlocksResponseMessage::_internal_blocks_size() const {
  return blocks_.size();
}
inline int GetBlocksResponseMessage::blocks_size() const {
  return _internal_blocks_size();
}
inline void GetBlocksResponseMessage::clear_blocks() {
  blocks_.Clear();
}
inline ::protowire::RpcBlock* GetBlocksResponseMessage::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetBlocksResponseMessage.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcBlock >*
GetBlocksResponseMessage::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetBlocksResponseMessage.blocks)
  return &blocks_;
}
inline const ::protowire::RpcBlock& GetBlocksResponseMessage::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::protowire::RpcBlock& GetBlocksResponseMessage::blocks(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetBlocksResponseMessage.blocks)
  return _internal_blocks(index);
}
inline ::protowire::RpcBlock* GetBlocksResponseMessage::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::protowire::RpcBlock* GetBlocksResponseMessage::add_blocks() {
  ::protowire::RpcBlock* _add = _internal_add_blocks();
  // @@protoc_insertion_point(field_add:protowire.GetBlocksResponseMessage.blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::RpcBlock >&
GetBlocksResponseMessage::blocks() const {
  // @@protoc_insertion_point(field_list:protowire.GetBlocksResponseMessage.blocks)
  return blocks_;
}

// .protowire.RPCError error = 1000;
inline bool GetBlocksResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetBlocksResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetBlocksResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetBlocksResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetBlocksResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlocksResponseMessage.error)
  return _internal_error();
}
inline void GetBlocksResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetBlocksResponseMessage.error)
}
inline ::protowire::RPCError* GetBlocksResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetBlocksResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetBlocksResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetBlocksResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetBlocksResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetBlocksResponseMessage.error)
  return _msg;
}
inline void GetBlocksResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBlocksResponseMessage.error)
}

// -------------------------------------------------------------------

// GetBlockCountRequestMessage

// -------------------------------------------------------------------

// GetBlockCountResponseMessage

// uint64 blockCount = 1;
inline void GetBlockCountResponseMessage::clear_blockcount() {
  blockcount_ = uint64_t{0u};
}
inline uint64_t GetBlockCountResponseMessage::_internal_blockcount() const {
  return blockcount_;
}
inline uint64_t GetBlockCountResponseMessage::blockcount() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockCountResponseMessage.blockCount)
  return _internal_blockcount();
}
inline void GetBlockCountResponseMessage::_internal_set_blockcount(uint64_t value) {
  
  blockcount_ = value;
}
inline void GetBlockCountResponseMessage::set_blockcount(uint64_t value) {
  _internal_set_blockcount(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlockCountResponseMessage.blockCount)
}

// uint64 headerCount = 2;
inline void GetBlockCountResponseMessage::clear_headercount() {
  headercount_ = uint64_t{0u};
}
inline uint64_t GetBlockCountResponseMessage::_internal_headercount() const {
  return headercount_;
}
inline uint64_t GetBlockCountResponseMessage::headercount() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockCountResponseMessage.headerCount)
  return _internal_headercount();
}
inline void GetBlockCountResponseMessage::_internal_set_headercount(uint64_t value) {
  
  headercount_ = value;
}
inline void GetBlockCountResponseMessage::set_headercount(uint64_t value) {
  _internal_set_headercount(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlockCountResponseMessage.headerCount)
}

// .protowire.RPCError error = 1000;
inline bool GetBlockCountResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetBlockCountResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetBlockCountResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetBlockCountResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetBlockCountResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockCountResponseMessage.error)
  return _internal_error();
}
inline void GetBlockCountResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetBlockCountResponseMessage.error)
}
inline ::protowire::RPCError* GetBlockCountResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetBlockCountResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetBlockCountResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetBlockCountResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetBlockCountResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetBlockCountResponseMessage.error)
  return _msg;
}
inline void GetBlockCountResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBlockCountResponseMessage.error)
}

// -------------------------------------------------------------------

// GetBlockDagInfoRequestMessage

// -------------------------------------------------------------------

// GetBlockDagInfoResponseMessage

// string networkName = 1;
inline void GetBlockDagInfoResponseMessage::clear_networkname() {
  networkname_.ClearToEmpty();
}
inline const std::string& GetBlockDagInfoResponseMessage::networkname() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockDagInfoResponseMessage.networkName)
  return _internal_networkname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockDagInfoResponseMessage::set_networkname(ArgT0&& arg0, ArgT... args) {
 
 networkname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetBlockDagInfoResponseMessage.networkName)
}
inline std::string* GetBlockDagInfoResponseMessage::mutable_networkname() {
  std::string* _s = _internal_mutable_networkname();
  // @@protoc_insertion_point(field_mutable:protowire.GetBlockDagInfoResponseMessage.networkName)
  return _s;
}
inline const std::string& GetBlockDagInfoResponseMessage::_internal_networkname() const {
  return networkname_.Get();
}
inline void GetBlockDagInfoResponseMessage::_internal_set_networkname(const std::string& value) {
  
  networkname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockDagInfoResponseMessage::_internal_mutable_networkname() {
  
  return networkname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockDagInfoResponseMessage::release_networkname() {
  // @@protoc_insertion_point(field_release:protowire.GetBlockDagInfoResponseMessage.networkName)
  return networkname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockDagInfoResponseMessage::set_allocated_networkname(std::string* networkname) {
  if (networkname != nullptr) {
    
  } else {
    
  }
  networkname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), networkname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (networkname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    networkname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBlockDagInfoResponseMessage.networkName)
}

// uint64 blockCount = 2;
inline void GetBlockDagInfoResponseMessage::clear_blockcount() {
  blockcount_ = uint64_t{0u};
}
inline uint64_t GetBlockDagInfoResponseMessage::_internal_blockcount() const {
  return blockcount_;
}
inline uint64_t GetBlockDagInfoResponseMessage::blockcount() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockDagInfoResponseMessage.blockCount)
  return _internal_blockcount();
}
inline void GetBlockDagInfoResponseMessage::_internal_set_blockcount(uint64_t value) {
  
  blockcount_ = value;
}
inline void GetBlockDagInfoResponseMessage::set_blockcount(uint64_t value) {
  _internal_set_blockcount(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlockDagInfoResponseMessage.blockCount)
}

// uint64 headerCount = 3;
inline void GetBlockDagInfoResponseMessage::clear_headercount() {
  headercount_ = uint64_t{0u};
}
inline uint64_t GetBlockDagInfoResponseMessage::_internal_headercount() const {
  return headercount_;
}
inline uint64_t GetBlockDagInfoResponseMessage::headercount() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockDagInfoResponseMessage.headerCount)
  return _internal_headercount();
}
inline void GetBlockDagInfoResponseMessage::_internal_set_headercount(uint64_t value) {
  
  headercount_ = value;
}
inline void GetBlockDagInfoResponseMessage::set_headercount(uint64_t value) {
  _internal_set_headercount(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlockDagInfoResponseMessage.headerCount)
}

// repeated string tipHashes = 4;
inline int GetBlockDagInfoResponseMessage::_internal_tiphashes_size() const {
  return tiphashes_.size();
}
inline int GetBlockDagInfoResponseMessage::tiphashes_size() const {
  return _internal_tiphashes_size();
}
inline void GetBlockDagInfoResponseMessage::clear_tiphashes() {
  tiphashes_.Clear();
}
inline std::string* GetBlockDagInfoResponseMessage::add_tiphashes() {
  std::string* _s = _internal_add_tiphashes();
  // @@protoc_insertion_point(field_add_mutable:protowire.GetBlockDagInfoResponseMessage.tipHashes)
  return _s;
}
inline const std::string& GetBlockDagInfoResponseMessage::_internal_tiphashes(int index) const {
  return tiphashes_.Get(index);
}
inline const std::string& GetBlockDagInfoResponseMessage::tiphashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockDagInfoResponseMessage.tipHashes)
  return _internal_tiphashes(index);
}
inline std::string* GetBlockDagInfoResponseMessage::mutable_tiphashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetBlockDagInfoResponseMessage.tipHashes)
  return tiphashes_.Mutable(index);
}
inline void GetBlockDagInfoResponseMessage::set_tiphashes(int index, const std::string& value) {
  tiphashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlockDagInfoResponseMessage.tipHashes)
}
inline void GetBlockDagInfoResponseMessage::set_tiphashes(int index, std::string&& value) {
  tiphashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.GetBlockDagInfoResponseMessage.tipHashes)
}
inline void GetBlockDagInfoResponseMessage::set_tiphashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tiphashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.GetBlockDagInfoResponseMessage.tipHashes)
}
inline void GetBlockDagInfoResponseMessage::set_tiphashes(int index, const char* value, size_t size) {
  tiphashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.GetBlockDagInfoResponseMessage.tipHashes)
}
inline std::string* GetBlockDagInfoResponseMessage::_internal_add_tiphashes() {
  return tiphashes_.Add();
}
inline void GetBlockDagInfoResponseMessage::add_tiphashes(const std::string& value) {
  tiphashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.GetBlockDagInfoResponseMessage.tipHashes)
}
inline void GetBlockDagInfoResponseMessage::add_tiphashes(std::string&& value) {
  tiphashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.GetBlockDagInfoResponseMessage.tipHashes)
}
inline void GetBlockDagInfoResponseMessage::add_tiphashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tiphashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.GetBlockDagInfoResponseMessage.tipHashes)
}
inline void GetBlockDagInfoResponseMessage::add_tiphashes(const char* value, size_t size) {
  tiphashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.GetBlockDagInfoResponseMessage.tipHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetBlockDagInfoResponseMessage::tiphashes() const {
  // @@protoc_insertion_point(field_list:protowire.GetBlockDagInfoResponseMessage.tipHashes)
  return tiphashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetBlockDagInfoResponseMessage::mutable_tiphashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetBlockDagInfoResponseMessage.tipHashes)
  return &tiphashes_;
}

// double difficulty = 5;
inline void GetBlockDagInfoResponseMessage::clear_difficulty() {
  difficulty_ = 0;
}
inline double GetBlockDagInfoResponseMessage::_internal_difficulty() const {
  return difficulty_;
}
inline double GetBlockDagInfoResponseMessage::difficulty() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockDagInfoResponseMessage.difficulty)
  return _internal_difficulty();
}
inline void GetBlockDagInfoResponseMessage::_internal_set_difficulty(double value) {
  
  difficulty_ = value;
}
inline void GetBlockDagInfoResponseMessage::set_difficulty(double value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlockDagInfoResponseMessage.difficulty)
}

// int64 pastMedianTime = 6;
inline void GetBlockDagInfoResponseMessage::clear_pastmediantime() {
  pastmediantime_ = int64_t{0};
}
inline int64_t GetBlockDagInfoResponseMessage::_internal_pastmediantime() const {
  return pastmediantime_;
}
inline int64_t GetBlockDagInfoResponseMessage::pastmediantime() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockDagInfoResponseMessage.pastMedianTime)
  return _internal_pastmediantime();
}
inline void GetBlockDagInfoResponseMessage::_internal_set_pastmediantime(int64_t value) {
  
  pastmediantime_ = value;
}
inline void GetBlockDagInfoResponseMessage::set_pastmediantime(int64_t value) {
  _internal_set_pastmediantime(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlockDagInfoResponseMessage.pastMedianTime)
}

// repeated string virtualParentHashes = 7;
inline int GetBlockDagInfoResponseMessage::_internal_virtualparenthashes_size() const {
  return virtualparenthashes_.size();
}
inline int GetBlockDagInfoResponseMessage::virtualparenthashes_size() const {
  return _internal_virtualparenthashes_size();
}
inline void GetBlockDagInfoResponseMessage::clear_virtualparenthashes() {
  virtualparenthashes_.Clear();
}
inline std::string* GetBlockDagInfoResponseMessage::add_virtualparenthashes() {
  std::string* _s = _internal_add_virtualparenthashes();
  // @@protoc_insertion_point(field_add_mutable:protowire.GetBlockDagInfoResponseMessage.virtualParentHashes)
  return _s;
}
inline const std::string& GetBlockDagInfoResponseMessage::_internal_virtualparenthashes(int index) const {
  return virtualparenthashes_.Get(index);
}
inline const std::string& GetBlockDagInfoResponseMessage::virtualparenthashes(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockDagInfoResponseMessage.virtualParentHashes)
  return _internal_virtualparenthashes(index);
}
inline std::string* GetBlockDagInfoResponseMessage::mutable_virtualparenthashes(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetBlockDagInfoResponseMessage.virtualParentHashes)
  return virtualparenthashes_.Mutable(index);
}
inline void GetBlockDagInfoResponseMessage::set_virtualparenthashes(int index, const std::string& value) {
  virtualparenthashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlockDagInfoResponseMessage.virtualParentHashes)
}
inline void GetBlockDagInfoResponseMessage::set_virtualparenthashes(int index, std::string&& value) {
  virtualparenthashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.GetBlockDagInfoResponseMessage.virtualParentHashes)
}
inline void GetBlockDagInfoResponseMessage::set_virtualparenthashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  virtualparenthashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.GetBlockDagInfoResponseMessage.virtualParentHashes)
}
inline void GetBlockDagInfoResponseMessage::set_virtualparenthashes(int index, const char* value, size_t size) {
  virtualparenthashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.GetBlockDagInfoResponseMessage.virtualParentHashes)
}
inline std::string* GetBlockDagInfoResponseMessage::_internal_add_virtualparenthashes() {
  return virtualparenthashes_.Add();
}
inline void GetBlockDagInfoResponseMessage::add_virtualparenthashes(const std::string& value) {
  virtualparenthashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.GetBlockDagInfoResponseMessage.virtualParentHashes)
}
inline void GetBlockDagInfoResponseMessage::add_virtualparenthashes(std::string&& value) {
  virtualparenthashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.GetBlockDagInfoResponseMessage.virtualParentHashes)
}
inline void GetBlockDagInfoResponseMessage::add_virtualparenthashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  virtualparenthashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.GetBlockDagInfoResponseMessage.virtualParentHashes)
}
inline void GetBlockDagInfoResponseMessage::add_virtualparenthashes(const char* value, size_t size) {
  virtualparenthashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.GetBlockDagInfoResponseMessage.virtualParentHashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetBlockDagInfoResponseMessage::virtualparenthashes() const {
  // @@protoc_insertion_point(field_list:protowire.GetBlockDagInfoResponseMessage.virtualParentHashes)
  return virtualparenthashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetBlockDagInfoResponseMessage::mutable_virtualparenthashes() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetBlockDagInfoResponseMessage.virtualParentHashes)
  return &virtualparenthashes_;
}

// string pruningPointHash = 8;
inline void GetBlockDagInfoResponseMessage::clear_pruningpointhash() {
  pruningpointhash_.ClearToEmpty();
}
inline const std::string& GetBlockDagInfoResponseMessage::pruningpointhash() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockDagInfoResponseMessage.pruningPointHash)
  return _internal_pruningpointhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBlockDagInfoResponseMessage::set_pruningpointhash(ArgT0&& arg0, ArgT... args) {
 
 pruningpointhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetBlockDagInfoResponseMessage.pruningPointHash)
}
inline std::string* GetBlockDagInfoResponseMessage::mutable_pruningpointhash() {
  std::string* _s = _internal_mutable_pruningpointhash();
  // @@protoc_insertion_point(field_mutable:protowire.GetBlockDagInfoResponseMessage.pruningPointHash)
  return _s;
}
inline const std::string& GetBlockDagInfoResponseMessage::_internal_pruningpointhash() const {
  return pruningpointhash_.Get();
}
inline void GetBlockDagInfoResponseMessage::_internal_set_pruningpointhash(const std::string& value) {
  
  pruningpointhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBlockDagInfoResponseMessage::_internal_mutable_pruningpointhash() {
  
  return pruningpointhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBlockDagInfoResponseMessage::release_pruningpointhash() {
  // @@protoc_insertion_point(field_release:protowire.GetBlockDagInfoResponseMessage.pruningPointHash)
  return pruningpointhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBlockDagInfoResponseMessage::set_allocated_pruningpointhash(std::string* pruningpointhash) {
  if (pruningpointhash != nullptr) {
    
  } else {
    
  }
  pruningpointhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pruningpointhash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pruningpointhash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pruningpointhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBlockDagInfoResponseMessage.pruningPointHash)
}

// uint64 virtualDaaScore = 9;
inline void GetBlockDagInfoResponseMessage::clear_virtualdaascore() {
  virtualdaascore_ = uint64_t{0u};
}
inline uint64_t GetBlockDagInfoResponseMessage::_internal_virtualdaascore() const {
  return virtualdaascore_;
}
inline uint64_t GetBlockDagInfoResponseMessage::virtualdaascore() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockDagInfoResponseMessage.virtualDaaScore)
  return _internal_virtualdaascore();
}
inline void GetBlockDagInfoResponseMessage::_internal_set_virtualdaascore(uint64_t value) {
  
  virtualdaascore_ = value;
}
inline void GetBlockDagInfoResponseMessage::set_virtualdaascore(uint64_t value) {
  _internal_set_virtualdaascore(value);
  // @@protoc_insertion_point(field_set:protowire.GetBlockDagInfoResponseMessage.virtualDaaScore)
}

// .protowire.RPCError error = 1000;
inline bool GetBlockDagInfoResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetBlockDagInfoResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetBlockDagInfoResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetBlockDagInfoResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetBlockDagInfoResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetBlockDagInfoResponseMessage.error)
  return _internal_error();
}
inline void GetBlockDagInfoResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetBlockDagInfoResponseMessage.error)
}
inline ::protowire::RPCError* GetBlockDagInfoResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetBlockDagInfoResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetBlockDagInfoResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetBlockDagInfoResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetBlockDagInfoResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetBlockDagInfoResponseMessage.error)
  return _msg;
}
inline void GetBlockDagInfoResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBlockDagInfoResponseMessage.error)
}

// -------------------------------------------------------------------

// ResolveFinalityConflictRequestMessage

// string finalityBlockHash = 1;
inline void ResolveFinalityConflictRequestMessage::clear_finalityblockhash() {
  finalityblockhash_.ClearToEmpty();
}
inline const std::string& ResolveFinalityConflictRequestMessage::finalityblockhash() const {
  // @@protoc_insertion_point(field_get:protowire.ResolveFinalityConflictRequestMessage.finalityBlockHash)
  return _internal_finalityblockhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResolveFinalityConflictRequestMessage::set_finalityblockhash(ArgT0&& arg0, ArgT... args) {
 
 finalityblockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.ResolveFinalityConflictRequestMessage.finalityBlockHash)
}
inline std::string* ResolveFinalityConflictRequestMessage::mutable_finalityblockhash() {
  std::string* _s = _internal_mutable_finalityblockhash();
  // @@protoc_insertion_point(field_mutable:protowire.ResolveFinalityConflictRequestMessage.finalityBlockHash)
  return _s;
}
inline const std::string& ResolveFinalityConflictRequestMessage::_internal_finalityblockhash() const {
  return finalityblockhash_.Get();
}
inline void ResolveFinalityConflictRequestMessage::_internal_set_finalityblockhash(const std::string& value) {
  
  finalityblockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResolveFinalityConflictRequestMessage::_internal_mutable_finalityblockhash() {
  
  return finalityblockhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResolveFinalityConflictRequestMessage::release_finalityblockhash() {
  // @@protoc_insertion_point(field_release:protowire.ResolveFinalityConflictRequestMessage.finalityBlockHash)
  return finalityblockhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResolveFinalityConflictRequestMessage::set_allocated_finalityblockhash(std::string* finalityblockhash) {
  if (finalityblockhash != nullptr) {
    
  } else {
    
  }
  finalityblockhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), finalityblockhash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (finalityblockhash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    finalityblockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.ResolveFinalityConflictRequestMessage.finalityBlockHash)
}

// -------------------------------------------------------------------

// ResolveFinalityConflictResponseMessage

// .protowire.RPCError error = 1000;
inline bool ResolveFinalityConflictResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool ResolveFinalityConflictResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void ResolveFinalityConflictResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& ResolveFinalityConflictResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& ResolveFinalityConflictResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.ResolveFinalityConflictResponseMessage.error)
  return _internal_error();
}
inline void ResolveFinalityConflictResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.ResolveFinalityConflictResponseMessage.error)
}
inline ::protowire::RPCError* ResolveFinalityConflictResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* ResolveFinalityConflictResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.ResolveFinalityConflictResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* ResolveFinalityConflictResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* ResolveFinalityConflictResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.ResolveFinalityConflictResponseMessage.error)
  return _msg;
}
inline void ResolveFinalityConflictResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.ResolveFinalityConflictResponseMessage.error)
}

// -------------------------------------------------------------------

// NotifyFinalityConflictsRequestMessage

// -------------------------------------------------------------------

// NotifyFinalityConflictsResponseMessage

// .protowire.RPCError error = 1000;
inline bool NotifyFinalityConflictsResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool NotifyFinalityConflictsResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void NotifyFinalityConflictsResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& NotifyFinalityConflictsResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& NotifyFinalityConflictsResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.NotifyFinalityConflictsResponseMessage.error)
  return _internal_error();
}
inline void NotifyFinalityConflictsResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.NotifyFinalityConflictsResponseMessage.error)
}
inline ::protowire::RPCError* NotifyFinalityConflictsResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* NotifyFinalityConflictsResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.NotifyFinalityConflictsResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* NotifyFinalityConflictsResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* NotifyFinalityConflictsResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.NotifyFinalityConflictsResponseMessage.error)
  return _msg;
}
inline void NotifyFinalityConflictsResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.NotifyFinalityConflictsResponseMessage.error)
}

// -------------------------------------------------------------------

// FinalityConflictNotificationMessage

// string violatingBlockHash = 1;
inline void FinalityConflictNotificationMessage::clear_violatingblockhash() {
  violatingblockhash_.ClearToEmpty();
}
inline const std::string& FinalityConflictNotificationMessage::violatingblockhash() const {
  // @@protoc_insertion_point(field_get:protowire.FinalityConflictNotificationMessage.violatingBlockHash)
  return _internal_violatingblockhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FinalityConflictNotificationMessage::set_violatingblockhash(ArgT0&& arg0, ArgT... args) {
 
 violatingblockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.FinalityConflictNotificationMessage.violatingBlockHash)
}
inline std::string* FinalityConflictNotificationMessage::mutable_violatingblockhash() {
  std::string* _s = _internal_mutable_violatingblockhash();
  // @@protoc_insertion_point(field_mutable:protowire.FinalityConflictNotificationMessage.violatingBlockHash)
  return _s;
}
inline const std::string& FinalityConflictNotificationMessage::_internal_violatingblockhash() const {
  return violatingblockhash_.Get();
}
inline void FinalityConflictNotificationMessage::_internal_set_violatingblockhash(const std::string& value) {
  
  violatingblockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FinalityConflictNotificationMessage::_internal_mutable_violatingblockhash() {
  
  return violatingblockhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FinalityConflictNotificationMessage::release_violatingblockhash() {
  // @@protoc_insertion_point(field_release:protowire.FinalityConflictNotificationMessage.violatingBlockHash)
  return violatingblockhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FinalityConflictNotificationMessage::set_allocated_violatingblockhash(std::string* violatingblockhash) {
  if (violatingblockhash != nullptr) {
    
  } else {
    
  }
  violatingblockhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), violatingblockhash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (violatingblockhash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    violatingblockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.FinalityConflictNotificationMessage.violatingBlockHash)
}

// -------------------------------------------------------------------

// FinalityConflictResolvedNotificationMessage

// string finalityBlockHash = 1;
inline void FinalityConflictResolvedNotificationMessage::clear_finalityblockhash() {
  finalityblockhash_.ClearToEmpty();
}
inline const std::string& FinalityConflictResolvedNotificationMessage::finalityblockhash() const {
  // @@protoc_insertion_point(field_get:protowire.FinalityConflictResolvedNotificationMessage.finalityBlockHash)
  return _internal_finalityblockhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FinalityConflictResolvedNotificationMessage::set_finalityblockhash(ArgT0&& arg0, ArgT... args) {
 
 finalityblockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.FinalityConflictResolvedNotificationMessage.finalityBlockHash)
}
inline std::string* FinalityConflictResolvedNotificationMessage::mutable_finalityblockhash() {
  std::string* _s = _internal_mutable_finalityblockhash();
  // @@protoc_insertion_point(field_mutable:protowire.FinalityConflictResolvedNotificationMessage.finalityBlockHash)
  return _s;
}
inline const std::string& FinalityConflictResolvedNotificationMessage::_internal_finalityblockhash() const {
  return finalityblockhash_.Get();
}
inline void FinalityConflictResolvedNotificationMessage::_internal_set_finalityblockhash(const std::string& value) {
  
  finalityblockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FinalityConflictResolvedNotificationMessage::_internal_mutable_finalityblockhash() {
  
  return finalityblockhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FinalityConflictResolvedNotificationMessage::release_finalityblockhash() {
  // @@protoc_insertion_point(field_release:protowire.FinalityConflictResolvedNotificationMessage.finalityBlockHash)
  return finalityblockhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FinalityConflictResolvedNotificationMessage::set_allocated_finalityblockhash(std::string* finalityblockhash) {
  if (finalityblockhash != nullptr) {
    
  } else {
    
  }
  finalityblockhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), finalityblockhash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (finalityblockhash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    finalityblockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.FinalityConflictResolvedNotificationMessage.finalityBlockHash)
}

// -------------------------------------------------------------------

// ShutDownRequestMessage

// -------------------------------------------------------------------

// ShutDownResponseMessage

// .protowire.RPCError error = 1000;
inline bool ShutDownResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool ShutDownResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void ShutDownResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& ShutDownResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& ShutDownResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.ShutDownResponseMessage.error)
  return _internal_error();
}
inline void ShutDownResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.ShutDownResponseMessage.error)
}
inline ::protowire::RPCError* ShutDownResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* ShutDownResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.ShutDownResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* ShutDownResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* ShutDownResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.ShutDownResponseMessage.error)
  return _msg;
}
inline void ShutDownResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.ShutDownResponseMessage.error)
}

// -------------------------------------------------------------------

// GetHeadersRequestMessage

// string startHash = 1;
inline void GetHeadersRequestMessage::clear_starthash() {
  starthash_.ClearToEmpty();
}
inline const std::string& GetHeadersRequestMessage::starthash() const {
  // @@protoc_insertion_point(field_get:protowire.GetHeadersRequestMessage.startHash)
  return _internal_starthash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetHeadersRequestMessage::set_starthash(ArgT0&& arg0, ArgT... args) {
 
 starthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetHeadersRequestMessage.startHash)
}
inline std::string* GetHeadersRequestMessage::mutable_starthash() {
  std::string* _s = _internal_mutable_starthash();
  // @@protoc_insertion_point(field_mutable:protowire.GetHeadersRequestMessage.startHash)
  return _s;
}
inline const std::string& GetHeadersRequestMessage::_internal_starthash() const {
  return starthash_.Get();
}
inline void GetHeadersRequestMessage::_internal_set_starthash(const std::string& value) {
  
  starthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetHeadersRequestMessage::_internal_mutable_starthash() {
  
  return starthash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetHeadersRequestMessage::release_starthash() {
  // @@protoc_insertion_point(field_release:protowire.GetHeadersRequestMessage.startHash)
  return starthash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetHeadersRequestMessage::set_allocated_starthash(std::string* starthash) {
  if (starthash != nullptr) {
    
  } else {
    
  }
  starthash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), starthash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (starthash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    starthash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetHeadersRequestMessage.startHash)
}

// uint64 limit = 2;
inline void GetHeadersRequestMessage::clear_limit() {
  limit_ = uint64_t{0u};
}
inline uint64_t GetHeadersRequestMessage::_internal_limit() const {
  return limit_;
}
inline uint64_t GetHeadersRequestMessage::limit() const {
  // @@protoc_insertion_point(field_get:protowire.GetHeadersRequestMessage.limit)
  return _internal_limit();
}
inline void GetHeadersRequestMessage::_internal_set_limit(uint64_t value) {
  
  limit_ = value;
}
inline void GetHeadersRequestMessage::set_limit(uint64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:protowire.GetHeadersRequestMessage.limit)
}

// bool isAscending = 3;
inline void GetHeadersRequestMessage::clear_isascending() {
  isascending_ = false;
}
inline bool GetHeadersRequestMessage::_internal_isascending() const {
  return isascending_;
}
inline bool GetHeadersRequestMessage::isascending() const {
  // @@protoc_insertion_point(field_get:protowire.GetHeadersRequestMessage.isAscending)
  return _internal_isascending();
}
inline void GetHeadersRequestMessage::_internal_set_isascending(bool value) {
  
  isascending_ = value;
}
inline void GetHeadersRequestMessage::set_isascending(bool value) {
  _internal_set_isascending(value);
  // @@protoc_insertion_point(field_set:protowire.GetHeadersRequestMessage.isAscending)
}

// -------------------------------------------------------------------

// GetHeadersResponseMessage

// repeated string headers = 1;
inline int GetHeadersResponseMessage::_internal_headers_size() const {
  return headers_.size();
}
inline int GetHeadersResponseMessage::headers_size() const {
  return _internal_headers_size();
}
inline void GetHeadersResponseMessage::clear_headers() {
  headers_.Clear();
}
inline std::string* GetHeadersResponseMessage::add_headers() {
  std::string* _s = _internal_add_headers();
  // @@protoc_insertion_point(field_add_mutable:protowire.GetHeadersResponseMessage.headers)
  return _s;
}
inline const std::string& GetHeadersResponseMessage::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const std::string& GetHeadersResponseMessage::headers(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetHeadersResponseMessage.headers)
  return _internal_headers(index);
}
inline std::string* GetHeadersResponseMessage::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetHeadersResponseMessage.headers)
  return headers_.Mutable(index);
}
inline void GetHeadersResponseMessage::set_headers(int index, const std::string& value) {
  headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.GetHeadersResponseMessage.headers)
}
inline void GetHeadersResponseMessage::set_headers(int index, std::string&& value) {
  headers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.GetHeadersResponseMessage.headers)
}
inline void GetHeadersResponseMessage::set_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.GetHeadersResponseMessage.headers)
}
inline void GetHeadersResponseMessage::set_headers(int index, const char* value, size_t size) {
  headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.GetHeadersResponseMessage.headers)
}
inline std::string* GetHeadersResponseMessage::_internal_add_headers() {
  return headers_.Add();
}
inline void GetHeadersResponseMessage::add_headers(const std::string& value) {
  headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.GetHeadersResponseMessage.headers)
}
inline void GetHeadersResponseMessage::add_headers(std::string&& value) {
  headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.GetHeadersResponseMessage.headers)
}
inline void GetHeadersResponseMessage::add_headers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.GetHeadersResponseMessage.headers)
}
inline void GetHeadersResponseMessage::add_headers(const char* value, size_t size) {
  headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.GetHeadersResponseMessage.headers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetHeadersResponseMessage::headers() const {
  // @@protoc_insertion_point(field_list:protowire.GetHeadersResponseMessage.headers)
  return headers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetHeadersResponseMessage::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetHeadersResponseMessage.headers)
  return &headers_;
}

// .protowire.RPCError error = 1000;
inline bool GetHeadersResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetHeadersResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetHeadersResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetHeadersResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetHeadersResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetHeadersResponseMessage.error)
  return _internal_error();
}
inline void GetHeadersResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetHeadersResponseMessage.error)
}
inline ::protowire::RPCError* GetHeadersResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetHeadersResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetHeadersResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetHeadersResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetHeadersResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetHeadersResponseMessage.error)
  return _msg;
}
inline void GetHeadersResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetHeadersResponseMessage.error)
}

// -------------------------------------------------------------------

// NotifyUtxosChangedRequestMessage

// repeated string addresses = 1;
inline int NotifyUtxosChangedRequestMessage::_internal_addresses_size() const {
  return addresses_.size();
}
inline int NotifyUtxosChangedRequestMessage::addresses_size() const {
  return _internal_addresses_size();
}
inline void NotifyUtxosChangedRequestMessage::clear_addresses() {
  addresses_.Clear();
}
inline std::string* NotifyUtxosChangedRequestMessage::add_addresses() {
  std::string* _s = _internal_add_addresses();
  // @@protoc_insertion_point(field_add_mutable:protowire.NotifyUtxosChangedRequestMessage.addresses)
  return _s;
}
inline const std::string& NotifyUtxosChangedRequestMessage::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& NotifyUtxosChangedRequestMessage::addresses(int index) const {
  // @@protoc_insertion_point(field_get:protowire.NotifyUtxosChangedRequestMessage.addresses)
  return _internal_addresses(index);
}
inline std::string* NotifyUtxosChangedRequestMessage::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.NotifyUtxosChangedRequestMessage.addresses)
  return addresses_.Mutable(index);
}
inline void NotifyUtxosChangedRequestMessage::set_addresses(int index, const std::string& value) {
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.NotifyUtxosChangedRequestMessage.addresses)
}
inline void NotifyUtxosChangedRequestMessage::set_addresses(int index, std::string&& value) {
  addresses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.NotifyUtxosChangedRequestMessage.addresses)
}
inline void NotifyUtxosChangedRequestMessage::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.NotifyUtxosChangedRequestMessage.addresses)
}
inline void NotifyUtxosChangedRequestMessage::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.NotifyUtxosChangedRequestMessage.addresses)
}
inline std::string* NotifyUtxosChangedRequestMessage::_internal_add_addresses() {
  return addresses_.Add();
}
inline void NotifyUtxosChangedRequestMessage::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.NotifyUtxosChangedRequestMessage.addresses)
}
inline void NotifyUtxosChangedRequestMessage::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.NotifyUtxosChangedRequestMessage.addresses)
}
inline void NotifyUtxosChangedRequestMessage::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.NotifyUtxosChangedRequestMessage.addresses)
}
inline void NotifyUtxosChangedRequestMessage::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.NotifyUtxosChangedRequestMessage.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NotifyUtxosChangedRequestMessage::addresses() const {
  // @@protoc_insertion_point(field_list:protowire.NotifyUtxosChangedRequestMessage.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NotifyUtxosChangedRequestMessage::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:protowire.NotifyUtxosChangedRequestMessage.addresses)
  return &addresses_;
}

// -------------------------------------------------------------------

// NotifyUtxosChangedResponseMessage

// .protowire.RPCError error = 1000;
inline bool NotifyUtxosChangedResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool NotifyUtxosChangedResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void NotifyUtxosChangedResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& NotifyUtxosChangedResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& NotifyUtxosChangedResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.NotifyUtxosChangedResponseMessage.error)
  return _internal_error();
}
inline void NotifyUtxosChangedResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.NotifyUtxosChangedResponseMessage.error)
}
inline ::protowire::RPCError* NotifyUtxosChangedResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* NotifyUtxosChangedResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.NotifyUtxosChangedResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* NotifyUtxosChangedResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* NotifyUtxosChangedResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.NotifyUtxosChangedResponseMessage.error)
  return _msg;
}
inline void NotifyUtxosChangedResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.NotifyUtxosChangedResponseMessage.error)
}

// -------------------------------------------------------------------

// UtxosChangedNotificationMessage

// repeated .protowire.UtxosByAddressesEntry added = 1;
inline int UtxosChangedNotificationMessage::_internal_added_size() const {
  return added_.size();
}
inline int UtxosChangedNotificationMessage::added_size() const {
  return _internal_added_size();
}
inline void UtxosChangedNotificationMessage::clear_added() {
  added_.Clear();
}
inline ::protowire::UtxosByAddressesEntry* UtxosChangedNotificationMessage::mutable_added(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.UtxosChangedNotificationMessage.added)
  return added_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry >*
UtxosChangedNotificationMessage::mutable_added() {
  // @@protoc_insertion_point(field_mutable_list:protowire.UtxosChangedNotificationMessage.added)
  return &added_;
}
inline const ::protowire::UtxosByAddressesEntry& UtxosChangedNotificationMessage::_internal_added(int index) const {
  return added_.Get(index);
}
inline const ::protowire::UtxosByAddressesEntry& UtxosChangedNotificationMessage::added(int index) const {
  // @@protoc_insertion_point(field_get:protowire.UtxosChangedNotificationMessage.added)
  return _internal_added(index);
}
inline ::protowire::UtxosByAddressesEntry* UtxosChangedNotificationMessage::_internal_add_added() {
  return added_.Add();
}
inline ::protowire::UtxosByAddressesEntry* UtxosChangedNotificationMessage::add_added() {
  ::protowire::UtxosByAddressesEntry* _add = _internal_add_added();
  // @@protoc_insertion_point(field_add:protowire.UtxosChangedNotificationMessage.added)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry >&
UtxosChangedNotificationMessage::added() const {
  // @@protoc_insertion_point(field_list:protowire.UtxosChangedNotificationMessage.added)
  return added_;
}

// repeated .protowire.UtxosByAddressesEntry removed = 2;
inline int UtxosChangedNotificationMessage::_internal_removed_size() const {
  return removed_.size();
}
inline int UtxosChangedNotificationMessage::removed_size() const {
  return _internal_removed_size();
}
inline void UtxosChangedNotificationMessage::clear_removed() {
  removed_.Clear();
}
inline ::protowire::UtxosByAddressesEntry* UtxosChangedNotificationMessage::mutable_removed(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.UtxosChangedNotificationMessage.removed)
  return removed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry >*
UtxosChangedNotificationMessage::mutable_removed() {
  // @@protoc_insertion_point(field_mutable_list:protowire.UtxosChangedNotificationMessage.removed)
  return &removed_;
}
inline const ::protowire::UtxosByAddressesEntry& UtxosChangedNotificationMessage::_internal_removed(int index) const {
  return removed_.Get(index);
}
inline const ::protowire::UtxosByAddressesEntry& UtxosChangedNotificationMessage::removed(int index) const {
  // @@protoc_insertion_point(field_get:protowire.UtxosChangedNotificationMessage.removed)
  return _internal_removed(index);
}
inline ::protowire::UtxosByAddressesEntry* UtxosChangedNotificationMessage::_internal_add_removed() {
  return removed_.Add();
}
inline ::protowire::UtxosByAddressesEntry* UtxosChangedNotificationMessage::add_removed() {
  ::protowire::UtxosByAddressesEntry* _add = _internal_add_removed();
  // @@protoc_insertion_point(field_add:protowire.UtxosChangedNotificationMessage.removed)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry >&
UtxosChangedNotificationMessage::removed() const {
  // @@protoc_insertion_point(field_list:protowire.UtxosChangedNotificationMessage.removed)
  return removed_;
}

// -------------------------------------------------------------------

// UtxosByAddressesEntry

// string address = 1;
inline void UtxosByAddressesEntry::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& UtxosByAddressesEntry::address() const {
  // @@protoc_insertion_point(field_get:protowire.UtxosByAddressesEntry.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UtxosByAddressesEntry::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.UtxosByAddressesEntry.address)
}
inline std::string* UtxosByAddressesEntry::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:protowire.UtxosByAddressesEntry.address)
  return _s;
}
inline const std::string& UtxosByAddressesEntry::_internal_address() const {
  return address_.Get();
}
inline void UtxosByAddressesEntry::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UtxosByAddressesEntry::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UtxosByAddressesEntry::release_address() {
  // @@protoc_insertion_point(field_release:protowire.UtxosByAddressesEntry.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UtxosByAddressesEntry::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.UtxosByAddressesEntry.address)
}

// .protowire.RpcOutpoint outpoint = 2;
inline bool UtxosByAddressesEntry::_internal_has_outpoint() const {
  return this != internal_default_instance() && outpoint_ != nullptr;
}
inline bool UtxosByAddressesEntry::has_outpoint() const {
  return _internal_has_outpoint();
}
inline void UtxosByAddressesEntry::clear_outpoint() {
  if (GetArenaForAllocation() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
}
inline const ::protowire::RpcOutpoint& UtxosByAddressesEntry::_internal_outpoint() const {
  const ::protowire::RpcOutpoint* p = outpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcOutpoint&>(
      ::protowire::_RpcOutpoint_default_instance_);
}
inline const ::protowire::RpcOutpoint& UtxosByAddressesEntry::outpoint() const {
  // @@protoc_insertion_point(field_get:protowire.UtxosByAddressesEntry.outpoint)
  return _internal_outpoint();
}
inline void UtxosByAddressesEntry::unsafe_arena_set_allocated_outpoint(
    ::protowire::RpcOutpoint* outpoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outpoint_);
  }
  outpoint_ = outpoint;
  if (outpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.UtxosByAddressesEntry.outpoint)
}
inline ::protowire::RpcOutpoint* UtxosByAddressesEntry::release_outpoint() {
  
  ::protowire::RpcOutpoint* temp = outpoint_;
  outpoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcOutpoint* UtxosByAddressesEntry::unsafe_arena_release_outpoint() {
  // @@protoc_insertion_point(field_release:protowire.UtxosByAddressesEntry.outpoint)
  
  ::protowire::RpcOutpoint* temp = outpoint_;
  outpoint_ = nullptr;
  return temp;
}
inline ::protowire::RpcOutpoint* UtxosByAddressesEntry::_internal_mutable_outpoint() {
  
  if (outpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcOutpoint>(GetArenaForAllocation());
    outpoint_ = p;
  }
  return outpoint_;
}
inline ::protowire::RpcOutpoint* UtxosByAddressesEntry::mutable_outpoint() {
  ::protowire::RpcOutpoint* _msg = _internal_mutable_outpoint();
  // @@protoc_insertion_point(field_mutable:protowire.UtxosByAddressesEntry.outpoint)
  return _msg;
}
inline void UtxosByAddressesEntry::set_allocated_outpoint(::protowire::RpcOutpoint* outpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete outpoint_;
  }
  if (outpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcOutpoint>::GetOwningArena(outpoint);
    if (message_arena != submessage_arena) {
      outpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outpoint, submessage_arena);
    }
    
  } else {
    
  }
  outpoint_ = outpoint;
  // @@protoc_insertion_point(field_set_allocated:protowire.UtxosByAddressesEntry.outpoint)
}

// .protowire.RpcUtxoEntry utxoEntry = 3;
inline bool UtxosByAddressesEntry::_internal_has_utxoentry() const {
  return this != internal_default_instance() && utxoentry_ != nullptr;
}
inline bool UtxosByAddressesEntry::has_utxoentry() const {
  return _internal_has_utxoentry();
}
inline void UtxosByAddressesEntry::clear_utxoentry() {
  if (GetArenaForAllocation() == nullptr && utxoentry_ != nullptr) {
    delete utxoentry_;
  }
  utxoentry_ = nullptr;
}
inline const ::protowire::RpcUtxoEntry& UtxosByAddressesEntry::_internal_utxoentry() const {
  const ::protowire::RpcUtxoEntry* p = utxoentry_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RpcUtxoEntry&>(
      ::protowire::_RpcUtxoEntry_default_instance_);
}
inline const ::protowire::RpcUtxoEntry& UtxosByAddressesEntry::utxoentry() const {
  // @@protoc_insertion_point(field_get:protowire.UtxosByAddressesEntry.utxoEntry)
  return _internal_utxoentry();
}
inline void UtxosByAddressesEntry::unsafe_arena_set_allocated_utxoentry(
    ::protowire::RpcUtxoEntry* utxoentry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utxoentry_);
  }
  utxoentry_ = utxoentry;
  if (utxoentry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.UtxosByAddressesEntry.utxoEntry)
}
inline ::protowire::RpcUtxoEntry* UtxosByAddressesEntry::release_utxoentry() {
  
  ::protowire::RpcUtxoEntry* temp = utxoentry_;
  utxoentry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RpcUtxoEntry* UtxosByAddressesEntry::unsafe_arena_release_utxoentry() {
  // @@protoc_insertion_point(field_release:protowire.UtxosByAddressesEntry.utxoEntry)
  
  ::protowire::RpcUtxoEntry* temp = utxoentry_;
  utxoentry_ = nullptr;
  return temp;
}
inline ::protowire::RpcUtxoEntry* UtxosByAddressesEntry::_internal_mutable_utxoentry() {
  
  if (utxoentry_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RpcUtxoEntry>(GetArenaForAllocation());
    utxoentry_ = p;
  }
  return utxoentry_;
}
inline ::protowire::RpcUtxoEntry* UtxosByAddressesEntry::mutable_utxoentry() {
  ::protowire::RpcUtxoEntry* _msg = _internal_mutable_utxoentry();
  // @@protoc_insertion_point(field_mutable:protowire.UtxosByAddressesEntry.utxoEntry)
  return _msg;
}
inline void UtxosByAddressesEntry::set_allocated_utxoentry(::protowire::RpcUtxoEntry* utxoentry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete utxoentry_;
  }
  if (utxoentry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RpcUtxoEntry>::GetOwningArena(utxoentry);
    if (message_arena != submessage_arena) {
      utxoentry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utxoentry, submessage_arena);
    }
    
  } else {
    
  }
  utxoentry_ = utxoentry;
  // @@protoc_insertion_point(field_set_allocated:protowire.UtxosByAddressesEntry.utxoEntry)
}

// -------------------------------------------------------------------

// StopNotifyingUtxosChangedRequestMessage

// repeated string addresses = 1;
inline int StopNotifyingUtxosChangedRequestMessage::_internal_addresses_size() const {
  return addresses_.size();
}
inline int StopNotifyingUtxosChangedRequestMessage::addresses_size() const {
  return _internal_addresses_size();
}
inline void StopNotifyingUtxosChangedRequestMessage::clear_addresses() {
  addresses_.Clear();
}
inline std::string* StopNotifyingUtxosChangedRequestMessage::add_addresses() {
  std::string* _s = _internal_add_addresses();
  // @@protoc_insertion_point(field_add_mutable:protowire.StopNotifyingUtxosChangedRequestMessage.addresses)
  return _s;
}
inline const std::string& StopNotifyingUtxosChangedRequestMessage::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& StopNotifyingUtxosChangedRequestMessage::addresses(int index) const {
  // @@protoc_insertion_point(field_get:protowire.StopNotifyingUtxosChangedRequestMessage.addresses)
  return _internal_addresses(index);
}
inline std::string* StopNotifyingUtxosChangedRequestMessage::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.StopNotifyingUtxosChangedRequestMessage.addresses)
  return addresses_.Mutable(index);
}
inline void StopNotifyingUtxosChangedRequestMessage::set_addresses(int index, const std::string& value) {
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.StopNotifyingUtxosChangedRequestMessage.addresses)
}
inline void StopNotifyingUtxosChangedRequestMessage::set_addresses(int index, std::string&& value) {
  addresses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.StopNotifyingUtxosChangedRequestMessage.addresses)
}
inline void StopNotifyingUtxosChangedRequestMessage::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.StopNotifyingUtxosChangedRequestMessage.addresses)
}
inline void StopNotifyingUtxosChangedRequestMessage::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.StopNotifyingUtxosChangedRequestMessage.addresses)
}
inline std::string* StopNotifyingUtxosChangedRequestMessage::_internal_add_addresses() {
  return addresses_.Add();
}
inline void StopNotifyingUtxosChangedRequestMessage::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.StopNotifyingUtxosChangedRequestMessage.addresses)
}
inline void StopNotifyingUtxosChangedRequestMessage::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.StopNotifyingUtxosChangedRequestMessage.addresses)
}
inline void StopNotifyingUtxosChangedRequestMessage::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.StopNotifyingUtxosChangedRequestMessage.addresses)
}
inline void StopNotifyingUtxosChangedRequestMessage::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.StopNotifyingUtxosChangedRequestMessage.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StopNotifyingUtxosChangedRequestMessage::addresses() const {
  // @@protoc_insertion_point(field_list:protowire.StopNotifyingUtxosChangedRequestMessage.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StopNotifyingUtxosChangedRequestMessage::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:protowire.StopNotifyingUtxosChangedRequestMessage.addresses)
  return &addresses_;
}

// -------------------------------------------------------------------

// StopNotifyingUtxosChangedResponseMessage

// .protowire.RPCError error = 1000;
inline bool StopNotifyingUtxosChangedResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool StopNotifyingUtxosChangedResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void StopNotifyingUtxosChangedResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& StopNotifyingUtxosChangedResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& StopNotifyingUtxosChangedResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.StopNotifyingUtxosChangedResponseMessage.error)
  return _internal_error();
}
inline void StopNotifyingUtxosChangedResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.StopNotifyingUtxosChangedResponseMessage.error)
}
inline ::protowire::RPCError* StopNotifyingUtxosChangedResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* StopNotifyingUtxosChangedResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.StopNotifyingUtxosChangedResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* StopNotifyingUtxosChangedResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* StopNotifyingUtxosChangedResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.StopNotifyingUtxosChangedResponseMessage.error)
  return _msg;
}
inline void StopNotifyingUtxosChangedResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.StopNotifyingUtxosChangedResponseMessage.error)
}

// -------------------------------------------------------------------

// GetUtxosByAddressesRequestMessage

// repeated string addresses = 1;
inline int GetUtxosByAddressesRequestMessage::_internal_addresses_size() const {
  return addresses_.size();
}
inline int GetUtxosByAddressesRequestMessage::addresses_size() const {
  return _internal_addresses_size();
}
inline void GetUtxosByAddressesRequestMessage::clear_addresses() {
  addresses_.Clear();
}
inline std::string* GetUtxosByAddressesRequestMessage::add_addresses() {
  std::string* _s = _internal_add_addresses();
  // @@protoc_insertion_point(field_add_mutable:protowire.GetUtxosByAddressesRequestMessage.addresses)
  return _s;
}
inline const std::string& GetUtxosByAddressesRequestMessage::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& GetUtxosByAddressesRequestMessage::addresses(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetUtxosByAddressesRequestMessage.addresses)
  return _internal_addresses(index);
}
inline std::string* GetUtxosByAddressesRequestMessage::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetUtxosByAddressesRequestMessage.addresses)
  return addresses_.Mutable(index);
}
inline void GetUtxosByAddressesRequestMessage::set_addresses(int index, const std::string& value) {
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.GetUtxosByAddressesRequestMessage.addresses)
}
inline void GetUtxosByAddressesRequestMessage::set_addresses(int index, std::string&& value) {
  addresses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.GetUtxosByAddressesRequestMessage.addresses)
}
inline void GetUtxosByAddressesRequestMessage::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.GetUtxosByAddressesRequestMessage.addresses)
}
inline void GetUtxosByAddressesRequestMessage::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.GetUtxosByAddressesRequestMessage.addresses)
}
inline std::string* GetUtxosByAddressesRequestMessage::_internal_add_addresses() {
  return addresses_.Add();
}
inline void GetUtxosByAddressesRequestMessage::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.GetUtxosByAddressesRequestMessage.addresses)
}
inline void GetUtxosByAddressesRequestMessage::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.GetUtxosByAddressesRequestMessage.addresses)
}
inline void GetUtxosByAddressesRequestMessage::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.GetUtxosByAddressesRequestMessage.addresses)
}
inline void GetUtxosByAddressesRequestMessage::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.GetUtxosByAddressesRequestMessage.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetUtxosByAddressesRequestMessage::addresses() const {
  // @@protoc_insertion_point(field_list:protowire.GetUtxosByAddressesRequestMessage.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetUtxosByAddressesRequestMessage::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetUtxosByAddressesRequestMessage.addresses)
  return &addresses_;
}

// -------------------------------------------------------------------

// GetUtxosByAddressesResponseMessage

// repeated .protowire.UtxosByAddressesEntry entries = 1;
inline int GetUtxosByAddressesResponseMessage::_internal_entries_size() const {
  return entries_.size();
}
inline int GetUtxosByAddressesResponseMessage::entries_size() const {
  return _internal_entries_size();
}
inline void GetUtxosByAddressesResponseMessage::clear_entries() {
  entries_.Clear();
}
inline ::protowire::UtxosByAddressesEntry* GetUtxosByAddressesResponseMessage::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetUtxosByAddressesResponseMessage.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry >*
GetUtxosByAddressesResponseMessage::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetUtxosByAddressesResponseMessage.entries)
  return &entries_;
}
inline const ::protowire::UtxosByAddressesEntry& GetUtxosByAddressesResponseMessage::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::protowire::UtxosByAddressesEntry& GetUtxosByAddressesResponseMessage::entries(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetUtxosByAddressesResponseMessage.entries)
  return _internal_entries(index);
}
inline ::protowire::UtxosByAddressesEntry* GetUtxosByAddressesResponseMessage::_internal_add_entries() {
  return entries_.Add();
}
inline ::protowire::UtxosByAddressesEntry* GetUtxosByAddressesResponseMessage::add_entries() {
  ::protowire::UtxosByAddressesEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:protowire.GetUtxosByAddressesResponseMessage.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::UtxosByAddressesEntry >&
GetUtxosByAddressesResponseMessage::entries() const {
  // @@protoc_insertion_point(field_list:protowire.GetUtxosByAddressesResponseMessage.entries)
  return entries_;
}

// .protowire.RPCError error = 1000;
inline bool GetUtxosByAddressesResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetUtxosByAddressesResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetUtxosByAddressesResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetUtxosByAddressesResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetUtxosByAddressesResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetUtxosByAddressesResponseMessage.error)
  return _internal_error();
}
inline void GetUtxosByAddressesResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetUtxosByAddressesResponseMessage.error)
}
inline ::protowire::RPCError* GetUtxosByAddressesResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetUtxosByAddressesResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetUtxosByAddressesResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetUtxosByAddressesResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetUtxosByAddressesResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetUtxosByAddressesResponseMessage.error)
  return _msg;
}
inline void GetUtxosByAddressesResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetUtxosByAddressesResponseMessage.error)
}

// -------------------------------------------------------------------

// GetBalanceByAddressRequestMessage

// string address = 1;
inline void GetBalanceByAddressRequestMessage::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& GetBalanceByAddressRequestMessage::address() const {
  // @@protoc_insertion_point(field_get:protowire.GetBalanceByAddressRequestMessage.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBalanceByAddressRequestMessage::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetBalanceByAddressRequestMessage.address)
}
inline std::string* GetBalanceByAddressRequestMessage::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:protowire.GetBalanceByAddressRequestMessage.address)
  return _s;
}
inline const std::string& GetBalanceByAddressRequestMessage::_internal_address() const {
  return address_.Get();
}
inline void GetBalanceByAddressRequestMessage::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBalanceByAddressRequestMessage::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBalanceByAddressRequestMessage::release_address() {
  // @@protoc_insertion_point(field_release:protowire.GetBalanceByAddressRequestMessage.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBalanceByAddressRequestMessage::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBalanceByAddressRequestMessage.address)
}

// -------------------------------------------------------------------

// GetBalanceByAddressResponseMessage

// uint64 balance = 1;
inline void GetBalanceByAddressResponseMessage::clear_balance() {
  balance_ = uint64_t{0u};
}
inline uint64_t GetBalanceByAddressResponseMessage::_internal_balance() const {
  return balance_;
}
inline uint64_t GetBalanceByAddressResponseMessage::balance() const {
  // @@protoc_insertion_point(field_get:protowire.GetBalanceByAddressResponseMessage.balance)
  return _internal_balance();
}
inline void GetBalanceByAddressResponseMessage::_internal_set_balance(uint64_t value) {
  
  balance_ = value;
}
inline void GetBalanceByAddressResponseMessage::set_balance(uint64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:protowire.GetBalanceByAddressResponseMessage.balance)
}

// .protowire.RPCError error = 1000;
inline bool GetBalanceByAddressResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetBalanceByAddressResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetBalanceByAddressResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetBalanceByAddressResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetBalanceByAddressResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetBalanceByAddressResponseMessage.error)
  return _internal_error();
}
inline void GetBalanceByAddressResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetBalanceByAddressResponseMessage.error)
}
inline ::protowire::RPCError* GetBalanceByAddressResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetBalanceByAddressResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetBalanceByAddressResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetBalanceByAddressResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetBalanceByAddressResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetBalanceByAddressResponseMessage.error)
  return _msg;
}
inline void GetBalanceByAddressResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBalanceByAddressResponseMessage.error)
}

// -------------------------------------------------------------------

// GetBalancesByAddressesRequestMessage

// repeated string addresses = 1;
inline int GetBalancesByAddressesRequestMessage::_internal_addresses_size() const {
  return addresses_.size();
}
inline int GetBalancesByAddressesRequestMessage::addresses_size() const {
  return _internal_addresses_size();
}
inline void GetBalancesByAddressesRequestMessage::clear_addresses() {
  addresses_.Clear();
}
inline std::string* GetBalancesByAddressesRequestMessage::add_addresses() {
  std::string* _s = _internal_add_addresses();
  // @@protoc_insertion_point(field_add_mutable:protowire.GetBalancesByAddressesRequestMessage.addresses)
  return _s;
}
inline const std::string& GetBalancesByAddressesRequestMessage::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& GetBalancesByAddressesRequestMessage::addresses(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetBalancesByAddressesRequestMessage.addresses)
  return _internal_addresses(index);
}
inline std::string* GetBalancesByAddressesRequestMessage::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetBalancesByAddressesRequestMessage.addresses)
  return addresses_.Mutable(index);
}
inline void GetBalancesByAddressesRequestMessage::set_addresses(int index, const std::string& value) {
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.GetBalancesByAddressesRequestMessage.addresses)
}
inline void GetBalancesByAddressesRequestMessage::set_addresses(int index, std::string&& value) {
  addresses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.GetBalancesByAddressesRequestMessage.addresses)
}
inline void GetBalancesByAddressesRequestMessage::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.GetBalancesByAddressesRequestMessage.addresses)
}
inline void GetBalancesByAddressesRequestMessage::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.GetBalancesByAddressesRequestMessage.addresses)
}
inline std::string* GetBalancesByAddressesRequestMessage::_internal_add_addresses() {
  return addresses_.Add();
}
inline void GetBalancesByAddressesRequestMessage::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.GetBalancesByAddressesRequestMessage.addresses)
}
inline void GetBalancesByAddressesRequestMessage::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.GetBalancesByAddressesRequestMessage.addresses)
}
inline void GetBalancesByAddressesRequestMessage::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.GetBalancesByAddressesRequestMessage.addresses)
}
inline void GetBalancesByAddressesRequestMessage::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.GetBalancesByAddressesRequestMessage.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetBalancesByAddressesRequestMessage::addresses() const {
  // @@protoc_insertion_point(field_list:protowire.GetBalancesByAddressesRequestMessage.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetBalancesByAddressesRequestMessage::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetBalancesByAddressesRequestMessage.addresses)
  return &addresses_;
}

// -------------------------------------------------------------------

// BalancesByAddressEntry

// string address = 1;
inline void BalancesByAddressEntry::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& BalancesByAddressEntry::address() const {
  // @@protoc_insertion_point(field_get:protowire.BalancesByAddressEntry.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BalancesByAddressEntry::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.BalancesByAddressEntry.address)
}
inline std::string* BalancesByAddressEntry::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:protowire.BalancesByAddressEntry.address)
  return _s;
}
inline const std::string& BalancesByAddressEntry::_internal_address() const {
  return address_.Get();
}
inline void BalancesByAddressEntry::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BalancesByAddressEntry::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BalancesByAddressEntry::release_address() {
  // @@protoc_insertion_point(field_release:protowire.BalancesByAddressEntry.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BalancesByAddressEntry::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.BalancesByAddressEntry.address)
}

// uint64 balance = 2;
inline void BalancesByAddressEntry::clear_balance() {
  balance_ = uint64_t{0u};
}
inline uint64_t BalancesByAddressEntry::_internal_balance() const {
  return balance_;
}
inline uint64_t BalancesByAddressEntry::balance() const {
  // @@protoc_insertion_point(field_get:protowire.BalancesByAddressEntry.balance)
  return _internal_balance();
}
inline void BalancesByAddressEntry::_internal_set_balance(uint64_t value) {
  
  balance_ = value;
}
inline void BalancesByAddressEntry::set_balance(uint64_t value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:protowire.BalancesByAddressEntry.balance)
}

// .protowire.RPCError error = 1000;
inline bool BalancesByAddressEntry::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool BalancesByAddressEntry::has_error() const {
  return _internal_has_error();
}
inline void BalancesByAddressEntry::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& BalancesByAddressEntry::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& BalancesByAddressEntry::error() const {
  // @@protoc_insertion_point(field_get:protowire.BalancesByAddressEntry.error)
  return _internal_error();
}
inline void BalancesByAddressEntry::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.BalancesByAddressEntry.error)
}
inline ::protowire::RPCError* BalancesByAddressEntry::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* BalancesByAddressEntry::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.BalancesByAddressEntry.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* BalancesByAddressEntry::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* BalancesByAddressEntry::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.BalancesByAddressEntry.error)
  return _msg;
}
inline void BalancesByAddressEntry::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.BalancesByAddressEntry.error)
}

// -------------------------------------------------------------------

// GetBalancesByAddressesResponseMessage

// repeated .protowire.BalancesByAddressEntry entries = 1;
inline int GetBalancesByAddressesResponseMessage::_internal_entries_size() const {
  return entries_.size();
}
inline int GetBalancesByAddressesResponseMessage::entries_size() const {
  return _internal_entries_size();
}
inline void GetBalancesByAddressesResponseMessage::clear_entries() {
  entries_.Clear();
}
inline ::protowire::BalancesByAddressEntry* GetBalancesByAddressesResponseMessage::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetBalancesByAddressesResponseMessage.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BalancesByAddressEntry >*
GetBalancesByAddressesResponseMessage::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetBalancesByAddressesResponseMessage.entries)
  return &entries_;
}
inline const ::protowire::BalancesByAddressEntry& GetBalancesByAddressesResponseMessage::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::protowire::BalancesByAddressEntry& GetBalancesByAddressesResponseMessage::entries(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetBalancesByAddressesResponseMessage.entries)
  return _internal_entries(index);
}
inline ::protowire::BalancesByAddressEntry* GetBalancesByAddressesResponseMessage::_internal_add_entries() {
  return entries_.Add();
}
inline ::protowire::BalancesByAddressEntry* GetBalancesByAddressesResponseMessage::add_entries() {
  ::protowire::BalancesByAddressEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:protowire.GetBalancesByAddressesResponseMessage.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::BalancesByAddressEntry >&
GetBalancesByAddressesResponseMessage::entries() const {
  // @@protoc_insertion_point(field_list:protowire.GetBalancesByAddressesResponseMessage.entries)
  return entries_;
}

// .protowire.RPCError error = 1000;
inline bool GetBalancesByAddressesResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetBalancesByAddressesResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetBalancesByAddressesResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetBalancesByAddressesResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetBalancesByAddressesResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetBalancesByAddressesResponseMessage.error)
  return _internal_error();
}
inline void GetBalancesByAddressesResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetBalancesByAddressesResponseMessage.error)
}
inline ::protowire::RPCError* GetBalancesByAddressesResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetBalancesByAddressesResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetBalancesByAddressesResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetBalancesByAddressesResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetBalancesByAddressesResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetBalancesByAddressesResponseMessage.error)
  return _msg;
}
inline void GetBalancesByAddressesResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetBalancesByAddressesResponseMessage.error)
}

// -------------------------------------------------------------------

// GetVirtualSelectedParentBlueScoreRequestMessage

// -------------------------------------------------------------------

// GetVirtualSelectedParentBlueScoreResponseMessage

// uint64 blueScore = 1;
inline void GetVirtualSelectedParentBlueScoreResponseMessage::clear_bluescore() {
  bluescore_ = uint64_t{0u};
}
inline uint64_t GetVirtualSelectedParentBlueScoreResponseMessage::_internal_bluescore() const {
  return bluescore_;
}
inline uint64_t GetVirtualSelectedParentBlueScoreResponseMessage::bluescore() const {
  // @@protoc_insertion_point(field_get:protowire.GetVirtualSelectedParentBlueScoreResponseMessage.blueScore)
  return _internal_bluescore();
}
inline void GetVirtualSelectedParentBlueScoreResponseMessage::_internal_set_bluescore(uint64_t value) {
  
  bluescore_ = value;
}
inline void GetVirtualSelectedParentBlueScoreResponseMessage::set_bluescore(uint64_t value) {
  _internal_set_bluescore(value);
  // @@protoc_insertion_point(field_set:protowire.GetVirtualSelectedParentBlueScoreResponseMessage.blueScore)
}

// .protowire.RPCError error = 1000;
inline bool GetVirtualSelectedParentBlueScoreResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetVirtualSelectedParentBlueScoreResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetVirtualSelectedParentBlueScoreResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetVirtualSelectedParentBlueScoreResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetVirtualSelectedParentBlueScoreResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetVirtualSelectedParentBlueScoreResponseMessage.error)
  return _internal_error();
}
inline void GetVirtualSelectedParentBlueScoreResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetVirtualSelectedParentBlueScoreResponseMessage.error)
}
inline ::protowire::RPCError* GetVirtualSelectedParentBlueScoreResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetVirtualSelectedParentBlueScoreResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetVirtualSelectedParentBlueScoreResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetVirtualSelectedParentBlueScoreResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetVirtualSelectedParentBlueScoreResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetVirtualSelectedParentBlueScoreResponseMessage.error)
  return _msg;
}
inline void GetVirtualSelectedParentBlueScoreResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetVirtualSelectedParentBlueScoreResponseMessage.error)
}

// -------------------------------------------------------------------

// NotifyVirtualSelectedParentBlueScoreChangedRequestMessage

// -------------------------------------------------------------------

// NotifyVirtualSelectedParentBlueScoreChangedResponseMessage

// .protowire.RPCError error = 1000;
inline bool NotifyVirtualSelectedParentBlueScoreChangedResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool NotifyVirtualSelectedParentBlueScoreChangedResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void NotifyVirtualSelectedParentBlueScoreChangedResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& NotifyVirtualSelectedParentBlueScoreChangedResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& NotifyVirtualSelectedParentBlueScoreChangedResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.NotifyVirtualSelectedParentBlueScoreChangedResponseMessage.error)
  return _internal_error();
}
inline void NotifyVirtualSelectedParentBlueScoreChangedResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.NotifyVirtualSelectedParentBlueScoreChangedResponseMessage.error)
}
inline ::protowire::RPCError* NotifyVirtualSelectedParentBlueScoreChangedResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* NotifyVirtualSelectedParentBlueScoreChangedResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.NotifyVirtualSelectedParentBlueScoreChangedResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* NotifyVirtualSelectedParentBlueScoreChangedResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* NotifyVirtualSelectedParentBlueScoreChangedResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.NotifyVirtualSelectedParentBlueScoreChangedResponseMessage.error)
  return _msg;
}
inline void NotifyVirtualSelectedParentBlueScoreChangedResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.NotifyVirtualSelectedParentBlueScoreChangedResponseMessage.error)
}

// -------------------------------------------------------------------

// VirtualSelectedParentBlueScoreChangedNotificationMessage

// uint64 virtualSelectedParentBlueScore = 1;
inline void VirtualSelectedParentBlueScoreChangedNotificationMessage::clear_virtualselectedparentbluescore() {
  virtualselectedparentbluescore_ = uint64_t{0u};
}
inline uint64_t VirtualSelectedParentBlueScoreChangedNotificationMessage::_internal_virtualselectedparentbluescore() const {
  return virtualselectedparentbluescore_;
}
inline uint64_t VirtualSelectedParentBlueScoreChangedNotificationMessage::virtualselectedparentbluescore() const {
  // @@protoc_insertion_point(field_get:protowire.VirtualSelectedParentBlueScoreChangedNotificationMessage.virtualSelectedParentBlueScore)
  return _internal_virtualselectedparentbluescore();
}
inline void VirtualSelectedParentBlueScoreChangedNotificationMessage::_internal_set_virtualselectedparentbluescore(uint64_t value) {
  
  virtualselectedparentbluescore_ = value;
}
inline void VirtualSelectedParentBlueScoreChangedNotificationMessage::set_virtualselectedparentbluescore(uint64_t value) {
  _internal_set_virtualselectedparentbluescore(value);
  // @@protoc_insertion_point(field_set:protowire.VirtualSelectedParentBlueScoreChangedNotificationMessage.virtualSelectedParentBlueScore)
}

// -------------------------------------------------------------------

// NotifyVirtualDaaScoreChangedRequestMessage

// -------------------------------------------------------------------

// NotifyVirtualDaaScoreChangedResponseMessage

// .protowire.RPCError error = 1000;
inline bool NotifyVirtualDaaScoreChangedResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool NotifyVirtualDaaScoreChangedResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void NotifyVirtualDaaScoreChangedResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& NotifyVirtualDaaScoreChangedResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& NotifyVirtualDaaScoreChangedResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.NotifyVirtualDaaScoreChangedResponseMessage.error)
  return _internal_error();
}
inline void NotifyVirtualDaaScoreChangedResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.NotifyVirtualDaaScoreChangedResponseMessage.error)
}
inline ::protowire::RPCError* NotifyVirtualDaaScoreChangedResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* NotifyVirtualDaaScoreChangedResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.NotifyVirtualDaaScoreChangedResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* NotifyVirtualDaaScoreChangedResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* NotifyVirtualDaaScoreChangedResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.NotifyVirtualDaaScoreChangedResponseMessage.error)
  return _msg;
}
inline void NotifyVirtualDaaScoreChangedResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.NotifyVirtualDaaScoreChangedResponseMessage.error)
}

// -------------------------------------------------------------------

// VirtualDaaScoreChangedNotificationMessage

// uint64 virtualDaaScore = 1;
inline void VirtualDaaScoreChangedNotificationMessage::clear_virtualdaascore() {
  virtualdaascore_ = uint64_t{0u};
}
inline uint64_t VirtualDaaScoreChangedNotificationMessage::_internal_virtualdaascore() const {
  return virtualdaascore_;
}
inline uint64_t VirtualDaaScoreChangedNotificationMessage::virtualdaascore() const {
  // @@protoc_insertion_point(field_get:protowire.VirtualDaaScoreChangedNotificationMessage.virtualDaaScore)
  return _internal_virtualdaascore();
}
inline void VirtualDaaScoreChangedNotificationMessage::_internal_set_virtualdaascore(uint64_t value) {
  
  virtualdaascore_ = value;
}
inline void VirtualDaaScoreChangedNotificationMessage::set_virtualdaascore(uint64_t value) {
  _internal_set_virtualdaascore(value);
  // @@protoc_insertion_point(field_set:protowire.VirtualDaaScoreChangedNotificationMessage.virtualDaaScore)
}

// -------------------------------------------------------------------

// NotifyPruningPointUTXOSetOverrideRequestMessage

// -------------------------------------------------------------------

// NotifyPruningPointUTXOSetOverrideResponseMessage

// .protowire.RPCError error = 1000;
inline bool NotifyPruningPointUTXOSetOverrideResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool NotifyPruningPointUTXOSetOverrideResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void NotifyPruningPointUTXOSetOverrideResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& NotifyPruningPointUTXOSetOverrideResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& NotifyPruningPointUTXOSetOverrideResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.NotifyPruningPointUTXOSetOverrideResponseMessage.error)
  return _internal_error();
}
inline void NotifyPruningPointUTXOSetOverrideResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.NotifyPruningPointUTXOSetOverrideResponseMessage.error)
}
inline ::protowire::RPCError* NotifyPruningPointUTXOSetOverrideResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* NotifyPruningPointUTXOSetOverrideResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.NotifyPruningPointUTXOSetOverrideResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* NotifyPruningPointUTXOSetOverrideResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* NotifyPruningPointUTXOSetOverrideResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.NotifyPruningPointUTXOSetOverrideResponseMessage.error)
  return _msg;
}
inline void NotifyPruningPointUTXOSetOverrideResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.NotifyPruningPointUTXOSetOverrideResponseMessage.error)
}

// -------------------------------------------------------------------

// PruningPointUTXOSetOverrideNotificationMessage

// -------------------------------------------------------------------

// StopNotifyingPruningPointUTXOSetOverrideRequestMessage

// -------------------------------------------------------------------

// StopNotifyingPruningPointUTXOSetOverrideResponseMessage

// .protowire.RPCError error = 1000;
inline bool StopNotifyingPruningPointUTXOSetOverrideResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool StopNotifyingPruningPointUTXOSetOverrideResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void StopNotifyingPruningPointUTXOSetOverrideResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& StopNotifyingPruningPointUTXOSetOverrideResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& StopNotifyingPruningPointUTXOSetOverrideResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.StopNotifyingPruningPointUTXOSetOverrideResponseMessage.error)
  return _internal_error();
}
inline void StopNotifyingPruningPointUTXOSetOverrideResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.StopNotifyingPruningPointUTXOSetOverrideResponseMessage.error)
}
inline ::protowire::RPCError* StopNotifyingPruningPointUTXOSetOverrideResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* StopNotifyingPruningPointUTXOSetOverrideResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.StopNotifyingPruningPointUTXOSetOverrideResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* StopNotifyingPruningPointUTXOSetOverrideResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* StopNotifyingPruningPointUTXOSetOverrideResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.StopNotifyingPruningPointUTXOSetOverrideResponseMessage.error)
  return _msg;
}
inline void StopNotifyingPruningPointUTXOSetOverrideResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.StopNotifyingPruningPointUTXOSetOverrideResponseMessage.error)
}

// -------------------------------------------------------------------

// BanRequestMessage

// string ip = 1;
inline void BanRequestMessage::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& BanRequestMessage::ip() const {
  // @@protoc_insertion_point(field_get:protowire.BanRequestMessage.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BanRequestMessage::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.BanRequestMessage.ip)
}
inline std::string* BanRequestMessage::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:protowire.BanRequestMessage.ip)
  return _s;
}
inline const std::string& BanRequestMessage::_internal_ip() const {
  return ip_.Get();
}
inline void BanRequestMessage::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BanRequestMessage::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BanRequestMessage::release_ip() {
  // @@protoc_insertion_point(field_release:protowire.BanRequestMessage.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BanRequestMessage::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.BanRequestMessage.ip)
}

// -------------------------------------------------------------------

// BanResponseMessage

// .protowire.RPCError error = 1000;
inline bool BanResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool BanResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void BanResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& BanResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& BanResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.BanResponseMessage.error)
  return _internal_error();
}
inline void BanResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.BanResponseMessage.error)
}
inline ::protowire::RPCError* BanResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* BanResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.BanResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* BanResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* BanResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.BanResponseMessage.error)
  return _msg;
}
inline void BanResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.BanResponseMessage.error)
}

// -------------------------------------------------------------------

// UnbanRequestMessage

// string ip = 1;
inline void UnbanRequestMessage::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& UnbanRequestMessage::ip() const {
  // @@protoc_insertion_point(field_get:protowire.UnbanRequestMessage.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnbanRequestMessage::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.UnbanRequestMessage.ip)
}
inline std::string* UnbanRequestMessage::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:protowire.UnbanRequestMessage.ip)
  return _s;
}
inline const std::string& UnbanRequestMessage::_internal_ip() const {
  return ip_.Get();
}
inline void UnbanRequestMessage::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UnbanRequestMessage::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UnbanRequestMessage::release_ip() {
  // @@protoc_insertion_point(field_release:protowire.UnbanRequestMessage.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UnbanRequestMessage::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.UnbanRequestMessage.ip)
}

// -------------------------------------------------------------------

// UnbanResponseMessage

// .protowire.RPCError error = 1000;
inline bool UnbanResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool UnbanResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void UnbanResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& UnbanResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& UnbanResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.UnbanResponseMessage.error)
  return _internal_error();
}
inline void UnbanResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.UnbanResponseMessage.error)
}
inline ::protowire::RPCError* UnbanResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* UnbanResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.UnbanResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* UnbanResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* UnbanResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.UnbanResponseMessage.error)
  return _msg;
}
inline void UnbanResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.UnbanResponseMessage.error)
}

// -------------------------------------------------------------------

// GetInfoRequestMessage

// -------------------------------------------------------------------

// GetInfoResponseMessage

// string p2pId = 1;
inline void GetInfoResponseMessage::clear_p2pid() {
  p2pid_.ClearToEmpty();
}
inline const std::string& GetInfoResponseMessage::p2pid() const {
  // @@protoc_insertion_point(field_get:protowire.GetInfoResponseMessage.p2pId)
  return _internal_p2pid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInfoResponseMessage::set_p2pid(ArgT0&& arg0, ArgT... args) {
 
 p2pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetInfoResponseMessage.p2pId)
}
inline std::string* GetInfoResponseMessage::mutable_p2pid() {
  std::string* _s = _internal_mutable_p2pid();
  // @@protoc_insertion_point(field_mutable:protowire.GetInfoResponseMessage.p2pId)
  return _s;
}
inline const std::string& GetInfoResponseMessage::_internal_p2pid() const {
  return p2pid_.Get();
}
inline void GetInfoResponseMessage::_internal_set_p2pid(const std::string& value) {
  
  p2pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetInfoResponseMessage::_internal_mutable_p2pid() {
  
  return p2pid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetInfoResponseMessage::release_p2pid() {
  // @@protoc_insertion_point(field_release:protowire.GetInfoResponseMessage.p2pId)
  return p2pid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetInfoResponseMessage::set_allocated_p2pid(std::string* p2pid) {
  if (p2pid != nullptr) {
    
  } else {
    
  }
  p2pid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), p2pid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (p2pid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    p2pid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetInfoResponseMessage.p2pId)
}

// uint64 mempoolSize = 2;
inline void GetInfoResponseMessage::clear_mempoolsize() {
  mempoolsize_ = uint64_t{0u};
}
inline uint64_t GetInfoResponseMessage::_internal_mempoolsize() const {
  return mempoolsize_;
}
inline uint64_t GetInfoResponseMessage::mempoolsize() const {
  // @@protoc_insertion_point(field_get:protowire.GetInfoResponseMessage.mempoolSize)
  return _internal_mempoolsize();
}
inline void GetInfoResponseMessage::_internal_set_mempoolsize(uint64_t value) {
  
  mempoolsize_ = value;
}
inline void GetInfoResponseMessage::set_mempoolsize(uint64_t value) {
  _internal_set_mempoolsize(value);
  // @@protoc_insertion_point(field_set:protowire.GetInfoResponseMessage.mempoolSize)
}

// string serverVersion = 3;
inline void GetInfoResponseMessage::clear_serverversion() {
  serverversion_.ClearToEmpty();
}
inline const std::string& GetInfoResponseMessage::serverversion() const {
  // @@protoc_insertion_point(field_get:protowire.GetInfoResponseMessage.serverVersion)
  return _internal_serverversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInfoResponseMessage::set_serverversion(ArgT0&& arg0, ArgT... args) {
 
 serverversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.GetInfoResponseMessage.serverVersion)
}
inline std::string* GetInfoResponseMessage::mutable_serverversion() {
  std::string* _s = _internal_mutable_serverversion();
  // @@protoc_insertion_point(field_mutable:protowire.GetInfoResponseMessage.serverVersion)
  return _s;
}
inline const std::string& GetInfoResponseMessage::_internal_serverversion() const {
  return serverversion_.Get();
}
inline void GetInfoResponseMessage::_internal_set_serverversion(const std::string& value) {
  
  serverversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetInfoResponseMessage::_internal_mutable_serverversion() {
  
  return serverversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetInfoResponseMessage::release_serverversion() {
  // @@protoc_insertion_point(field_release:protowire.GetInfoResponseMessage.serverVersion)
  return serverversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetInfoResponseMessage::set_allocated_serverversion(std::string* serverversion) {
  if (serverversion != nullptr) {
    
  } else {
    
  }
  serverversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverversion,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serverversion_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serverversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.GetInfoResponseMessage.serverVersion)
}

// bool isUtxoIndexed = 4;
inline void GetInfoResponseMessage::clear_isutxoindexed() {
  isutxoindexed_ = false;
}
inline bool GetInfoResponseMessage::_internal_isutxoindexed() const {
  return isutxoindexed_;
}
inline bool GetInfoResponseMessage::isutxoindexed() const {
  // @@protoc_insertion_point(field_get:protowire.GetInfoResponseMessage.isUtxoIndexed)
  return _internal_isutxoindexed();
}
inline void GetInfoResponseMessage::_internal_set_isutxoindexed(bool value) {
  
  isutxoindexed_ = value;
}
inline void GetInfoResponseMessage::set_isutxoindexed(bool value) {
  _internal_set_isutxoindexed(value);
  // @@protoc_insertion_point(field_set:protowire.GetInfoResponseMessage.isUtxoIndexed)
}

// bool isSynced = 5;
inline void GetInfoResponseMessage::clear_issynced() {
  issynced_ = false;
}
inline bool GetInfoResponseMessage::_internal_issynced() const {
  return issynced_;
}
inline bool GetInfoResponseMessage::issynced() const {
  // @@protoc_insertion_point(field_get:protowire.GetInfoResponseMessage.isSynced)
  return _internal_issynced();
}
inline void GetInfoResponseMessage::_internal_set_issynced(bool value) {
  
  issynced_ = value;
}
inline void GetInfoResponseMessage::set_issynced(bool value) {
  _internal_set_issynced(value);
  // @@protoc_insertion_point(field_set:protowire.GetInfoResponseMessage.isSynced)
}

// .protowire.RPCError error = 1000;
inline bool GetInfoResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetInfoResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetInfoResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetInfoResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetInfoResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetInfoResponseMessage.error)
  return _internal_error();
}
inline void GetInfoResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetInfoResponseMessage.error)
}
inline ::protowire::RPCError* GetInfoResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetInfoResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetInfoResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetInfoResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetInfoResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetInfoResponseMessage.error)
  return _msg;
}
inline void GetInfoResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetInfoResponseMessage.error)
}

// -------------------------------------------------------------------

// EstimateNetworkHashesPerSecondRequestMessage

// uint32 windowSize = 1;
inline void EstimateNetworkHashesPerSecondRequestMessage::clear_windowsize() {
  windowsize_ = 0u;
}
inline uint32_t EstimateNetworkHashesPerSecondRequestMessage::_internal_windowsize() const {
  return windowsize_;
}
inline uint32_t EstimateNetworkHashesPerSecondRequestMessage::windowsize() const {
  // @@protoc_insertion_point(field_get:protowire.EstimateNetworkHashesPerSecondRequestMessage.windowSize)
  return _internal_windowsize();
}
inline void EstimateNetworkHashesPerSecondRequestMessage::_internal_set_windowsize(uint32_t value) {
  
  windowsize_ = value;
}
inline void EstimateNetworkHashesPerSecondRequestMessage::set_windowsize(uint32_t value) {
  _internal_set_windowsize(value);
  // @@protoc_insertion_point(field_set:protowire.EstimateNetworkHashesPerSecondRequestMessage.windowSize)
}

// string startHash = 2;
inline void EstimateNetworkHashesPerSecondRequestMessage::clear_starthash() {
  starthash_.ClearToEmpty();
}
inline const std::string& EstimateNetworkHashesPerSecondRequestMessage::starthash() const {
  // @@protoc_insertion_point(field_get:protowire.EstimateNetworkHashesPerSecondRequestMessage.startHash)
  return _internal_starthash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EstimateNetworkHashesPerSecondRequestMessage::set_starthash(ArgT0&& arg0, ArgT... args) {
 
 starthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.EstimateNetworkHashesPerSecondRequestMessage.startHash)
}
inline std::string* EstimateNetworkHashesPerSecondRequestMessage::mutable_starthash() {
  std::string* _s = _internal_mutable_starthash();
  // @@protoc_insertion_point(field_mutable:protowire.EstimateNetworkHashesPerSecondRequestMessage.startHash)
  return _s;
}
inline const std::string& EstimateNetworkHashesPerSecondRequestMessage::_internal_starthash() const {
  return starthash_.Get();
}
inline void EstimateNetworkHashesPerSecondRequestMessage::_internal_set_starthash(const std::string& value) {
  
  starthash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateNetworkHashesPerSecondRequestMessage::_internal_mutable_starthash() {
  
  return starthash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateNetworkHashesPerSecondRequestMessage::release_starthash() {
  // @@protoc_insertion_point(field_release:protowire.EstimateNetworkHashesPerSecondRequestMessage.startHash)
  return starthash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EstimateNetworkHashesPerSecondRequestMessage::set_allocated_starthash(std::string* starthash) {
  if (starthash != nullptr) {
    
  } else {
    
  }
  starthash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), starthash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (starthash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    starthash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.EstimateNetworkHashesPerSecondRequestMessage.startHash)
}

// -------------------------------------------------------------------

// EstimateNetworkHashesPerSecondResponseMessage

// uint64 networkHashesPerSecond = 1;
inline void EstimateNetworkHashesPerSecondResponseMessage::clear_networkhashespersecond() {
  networkhashespersecond_ = uint64_t{0u};
}
inline uint64_t EstimateNetworkHashesPerSecondResponseMessage::_internal_networkhashespersecond() const {
  return networkhashespersecond_;
}
inline uint64_t EstimateNetworkHashesPerSecondResponseMessage::networkhashespersecond() const {
  // @@protoc_insertion_point(field_get:protowire.EstimateNetworkHashesPerSecondResponseMessage.networkHashesPerSecond)
  return _internal_networkhashespersecond();
}
inline void EstimateNetworkHashesPerSecondResponseMessage::_internal_set_networkhashespersecond(uint64_t value) {
  
  networkhashespersecond_ = value;
}
inline void EstimateNetworkHashesPerSecondResponseMessage::set_networkhashespersecond(uint64_t value) {
  _internal_set_networkhashespersecond(value);
  // @@protoc_insertion_point(field_set:protowire.EstimateNetworkHashesPerSecondResponseMessage.networkHashesPerSecond)
}

// .protowire.RPCError error = 1000;
inline bool EstimateNetworkHashesPerSecondResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool EstimateNetworkHashesPerSecondResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void EstimateNetworkHashesPerSecondResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& EstimateNetworkHashesPerSecondResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& EstimateNetworkHashesPerSecondResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.EstimateNetworkHashesPerSecondResponseMessage.error)
  return _internal_error();
}
inline void EstimateNetworkHashesPerSecondResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.EstimateNetworkHashesPerSecondResponseMessage.error)
}
inline ::protowire::RPCError* EstimateNetworkHashesPerSecondResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* EstimateNetworkHashesPerSecondResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.EstimateNetworkHashesPerSecondResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* EstimateNetworkHashesPerSecondResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* EstimateNetworkHashesPerSecondResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.EstimateNetworkHashesPerSecondResponseMessage.error)
  return _msg;
}
inline void EstimateNetworkHashesPerSecondResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.EstimateNetworkHashesPerSecondResponseMessage.error)
}

// -------------------------------------------------------------------

// NotifyNewBlockTemplateRequestMessage

// -------------------------------------------------------------------

// NotifyNewBlockTemplateResponseMessage

// .protowire.RPCError error = 1000;
inline bool NotifyNewBlockTemplateResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool NotifyNewBlockTemplateResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void NotifyNewBlockTemplateResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& NotifyNewBlockTemplateResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& NotifyNewBlockTemplateResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.NotifyNewBlockTemplateResponseMessage.error)
  return _internal_error();
}
inline void NotifyNewBlockTemplateResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.NotifyNewBlockTemplateResponseMessage.error)
}
inline ::protowire::RPCError* NotifyNewBlockTemplateResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* NotifyNewBlockTemplateResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.NotifyNewBlockTemplateResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* NotifyNewBlockTemplateResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* NotifyNewBlockTemplateResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.NotifyNewBlockTemplateResponseMessage.error)
  return _msg;
}
inline void NotifyNewBlockTemplateResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.NotifyNewBlockTemplateResponseMessage.error)
}

// -------------------------------------------------------------------

// NewBlockTemplateNotificationMessage

// -------------------------------------------------------------------

// MempoolEntryByAddress

// string address = 1;
inline void MempoolEntryByAddress::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& MempoolEntryByAddress::address() const {
  // @@protoc_insertion_point(field_get:protowire.MempoolEntryByAddress.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MempoolEntryByAddress::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protowire.MempoolEntryByAddress.address)
}
inline std::string* MempoolEntryByAddress::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:protowire.MempoolEntryByAddress.address)
  return _s;
}
inline const std::string& MempoolEntryByAddress::_internal_address() const {
  return address_.Get();
}
inline void MempoolEntryByAddress::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MempoolEntryByAddress::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MempoolEntryByAddress::release_address() {
  // @@protoc_insertion_point(field_release:protowire.MempoolEntryByAddress.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MempoolEntryByAddress::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protowire.MempoolEntryByAddress.address)
}

// repeated .protowire.MempoolEntry sending = 2;
inline int MempoolEntryByAddress::_internal_sending_size() const {
  return sending_.size();
}
inline int MempoolEntryByAddress::sending_size() const {
  return _internal_sending_size();
}
inline void MempoolEntryByAddress::clear_sending() {
  sending_.Clear();
}
inline ::protowire::MempoolEntry* MempoolEntryByAddress::mutable_sending(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.MempoolEntryByAddress.sending)
  return sending_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry >*
MempoolEntryByAddress::mutable_sending() {
  // @@protoc_insertion_point(field_mutable_list:protowire.MempoolEntryByAddress.sending)
  return &sending_;
}
inline const ::protowire::MempoolEntry& MempoolEntryByAddress::_internal_sending(int index) const {
  return sending_.Get(index);
}
inline const ::protowire::MempoolEntry& MempoolEntryByAddress::sending(int index) const {
  // @@protoc_insertion_point(field_get:protowire.MempoolEntryByAddress.sending)
  return _internal_sending(index);
}
inline ::protowire::MempoolEntry* MempoolEntryByAddress::_internal_add_sending() {
  return sending_.Add();
}
inline ::protowire::MempoolEntry* MempoolEntryByAddress::add_sending() {
  ::protowire::MempoolEntry* _add = _internal_add_sending();
  // @@protoc_insertion_point(field_add:protowire.MempoolEntryByAddress.sending)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry >&
MempoolEntryByAddress::sending() const {
  // @@protoc_insertion_point(field_list:protowire.MempoolEntryByAddress.sending)
  return sending_;
}

// repeated .protowire.MempoolEntry receiving = 3;
inline int MempoolEntryByAddress::_internal_receiving_size() const {
  return receiving_.size();
}
inline int MempoolEntryByAddress::receiving_size() const {
  return _internal_receiving_size();
}
inline void MempoolEntryByAddress::clear_receiving() {
  receiving_.Clear();
}
inline ::protowire::MempoolEntry* MempoolEntryByAddress::mutable_receiving(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.MempoolEntryByAddress.receiving)
  return receiving_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry >*
MempoolEntryByAddress::mutable_receiving() {
  // @@protoc_insertion_point(field_mutable_list:protowire.MempoolEntryByAddress.receiving)
  return &receiving_;
}
inline const ::protowire::MempoolEntry& MempoolEntryByAddress::_internal_receiving(int index) const {
  return receiving_.Get(index);
}
inline const ::protowire::MempoolEntry& MempoolEntryByAddress::receiving(int index) const {
  // @@protoc_insertion_point(field_get:protowire.MempoolEntryByAddress.receiving)
  return _internal_receiving(index);
}
inline ::protowire::MempoolEntry* MempoolEntryByAddress::_internal_add_receiving() {
  return receiving_.Add();
}
inline ::protowire::MempoolEntry* MempoolEntryByAddress::add_receiving() {
  ::protowire::MempoolEntry* _add = _internal_add_receiving();
  // @@protoc_insertion_point(field_add:protowire.MempoolEntryByAddress.receiving)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntry >&
MempoolEntryByAddress::receiving() const {
  // @@protoc_insertion_point(field_list:protowire.MempoolEntryByAddress.receiving)
  return receiving_;
}

// -------------------------------------------------------------------

// GetMempoolEntriesByAddressesRequestMessage

// repeated string addresses = 1;
inline int GetMempoolEntriesByAddressesRequestMessage::_internal_addresses_size() const {
  return addresses_.size();
}
inline int GetMempoolEntriesByAddressesRequestMessage::addresses_size() const {
  return _internal_addresses_size();
}
inline void GetMempoolEntriesByAddressesRequestMessage::clear_addresses() {
  addresses_.Clear();
}
inline std::string* GetMempoolEntriesByAddressesRequestMessage::add_addresses() {
  std::string* _s = _internal_add_addresses();
  // @@protoc_insertion_point(field_add_mutable:protowire.GetMempoolEntriesByAddressesRequestMessage.addresses)
  return _s;
}
inline const std::string& GetMempoolEntriesByAddressesRequestMessage::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& GetMempoolEntriesByAddressesRequestMessage::addresses(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntriesByAddressesRequestMessage.addresses)
  return _internal_addresses(index);
}
inline std::string* GetMempoolEntriesByAddressesRequestMessage::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetMempoolEntriesByAddressesRequestMessage.addresses)
  return addresses_.Mutable(index);
}
inline void GetMempoolEntriesByAddressesRequestMessage::set_addresses(int index, const std::string& value) {
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protowire.GetMempoolEntriesByAddressesRequestMessage.addresses)
}
inline void GetMempoolEntriesByAddressesRequestMessage::set_addresses(int index, std::string&& value) {
  addresses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protowire.GetMempoolEntriesByAddressesRequestMessage.addresses)
}
inline void GetMempoolEntriesByAddressesRequestMessage::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protowire.GetMempoolEntriesByAddressesRequestMessage.addresses)
}
inline void GetMempoolEntriesByAddressesRequestMessage::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protowire.GetMempoolEntriesByAddressesRequestMessage.addresses)
}
inline std::string* GetMempoolEntriesByAddressesRequestMessage::_internal_add_addresses() {
  return addresses_.Add();
}
inline void GetMempoolEntriesByAddressesRequestMessage::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protowire.GetMempoolEntriesByAddressesRequestMessage.addresses)
}
inline void GetMempoolEntriesByAddressesRequestMessage::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protowire.GetMempoolEntriesByAddressesRequestMessage.addresses)
}
inline void GetMempoolEntriesByAddressesRequestMessage::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protowire.GetMempoolEntriesByAddressesRequestMessage.addresses)
}
inline void GetMempoolEntriesByAddressesRequestMessage::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protowire.GetMempoolEntriesByAddressesRequestMessage.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetMempoolEntriesByAddressesRequestMessage::addresses() const {
  // @@protoc_insertion_point(field_list:protowire.GetMempoolEntriesByAddressesRequestMessage.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetMempoolEntriesByAddressesRequestMessage::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetMempoolEntriesByAddressesRequestMessage.addresses)
  return &addresses_;
}

// bool includeOrphanPool = 2;
inline void GetMempoolEntriesByAddressesRequestMessage::clear_includeorphanpool() {
  includeorphanpool_ = false;
}
inline bool GetMempoolEntriesByAddressesRequestMessage::_internal_includeorphanpool() const {
  return includeorphanpool_;
}
inline bool GetMempoolEntriesByAddressesRequestMessage::includeorphanpool() const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntriesByAddressesRequestMessage.includeOrphanPool)
  return _internal_includeorphanpool();
}
inline void GetMempoolEntriesByAddressesRequestMessage::_internal_set_includeorphanpool(bool value) {
  
  includeorphanpool_ = value;
}
inline void GetMempoolEntriesByAddressesRequestMessage::set_includeorphanpool(bool value) {
  _internal_set_includeorphanpool(value);
  // @@protoc_insertion_point(field_set:protowire.GetMempoolEntriesByAddressesRequestMessage.includeOrphanPool)
}

// bool filterTransactionPool = 3;
inline void GetMempoolEntriesByAddressesRequestMessage::clear_filtertransactionpool() {
  filtertransactionpool_ = false;
}
inline bool GetMempoolEntriesByAddressesRequestMessage::_internal_filtertransactionpool() const {
  return filtertransactionpool_;
}
inline bool GetMempoolEntriesByAddressesRequestMessage::filtertransactionpool() const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntriesByAddressesRequestMessage.filterTransactionPool)
  return _internal_filtertransactionpool();
}
inline void GetMempoolEntriesByAddressesRequestMessage::_internal_set_filtertransactionpool(bool value) {
  
  filtertransactionpool_ = value;
}
inline void GetMempoolEntriesByAddressesRequestMessage::set_filtertransactionpool(bool value) {
  _internal_set_filtertransactionpool(value);
  // @@protoc_insertion_point(field_set:protowire.GetMempoolEntriesByAddressesRequestMessage.filterTransactionPool)
}

// -------------------------------------------------------------------

// GetMempoolEntriesByAddressesResponseMessage

// repeated .protowire.MempoolEntryByAddress entries = 1;
inline int GetMempoolEntriesByAddressesResponseMessage::_internal_entries_size() const {
  return entries_.size();
}
inline int GetMempoolEntriesByAddressesResponseMessage::entries_size() const {
  return _internal_entries_size();
}
inline void GetMempoolEntriesByAddressesResponseMessage::clear_entries() {
  entries_.Clear();
}
inline ::protowire::MempoolEntryByAddress* GetMempoolEntriesByAddressesResponseMessage::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:protowire.GetMempoolEntriesByAddressesResponseMessage.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntryByAddress >*
GetMempoolEntriesByAddressesResponseMessage::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:protowire.GetMempoolEntriesByAddressesResponseMessage.entries)
  return &entries_;
}
inline const ::protowire::MempoolEntryByAddress& GetMempoolEntriesByAddressesResponseMessage::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::protowire::MempoolEntryByAddress& GetMempoolEntriesByAddressesResponseMessage::entries(int index) const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntriesByAddressesResponseMessage.entries)
  return _internal_entries(index);
}
inline ::protowire::MempoolEntryByAddress* GetMempoolEntriesByAddressesResponseMessage::_internal_add_entries() {
  return entries_.Add();
}
inline ::protowire::MempoolEntryByAddress* GetMempoolEntriesByAddressesResponseMessage::add_entries() {
  ::protowire::MempoolEntryByAddress* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:protowire.GetMempoolEntriesByAddressesResponseMessage.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protowire::MempoolEntryByAddress >&
GetMempoolEntriesByAddressesResponseMessage::entries() const {
  // @@protoc_insertion_point(field_list:protowire.GetMempoolEntriesByAddressesResponseMessage.entries)
  return entries_;
}

// .protowire.RPCError error = 1000;
inline bool GetMempoolEntriesByAddressesResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetMempoolEntriesByAddressesResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetMempoolEntriesByAddressesResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetMempoolEntriesByAddressesResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetMempoolEntriesByAddressesResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetMempoolEntriesByAddressesResponseMessage.error)
  return _internal_error();
}
inline void GetMempoolEntriesByAddressesResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetMempoolEntriesByAddressesResponseMessage.error)
}
inline ::protowire::RPCError* GetMempoolEntriesByAddressesResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetMempoolEntriesByAddressesResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetMempoolEntriesByAddressesResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetMempoolEntriesByAddressesResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetMempoolEntriesByAddressesResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetMempoolEntriesByAddressesResponseMessage.error)
  return _msg;
}
inline void GetMempoolEntriesByAddressesResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetMempoolEntriesByAddressesResponseMessage.error)
}

// -------------------------------------------------------------------

// GetCoinSupplyRequestMessage

// -------------------------------------------------------------------

// GetCoinSupplyResponseMessage

// uint64 maxSompi = 1;
inline void GetCoinSupplyResponseMessage::clear_maxsompi() {
  maxsompi_ = uint64_t{0u};
}
inline uint64_t GetCoinSupplyResponseMessage::_internal_maxsompi() const {
  return maxsompi_;
}
inline uint64_t GetCoinSupplyResponseMessage::maxsompi() const {
  // @@protoc_insertion_point(field_get:protowire.GetCoinSupplyResponseMessage.maxSompi)
  return _internal_maxsompi();
}
inline void GetCoinSupplyResponseMessage::_internal_set_maxsompi(uint64_t value) {
  
  maxsompi_ = value;
}
inline void GetCoinSupplyResponseMessage::set_maxsompi(uint64_t value) {
  _internal_set_maxsompi(value);
  // @@protoc_insertion_point(field_set:protowire.GetCoinSupplyResponseMessage.maxSompi)
}

// uint64 circulatingSompi = 2;
inline void GetCoinSupplyResponseMessage::clear_circulatingsompi() {
  circulatingsompi_ = uint64_t{0u};
}
inline uint64_t GetCoinSupplyResponseMessage::_internal_circulatingsompi() const {
  return circulatingsompi_;
}
inline uint64_t GetCoinSupplyResponseMessage::circulatingsompi() const {
  // @@protoc_insertion_point(field_get:protowire.GetCoinSupplyResponseMessage.circulatingSompi)
  return _internal_circulatingsompi();
}
inline void GetCoinSupplyResponseMessage::_internal_set_circulatingsompi(uint64_t value) {
  
  circulatingsompi_ = value;
}
inline void GetCoinSupplyResponseMessage::set_circulatingsompi(uint64_t value) {
  _internal_set_circulatingsompi(value);
  // @@protoc_insertion_point(field_set:protowire.GetCoinSupplyResponseMessage.circulatingSompi)
}

// .protowire.RPCError error = 1000;
inline bool GetCoinSupplyResponseMessage::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetCoinSupplyResponseMessage::has_error() const {
  return _internal_has_error();
}
inline void GetCoinSupplyResponseMessage::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::protowire::RPCError& GetCoinSupplyResponseMessage::_internal_error() const {
  const ::protowire::RPCError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::protowire::RPCError&>(
      ::protowire::_RPCError_default_instance_);
}
inline const ::protowire::RPCError& GetCoinSupplyResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:protowire.GetCoinSupplyResponseMessage.error)
  return _internal_error();
}
inline void GetCoinSupplyResponseMessage::unsafe_arena_set_allocated_error(
    ::protowire::RPCError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.GetCoinSupplyResponseMessage.error)
}
inline ::protowire::RPCError* GetCoinSupplyResponseMessage::release_error() {
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protowire::RPCError* GetCoinSupplyResponseMessage::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:protowire.GetCoinSupplyResponseMessage.error)
  
  ::protowire::RPCError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::protowire::RPCError* GetCoinSupplyResponseMessage::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::protowire::RPCError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::protowire::RPCError* GetCoinSupplyResponseMessage::mutable_error() {
  ::protowire::RPCError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protowire.GetCoinSupplyResponseMessage.error)
  return _msg;
}
inline void GetCoinSupplyResponseMessage::set_allocated_error(::protowire::RPCError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protowire::RPCError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:protowire.GetCoinSupplyResponseMessage.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protowire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protowire::SubmitBlockResponseMessage_RejectReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protowire::SubmitBlockResponseMessage_RejectReason>() {
  return ::protowire::SubmitBlockResponseMessage_RejectReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
