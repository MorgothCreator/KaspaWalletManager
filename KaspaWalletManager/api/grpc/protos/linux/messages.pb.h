// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "p2p.pb.h"
#include "rpc.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace protowire {
class KaspadMessage;
struct KaspadMessageDefaultTypeInternal;
extern KaspadMessageDefaultTypeInternal _KaspadMessage_default_instance_;
}  // namespace protowire
PROTOBUF_NAMESPACE_OPEN
template<> ::protowire::KaspadMessage* Arena::CreateMaybeMessage<::protowire::KaspadMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protowire {

// ===================================================================

class KaspadMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protowire.KaspadMessage) */ {
 public:
  inline KaspadMessage() : KaspadMessage(nullptr) {}
  ~KaspadMessage() override;
  explicit constexpr KaspadMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KaspadMessage(const KaspadMessage& from);
  KaspadMessage(KaspadMessage&& from) noexcept
    : KaspadMessage() {
    *this = ::std::move(from);
  }

  inline KaspadMessage& operator=(const KaspadMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline KaspadMessage& operator=(KaspadMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KaspadMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kAddresses = 1,
    kBlock = 2,
    kTransaction = 3,
    kBlockLocator = 5,
    kRequestAddresses = 6,
    kRequestRelayBlocks = 10,
    kRequestTransactions = 12,
    kIbdBlock = 13,
    kInvRelayBlock = 14,
    kInvTransactions = 15,
    kPing = 16,
    kPong = 17,
    kVerack = 19,
    kVersion = 20,
    kTransactionNotFound = 21,
    kReject = 22,
    kPruningPointUtxoSetChunk = 25,
    kRequestIBDBlocks = 26,
    kUnexpectedPruningPoint = 27,
    kIbdBlockLocator = 30,
    kIbdBlockLocatorHighestHash = 31,
    kRequestNextPruningPointUtxoSetChunk = 33,
    kDonePruningPointUtxoSetChunks = 34,
    kIbdBlockLocatorHighestHashNotFound = 35,
    kBlockWithTrustedData = 36,
    kDoneBlocksWithTrustedData = 37,
    kRequestPruningPointAndItsAnticone = 40,
    kBlockHeaders = 41,
    kRequestNextHeaders = 42,
    kDoneHeaders = 43,
    kRequestPruningPointUTXOSet = 44,
    kRequestHeaders = 45,
    kRequestBlockLocator = 46,
    kPruningPoints = 47,
    kRequestPruningPointProof = 48,
    kPruningPointProof = 49,
    kReady = 50,
    kBlockWithTrustedDataV4 = 51,
    kTrustedData = 52,
    kRequestIBDChainBlockLocator = 53,
    kIbdChainBlockLocator = 54,
    kRequestAnticone = 55,
    kRequestNextPruningPointAndItsAnticoneBlocks = 56,
    kGetCurrentNetworkRequest = 1001,
    kGetCurrentNetworkResponse = 1002,
    kSubmitBlockRequest = 1003,
    kSubmitBlockResponse = 1004,
    kGetBlockTemplateRequest = 1005,
    kGetBlockTemplateResponse = 1006,
    kNotifyBlockAddedRequest = 1007,
    kNotifyBlockAddedResponse = 1008,
    kBlockAddedNotification = 1009,
    kGetPeerAddressesRequest = 1010,
    kGetPeerAddressesResponse = 1011,
    kGetSelectedTipHashRequest = 1012,
    kGetSelectedTipHashResponse = 1013,
    kGetMempoolEntryRequest = 1014,
    kGetMempoolEntryResponse = 1015,
    kGetConnectedPeerInfoRequest = 1016,
    kGetConnectedPeerInfoResponse = 1017,
    kAddPeerRequest = 1018,
    kAddPeerResponse = 1019,
    kSubmitTransactionRequest = 1020,
    kSubmitTransactionResponse = 1021,
    kNotifyVirtualSelectedParentChainChangedRequest = 1022,
    kNotifyVirtualSelectedParentChainChangedResponse = 1023,
    kVirtualSelectedParentChainChangedNotification = 1024,
    kGetBlockRequest = 1025,
    kGetBlockResponse = 1026,
    kGetSubnetworkRequest = 1027,
    kGetSubnetworkResponse = 1028,
    kGetVirtualSelectedParentChainFromBlockRequest = 1029,
    kGetVirtualSelectedParentChainFromBlockResponse = 1030,
    kGetBlocksRequest = 1031,
    kGetBlocksResponse = 1032,
    kGetBlockCountRequest = 1033,
    kGetBlockCountResponse = 1034,
    kGetBlockDagInfoRequest = 1035,
    kGetBlockDagInfoResponse = 1036,
    kResolveFinalityConflictRequest = 1037,
    kResolveFinalityConflictResponse = 1038,
    kNotifyFinalityConflictsRequest = 1039,
    kNotifyFinalityConflictsResponse = 1040,
    kFinalityConflictNotification = 1041,
    kFinalityConflictResolvedNotification = 1042,
    kGetMempoolEntriesRequest = 1043,
    kGetMempoolEntriesResponse = 1044,
    kShutDownRequest = 1045,
    kShutDownResponse = 1046,
    kGetHeadersRequest = 1047,
    kGetHeadersResponse = 1048,
    kNotifyUtxosChangedRequest = 1049,
    kNotifyUtxosChangedResponse = 1050,
    kUtxosChangedNotification = 1051,
    kGetUtxosByAddressesRequest = 1052,
    kGetUtxosByAddressesResponse = 1053,
    kGetVirtualSelectedParentBlueScoreRequest = 1054,
    kGetVirtualSelectedParentBlueScoreResponse = 1055,
    kNotifyVirtualSelectedParentBlueScoreChangedRequest = 1056,
    kNotifyVirtualSelectedParentBlueScoreChangedResponse = 1057,
    kVirtualSelectedParentBlueScoreChangedNotification = 1058,
    kBanRequest = 1059,
    kBanResponse = 1060,
    kUnbanRequest = 1061,
    kUnbanResponse = 1062,
    kGetInfoRequest = 1063,
    kGetInfoResponse = 1064,
    kStopNotifyingUtxosChangedRequest = 1065,
    kStopNotifyingUtxosChangedResponse = 1066,
    kNotifyPruningPointUTXOSetOverrideRequest = 1067,
    kNotifyPruningPointUTXOSetOverrideResponse = 1068,
    kPruningPointUTXOSetOverrideNotification = 1069,
    kStopNotifyingPruningPointUTXOSetOverrideRequest = 1070,
    kStopNotifyingPruningPointUTXOSetOverrideResponse = 1071,
    kEstimateNetworkHashesPerSecondRequest = 1072,
    kEstimateNetworkHashesPerSecondResponse = 1073,
    kNotifyVirtualDaaScoreChangedRequest = 1074,
    kNotifyVirtualDaaScoreChangedResponse = 1075,
    kVirtualDaaScoreChangedNotification = 1076,
    kGetBalanceByAddressRequest = 1077,
    kGetBalanceByAddressResponse = 1078,
    kGetBalancesByAddressesRequest = 1079,
    kGetBalancesByAddressesResponse = 1080,
    kNotifyNewBlockTemplateRequest = 1081,
    kNotifyNewBlockTemplateResponse = 1082,
    kNewBlockTemplateNotification = 1083,
    kGetMempoolEntriesByAddressesRequest = 1084,
    kGetMempoolEntriesByAddressesResponse = 1085,
    kGetCoinSupplyRequest = 1086,
    kGetCoinSupplyResponse = 1087,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const KaspadMessage* internal_default_instance() {
    return reinterpret_cast<const KaspadMessage*>(
               &_KaspadMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KaspadMessage& a, KaspadMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(KaspadMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KaspadMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KaspadMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KaspadMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KaspadMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KaspadMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KaspadMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protowire.KaspadMessage";
  }
  protected:
  explicit KaspadMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
    kBlockFieldNumber = 2,
    kTransactionFieldNumber = 3,
    kBlockLocatorFieldNumber = 5,
    kRequestAddressesFieldNumber = 6,
    kRequestRelayBlocksFieldNumber = 10,
    kRequestTransactionsFieldNumber = 12,
    kIbdBlockFieldNumber = 13,
    kInvRelayBlockFieldNumber = 14,
    kInvTransactionsFieldNumber = 15,
    kPingFieldNumber = 16,
    kPongFieldNumber = 17,
    kVerackFieldNumber = 19,
    kVersionFieldNumber = 20,
    kTransactionNotFoundFieldNumber = 21,
    kRejectFieldNumber = 22,
    kPruningPointUtxoSetChunkFieldNumber = 25,
    kRequestIBDBlocksFieldNumber = 26,
    kUnexpectedPruningPointFieldNumber = 27,
    kIbdBlockLocatorFieldNumber = 30,
    kIbdBlockLocatorHighestHashFieldNumber = 31,
    kRequestNextPruningPointUtxoSetChunkFieldNumber = 33,
    kDonePruningPointUtxoSetChunksFieldNumber = 34,
    kIbdBlockLocatorHighestHashNotFoundFieldNumber = 35,
    kBlockWithTrustedDataFieldNumber = 36,
    kDoneBlocksWithTrustedDataFieldNumber = 37,
    kRequestPruningPointAndItsAnticoneFieldNumber = 40,
    kBlockHeadersFieldNumber = 41,
    kRequestNextHeadersFieldNumber = 42,
    kDoneHeadersFieldNumber = 43,
    kRequestPruningPointUTXOSetFieldNumber = 44,
    kRequestHeadersFieldNumber = 45,
    kRequestBlockLocatorFieldNumber = 46,
    kPruningPointsFieldNumber = 47,
    kRequestPruningPointProofFieldNumber = 48,
    kPruningPointProofFieldNumber = 49,
    kReadyFieldNumber = 50,
    kBlockWithTrustedDataV4FieldNumber = 51,
    kTrustedDataFieldNumber = 52,
    kRequestIBDChainBlockLocatorFieldNumber = 53,
    kIbdChainBlockLocatorFieldNumber = 54,
    kRequestAnticoneFieldNumber = 55,
    kRequestNextPruningPointAndItsAnticoneBlocksFieldNumber = 56,
    kGetCurrentNetworkRequestFieldNumber = 1001,
    kGetCurrentNetworkResponseFieldNumber = 1002,
    kSubmitBlockRequestFieldNumber = 1003,
    kSubmitBlockResponseFieldNumber = 1004,
    kGetBlockTemplateRequestFieldNumber = 1005,
    kGetBlockTemplateResponseFieldNumber = 1006,
    kNotifyBlockAddedRequestFieldNumber = 1007,
    kNotifyBlockAddedResponseFieldNumber = 1008,
    kBlockAddedNotificationFieldNumber = 1009,
    kGetPeerAddressesRequestFieldNumber = 1010,
    kGetPeerAddressesResponseFieldNumber = 1011,
    kGetSelectedTipHashRequestFieldNumber = 1012,
    kGetSelectedTipHashResponseFieldNumber = 1013,
    kGetMempoolEntryRequestFieldNumber = 1014,
    kGetMempoolEntryResponseFieldNumber = 1015,
    kGetConnectedPeerInfoRequestFieldNumber = 1016,
    kGetConnectedPeerInfoResponseFieldNumber = 1017,
    kAddPeerRequestFieldNumber = 1018,
    kAddPeerResponseFieldNumber = 1019,
    kSubmitTransactionRequestFieldNumber = 1020,
    kSubmitTransactionResponseFieldNumber = 1021,
    kNotifyVirtualSelectedParentChainChangedRequestFieldNumber = 1022,
    kNotifyVirtualSelectedParentChainChangedResponseFieldNumber = 1023,
    kVirtualSelectedParentChainChangedNotificationFieldNumber = 1024,
    kGetBlockRequestFieldNumber = 1025,
    kGetBlockResponseFieldNumber = 1026,
    kGetSubnetworkRequestFieldNumber = 1027,
    kGetSubnetworkResponseFieldNumber = 1028,
    kGetVirtualSelectedParentChainFromBlockRequestFieldNumber = 1029,
    kGetVirtualSelectedParentChainFromBlockResponseFieldNumber = 1030,
    kGetBlocksRequestFieldNumber = 1031,
    kGetBlocksResponseFieldNumber = 1032,
    kGetBlockCountRequestFieldNumber = 1033,
    kGetBlockCountResponseFieldNumber = 1034,
    kGetBlockDagInfoRequestFieldNumber = 1035,
    kGetBlockDagInfoResponseFieldNumber = 1036,
    kResolveFinalityConflictRequestFieldNumber = 1037,
    kResolveFinalityConflictResponseFieldNumber = 1038,
    kNotifyFinalityConflictsRequestFieldNumber = 1039,
    kNotifyFinalityConflictsResponseFieldNumber = 1040,
    kFinalityConflictNotificationFieldNumber = 1041,
    kFinalityConflictResolvedNotificationFieldNumber = 1042,
    kGetMempoolEntriesRequestFieldNumber = 1043,
    kGetMempoolEntriesResponseFieldNumber = 1044,
    kShutDownRequestFieldNumber = 1045,
    kShutDownResponseFieldNumber = 1046,
    kGetHeadersRequestFieldNumber = 1047,
    kGetHeadersResponseFieldNumber = 1048,
    kNotifyUtxosChangedRequestFieldNumber = 1049,
    kNotifyUtxosChangedResponseFieldNumber = 1050,
    kUtxosChangedNotificationFieldNumber = 1051,
    kGetUtxosByAddressesRequestFieldNumber = 1052,
    kGetUtxosByAddressesResponseFieldNumber = 1053,
    kGetVirtualSelectedParentBlueScoreRequestFieldNumber = 1054,
    kGetVirtualSelectedParentBlueScoreResponseFieldNumber = 1055,
    kNotifyVirtualSelectedParentBlueScoreChangedRequestFieldNumber = 1056,
    kNotifyVirtualSelectedParentBlueScoreChangedResponseFieldNumber = 1057,
    kVirtualSelectedParentBlueScoreChangedNotificationFieldNumber = 1058,
    kBanRequestFieldNumber = 1059,
    kBanResponseFieldNumber = 1060,
    kUnbanRequestFieldNumber = 1061,
    kUnbanResponseFieldNumber = 1062,
    kGetInfoRequestFieldNumber = 1063,
    kGetInfoResponseFieldNumber = 1064,
    kStopNotifyingUtxosChangedRequestFieldNumber = 1065,
    kStopNotifyingUtxosChangedResponseFieldNumber = 1066,
    kNotifyPruningPointUTXOSetOverrideRequestFieldNumber = 1067,
    kNotifyPruningPointUTXOSetOverrideResponseFieldNumber = 1068,
    kPruningPointUTXOSetOverrideNotificationFieldNumber = 1069,
    kStopNotifyingPruningPointUTXOSetOverrideRequestFieldNumber = 1070,
    kStopNotifyingPruningPointUTXOSetOverrideResponseFieldNumber = 1071,
    kEstimateNetworkHashesPerSecondRequestFieldNumber = 1072,
    kEstimateNetworkHashesPerSecondResponseFieldNumber = 1073,
    kNotifyVirtualDaaScoreChangedRequestFieldNumber = 1074,
    kNotifyVirtualDaaScoreChangedResponseFieldNumber = 1075,
    kVirtualDaaScoreChangedNotificationFieldNumber = 1076,
    kGetBalanceByAddressRequestFieldNumber = 1077,
    kGetBalanceByAddressResponseFieldNumber = 1078,
    kGetBalancesByAddressesRequestFieldNumber = 1079,
    kGetBalancesByAddressesResponseFieldNumber = 1080,
    kNotifyNewBlockTemplateRequestFieldNumber = 1081,
    kNotifyNewBlockTemplateResponseFieldNumber = 1082,
    kNewBlockTemplateNotificationFieldNumber = 1083,
    kGetMempoolEntriesByAddressesRequestFieldNumber = 1084,
    kGetMempoolEntriesByAddressesResponseFieldNumber = 1085,
    kGetCoinSupplyRequestFieldNumber = 1086,
    kGetCoinSupplyResponseFieldNumber = 1087,
  };
  // .protowire.AddressesMessage addresses = 1;
  bool has_addresses() const;
  private:
  bool _internal_has_addresses() const;
  public:
  void clear_addresses();
  const ::protowire::AddressesMessage& addresses() const;
  PROTOBUF_NODISCARD ::protowire::AddressesMessage* release_addresses();
  ::protowire::AddressesMessage* mutable_addresses();
  void set_allocated_addresses(::protowire::AddressesMessage* addresses);
  private:
  const ::protowire::AddressesMessage& _internal_addresses() const;
  ::protowire::AddressesMessage* _internal_mutable_addresses();
  public:
  void unsafe_arena_set_allocated_addresses(
      ::protowire::AddressesMessage* addresses);
  ::protowire::AddressesMessage* unsafe_arena_release_addresses();

  // .protowire.BlockMessage block = 2;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::protowire::BlockMessage& block() const;
  PROTOBUF_NODISCARD ::protowire::BlockMessage* release_block();
  ::protowire::BlockMessage* mutable_block();
  void set_allocated_block(::protowire::BlockMessage* block);
  private:
  const ::protowire::BlockMessage& _internal_block() const;
  ::protowire::BlockMessage* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::protowire::BlockMessage* block);
  ::protowire::BlockMessage* unsafe_arena_release_block();

  // .protowire.TransactionMessage transaction = 3;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::protowire::TransactionMessage& transaction() const;
  PROTOBUF_NODISCARD ::protowire::TransactionMessage* release_transaction();
  ::protowire::TransactionMessage* mutable_transaction();
  void set_allocated_transaction(::protowire::TransactionMessage* transaction);
  private:
  const ::protowire::TransactionMessage& _internal_transaction() const;
  ::protowire::TransactionMessage* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::protowire::TransactionMessage* transaction);
  ::protowire::TransactionMessage* unsafe_arena_release_transaction();

  // .protowire.BlockLocatorMessage blockLocator = 5;
  bool has_blocklocator() const;
  private:
  bool _internal_has_blocklocator() const;
  public:
  void clear_blocklocator();
  const ::protowire::BlockLocatorMessage& blocklocator() const;
  PROTOBUF_NODISCARD ::protowire::BlockLocatorMessage* release_blocklocator();
  ::protowire::BlockLocatorMessage* mutable_blocklocator();
  void set_allocated_blocklocator(::protowire::BlockLocatorMessage* blocklocator);
  private:
  const ::protowire::BlockLocatorMessage& _internal_blocklocator() const;
  ::protowire::BlockLocatorMessage* _internal_mutable_blocklocator();
  public:
  void unsafe_arena_set_allocated_blocklocator(
      ::protowire::BlockLocatorMessage* blocklocator);
  ::protowire::BlockLocatorMessage* unsafe_arena_release_blocklocator();

  // .protowire.RequestAddressesMessage requestAddresses = 6;
  bool has_requestaddresses() const;
  private:
  bool _internal_has_requestaddresses() const;
  public:
  void clear_requestaddresses();
  const ::protowire::RequestAddressesMessage& requestaddresses() const;
  PROTOBUF_NODISCARD ::protowire::RequestAddressesMessage* release_requestaddresses();
  ::protowire::RequestAddressesMessage* mutable_requestaddresses();
  void set_allocated_requestaddresses(::protowire::RequestAddressesMessage* requestaddresses);
  private:
  const ::protowire::RequestAddressesMessage& _internal_requestaddresses() const;
  ::protowire::RequestAddressesMessage* _internal_mutable_requestaddresses();
  public:
  void unsafe_arena_set_allocated_requestaddresses(
      ::protowire::RequestAddressesMessage* requestaddresses);
  ::protowire::RequestAddressesMessage* unsafe_arena_release_requestaddresses();

  // .protowire.RequestRelayBlocksMessage requestRelayBlocks = 10;
  bool has_requestrelayblocks() const;
  private:
  bool _internal_has_requestrelayblocks() const;
  public:
  void clear_requestrelayblocks();
  const ::protowire::RequestRelayBlocksMessage& requestrelayblocks() const;
  PROTOBUF_NODISCARD ::protowire::RequestRelayBlocksMessage* release_requestrelayblocks();
  ::protowire::RequestRelayBlocksMessage* mutable_requestrelayblocks();
  void set_allocated_requestrelayblocks(::protowire::RequestRelayBlocksMessage* requestrelayblocks);
  private:
  const ::protowire::RequestRelayBlocksMessage& _internal_requestrelayblocks() const;
  ::protowire::RequestRelayBlocksMessage* _internal_mutable_requestrelayblocks();
  public:
  void unsafe_arena_set_allocated_requestrelayblocks(
      ::protowire::RequestRelayBlocksMessage* requestrelayblocks);
  ::protowire::RequestRelayBlocksMessage* unsafe_arena_release_requestrelayblocks();

  // .protowire.RequestTransactionsMessage requestTransactions = 12;
  bool has_requesttransactions() const;
  private:
  bool _internal_has_requesttransactions() const;
  public:
  void clear_requesttransactions();
  const ::protowire::RequestTransactionsMessage& requesttransactions() const;
  PROTOBUF_NODISCARD ::protowire::RequestTransactionsMessage* release_requesttransactions();
  ::protowire::RequestTransactionsMessage* mutable_requesttransactions();
  void set_allocated_requesttransactions(::protowire::RequestTransactionsMessage* requesttransactions);
  private:
  const ::protowire::RequestTransactionsMessage& _internal_requesttransactions() const;
  ::protowire::RequestTransactionsMessage* _internal_mutable_requesttransactions();
  public:
  void unsafe_arena_set_allocated_requesttransactions(
      ::protowire::RequestTransactionsMessage* requesttransactions);
  ::protowire::RequestTransactionsMessage* unsafe_arena_release_requesttransactions();

  // .protowire.BlockMessage ibdBlock = 13;
  bool has_ibdblock() const;
  private:
  bool _internal_has_ibdblock() const;
  public:
  void clear_ibdblock();
  const ::protowire::BlockMessage& ibdblock() const;
  PROTOBUF_NODISCARD ::protowire::BlockMessage* release_ibdblock();
  ::protowire::BlockMessage* mutable_ibdblock();
  void set_allocated_ibdblock(::protowire::BlockMessage* ibdblock);
  private:
  const ::protowire::BlockMessage& _internal_ibdblock() const;
  ::protowire::BlockMessage* _internal_mutable_ibdblock();
  public:
  void unsafe_arena_set_allocated_ibdblock(
      ::protowire::BlockMessage* ibdblock);
  ::protowire::BlockMessage* unsafe_arena_release_ibdblock();

  // .protowire.InvRelayBlockMessage invRelayBlock = 14;
  bool has_invrelayblock() const;
  private:
  bool _internal_has_invrelayblock() const;
  public:
  void clear_invrelayblock();
  const ::protowire::InvRelayBlockMessage& invrelayblock() const;
  PROTOBUF_NODISCARD ::protowire::InvRelayBlockMessage* release_invrelayblock();
  ::protowire::InvRelayBlockMessage* mutable_invrelayblock();
  void set_allocated_invrelayblock(::protowire::InvRelayBlockMessage* invrelayblock);
  private:
  const ::protowire::InvRelayBlockMessage& _internal_invrelayblock() const;
  ::protowire::InvRelayBlockMessage* _internal_mutable_invrelayblock();
  public:
  void unsafe_arena_set_allocated_invrelayblock(
      ::protowire::InvRelayBlockMessage* invrelayblock);
  ::protowire::InvRelayBlockMessage* unsafe_arena_release_invrelayblock();

  // .protowire.InvTransactionsMessage invTransactions = 15;
  bool has_invtransactions() const;
  private:
  bool _internal_has_invtransactions() const;
  public:
  void clear_invtransactions();
  const ::protowire::InvTransactionsMessage& invtransactions() const;
  PROTOBUF_NODISCARD ::protowire::InvTransactionsMessage* release_invtransactions();
  ::protowire::InvTransactionsMessage* mutable_invtransactions();
  void set_allocated_invtransactions(::protowire::InvTransactionsMessage* invtransactions);
  private:
  const ::protowire::InvTransactionsMessage& _internal_invtransactions() const;
  ::protowire::InvTransactionsMessage* _internal_mutable_invtransactions();
  public:
  void unsafe_arena_set_allocated_invtransactions(
      ::protowire::InvTransactionsMessage* invtransactions);
  ::protowire::InvTransactionsMessage* unsafe_arena_release_invtransactions();

  // .protowire.PingMessage ping = 16;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::protowire::PingMessage& ping() const;
  PROTOBUF_NODISCARD ::protowire::PingMessage* release_ping();
  ::protowire::PingMessage* mutable_ping();
  void set_allocated_ping(::protowire::PingMessage* ping);
  private:
  const ::protowire::PingMessage& _internal_ping() const;
  ::protowire::PingMessage* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::protowire::PingMessage* ping);
  ::protowire::PingMessage* unsafe_arena_release_ping();

  // .protowire.PongMessage pong = 17;
  bool has_pong() const;
  private:
  bool _internal_has_pong() const;
  public:
  void clear_pong();
  const ::protowire::PongMessage& pong() const;
  PROTOBUF_NODISCARD ::protowire::PongMessage* release_pong();
  ::protowire::PongMessage* mutable_pong();
  void set_allocated_pong(::protowire::PongMessage* pong);
  private:
  const ::protowire::PongMessage& _internal_pong() const;
  ::protowire::PongMessage* _internal_mutable_pong();
  public:
  void unsafe_arena_set_allocated_pong(
      ::protowire::PongMessage* pong);
  ::protowire::PongMessage* unsafe_arena_release_pong();

  // .protowire.VerackMessage verack = 19;
  bool has_verack() const;
  private:
  bool _internal_has_verack() const;
  public:
  void clear_verack();
  const ::protowire::VerackMessage& verack() const;
  PROTOBUF_NODISCARD ::protowire::VerackMessage* release_verack();
  ::protowire::VerackMessage* mutable_verack();
  void set_allocated_verack(::protowire::VerackMessage* verack);
  private:
  const ::protowire::VerackMessage& _internal_verack() const;
  ::protowire::VerackMessage* _internal_mutable_verack();
  public:
  void unsafe_arena_set_allocated_verack(
      ::protowire::VerackMessage* verack);
  ::protowire::VerackMessage* unsafe_arena_release_verack();

  // .protowire.VersionMessage version = 20;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::protowire::VersionMessage& version() const;
  PROTOBUF_NODISCARD ::protowire::VersionMessage* release_version();
  ::protowire::VersionMessage* mutable_version();
  void set_allocated_version(::protowire::VersionMessage* version);
  private:
  const ::protowire::VersionMessage& _internal_version() const;
  ::protowire::VersionMessage* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::protowire::VersionMessage* version);
  ::protowire::VersionMessage* unsafe_arena_release_version();

  // .protowire.TransactionNotFoundMessage transactionNotFound = 21;
  bool has_transactionnotfound() const;
  private:
  bool _internal_has_transactionnotfound() const;
  public:
  void clear_transactionnotfound();
  const ::protowire::TransactionNotFoundMessage& transactionnotfound() const;
  PROTOBUF_NODISCARD ::protowire::TransactionNotFoundMessage* release_transactionnotfound();
  ::protowire::TransactionNotFoundMessage* mutable_transactionnotfound();
  void set_allocated_transactionnotfound(::protowire::TransactionNotFoundMessage* transactionnotfound);
  private:
  const ::protowire::TransactionNotFoundMessage& _internal_transactionnotfound() const;
  ::protowire::TransactionNotFoundMessage* _internal_mutable_transactionnotfound();
  public:
  void unsafe_arena_set_allocated_transactionnotfound(
      ::protowire::TransactionNotFoundMessage* transactionnotfound);
  ::protowire::TransactionNotFoundMessage* unsafe_arena_release_transactionnotfound();

  // .protowire.RejectMessage reject = 22;
  bool has_reject() const;
  private:
  bool _internal_has_reject() const;
  public:
  void clear_reject();
  const ::protowire::RejectMessage& reject() const;
  PROTOBUF_NODISCARD ::protowire::RejectMessage* release_reject();
  ::protowire::RejectMessage* mutable_reject();
  void set_allocated_reject(::protowire::RejectMessage* reject);
  private:
  const ::protowire::RejectMessage& _internal_reject() const;
  ::protowire::RejectMessage* _internal_mutable_reject();
  public:
  void unsafe_arena_set_allocated_reject(
      ::protowire::RejectMessage* reject);
  ::protowire::RejectMessage* unsafe_arena_release_reject();

  // .protowire.PruningPointUtxoSetChunkMessage pruningPointUtxoSetChunk = 25;
  bool has_pruningpointutxosetchunk() const;
  private:
  bool _internal_has_pruningpointutxosetchunk() const;
  public:
  void clear_pruningpointutxosetchunk();
  const ::protowire::PruningPointUtxoSetChunkMessage& pruningpointutxosetchunk() const;
  PROTOBUF_NODISCARD ::protowire::PruningPointUtxoSetChunkMessage* release_pruningpointutxosetchunk();
  ::protowire::PruningPointUtxoSetChunkMessage* mutable_pruningpointutxosetchunk();
  void set_allocated_pruningpointutxosetchunk(::protowire::PruningPointUtxoSetChunkMessage* pruningpointutxosetchunk);
  private:
  const ::protowire::PruningPointUtxoSetChunkMessage& _internal_pruningpointutxosetchunk() const;
  ::protowire::PruningPointUtxoSetChunkMessage* _internal_mutable_pruningpointutxosetchunk();
  public:
  void unsafe_arena_set_allocated_pruningpointutxosetchunk(
      ::protowire::PruningPointUtxoSetChunkMessage* pruningpointutxosetchunk);
  ::protowire::PruningPointUtxoSetChunkMessage* unsafe_arena_release_pruningpointutxosetchunk();

  // .protowire.RequestIBDBlocksMessage requestIBDBlocks = 26;
  bool has_requestibdblocks() const;
  private:
  bool _internal_has_requestibdblocks() const;
  public:
  void clear_requestibdblocks();
  const ::protowire::RequestIBDBlocksMessage& requestibdblocks() const;
  PROTOBUF_NODISCARD ::protowire::RequestIBDBlocksMessage* release_requestibdblocks();
  ::protowire::RequestIBDBlocksMessage* mutable_requestibdblocks();
  void set_allocated_requestibdblocks(::protowire::RequestIBDBlocksMessage* requestibdblocks);
  private:
  const ::protowire::RequestIBDBlocksMessage& _internal_requestibdblocks() const;
  ::protowire::RequestIBDBlocksMessage* _internal_mutable_requestibdblocks();
  public:
  void unsafe_arena_set_allocated_requestibdblocks(
      ::protowire::RequestIBDBlocksMessage* requestibdblocks);
  ::protowire::RequestIBDBlocksMessage* unsafe_arena_release_requestibdblocks();

  // .protowire.UnexpectedPruningPointMessage unexpectedPruningPoint = 27;
  bool has_unexpectedpruningpoint() const;
  private:
  bool _internal_has_unexpectedpruningpoint() const;
  public:
  void clear_unexpectedpruningpoint();
  const ::protowire::UnexpectedPruningPointMessage& unexpectedpruningpoint() const;
  PROTOBUF_NODISCARD ::protowire::UnexpectedPruningPointMessage* release_unexpectedpruningpoint();
  ::protowire::UnexpectedPruningPointMessage* mutable_unexpectedpruningpoint();
  void set_allocated_unexpectedpruningpoint(::protowire::UnexpectedPruningPointMessage* unexpectedpruningpoint);
  private:
  const ::protowire::UnexpectedPruningPointMessage& _internal_unexpectedpruningpoint() const;
  ::protowire::UnexpectedPruningPointMessage* _internal_mutable_unexpectedpruningpoint();
  public:
  void unsafe_arena_set_allocated_unexpectedpruningpoint(
      ::protowire::UnexpectedPruningPointMessage* unexpectedpruningpoint);
  ::protowire::UnexpectedPruningPointMessage* unsafe_arena_release_unexpectedpruningpoint();

  // .protowire.IbdBlockLocatorMessage ibdBlockLocator = 30;
  bool has_ibdblocklocator() const;
  private:
  bool _internal_has_ibdblocklocator() const;
  public:
  void clear_ibdblocklocator();
  const ::protowire::IbdBlockLocatorMessage& ibdblocklocator() const;
  PROTOBUF_NODISCARD ::protowire::IbdBlockLocatorMessage* release_ibdblocklocator();
  ::protowire::IbdBlockLocatorMessage* mutable_ibdblocklocator();
  void set_allocated_ibdblocklocator(::protowire::IbdBlockLocatorMessage* ibdblocklocator);
  private:
  const ::protowire::IbdBlockLocatorMessage& _internal_ibdblocklocator() const;
  ::protowire::IbdBlockLocatorMessage* _internal_mutable_ibdblocklocator();
  public:
  void unsafe_arena_set_allocated_ibdblocklocator(
      ::protowire::IbdBlockLocatorMessage* ibdblocklocator);
  ::protowire::IbdBlockLocatorMessage* unsafe_arena_release_ibdblocklocator();

  // .protowire.IbdBlockLocatorHighestHashMessage ibdBlockLocatorHighestHash = 31;
  bool has_ibdblocklocatorhighesthash() const;
  private:
  bool _internal_has_ibdblocklocatorhighesthash() const;
  public:
  void clear_ibdblocklocatorhighesthash();
  const ::protowire::IbdBlockLocatorHighestHashMessage& ibdblocklocatorhighesthash() const;
  PROTOBUF_NODISCARD ::protowire::IbdBlockLocatorHighestHashMessage* release_ibdblocklocatorhighesthash();
  ::protowire::IbdBlockLocatorHighestHashMessage* mutable_ibdblocklocatorhighesthash();
  void set_allocated_ibdblocklocatorhighesthash(::protowire::IbdBlockLocatorHighestHashMessage* ibdblocklocatorhighesthash);
  private:
  const ::protowire::IbdBlockLocatorHighestHashMessage& _internal_ibdblocklocatorhighesthash() const;
  ::protowire::IbdBlockLocatorHighestHashMessage* _internal_mutable_ibdblocklocatorhighesthash();
  public:
  void unsafe_arena_set_allocated_ibdblocklocatorhighesthash(
      ::protowire::IbdBlockLocatorHighestHashMessage* ibdblocklocatorhighesthash);
  ::protowire::IbdBlockLocatorHighestHashMessage* unsafe_arena_release_ibdblocklocatorhighesthash();

  // .protowire.RequestNextPruningPointUtxoSetChunkMessage requestNextPruningPointUtxoSetChunk = 33;
  bool has_requestnextpruningpointutxosetchunk() const;
  private:
  bool _internal_has_requestnextpruningpointutxosetchunk() const;
  public:
  void clear_requestnextpruningpointutxosetchunk();
  const ::protowire::RequestNextPruningPointUtxoSetChunkMessage& requestnextpruningpointutxosetchunk() const;
  PROTOBUF_NODISCARD ::protowire::RequestNextPruningPointUtxoSetChunkMessage* release_requestnextpruningpointutxosetchunk();
  ::protowire::RequestNextPruningPointUtxoSetChunkMessage* mutable_requestnextpruningpointutxosetchunk();
  void set_allocated_requestnextpruningpointutxosetchunk(::protowire::RequestNextPruningPointUtxoSetChunkMessage* requestnextpruningpointutxosetchunk);
  private:
  const ::protowire::RequestNextPruningPointUtxoSetChunkMessage& _internal_requestnextpruningpointutxosetchunk() const;
  ::protowire::RequestNextPruningPointUtxoSetChunkMessage* _internal_mutable_requestnextpruningpointutxosetchunk();
  public:
  void unsafe_arena_set_allocated_requestnextpruningpointutxosetchunk(
      ::protowire::RequestNextPruningPointUtxoSetChunkMessage* requestnextpruningpointutxosetchunk);
  ::protowire::RequestNextPruningPointUtxoSetChunkMessage* unsafe_arena_release_requestnextpruningpointutxosetchunk();

  // .protowire.DonePruningPointUtxoSetChunksMessage donePruningPointUtxoSetChunks = 34;
  bool has_donepruningpointutxosetchunks() const;
  private:
  bool _internal_has_donepruningpointutxosetchunks() const;
  public:
  void clear_donepruningpointutxosetchunks();
  const ::protowire::DonePruningPointUtxoSetChunksMessage& donepruningpointutxosetchunks() const;
  PROTOBUF_NODISCARD ::protowire::DonePruningPointUtxoSetChunksMessage* release_donepruningpointutxosetchunks();
  ::protowire::DonePruningPointUtxoSetChunksMessage* mutable_donepruningpointutxosetchunks();
  void set_allocated_donepruningpointutxosetchunks(::protowire::DonePruningPointUtxoSetChunksMessage* donepruningpointutxosetchunks);
  private:
  const ::protowire::DonePruningPointUtxoSetChunksMessage& _internal_donepruningpointutxosetchunks() const;
  ::protowire::DonePruningPointUtxoSetChunksMessage* _internal_mutable_donepruningpointutxosetchunks();
  public:
  void unsafe_arena_set_allocated_donepruningpointutxosetchunks(
      ::protowire::DonePruningPointUtxoSetChunksMessage* donepruningpointutxosetchunks);
  ::protowire::DonePruningPointUtxoSetChunksMessage* unsafe_arena_release_donepruningpointutxosetchunks();

  // .protowire.IbdBlockLocatorHighestHashNotFoundMessage ibdBlockLocatorHighestHashNotFound = 35;
  bool has_ibdblocklocatorhighesthashnotfound() const;
  private:
  bool _internal_has_ibdblocklocatorhighesthashnotfound() const;
  public:
  void clear_ibdblocklocatorhighesthashnotfound();
  const ::protowire::IbdBlockLocatorHighestHashNotFoundMessage& ibdblocklocatorhighesthashnotfound() const;
  PROTOBUF_NODISCARD ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* release_ibdblocklocatorhighesthashnotfound();
  ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* mutable_ibdblocklocatorhighesthashnotfound();
  void set_allocated_ibdblocklocatorhighesthashnotfound(::protowire::IbdBlockLocatorHighestHashNotFoundMessage* ibdblocklocatorhighesthashnotfound);
  private:
  const ::protowire::IbdBlockLocatorHighestHashNotFoundMessage& _internal_ibdblocklocatorhighesthashnotfound() const;
  ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* _internal_mutable_ibdblocklocatorhighesthashnotfound();
  public:
  void unsafe_arena_set_allocated_ibdblocklocatorhighesthashnotfound(
      ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* ibdblocklocatorhighesthashnotfound);
  ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* unsafe_arena_release_ibdblocklocatorhighesthashnotfound();

  // .protowire.BlockWithTrustedDataMessage blockWithTrustedData = 36;
  bool has_blockwithtrusteddata() const;
  private:
  bool _internal_has_blockwithtrusteddata() const;
  public:
  void clear_blockwithtrusteddata();
  const ::protowire::BlockWithTrustedDataMessage& blockwithtrusteddata() const;
  PROTOBUF_NODISCARD ::protowire::BlockWithTrustedDataMessage* release_blockwithtrusteddata();
  ::protowire::BlockWithTrustedDataMessage* mutable_blockwithtrusteddata();
  void set_allocated_blockwithtrusteddata(::protowire::BlockWithTrustedDataMessage* blockwithtrusteddata);
  private:
  const ::protowire::BlockWithTrustedDataMessage& _internal_blockwithtrusteddata() const;
  ::protowire::BlockWithTrustedDataMessage* _internal_mutable_blockwithtrusteddata();
  public:
  void unsafe_arena_set_allocated_blockwithtrusteddata(
      ::protowire::BlockWithTrustedDataMessage* blockwithtrusteddata);
  ::protowire::BlockWithTrustedDataMessage* unsafe_arena_release_blockwithtrusteddata();

  // .protowire.DoneBlocksWithTrustedDataMessage doneBlocksWithTrustedData = 37;
  bool has_doneblockswithtrusteddata() const;
  private:
  bool _internal_has_doneblockswithtrusteddata() const;
  public:
  void clear_doneblockswithtrusteddata();
  const ::protowire::DoneBlocksWithTrustedDataMessage& doneblockswithtrusteddata() const;
  PROTOBUF_NODISCARD ::protowire::DoneBlocksWithTrustedDataMessage* release_doneblockswithtrusteddata();
  ::protowire::DoneBlocksWithTrustedDataMessage* mutable_doneblockswithtrusteddata();
  void set_allocated_doneblockswithtrusteddata(::protowire::DoneBlocksWithTrustedDataMessage* doneblockswithtrusteddata);
  private:
  const ::protowire::DoneBlocksWithTrustedDataMessage& _internal_doneblockswithtrusteddata() const;
  ::protowire::DoneBlocksWithTrustedDataMessage* _internal_mutable_doneblockswithtrusteddata();
  public:
  void unsafe_arena_set_allocated_doneblockswithtrusteddata(
      ::protowire::DoneBlocksWithTrustedDataMessage* doneblockswithtrusteddata);
  ::protowire::DoneBlocksWithTrustedDataMessage* unsafe_arena_release_doneblockswithtrusteddata();

  // .protowire.RequestPruningPointAndItsAnticoneMessage requestPruningPointAndItsAnticone = 40;
  bool has_requestpruningpointanditsanticone() const;
  private:
  bool _internal_has_requestpruningpointanditsanticone() const;
  public:
  void clear_requestpruningpointanditsanticone();
  const ::protowire::RequestPruningPointAndItsAnticoneMessage& requestpruningpointanditsanticone() const;
  PROTOBUF_NODISCARD ::protowire::RequestPruningPointAndItsAnticoneMessage* release_requestpruningpointanditsanticone();
  ::protowire::RequestPruningPointAndItsAnticoneMessage* mutable_requestpruningpointanditsanticone();
  void set_allocated_requestpruningpointanditsanticone(::protowire::RequestPruningPointAndItsAnticoneMessage* requestpruningpointanditsanticone);
  private:
  const ::protowire::RequestPruningPointAndItsAnticoneMessage& _internal_requestpruningpointanditsanticone() const;
  ::protowire::RequestPruningPointAndItsAnticoneMessage* _internal_mutable_requestpruningpointanditsanticone();
  public:
  void unsafe_arena_set_allocated_requestpruningpointanditsanticone(
      ::protowire::RequestPruningPointAndItsAnticoneMessage* requestpruningpointanditsanticone);
  ::protowire::RequestPruningPointAndItsAnticoneMessage* unsafe_arena_release_requestpruningpointanditsanticone();

  // .protowire.BlockHeadersMessage blockHeaders = 41;
  bool has_blockheaders() const;
  private:
  bool _internal_has_blockheaders() const;
  public:
  void clear_blockheaders();
  const ::protowire::BlockHeadersMessage& blockheaders() const;
  PROTOBUF_NODISCARD ::protowire::BlockHeadersMessage* release_blockheaders();
  ::protowire::BlockHeadersMessage* mutable_blockheaders();
  void set_allocated_blockheaders(::protowire::BlockHeadersMessage* blockheaders);
  private:
  const ::protowire::BlockHeadersMessage& _internal_blockheaders() const;
  ::protowire::BlockHeadersMessage* _internal_mutable_blockheaders();
  public:
  void unsafe_arena_set_allocated_blockheaders(
      ::protowire::BlockHeadersMessage* blockheaders);
  ::protowire::BlockHeadersMessage* unsafe_arena_release_blockheaders();

  // .protowire.RequestNextHeadersMessage requestNextHeaders = 42;
  bool has_requestnextheaders() const;
  private:
  bool _internal_has_requestnextheaders() const;
  public:
  void clear_requestnextheaders();
  const ::protowire::RequestNextHeadersMessage& requestnextheaders() const;
  PROTOBUF_NODISCARD ::protowire::RequestNextHeadersMessage* release_requestnextheaders();
  ::protowire::RequestNextHeadersMessage* mutable_requestnextheaders();
  void set_allocated_requestnextheaders(::protowire::RequestNextHeadersMessage* requestnextheaders);
  private:
  const ::protowire::RequestNextHeadersMessage& _internal_requestnextheaders() const;
  ::protowire::RequestNextHeadersMessage* _internal_mutable_requestnextheaders();
  public:
  void unsafe_arena_set_allocated_requestnextheaders(
      ::protowire::RequestNextHeadersMessage* requestnextheaders);
  ::protowire::RequestNextHeadersMessage* unsafe_arena_release_requestnextheaders();

  // .protowire.DoneHeadersMessage DoneHeaders = 43;
  bool has_doneheaders() const;
  private:
  bool _internal_has_doneheaders() const;
  public:
  void clear_doneheaders();
  const ::protowire::DoneHeadersMessage& doneheaders() const;
  PROTOBUF_NODISCARD ::protowire::DoneHeadersMessage* release_doneheaders();
  ::protowire::DoneHeadersMessage* mutable_doneheaders();
  void set_allocated_doneheaders(::protowire::DoneHeadersMessage* doneheaders);
  private:
  const ::protowire::DoneHeadersMessage& _internal_doneheaders() const;
  ::protowire::DoneHeadersMessage* _internal_mutable_doneheaders();
  public:
  void unsafe_arena_set_allocated_doneheaders(
      ::protowire::DoneHeadersMessage* doneheaders);
  ::protowire::DoneHeadersMessage* unsafe_arena_release_doneheaders();

  // .protowire.RequestPruningPointUTXOSetMessage requestPruningPointUTXOSet = 44;
  bool has_requestpruningpointutxoset() const;
  private:
  bool _internal_has_requestpruningpointutxoset() const;
  public:
  void clear_requestpruningpointutxoset();
  const ::protowire::RequestPruningPointUTXOSetMessage& requestpruningpointutxoset() const;
  PROTOBUF_NODISCARD ::protowire::RequestPruningPointUTXOSetMessage* release_requestpruningpointutxoset();
  ::protowire::RequestPruningPointUTXOSetMessage* mutable_requestpruningpointutxoset();
  void set_allocated_requestpruningpointutxoset(::protowire::RequestPruningPointUTXOSetMessage* requestpruningpointutxoset);
  private:
  const ::protowire::RequestPruningPointUTXOSetMessage& _internal_requestpruningpointutxoset() const;
  ::protowire::RequestPruningPointUTXOSetMessage* _internal_mutable_requestpruningpointutxoset();
  public:
  void unsafe_arena_set_allocated_requestpruningpointutxoset(
      ::protowire::RequestPruningPointUTXOSetMessage* requestpruningpointutxoset);
  ::protowire::RequestPruningPointUTXOSetMessage* unsafe_arena_release_requestpruningpointutxoset();

  // .protowire.RequestHeadersMessage requestHeaders = 45;
  bool has_requestheaders() const;
  private:
  bool _internal_has_requestheaders() const;
  public:
  void clear_requestheaders();
  const ::protowire::RequestHeadersMessage& requestheaders() const;
  PROTOBUF_NODISCARD ::protowire::RequestHeadersMessage* release_requestheaders();
  ::protowire::RequestHeadersMessage* mutable_requestheaders();
  void set_allocated_requestheaders(::protowire::RequestHeadersMessage* requestheaders);
  private:
  const ::protowire::RequestHeadersMessage& _internal_requestheaders() const;
  ::protowire::RequestHeadersMessage* _internal_mutable_requestheaders();
  public:
  void unsafe_arena_set_allocated_requestheaders(
      ::protowire::RequestHeadersMessage* requestheaders);
  ::protowire::RequestHeadersMessage* unsafe_arena_release_requestheaders();

  // .protowire.RequestBlockLocatorMessage requestBlockLocator = 46;
  bool has_requestblocklocator() const;
  private:
  bool _internal_has_requestblocklocator() const;
  public:
  void clear_requestblocklocator();
  const ::protowire::RequestBlockLocatorMessage& requestblocklocator() const;
  PROTOBUF_NODISCARD ::protowire::RequestBlockLocatorMessage* release_requestblocklocator();
  ::protowire::RequestBlockLocatorMessage* mutable_requestblocklocator();
  void set_allocated_requestblocklocator(::protowire::RequestBlockLocatorMessage* requestblocklocator);
  private:
  const ::protowire::RequestBlockLocatorMessage& _internal_requestblocklocator() const;
  ::protowire::RequestBlockLocatorMessage* _internal_mutable_requestblocklocator();
  public:
  void unsafe_arena_set_allocated_requestblocklocator(
      ::protowire::RequestBlockLocatorMessage* requestblocklocator);
  ::protowire::RequestBlockLocatorMessage* unsafe_arena_release_requestblocklocator();

  // .protowire.PruningPointsMessage pruningPoints = 47;
  bool has_pruningpoints() const;
  private:
  bool _internal_has_pruningpoints() const;
  public:
  void clear_pruningpoints();
  const ::protowire::PruningPointsMessage& pruningpoints() const;
  PROTOBUF_NODISCARD ::protowire::PruningPointsMessage* release_pruningpoints();
  ::protowire::PruningPointsMessage* mutable_pruningpoints();
  void set_allocated_pruningpoints(::protowire::PruningPointsMessage* pruningpoints);
  private:
  const ::protowire::PruningPointsMessage& _internal_pruningpoints() const;
  ::protowire::PruningPointsMessage* _internal_mutable_pruningpoints();
  public:
  void unsafe_arena_set_allocated_pruningpoints(
      ::protowire::PruningPointsMessage* pruningpoints);
  ::protowire::PruningPointsMessage* unsafe_arena_release_pruningpoints();

  // .protowire.RequestPruningPointProofMessage requestPruningPointProof = 48;
  bool has_requestpruningpointproof() const;
  private:
  bool _internal_has_requestpruningpointproof() const;
  public:
  void clear_requestpruningpointproof();
  const ::protowire::RequestPruningPointProofMessage& requestpruningpointproof() const;
  PROTOBUF_NODISCARD ::protowire::RequestPruningPointProofMessage* release_requestpruningpointproof();
  ::protowire::RequestPruningPointProofMessage* mutable_requestpruningpointproof();
  void set_allocated_requestpruningpointproof(::protowire::RequestPruningPointProofMessage* requestpruningpointproof);
  private:
  const ::protowire::RequestPruningPointProofMessage& _internal_requestpruningpointproof() const;
  ::protowire::RequestPruningPointProofMessage* _internal_mutable_requestpruningpointproof();
  public:
  void unsafe_arena_set_allocated_requestpruningpointproof(
      ::protowire::RequestPruningPointProofMessage* requestpruningpointproof);
  ::protowire::RequestPruningPointProofMessage* unsafe_arena_release_requestpruningpointproof();

  // .protowire.PruningPointProofMessage pruningPointProof = 49;
  bool has_pruningpointproof() const;
  private:
  bool _internal_has_pruningpointproof() const;
  public:
  void clear_pruningpointproof();
  const ::protowire::PruningPointProofMessage& pruningpointproof() const;
  PROTOBUF_NODISCARD ::protowire::PruningPointProofMessage* release_pruningpointproof();
  ::protowire::PruningPointProofMessage* mutable_pruningpointproof();
  void set_allocated_pruningpointproof(::protowire::PruningPointProofMessage* pruningpointproof);
  private:
  const ::protowire::PruningPointProofMessage& _internal_pruningpointproof() const;
  ::protowire::PruningPointProofMessage* _internal_mutable_pruningpointproof();
  public:
  void unsafe_arena_set_allocated_pruningpointproof(
      ::protowire::PruningPointProofMessage* pruningpointproof);
  ::protowire::PruningPointProofMessage* unsafe_arena_release_pruningpointproof();

  // .protowire.ReadyMessage ready = 50;
  bool has_ready() const;
  private:
  bool _internal_has_ready() const;
  public:
  void clear_ready();
  const ::protowire::ReadyMessage& ready() const;
  PROTOBUF_NODISCARD ::protowire::ReadyMessage* release_ready();
  ::protowire::ReadyMessage* mutable_ready();
  void set_allocated_ready(::protowire::ReadyMessage* ready);
  private:
  const ::protowire::ReadyMessage& _internal_ready() const;
  ::protowire::ReadyMessage* _internal_mutable_ready();
  public:
  void unsafe_arena_set_allocated_ready(
      ::protowire::ReadyMessage* ready);
  ::protowire::ReadyMessage* unsafe_arena_release_ready();

  // .protowire.BlockWithTrustedDataV4Message blockWithTrustedDataV4 = 51;
  bool has_blockwithtrusteddatav4() const;
  private:
  bool _internal_has_blockwithtrusteddatav4() const;
  public:
  void clear_blockwithtrusteddatav4();
  const ::protowire::BlockWithTrustedDataV4Message& blockwithtrusteddatav4() const;
  PROTOBUF_NODISCARD ::protowire::BlockWithTrustedDataV4Message* release_blockwithtrusteddatav4();
  ::protowire::BlockWithTrustedDataV4Message* mutable_blockwithtrusteddatav4();
  void set_allocated_blockwithtrusteddatav4(::protowire::BlockWithTrustedDataV4Message* blockwithtrusteddatav4);
  private:
  const ::protowire::BlockWithTrustedDataV4Message& _internal_blockwithtrusteddatav4() const;
  ::protowire::BlockWithTrustedDataV4Message* _internal_mutable_blockwithtrusteddatav4();
  public:
  void unsafe_arena_set_allocated_blockwithtrusteddatav4(
      ::protowire::BlockWithTrustedDataV4Message* blockwithtrusteddatav4);
  ::protowire::BlockWithTrustedDataV4Message* unsafe_arena_release_blockwithtrusteddatav4();

  // .protowire.TrustedDataMessage trustedData = 52;
  bool has_trusteddata() const;
  private:
  bool _internal_has_trusteddata() const;
  public:
  void clear_trusteddata();
  const ::protowire::TrustedDataMessage& trusteddata() const;
  PROTOBUF_NODISCARD ::protowire::TrustedDataMessage* release_trusteddata();
  ::protowire::TrustedDataMessage* mutable_trusteddata();
  void set_allocated_trusteddata(::protowire::TrustedDataMessage* trusteddata);
  private:
  const ::protowire::TrustedDataMessage& _internal_trusteddata() const;
  ::protowire::TrustedDataMessage* _internal_mutable_trusteddata();
  public:
  void unsafe_arena_set_allocated_trusteddata(
      ::protowire::TrustedDataMessage* trusteddata);
  ::protowire::TrustedDataMessage* unsafe_arena_release_trusteddata();

  // .protowire.RequestIBDChainBlockLocatorMessage requestIBDChainBlockLocator = 53;
  bool has_requestibdchainblocklocator() const;
  private:
  bool _internal_has_requestibdchainblocklocator() const;
  public:
  void clear_requestibdchainblocklocator();
  const ::protowire::RequestIBDChainBlockLocatorMessage& requestibdchainblocklocator() const;
  PROTOBUF_NODISCARD ::protowire::RequestIBDChainBlockLocatorMessage* release_requestibdchainblocklocator();
  ::protowire::RequestIBDChainBlockLocatorMessage* mutable_requestibdchainblocklocator();
  void set_allocated_requestibdchainblocklocator(::protowire::RequestIBDChainBlockLocatorMessage* requestibdchainblocklocator);
  private:
  const ::protowire::RequestIBDChainBlockLocatorMessage& _internal_requestibdchainblocklocator() const;
  ::protowire::RequestIBDChainBlockLocatorMessage* _internal_mutable_requestibdchainblocklocator();
  public:
  void unsafe_arena_set_allocated_requestibdchainblocklocator(
      ::protowire::RequestIBDChainBlockLocatorMessage* requestibdchainblocklocator);
  ::protowire::RequestIBDChainBlockLocatorMessage* unsafe_arena_release_requestibdchainblocklocator();

  // .protowire.IbdChainBlockLocatorMessage ibdChainBlockLocator = 54;
  bool has_ibdchainblocklocator() const;
  private:
  bool _internal_has_ibdchainblocklocator() const;
  public:
  void clear_ibdchainblocklocator();
  const ::protowire::IbdChainBlockLocatorMessage& ibdchainblocklocator() const;
  PROTOBUF_NODISCARD ::protowire::IbdChainBlockLocatorMessage* release_ibdchainblocklocator();
  ::protowire::IbdChainBlockLocatorMessage* mutable_ibdchainblocklocator();
  void set_allocated_ibdchainblocklocator(::protowire::IbdChainBlockLocatorMessage* ibdchainblocklocator);
  private:
  const ::protowire::IbdChainBlockLocatorMessage& _internal_ibdchainblocklocator() const;
  ::protowire::IbdChainBlockLocatorMessage* _internal_mutable_ibdchainblocklocator();
  public:
  void unsafe_arena_set_allocated_ibdchainblocklocator(
      ::protowire::IbdChainBlockLocatorMessage* ibdchainblocklocator);
  ::protowire::IbdChainBlockLocatorMessage* unsafe_arena_release_ibdchainblocklocator();

  // .protowire.RequestAnticoneMessage requestAnticone = 55;
  bool has_requestanticone() const;
  private:
  bool _internal_has_requestanticone() const;
  public:
  void clear_requestanticone();
  const ::protowire::RequestAnticoneMessage& requestanticone() const;
  PROTOBUF_NODISCARD ::protowire::RequestAnticoneMessage* release_requestanticone();
  ::protowire::RequestAnticoneMessage* mutable_requestanticone();
  void set_allocated_requestanticone(::protowire::RequestAnticoneMessage* requestanticone);
  private:
  const ::protowire::RequestAnticoneMessage& _internal_requestanticone() const;
  ::protowire::RequestAnticoneMessage* _internal_mutable_requestanticone();
  public:
  void unsafe_arena_set_allocated_requestanticone(
      ::protowire::RequestAnticoneMessage* requestanticone);
  ::protowire::RequestAnticoneMessage* unsafe_arena_release_requestanticone();

  // .protowire.RequestNextPruningPointAndItsAnticoneBlocksMessage requestNextPruningPointAndItsAnticoneBlocks = 56;
  bool has_requestnextpruningpointanditsanticoneblocks() const;
  private:
  bool _internal_has_requestnextpruningpointanditsanticoneblocks() const;
  public:
  void clear_requestnextpruningpointanditsanticoneblocks();
  const ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage& requestnextpruningpointanditsanticoneblocks() const;
  PROTOBUF_NODISCARD ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* release_requestnextpruningpointanditsanticoneblocks();
  ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* mutable_requestnextpruningpointanditsanticoneblocks();
  void set_allocated_requestnextpruningpointanditsanticoneblocks(::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* requestnextpruningpointanditsanticoneblocks);
  private:
  const ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage& _internal_requestnextpruningpointanditsanticoneblocks() const;
  ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* _internal_mutable_requestnextpruningpointanditsanticoneblocks();
  public:
  void unsafe_arena_set_allocated_requestnextpruningpointanditsanticoneblocks(
      ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* requestnextpruningpointanditsanticoneblocks);
  ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* unsafe_arena_release_requestnextpruningpointanditsanticoneblocks();

  // .protowire.GetCurrentNetworkRequestMessage getCurrentNetworkRequest = 1001;
  bool has_getcurrentnetworkrequest() const;
  private:
  bool _internal_has_getcurrentnetworkrequest() const;
  public:
  void clear_getcurrentnetworkrequest();
  const ::protowire::GetCurrentNetworkRequestMessage& getcurrentnetworkrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetCurrentNetworkRequestMessage* release_getcurrentnetworkrequest();
  ::protowire::GetCurrentNetworkRequestMessage* mutable_getcurrentnetworkrequest();
  void set_allocated_getcurrentnetworkrequest(::protowire::GetCurrentNetworkRequestMessage* getcurrentnetworkrequest);
  private:
  const ::protowire::GetCurrentNetworkRequestMessage& _internal_getcurrentnetworkrequest() const;
  ::protowire::GetCurrentNetworkRequestMessage* _internal_mutable_getcurrentnetworkrequest();
  public:
  void unsafe_arena_set_allocated_getcurrentnetworkrequest(
      ::protowire::GetCurrentNetworkRequestMessage* getcurrentnetworkrequest);
  ::protowire::GetCurrentNetworkRequestMessage* unsafe_arena_release_getcurrentnetworkrequest();

  // .protowire.GetCurrentNetworkResponseMessage getCurrentNetworkResponse = 1002;
  bool has_getcurrentnetworkresponse() const;
  private:
  bool _internal_has_getcurrentnetworkresponse() const;
  public:
  void clear_getcurrentnetworkresponse();
  const ::protowire::GetCurrentNetworkResponseMessage& getcurrentnetworkresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetCurrentNetworkResponseMessage* release_getcurrentnetworkresponse();
  ::protowire::GetCurrentNetworkResponseMessage* mutable_getcurrentnetworkresponse();
  void set_allocated_getcurrentnetworkresponse(::protowire::GetCurrentNetworkResponseMessage* getcurrentnetworkresponse);
  private:
  const ::protowire::GetCurrentNetworkResponseMessage& _internal_getcurrentnetworkresponse() const;
  ::protowire::GetCurrentNetworkResponseMessage* _internal_mutable_getcurrentnetworkresponse();
  public:
  void unsafe_arena_set_allocated_getcurrentnetworkresponse(
      ::protowire::GetCurrentNetworkResponseMessage* getcurrentnetworkresponse);
  ::protowire::GetCurrentNetworkResponseMessage* unsafe_arena_release_getcurrentnetworkresponse();

  // .protowire.SubmitBlockRequestMessage submitBlockRequest = 1003;
  bool has_submitblockrequest() const;
  private:
  bool _internal_has_submitblockrequest() const;
  public:
  void clear_submitblockrequest();
  const ::protowire::SubmitBlockRequestMessage& submitblockrequest() const;
  PROTOBUF_NODISCARD ::protowire::SubmitBlockRequestMessage* release_submitblockrequest();
  ::protowire::SubmitBlockRequestMessage* mutable_submitblockrequest();
  void set_allocated_submitblockrequest(::protowire::SubmitBlockRequestMessage* submitblockrequest);
  private:
  const ::protowire::SubmitBlockRequestMessage& _internal_submitblockrequest() const;
  ::protowire::SubmitBlockRequestMessage* _internal_mutable_submitblockrequest();
  public:
  void unsafe_arena_set_allocated_submitblockrequest(
      ::protowire::SubmitBlockRequestMessage* submitblockrequest);
  ::protowire::SubmitBlockRequestMessage* unsafe_arena_release_submitblockrequest();

  // .protowire.SubmitBlockResponseMessage submitBlockResponse = 1004;
  bool has_submitblockresponse() const;
  private:
  bool _internal_has_submitblockresponse() const;
  public:
  void clear_submitblockresponse();
  const ::protowire::SubmitBlockResponseMessage& submitblockresponse() const;
  PROTOBUF_NODISCARD ::protowire::SubmitBlockResponseMessage* release_submitblockresponse();
  ::protowire::SubmitBlockResponseMessage* mutable_submitblockresponse();
  void set_allocated_submitblockresponse(::protowire::SubmitBlockResponseMessage* submitblockresponse);
  private:
  const ::protowire::SubmitBlockResponseMessage& _internal_submitblockresponse() const;
  ::protowire::SubmitBlockResponseMessage* _internal_mutable_submitblockresponse();
  public:
  void unsafe_arena_set_allocated_submitblockresponse(
      ::protowire::SubmitBlockResponseMessage* submitblockresponse);
  ::protowire::SubmitBlockResponseMessage* unsafe_arena_release_submitblockresponse();

  // .protowire.GetBlockTemplateRequestMessage getBlockTemplateRequest = 1005;
  bool has_getblocktemplaterequest() const;
  private:
  bool _internal_has_getblocktemplaterequest() const;
  public:
  void clear_getblocktemplaterequest();
  const ::protowire::GetBlockTemplateRequestMessage& getblocktemplaterequest() const;
  PROTOBUF_NODISCARD ::protowire::GetBlockTemplateRequestMessage* release_getblocktemplaterequest();
  ::protowire::GetBlockTemplateRequestMessage* mutable_getblocktemplaterequest();
  void set_allocated_getblocktemplaterequest(::protowire::GetBlockTemplateRequestMessage* getblocktemplaterequest);
  private:
  const ::protowire::GetBlockTemplateRequestMessage& _internal_getblocktemplaterequest() const;
  ::protowire::GetBlockTemplateRequestMessage* _internal_mutable_getblocktemplaterequest();
  public:
  void unsafe_arena_set_allocated_getblocktemplaterequest(
      ::protowire::GetBlockTemplateRequestMessage* getblocktemplaterequest);
  ::protowire::GetBlockTemplateRequestMessage* unsafe_arena_release_getblocktemplaterequest();

  // .protowire.GetBlockTemplateResponseMessage getBlockTemplateResponse = 1006;
  bool has_getblocktemplateresponse() const;
  private:
  bool _internal_has_getblocktemplateresponse() const;
  public:
  void clear_getblocktemplateresponse();
  const ::protowire::GetBlockTemplateResponseMessage& getblocktemplateresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetBlockTemplateResponseMessage* release_getblocktemplateresponse();
  ::protowire::GetBlockTemplateResponseMessage* mutable_getblocktemplateresponse();
  void set_allocated_getblocktemplateresponse(::protowire::GetBlockTemplateResponseMessage* getblocktemplateresponse);
  private:
  const ::protowire::GetBlockTemplateResponseMessage& _internal_getblocktemplateresponse() const;
  ::protowire::GetBlockTemplateResponseMessage* _internal_mutable_getblocktemplateresponse();
  public:
  void unsafe_arena_set_allocated_getblocktemplateresponse(
      ::protowire::GetBlockTemplateResponseMessage* getblocktemplateresponse);
  ::protowire::GetBlockTemplateResponseMessage* unsafe_arena_release_getblocktemplateresponse();

  // .protowire.NotifyBlockAddedRequestMessage notifyBlockAddedRequest = 1007;
  bool has_notifyblockaddedrequest() const;
  private:
  bool _internal_has_notifyblockaddedrequest() const;
  public:
  void clear_notifyblockaddedrequest();
  const ::protowire::NotifyBlockAddedRequestMessage& notifyblockaddedrequest() const;
  PROTOBUF_NODISCARD ::protowire::NotifyBlockAddedRequestMessage* release_notifyblockaddedrequest();
  ::protowire::NotifyBlockAddedRequestMessage* mutable_notifyblockaddedrequest();
  void set_allocated_notifyblockaddedrequest(::protowire::NotifyBlockAddedRequestMessage* notifyblockaddedrequest);
  private:
  const ::protowire::NotifyBlockAddedRequestMessage& _internal_notifyblockaddedrequest() const;
  ::protowire::NotifyBlockAddedRequestMessage* _internal_mutable_notifyblockaddedrequest();
  public:
  void unsafe_arena_set_allocated_notifyblockaddedrequest(
      ::protowire::NotifyBlockAddedRequestMessage* notifyblockaddedrequest);
  ::protowire::NotifyBlockAddedRequestMessage* unsafe_arena_release_notifyblockaddedrequest();

  // .protowire.NotifyBlockAddedResponseMessage notifyBlockAddedResponse = 1008;
  bool has_notifyblockaddedresponse() const;
  private:
  bool _internal_has_notifyblockaddedresponse() const;
  public:
  void clear_notifyblockaddedresponse();
  const ::protowire::NotifyBlockAddedResponseMessage& notifyblockaddedresponse() const;
  PROTOBUF_NODISCARD ::protowire::NotifyBlockAddedResponseMessage* release_notifyblockaddedresponse();
  ::protowire::NotifyBlockAddedResponseMessage* mutable_notifyblockaddedresponse();
  void set_allocated_notifyblockaddedresponse(::protowire::NotifyBlockAddedResponseMessage* notifyblockaddedresponse);
  private:
  const ::protowire::NotifyBlockAddedResponseMessage& _internal_notifyblockaddedresponse() const;
  ::protowire::NotifyBlockAddedResponseMessage* _internal_mutable_notifyblockaddedresponse();
  public:
  void unsafe_arena_set_allocated_notifyblockaddedresponse(
      ::protowire::NotifyBlockAddedResponseMessage* notifyblockaddedresponse);
  ::protowire::NotifyBlockAddedResponseMessage* unsafe_arena_release_notifyblockaddedresponse();

  // .protowire.BlockAddedNotificationMessage blockAddedNotification = 1009;
  bool has_blockaddednotification() const;
  private:
  bool _internal_has_blockaddednotification() const;
  public:
  void clear_blockaddednotification();
  const ::protowire::BlockAddedNotificationMessage& blockaddednotification() const;
  PROTOBUF_NODISCARD ::protowire::BlockAddedNotificationMessage* release_blockaddednotification();
  ::protowire::BlockAddedNotificationMessage* mutable_blockaddednotification();
  void set_allocated_blockaddednotification(::protowire::BlockAddedNotificationMessage* blockaddednotification);
  private:
  const ::protowire::BlockAddedNotificationMessage& _internal_blockaddednotification() const;
  ::protowire::BlockAddedNotificationMessage* _internal_mutable_blockaddednotification();
  public:
  void unsafe_arena_set_allocated_blockaddednotification(
      ::protowire::BlockAddedNotificationMessage* blockaddednotification);
  ::protowire::BlockAddedNotificationMessage* unsafe_arena_release_blockaddednotification();

  // .protowire.GetPeerAddressesRequestMessage getPeerAddressesRequest = 1010;
  bool has_getpeeraddressesrequest() const;
  private:
  bool _internal_has_getpeeraddressesrequest() const;
  public:
  void clear_getpeeraddressesrequest();
  const ::protowire::GetPeerAddressesRequestMessage& getpeeraddressesrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetPeerAddressesRequestMessage* release_getpeeraddressesrequest();
  ::protowire::GetPeerAddressesRequestMessage* mutable_getpeeraddressesrequest();
  void set_allocated_getpeeraddressesrequest(::protowire::GetPeerAddressesRequestMessage* getpeeraddressesrequest);
  private:
  const ::protowire::GetPeerAddressesRequestMessage& _internal_getpeeraddressesrequest() const;
  ::protowire::GetPeerAddressesRequestMessage* _internal_mutable_getpeeraddressesrequest();
  public:
  void unsafe_arena_set_allocated_getpeeraddressesrequest(
      ::protowire::GetPeerAddressesRequestMessage* getpeeraddressesrequest);
  ::protowire::GetPeerAddressesRequestMessage* unsafe_arena_release_getpeeraddressesrequest();

  // .protowire.GetPeerAddressesResponseMessage getPeerAddressesResponse = 1011;
  bool has_getpeeraddressesresponse() const;
  private:
  bool _internal_has_getpeeraddressesresponse() const;
  public:
  void clear_getpeeraddressesresponse();
  const ::protowire::GetPeerAddressesResponseMessage& getpeeraddressesresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetPeerAddressesResponseMessage* release_getpeeraddressesresponse();
  ::protowire::GetPeerAddressesResponseMessage* mutable_getpeeraddressesresponse();
  void set_allocated_getpeeraddressesresponse(::protowire::GetPeerAddressesResponseMessage* getpeeraddressesresponse);
  private:
  const ::protowire::GetPeerAddressesResponseMessage& _internal_getpeeraddressesresponse() const;
  ::protowire::GetPeerAddressesResponseMessage* _internal_mutable_getpeeraddressesresponse();
  public:
  void unsafe_arena_set_allocated_getpeeraddressesresponse(
      ::protowire::GetPeerAddressesResponseMessage* getpeeraddressesresponse);
  ::protowire::GetPeerAddressesResponseMessage* unsafe_arena_release_getpeeraddressesresponse();

  // .protowire.GetSelectedTipHashRequestMessage getSelectedTipHashRequest = 1012;
  bool has_getselectedtiphashrequest() const;
  private:
  bool _internal_has_getselectedtiphashrequest() const;
  public:
  void clear_getselectedtiphashrequest();
  const ::protowire::GetSelectedTipHashRequestMessage& getselectedtiphashrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetSelectedTipHashRequestMessage* release_getselectedtiphashrequest();
  ::protowire::GetSelectedTipHashRequestMessage* mutable_getselectedtiphashrequest();
  void set_allocated_getselectedtiphashrequest(::protowire::GetSelectedTipHashRequestMessage* getselectedtiphashrequest);
  private:
  const ::protowire::GetSelectedTipHashRequestMessage& _internal_getselectedtiphashrequest() const;
  ::protowire::GetSelectedTipHashRequestMessage* _internal_mutable_getselectedtiphashrequest();
  public:
  void unsafe_arena_set_allocated_getselectedtiphashrequest(
      ::protowire::GetSelectedTipHashRequestMessage* getselectedtiphashrequest);
  ::protowire::GetSelectedTipHashRequestMessage* unsafe_arena_release_getselectedtiphashrequest();

  // .protowire.GetSelectedTipHashResponseMessage getSelectedTipHashResponse = 1013;
  bool has_getselectedtiphashresponse() const;
  private:
  bool _internal_has_getselectedtiphashresponse() const;
  public:
  void clear_getselectedtiphashresponse();
  const ::protowire::GetSelectedTipHashResponseMessage& getselectedtiphashresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetSelectedTipHashResponseMessage* release_getselectedtiphashresponse();
  ::protowire::GetSelectedTipHashResponseMessage* mutable_getselectedtiphashresponse();
  void set_allocated_getselectedtiphashresponse(::protowire::GetSelectedTipHashResponseMessage* getselectedtiphashresponse);
  private:
  const ::protowire::GetSelectedTipHashResponseMessage& _internal_getselectedtiphashresponse() const;
  ::protowire::GetSelectedTipHashResponseMessage* _internal_mutable_getselectedtiphashresponse();
  public:
  void unsafe_arena_set_allocated_getselectedtiphashresponse(
      ::protowire::GetSelectedTipHashResponseMessage* getselectedtiphashresponse);
  ::protowire::GetSelectedTipHashResponseMessage* unsafe_arena_release_getselectedtiphashresponse();

  // .protowire.GetMempoolEntryRequestMessage getMempoolEntryRequest = 1014;
  bool has_getmempoolentryrequest() const;
  private:
  bool _internal_has_getmempoolentryrequest() const;
  public:
  void clear_getmempoolentryrequest();
  const ::protowire::GetMempoolEntryRequestMessage& getmempoolentryrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetMempoolEntryRequestMessage* release_getmempoolentryrequest();
  ::protowire::GetMempoolEntryRequestMessage* mutable_getmempoolentryrequest();
  void set_allocated_getmempoolentryrequest(::protowire::GetMempoolEntryRequestMessage* getmempoolentryrequest);
  private:
  const ::protowire::GetMempoolEntryRequestMessage& _internal_getmempoolentryrequest() const;
  ::protowire::GetMempoolEntryRequestMessage* _internal_mutable_getmempoolentryrequest();
  public:
  void unsafe_arena_set_allocated_getmempoolentryrequest(
      ::protowire::GetMempoolEntryRequestMessage* getmempoolentryrequest);
  ::protowire::GetMempoolEntryRequestMessage* unsafe_arena_release_getmempoolentryrequest();

  // .protowire.GetMempoolEntryResponseMessage getMempoolEntryResponse = 1015;
  bool has_getmempoolentryresponse() const;
  private:
  bool _internal_has_getmempoolentryresponse() const;
  public:
  void clear_getmempoolentryresponse();
  const ::protowire::GetMempoolEntryResponseMessage& getmempoolentryresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetMempoolEntryResponseMessage* release_getmempoolentryresponse();
  ::protowire::GetMempoolEntryResponseMessage* mutable_getmempoolentryresponse();
  void set_allocated_getmempoolentryresponse(::protowire::GetMempoolEntryResponseMessage* getmempoolentryresponse);
  private:
  const ::protowire::GetMempoolEntryResponseMessage& _internal_getmempoolentryresponse() const;
  ::protowire::GetMempoolEntryResponseMessage* _internal_mutable_getmempoolentryresponse();
  public:
  void unsafe_arena_set_allocated_getmempoolentryresponse(
      ::protowire::GetMempoolEntryResponseMessage* getmempoolentryresponse);
  ::protowire::GetMempoolEntryResponseMessage* unsafe_arena_release_getmempoolentryresponse();

  // .protowire.GetConnectedPeerInfoRequestMessage getConnectedPeerInfoRequest = 1016;
  bool has_getconnectedpeerinforequest() const;
  private:
  bool _internal_has_getconnectedpeerinforequest() const;
  public:
  void clear_getconnectedpeerinforequest();
  const ::protowire::GetConnectedPeerInfoRequestMessage& getconnectedpeerinforequest() const;
  PROTOBUF_NODISCARD ::protowire::GetConnectedPeerInfoRequestMessage* release_getconnectedpeerinforequest();
  ::protowire::GetConnectedPeerInfoRequestMessage* mutable_getconnectedpeerinforequest();
  void set_allocated_getconnectedpeerinforequest(::protowire::GetConnectedPeerInfoRequestMessage* getconnectedpeerinforequest);
  private:
  const ::protowire::GetConnectedPeerInfoRequestMessage& _internal_getconnectedpeerinforequest() const;
  ::protowire::GetConnectedPeerInfoRequestMessage* _internal_mutable_getconnectedpeerinforequest();
  public:
  void unsafe_arena_set_allocated_getconnectedpeerinforequest(
      ::protowire::GetConnectedPeerInfoRequestMessage* getconnectedpeerinforequest);
  ::protowire::GetConnectedPeerInfoRequestMessage* unsafe_arena_release_getconnectedpeerinforequest();

  // .protowire.GetConnectedPeerInfoResponseMessage getConnectedPeerInfoResponse = 1017;
  bool has_getconnectedpeerinforesponse() const;
  private:
  bool _internal_has_getconnectedpeerinforesponse() const;
  public:
  void clear_getconnectedpeerinforesponse();
  const ::protowire::GetConnectedPeerInfoResponseMessage& getconnectedpeerinforesponse() const;
  PROTOBUF_NODISCARD ::protowire::GetConnectedPeerInfoResponseMessage* release_getconnectedpeerinforesponse();
  ::protowire::GetConnectedPeerInfoResponseMessage* mutable_getconnectedpeerinforesponse();
  void set_allocated_getconnectedpeerinforesponse(::protowire::GetConnectedPeerInfoResponseMessage* getconnectedpeerinforesponse);
  private:
  const ::protowire::GetConnectedPeerInfoResponseMessage& _internal_getconnectedpeerinforesponse() const;
  ::protowire::GetConnectedPeerInfoResponseMessage* _internal_mutable_getconnectedpeerinforesponse();
  public:
  void unsafe_arena_set_allocated_getconnectedpeerinforesponse(
      ::protowire::GetConnectedPeerInfoResponseMessage* getconnectedpeerinforesponse);
  ::protowire::GetConnectedPeerInfoResponseMessage* unsafe_arena_release_getconnectedpeerinforesponse();

  // .protowire.AddPeerRequestMessage addPeerRequest = 1018;
  bool has_addpeerrequest() const;
  private:
  bool _internal_has_addpeerrequest() const;
  public:
  void clear_addpeerrequest();
  const ::protowire::AddPeerRequestMessage& addpeerrequest() const;
  PROTOBUF_NODISCARD ::protowire::AddPeerRequestMessage* release_addpeerrequest();
  ::protowire::AddPeerRequestMessage* mutable_addpeerrequest();
  void set_allocated_addpeerrequest(::protowire::AddPeerRequestMessage* addpeerrequest);
  private:
  const ::protowire::AddPeerRequestMessage& _internal_addpeerrequest() const;
  ::protowire::AddPeerRequestMessage* _internal_mutable_addpeerrequest();
  public:
  void unsafe_arena_set_allocated_addpeerrequest(
      ::protowire::AddPeerRequestMessage* addpeerrequest);
  ::protowire::AddPeerRequestMessage* unsafe_arena_release_addpeerrequest();

  // .protowire.AddPeerResponseMessage addPeerResponse = 1019;
  bool has_addpeerresponse() const;
  private:
  bool _internal_has_addpeerresponse() const;
  public:
  void clear_addpeerresponse();
  const ::protowire::AddPeerResponseMessage& addpeerresponse() const;
  PROTOBUF_NODISCARD ::protowire::AddPeerResponseMessage* release_addpeerresponse();
  ::protowire::AddPeerResponseMessage* mutable_addpeerresponse();
  void set_allocated_addpeerresponse(::protowire::AddPeerResponseMessage* addpeerresponse);
  private:
  const ::protowire::AddPeerResponseMessage& _internal_addpeerresponse() const;
  ::protowire::AddPeerResponseMessage* _internal_mutable_addpeerresponse();
  public:
  void unsafe_arena_set_allocated_addpeerresponse(
      ::protowire::AddPeerResponseMessage* addpeerresponse);
  ::protowire::AddPeerResponseMessage* unsafe_arena_release_addpeerresponse();

  // .protowire.SubmitTransactionRequestMessage submitTransactionRequest = 1020;
  bool has_submittransactionrequest() const;
  private:
  bool _internal_has_submittransactionrequest() const;
  public:
  void clear_submittransactionrequest();
  const ::protowire::SubmitTransactionRequestMessage& submittransactionrequest() const;
  PROTOBUF_NODISCARD ::protowire::SubmitTransactionRequestMessage* release_submittransactionrequest();
  ::protowire::SubmitTransactionRequestMessage* mutable_submittransactionrequest();
  void set_allocated_submittransactionrequest(::protowire::SubmitTransactionRequestMessage* submittransactionrequest);
  private:
  const ::protowire::SubmitTransactionRequestMessage& _internal_submittransactionrequest() const;
  ::protowire::SubmitTransactionRequestMessage* _internal_mutable_submittransactionrequest();
  public:
  void unsafe_arena_set_allocated_submittransactionrequest(
      ::protowire::SubmitTransactionRequestMessage* submittransactionrequest);
  ::protowire::SubmitTransactionRequestMessage* unsafe_arena_release_submittransactionrequest();

  // .protowire.SubmitTransactionResponseMessage submitTransactionResponse = 1021;
  bool has_submittransactionresponse() const;
  private:
  bool _internal_has_submittransactionresponse() const;
  public:
  void clear_submittransactionresponse();
  const ::protowire::SubmitTransactionResponseMessage& submittransactionresponse() const;
  PROTOBUF_NODISCARD ::protowire::SubmitTransactionResponseMessage* release_submittransactionresponse();
  ::protowire::SubmitTransactionResponseMessage* mutable_submittransactionresponse();
  void set_allocated_submittransactionresponse(::protowire::SubmitTransactionResponseMessage* submittransactionresponse);
  private:
  const ::protowire::SubmitTransactionResponseMessage& _internal_submittransactionresponse() const;
  ::protowire::SubmitTransactionResponseMessage* _internal_mutable_submittransactionresponse();
  public:
  void unsafe_arena_set_allocated_submittransactionresponse(
      ::protowire::SubmitTransactionResponseMessage* submittransactionresponse);
  ::protowire::SubmitTransactionResponseMessage* unsafe_arena_release_submittransactionresponse();

  // .protowire.NotifyVirtualSelectedParentChainChangedRequestMessage notifyVirtualSelectedParentChainChangedRequest = 1022;
  bool has_notifyvirtualselectedparentchainchangedrequest() const;
  private:
  bool _internal_has_notifyvirtualselectedparentchainchangedrequest() const;
  public:
  void clear_notifyvirtualselectedparentchainchangedrequest();
  const ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage& notifyvirtualselectedparentchainchangedrequest() const;
  PROTOBUF_NODISCARD ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* release_notifyvirtualselectedparentchainchangedrequest();
  ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* mutable_notifyvirtualselectedparentchainchangedrequest();
  void set_allocated_notifyvirtualselectedparentchainchangedrequest(::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* notifyvirtualselectedparentchainchangedrequest);
  private:
  const ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage& _internal_notifyvirtualselectedparentchainchangedrequest() const;
  ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* _internal_mutable_notifyvirtualselectedparentchainchangedrequest();
  public:
  void unsafe_arena_set_allocated_notifyvirtualselectedparentchainchangedrequest(
      ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* notifyvirtualselectedparentchainchangedrequest);
  ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* unsafe_arena_release_notifyvirtualselectedparentchainchangedrequest();

  // .protowire.NotifyVirtualSelectedParentChainChangedResponseMessage notifyVirtualSelectedParentChainChangedResponse = 1023;
  bool has_notifyvirtualselectedparentchainchangedresponse() const;
  private:
  bool _internal_has_notifyvirtualselectedparentchainchangedresponse() const;
  public:
  void clear_notifyvirtualselectedparentchainchangedresponse();
  const ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage& notifyvirtualselectedparentchainchangedresponse() const;
  PROTOBUF_NODISCARD ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* release_notifyvirtualselectedparentchainchangedresponse();
  ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* mutable_notifyvirtualselectedparentchainchangedresponse();
  void set_allocated_notifyvirtualselectedparentchainchangedresponse(::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* notifyvirtualselectedparentchainchangedresponse);
  private:
  const ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage& _internal_notifyvirtualselectedparentchainchangedresponse() const;
  ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* _internal_mutable_notifyvirtualselectedparentchainchangedresponse();
  public:
  void unsafe_arena_set_allocated_notifyvirtualselectedparentchainchangedresponse(
      ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* notifyvirtualselectedparentchainchangedresponse);
  ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* unsafe_arena_release_notifyvirtualselectedparentchainchangedresponse();

  // .protowire.VirtualSelectedParentChainChangedNotificationMessage virtualSelectedParentChainChangedNotification = 1024;
  bool has_virtualselectedparentchainchangednotification() const;
  private:
  bool _internal_has_virtualselectedparentchainchangednotification() const;
  public:
  void clear_virtualselectedparentchainchangednotification();
  const ::protowire::VirtualSelectedParentChainChangedNotificationMessage& virtualselectedparentchainchangednotification() const;
  PROTOBUF_NODISCARD ::protowire::VirtualSelectedParentChainChangedNotificationMessage* release_virtualselectedparentchainchangednotification();
  ::protowire::VirtualSelectedParentChainChangedNotificationMessage* mutable_virtualselectedparentchainchangednotification();
  void set_allocated_virtualselectedparentchainchangednotification(::protowire::VirtualSelectedParentChainChangedNotificationMessage* virtualselectedparentchainchangednotification);
  private:
  const ::protowire::VirtualSelectedParentChainChangedNotificationMessage& _internal_virtualselectedparentchainchangednotification() const;
  ::protowire::VirtualSelectedParentChainChangedNotificationMessage* _internal_mutable_virtualselectedparentchainchangednotification();
  public:
  void unsafe_arena_set_allocated_virtualselectedparentchainchangednotification(
      ::protowire::VirtualSelectedParentChainChangedNotificationMessage* virtualselectedparentchainchangednotification);
  ::protowire::VirtualSelectedParentChainChangedNotificationMessage* unsafe_arena_release_virtualselectedparentchainchangednotification();

  // .protowire.GetBlockRequestMessage getBlockRequest = 1025;
  bool has_getblockrequest() const;
  private:
  bool _internal_has_getblockrequest() const;
  public:
  void clear_getblockrequest();
  const ::protowire::GetBlockRequestMessage& getblockrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetBlockRequestMessage* release_getblockrequest();
  ::protowire::GetBlockRequestMessage* mutable_getblockrequest();
  void set_allocated_getblockrequest(::protowire::GetBlockRequestMessage* getblockrequest);
  private:
  const ::protowire::GetBlockRequestMessage& _internal_getblockrequest() const;
  ::protowire::GetBlockRequestMessage* _internal_mutable_getblockrequest();
  public:
  void unsafe_arena_set_allocated_getblockrequest(
      ::protowire::GetBlockRequestMessage* getblockrequest);
  ::protowire::GetBlockRequestMessage* unsafe_arena_release_getblockrequest();

  // .protowire.GetBlockResponseMessage getBlockResponse = 1026;
  bool has_getblockresponse() const;
  private:
  bool _internal_has_getblockresponse() const;
  public:
  void clear_getblockresponse();
  const ::protowire::GetBlockResponseMessage& getblockresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetBlockResponseMessage* release_getblockresponse();
  ::protowire::GetBlockResponseMessage* mutable_getblockresponse();
  void set_allocated_getblockresponse(::protowire::GetBlockResponseMessage* getblockresponse);
  private:
  const ::protowire::GetBlockResponseMessage& _internal_getblockresponse() const;
  ::protowire::GetBlockResponseMessage* _internal_mutable_getblockresponse();
  public:
  void unsafe_arena_set_allocated_getblockresponse(
      ::protowire::GetBlockResponseMessage* getblockresponse);
  ::protowire::GetBlockResponseMessage* unsafe_arena_release_getblockresponse();

  // .protowire.GetSubnetworkRequestMessage getSubnetworkRequest = 1027;
  bool has_getsubnetworkrequest() const;
  private:
  bool _internal_has_getsubnetworkrequest() const;
  public:
  void clear_getsubnetworkrequest();
  const ::protowire::GetSubnetworkRequestMessage& getsubnetworkrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetSubnetworkRequestMessage* release_getsubnetworkrequest();
  ::protowire::GetSubnetworkRequestMessage* mutable_getsubnetworkrequest();
  void set_allocated_getsubnetworkrequest(::protowire::GetSubnetworkRequestMessage* getsubnetworkrequest);
  private:
  const ::protowire::GetSubnetworkRequestMessage& _internal_getsubnetworkrequest() const;
  ::protowire::GetSubnetworkRequestMessage* _internal_mutable_getsubnetworkrequest();
  public:
  void unsafe_arena_set_allocated_getsubnetworkrequest(
      ::protowire::GetSubnetworkRequestMessage* getsubnetworkrequest);
  ::protowire::GetSubnetworkRequestMessage* unsafe_arena_release_getsubnetworkrequest();

  // .protowire.GetSubnetworkResponseMessage getSubnetworkResponse = 1028;
  bool has_getsubnetworkresponse() const;
  private:
  bool _internal_has_getsubnetworkresponse() const;
  public:
  void clear_getsubnetworkresponse();
  const ::protowire::GetSubnetworkResponseMessage& getsubnetworkresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetSubnetworkResponseMessage* release_getsubnetworkresponse();
  ::protowire::GetSubnetworkResponseMessage* mutable_getsubnetworkresponse();
  void set_allocated_getsubnetworkresponse(::protowire::GetSubnetworkResponseMessage* getsubnetworkresponse);
  private:
  const ::protowire::GetSubnetworkResponseMessage& _internal_getsubnetworkresponse() const;
  ::protowire::GetSubnetworkResponseMessage* _internal_mutable_getsubnetworkresponse();
  public:
  void unsafe_arena_set_allocated_getsubnetworkresponse(
      ::protowire::GetSubnetworkResponseMessage* getsubnetworkresponse);
  ::protowire::GetSubnetworkResponseMessage* unsafe_arena_release_getsubnetworkresponse();

  // .protowire.GetVirtualSelectedParentChainFromBlockRequestMessage getVirtualSelectedParentChainFromBlockRequest = 1029;
  bool has_getvirtualselectedparentchainfromblockrequest() const;
  private:
  bool _internal_has_getvirtualselectedparentchainfromblockrequest() const;
  public:
  void clear_getvirtualselectedparentchainfromblockrequest();
  const ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage& getvirtualselectedparentchainfromblockrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* release_getvirtualselectedparentchainfromblockrequest();
  ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* mutable_getvirtualselectedparentchainfromblockrequest();
  void set_allocated_getvirtualselectedparentchainfromblockrequest(::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* getvirtualselectedparentchainfromblockrequest);
  private:
  const ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage& _internal_getvirtualselectedparentchainfromblockrequest() const;
  ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* _internal_mutable_getvirtualselectedparentchainfromblockrequest();
  public:
  void unsafe_arena_set_allocated_getvirtualselectedparentchainfromblockrequest(
      ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* getvirtualselectedparentchainfromblockrequest);
  ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* unsafe_arena_release_getvirtualselectedparentchainfromblockrequest();

  // .protowire.GetVirtualSelectedParentChainFromBlockResponseMessage getVirtualSelectedParentChainFromBlockResponse = 1030;
  bool has_getvirtualselectedparentchainfromblockresponse() const;
  private:
  bool _internal_has_getvirtualselectedparentchainfromblockresponse() const;
  public:
  void clear_getvirtualselectedparentchainfromblockresponse();
  const ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage& getvirtualselectedparentchainfromblockresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* release_getvirtualselectedparentchainfromblockresponse();
  ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* mutable_getvirtualselectedparentchainfromblockresponse();
  void set_allocated_getvirtualselectedparentchainfromblockresponse(::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* getvirtualselectedparentchainfromblockresponse);
  private:
  const ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage& _internal_getvirtualselectedparentchainfromblockresponse() const;
  ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* _internal_mutable_getvirtualselectedparentchainfromblockresponse();
  public:
  void unsafe_arena_set_allocated_getvirtualselectedparentchainfromblockresponse(
      ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* getvirtualselectedparentchainfromblockresponse);
  ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* unsafe_arena_release_getvirtualselectedparentchainfromblockresponse();

  // .protowire.GetBlocksRequestMessage getBlocksRequest = 1031;
  bool has_getblocksrequest() const;
  private:
  bool _internal_has_getblocksrequest() const;
  public:
  void clear_getblocksrequest();
  const ::protowire::GetBlocksRequestMessage& getblocksrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetBlocksRequestMessage* release_getblocksrequest();
  ::protowire::GetBlocksRequestMessage* mutable_getblocksrequest();
  void set_allocated_getblocksrequest(::protowire::GetBlocksRequestMessage* getblocksrequest);
  private:
  const ::protowire::GetBlocksRequestMessage& _internal_getblocksrequest() const;
  ::protowire::GetBlocksRequestMessage* _internal_mutable_getblocksrequest();
  public:
  void unsafe_arena_set_allocated_getblocksrequest(
      ::protowire::GetBlocksRequestMessage* getblocksrequest);
  ::protowire::GetBlocksRequestMessage* unsafe_arena_release_getblocksrequest();

  // .protowire.GetBlocksResponseMessage getBlocksResponse = 1032;
  bool has_getblocksresponse() const;
  private:
  bool _internal_has_getblocksresponse() const;
  public:
  void clear_getblocksresponse();
  const ::protowire::GetBlocksResponseMessage& getblocksresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetBlocksResponseMessage* release_getblocksresponse();
  ::protowire::GetBlocksResponseMessage* mutable_getblocksresponse();
  void set_allocated_getblocksresponse(::protowire::GetBlocksResponseMessage* getblocksresponse);
  private:
  const ::protowire::GetBlocksResponseMessage& _internal_getblocksresponse() const;
  ::protowire::GetBlocksResponseMessage* _internal_mutable_getblocksresponse();
  public:
  void unsafe_arena_set_allocated_getblocksresponse(
      ::protowire::GetBlocksResponseMessage* getblocksresponse);
  ::protowire::GetBlocksResponseMessage* unsafe_arena_release_getblocksresponse();

  // .protowire.GetBlockCountRequestMessage getBlockCountRequest = 1033;
  bool has_getblockcountrequest() const;
  private:
  bool _internal_has_getblockcountrequest() const;
  public:
  void clear_getblockcountrequest();
  const ::protowire::GetBlockCountRequestMessage& getblockcountrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetBlockCountRequestMessage* release_getblockcountrequest();
  ::protowire::GetBlockCountRequestMessage* mutable_getblockcountrequest();
  void set_allocated_getblockcountrequest(::protowire::GetBlockCountRequestMessage* getblockcountrequest);
  private:
  const ::protowire::GetBlockCountRequestMessage& _internal_getblockcountrequest() const;
  ::protowire::GetBlockCountRequestMessage* _internal_mutable_getblockcountrequest();
  public:
  void unsafe_arena_set_allocated_getblockcountrequest(
      ::protowire::GetBlockCountRequestMessage* getblockcountrequest);
  ::protowire::GetBlockCountRequestMessage* unsafe_arena_release_getblockcountrequest();

  // .protowire.GetBlockCountResponseMessage getBlockCountResponse = 1034;
  bool has_getblockcountresponse() const;
  private:
  bool _internal_has_getblockcountresponse() const;
  public:
  void clear_getblockcountresponse();
  const ::protowire::GetBlockCountResponseMessage& getblockcountresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetBlockCountResponseMessage* release_getblockcountresponse();
  ::protowire::GetBlockCountResponseMessage* mutable_getblockcountresponse();
  void set_allocated_getblockcountresponse(::protowire::GetBlockCountResponseMessage* getblockcountresponse);
  private:
  const ::protowire::GetBlockCountResponseMessage& _internal_getblockcountresponse() const;
  ::protowire::GetBlockCountResponseMessage* _internal_mutable_getblockcountresponse();
  public:
  void unsafe_arena_set_allocated_getblockcountresponse(
      ::protowire::GetBlockCountResponseMessage* getblockcountresponse);
  ::protowire::GetBlockCountResponseMessage* unsafe_arena_release_getblockcountresponse();

  // .protowire.GetBlockDagInfoRequestMessage getBlockDagInfoRequest = 1035;
  bool has_getblockdaginforequest() const;
  private:
  bool _internal_has_getblockdaginforequest() const;
  public:
  void clear_getblockdaginforequest();
  const ::protowire::GetBlockDagInfoRequestMessage& getblockdaginforequest() const;
  PROTOBUF_NODISCARD ::protowire::GetBlockDagInfoRequestMessage* release_getblockdaginforequest();
  ::protowire::GetBlockDagInfoRequestMessage* mutable_getblockdaginforequest();
  void set_allocated_getblockdaginforequest(::protowire::GetBlockDagInfoRequestMessage* getblockdaginforequest);
  private:
  const ::protowire::GetBlockDagInfoRequestMessage& _internal_getblockdaginforequest() const;
  ::protowire::GetBlockDagInfoRequestMessage* _internal_mutable_getblockdaginforequest();
  public:
  void unsafe_arena_set_allocated_getblockdaginforequest(
      ::protowire::GetBlockDagInfoRequestMessage* getblockdaginforequest);
  ::protowire::GetBlockDagInfoRequestMessage* unsafe_arena_release_getblockdaginforequest();

  // .protowire.GetBlockDagInfoResponseMessage getBlockDagInfoResponse = 1036;
  bool has_getblockdaginforesponse() const;
  private:
  bool _internal_has_getblockdaginforesponse() const;
  public:
  void clear_getblockdaginforesponse();
  const ::protowire::GetBlockDagInfoResponseMessage& getblockdaginforesponse() const;
  PROTOBUF_NODISCARD ::protowire::GetBlockDagInfoResponseMessage* release_getblockdaginforesponse();
  ::protowire::GetBlockDagInfoResponseMessage* mutable_getblockdaginforesponse();
  void set_allocated_getblockdaginforesponse(::protowire::GetBlockDagInfoResponseMessage* getblockdaginforesponse);
  private:
  const ::protowire::GetBlockDagInfoResponseMessage& _internal_getblockdaginforesponse() const;
  ::protowire::GetBlockDagInfoResponseMessage* _internal_mutable_getblockdaginforesponse();
  public:
  void unsafe_arena_set_allocated_getblockdaginforesponse(
      ::protowire::GetBlockDagInfoResponseMessage* getblockdaginforesponse);
  ::protowire::GetBlockDagInfoResponseMessage* unsafe_arena_release_getblockdaginforesponse();

  // .protowire.ResolveFinalityConflictRequestMessage resolveFinalityConflictRequest = 1037;
  bool has_resolvefinalityconflictrequest() const;
  private:
  bool _internal_has_resolvefinalityconflictrequest() const;
  public:
  void clear_resolvefinalityconflictrequest();
  const ::protowire::ResolveFinalityConflictRequestMessage& resolvefinalityconflictrequest() const;
  PROTOBUF_NODISCARD ::protowire::ResolveFinalityConflictRequestMessage* release_resolvefinalityconflictrequest();
  ::protowire::ResolveFinalityConflictRequestMessage* mutable_resolvefinalityconflictrequest();
  void set_allocated_resolvefinalityconflictrequest(::protowire::ResolveFinalityConflictRequestMessage* resolvefinalityconflictrequest);
  private:
  const ::protowire::ResolveFinalityConflictRequestMessage& _internal_resolvefinalityconflictrequest() const;
  ::protowire::ResolveFinalityConflictRequestMessage* _internal_mutable_resolvefinalityconflictrequest();
  public:
  void unsafe_arena_set_allocated_resolvefinalityconflictrequest(
      ::protowire::ResolveFinalityConflictRequestMessage* resolvefinalityconflictrequest);
  ::protowire::ResolveFinalityConflictRequestMessage* unsafe_arena_release_resolvefinalityconflictrequest();

  // .protowire.ResolveFinalityConflictResponseMessage resolveFinalityConflictResponse = 1038;
  bool has_resolvefinalityconflictresponse() const;
  private:
  bool _internal_has_resolvefinalityconflictresponse() const;
  public:
  void clear_resolvefinalityconflictresponse();
  const ::protowire::ResolveFinalityConflictResponseMessage& resolvefinalityconflictresponse() const;
  PROTOBUF_NODISCARD ::protowire::ResolveFinalityConflictResponseMessage* release_resolvefinalityconflictresponse();
  ::protowire::ResolveFinalityConflictResponseMessage* mutable_resolvefinalityconflictresponse();
  void set_allocated_resolvefinalityconflictresponse(::protowire::ResolveFinalityConflictResponseMessage* resolvefinalityconflictresponse);
  private:
  const ::protowire::ResolveFinalityConflictResponseMessage& _internal_resolvefinalityconflictresponse() const;
  ::protowire::ResolveFinalityConflictResponseMessage* _internal_mutable_resolvefinalityconflictresponse();
  public:
  void unsafe_arena_set_allocated_resolvefinalityconflictresponse(
      ::protowire::ResolveFinalityConflictResponseMessage* resolvefinalityconflictresponse);
  ::protowire::ResolveFinalityConflictResponseMessage* unsafe_arena_release_resolvefinalityconflictresponse();

  // .protowire.NotifyFinalityConflictsRequestMessage notifyFinalityConflictsRequest = 1039;
  bool has_notifyfinalityconflictsrequest() const;
  private:
  bool _internal_has_notifyfinalityconflictsrequest() const;
  public:
  void clear_notifyfinalityconflictsrequest();
  const ::protowire::NotifyFinalityConflictsRequestMessage& notifyfinalityconflictsrequest() const;
  PROTOBUF_NODISCARD ::protowire::NotifyFinalityConflictsRequestMessage* release_notifyfinalityconflictsrequest();
  ::protowire::NotifyFinalityConflictsRequestMessage* mutable_notifyfinalityconflictsrequest();
  void set_allocated_notifyfinalityconflictsrequest(::protowire::NotifyFinalityConflictsRequestMessage* notifyfinalityconflictsrequest);
  private:
  const ::protowire::NotifyFinalityConflictsRequestMessage& _internal_notifyfinalityconflictsrequest() const;
  ::protowire::NotifyFinalityConflictsRequestMessage* _internal_mutable_notifyfinalityconflictsrequest();
  public:
  void unsafe_arena_set_allocated_notifyfinalityconflictsrequest(
      ::protowire::NotifyFinalityConflictsRequestMessage* notifyfinalityconflictsrequest);
  ::protowire::NotifyFinalityConflictsRequestMessage* unsafe_arena_release_notifyfinalityconflictsrequest();

  // .protowire.NotifyFinalityConflictsResponseMessage notifyFinalityConflictsResponse = 1040;
  bool has_notifyfinalityconflictsresponse() const;
  private:
  bool _internal_has_notifyfinalityconflictsresponse() const;
  public:
  void clear_notifyfinalityconflictsresponse();
  const ::protowire::NotifyFinalityConflictsResponseMessage& notifyfinalityconflictsresponse() const;
  PROTOBUF_NODISCARD ::protowire::NotifyFinalityConflictsResponseMessage* release_notifyfinalityconflictsresponse();
  ::protowire::NotifyFinalityConflictsResponseMessage* mutable_notifyfinalityconflictsresponse();
  void set_allocated_notifyfinalityconflictsresponse(::protowire::NotifyFinalityConflictsResponseMessage* notifyfinalityconflictsresponse);
  private:
  const ::protowire::NotifyFinalityConflictsResponseMessage& _internal_notifyfinalityconflictsresponse() const;
  ::protowire::NotifyFinalityConflictsResponseMessage* _internal_mutable_notifyfinalityconflictsresponse();
  public:
  void unsafe_arena_set_allocated_notifyfinalityconflictsresponse(
      ::protowire::NotifyFinalityConflictsResponseMessage* notifyfinalityconflictsresponse);
  ::protowire::NotifyFinalityConflictsResponseMessage* unsafe_arena_release_notifyfinalityconflictsresponse();

  // .protowire.FinalityConflictNotificationMessage finalityConflictNotification = 1041;
  bool has_finalityconflictnotification() const;
  private:
  bool _internal_has_finalityconflictnotification() const;
  public:
  void clear_finalityconflictnotification();
  const ::protowire::FinalityConflictNotificationMessage& finalityconflictnotification() const;
  PROTOBUF_NODISCARD ::protowire::FinalityConflictNotificationMessage* release_finalityconflictnotification();
  ::protowire::FinalityConflictNotificationMessage* mutable_finalityconflictnotification();
  void set_allocated_finalityconflictnotification(::protowire::FinalityConflictNotificationMessage* finalityconflictnotification);
  private:
  const ::protowire::FinalityConflictNotificationMessage& _internal_finalityconflictnotification() const;
  ::protowire::FinalityConflictNotificationMessage* _internal_mutable_finalityconflictnotification();
  public:
  void unsafe_arena_set_allocated_finalityconflictnotification(
      ::protowire::FinalityConflictNotificationMessage* finalityconflictnotification);
  ::protowire::FinalityConflictNotificationMessage* unsafe_arena_release_finalityconflictnotification();

  // .protowire.FinalityConflictResolvedNotificationMessage finalityConflictResolvedNotification = 1042;
  bool has_finalityconflictresolvednotification() const;
  private:
  bool _internal_has_finalityconflictresolvednotification() const;
  public:
  void clear_finalityconflictresolvednotification();
  const ::protowire::FinalityConflictResolvedNotificationMessage& finalityconflictresolvednotification() const;
  PROTOBUF_NODISCARD ::protowire::FinalityConflictResolvedNotificationMessage* release_finalityconflictresolvednotification();
  ::protowire::FinalityConflictResolvedNotificationMessage* mutable_finalityconflictresolvednotification();
  void set_allocated_finalityconflictresolvednotification(::protowire::FinalityConflictResolvedNotificationMessage* finalityconflictresolvednotification);
  private:
  const ::protowire::FinalityConflictResolvedNotificationMessage& _internal_finalityconflictresolvednotification() const;
  ::protowire::FinalityConflictResolvedNotificationMessage* _internal_mutable_finalityconflictresolvednotification();
  public:
  void unsafe_arena_set_allocated_finalityconflictresolvednotification(
      ::protowire::FinalityConflictResolvedNotificationMessage* finalityconflictresolvednotification);
  ::protowire::FinalityConflictResolvedNotificationMessage* unsafe_arena_release_finalityconflictresolvednotification();

  // .protowire.GetMempoolEntriesRequestMessage getMempoolEntriesRequest = 1043;
  bool has_getmempoolentriesrequest() const;
  private:
  bool _internal_has_getmempoolentriesrequest() const;
  public:
  void clear_getmempoolentriesrequest();
  const ::protowire::GetMempoolEntriesRequestMessage& getmempoolentriesrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetMempoolEntriesRequestMessage* release_getmempoolentriesrequest();
  ::protowire::GetMempoolEntriesRequestMessage* mutable_getmempoolentriesrequest();
  void set_allocated_getmempoolentriesrequest(::protowire::GetMempoolEntriesRequestMessage* getmempoolentriesrequest);
  private:
  const ::protowire::GetMempoolEntriesRequestMessage& _internal_getmempoolentriesrequest() const;
  ::protowire::GetMempoolEntriesRequestMessage* _internal_mutable_getmempoolentriesrequest();
  public:
  void unsafe_arena_set_allocated_getmempoolentriesrequest(
      ::protowire::GetMempoolEntriesRequestMessage* getmempoolentriesrequest);
  ::protowire::GetMempoolEntriesRequestMessage* unsafe_arena_release_getmempoolentriesrequest();

  // .protowire.GetMempoolEntriesResponseMessage getMempoolEntriesResponse = 1044;
  bool has_getmempoolentriesresponse() const;
  private:
  bool _internal_has_getmempoolentriesresponse() const;
  public:
  void clear_getmempoolentriesresponse();
  const ::protowire::GetMempoolEntriesResponseMessage& getmempoolentriesresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetMempoolEntriesResponseMessage* release_getmempoolentriesresponse();
  ::protowire::GetMempoolEntriesResponseMessage* mutable_getmempoolentriesresponse();
  void set_allocated_getmempoolentriesresponse(::protowire::GetMempoolEntriesResponseMessage* getmempoolentriesresponse);
  private:
  const ::protowire::GetMempoolEntriesResponseMessage& _internal_getmempoolentriesresponse() const;
  ::protowire::GetMempoolEntriesResponseMessage* _internal_mutable_getmempoolentriesresponse();
  public:
  void unsafe_arena_set_allocated_getmempoolentriesresponse(
      ::protowire::GetMempoolEntriesResponseMessage* getmempoolentriesresponse);
  ::protowire::GetMempoolEntriesResponseMessage* unsafe_arena_release_getmempoolentriesresponse();

  // .protowire.ShutDownRequestMessage shutDownRequest = 1045;
  bool has_shutdownrequest() const;
  private:
  bool _internal_has_shutdownrequest() const;
  public:
  void clear_shutdownrequest();
  const ::protowire::ShutDownRequestMessage& shutdownrequest() const;
  PROTOBUF_NODISCARD ::protowire::ShutDownRequestMessage* release_shutdownrequest();
  ::protowire::ShutDownRequestMessage* mutable_shutdownrequest();
  void set_allocated_shutdownrequest(::protowire::ShutDownRequestMessage* shutdownrequest);
  private:
  const ::protowire::ShutDownRequestMessage& _internal_shutdownrequest() const;
  ::protowire::ShutDownRequestMessage* _internal_mutable_shutdownrequest();
  public:
  void unsafe_arena_set_allocated_shutdownrequest(
      ::protowire::ShutDownRequestMessage* shutdownrequest);
  ::protowire::ShutDownRequestMessage* unsafe_arena_release_shutdownrequest();

  // .protowire.ShutDownResponseMessage shutDownResponse = 1046;
  bool has_shutdownresponse() const;
  private:
  bool _internal_has_shutdownresponse() const;
  public:
  void clear_shutdownresponse();
  const ::protowire::ShutDownResponseMessage& shutdownresponse() const;
  PROTOBUF_NODISCARD ::protowire::ShutDownResponseMessage* release_shutdownresponse();
  ::protowire::ShutDownResponseMessage* mutable_shutdownresponse();
  void set_allocated_shutdownresponse(::protowire::ShutDownResponseMessage* shutdownresponse);
  private:
  const ::protowire::ShutDownResponseMessage& _internal_shutdownresponse() const;
  ::protowire::ShutDownResponseMessage* _internal_mutable_shutdownresponse();
  public:
  void unsafe_arena_set_allocated_shutdownresponse(
      ::protowire::ShutDownResponseMessage* shutdownresponse);
  ::protowire::ShutDownResponseMessage* unsafe_arena_release_shutdownresponse();

  // .protowire.GetHeadersRequestMessage getHeadersRequest = 1047;
  bool has_getheadersrequest() const;
  private:
  bool _internal_has_getheadersrequest() const;
  public:
  void clear_getheadersrequest();
  const ::protowire::GetHeadersRequestMessage& getheadersrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetHeadersRequestMessage* release_getheadersrequest();
  ::protowire::GetHeadersRequestMessage* mutable_getheadersrequest();
  void set_allocated_getheadersrequest(::protowire::GetHeadersRequestMessage* getheadersrequest);
  private:
  const ::protowire::GetHeadersRequestMessage& _internal_getheadersrequest() const;
  ::protowire::GetHeadersRequestMessage* _internal_mutable_getheadersrequest();
  public:
  void unsafe_arena_set_allocated_getheadersrequest(
      ::protowire::GetHeadersRequestMessage* getheadersrequest);
  ::protowire::GetHeadersRequestMessage* unsafe_arena_release_getheadersrequest();

  // .protowire.GetHeadersResponseMessage getHeadersResponse = 1048;
  bool has_getheadersresponse() const;
  private:
  bool _internal_has_getheadersresponse() const;
  public:
  void clear_getheadersresponse();
  const ::protowire::GetHeadersResponseMessage& getheadersresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetHeadersResponseMessage* release_getheadersresponse();
  ::protowire::GetHeadersResponseMessage* mutable_getheadersresponse();
  void set_allocated_getheadersresponse(::protowire::GetHeadersResponseMessage* getheadersresponse);
  private:
  const ::protowire::GetHeadersResponseMessage& _internal_getheadersresponse() const;
  ::protowire::GetHeadersResponseMessage* _internal_mutable_getheadersresponse();
  public:
  void unsafe_arena_set_allocated_getheadersresponse(
      ::protowire::GetHeadersResponseMessage* getheadersresponse);
  ::protowire::GetHeadersResponseMessage* unsafe_arena_release_getheadersresponse();

  // .protowire.NotifyUtxosChangedRequestMessage notifyUtxosChangedRequest = 1049;
  bool has_notifyutxoschangedrequest() const;
  private:
  bool _internal_has_notifyutxoschangedrequest() const;
  public:
  void clear_notifyutxoschangedrequest();
  const ::protowire::NotifyUtxosChangedRequestMessage& notifyutxoschangedrequest() const;
  PROTOBUF_NODISCARD ::protowire::NotifyUtxosChangedRequestMessage* release_notifyutxoschangedrequest();
  ::protowire::NotifyUtxosChangedRequestMessage* mutable_notifyutxoschangedrequest();
  void set_allocated_notifyutxoschangedrequest(::protowire::NotifyUtxosChangedRequestMessage* notifyutxoschangedrequest);
  private:
  const ::protowire::NotifyUtxosChangedRequestMessage& _internal_notifyutxoschangedrequest() const;
  ::protowire::NotifyUtxosChangedRequestMessage* _internal_mutable_notifyutxoschangedrequest();
  public:
  void unsafe_arena_set_allocated_notifyutxoschangedrequest(
      ::protowire::NotifyUtxosChangedRequestMessage* notifyutxoschangedrequest);
  ::protowire::NotifyUtxosChangedRequestMessage* unsafe_arena_release_notifyutxoschangedrequest();

  // .protowire.NotifyUtxosChangedResponseMessage notifyUtxosChangedResponse = 1050;
  bool has_notifyutxoschangedresponse() const;
  private:
  bool _internal_has_notifyutxoschangedresponse() const;
  public:
  void clear_notifyutxoschangedresponse();
  const ::protowire::NotifyUtxosChangedResponseMessage& notifyutxoschangedresponse() const;
  PROTOBUF_NODISCARD ::protowire::NotifyUtxosChangedResponseMessage* release_notifyutxoschangedresponse();
  ::protowire::NotifyUtxosChangedResponseMessage* mutable_notifyutxoschangedresponse();
  void set_allocated_notifyutxoschangedresponse(::protowire::NotifyUtxosChangedResponseMessage* notifyutxoschangedresponse);
  private:
  const ::protowire::NotifyUtxosChangedResponseMessage& _internal_notifyutxoschangedresponse() const;
  ::protowire::NotifyUtxosChangedResponseMessage* _internal_mutable_notifyutxoschangedresponse();
  public:
  void unsafe_arena_set_allocated_notifyutxoschangedresponse(
      ::protowire::NotifyUtxosChangedResponseMessage* notifyutxoschangedresponse);
  ::protowire::NotifyUtxosChangedResponseMessage* unsafe_arena_release_notifyutxoschangedresponse();

  // .protowire.UtxosChangedNotificationMessage utxosChangedNotification = 1051;
  bool has_utxoschangednotification() const;
  private:
  bool _internal_has_utxoschangednotification() const;
  public:
  void clear_utxoschangednotification();
  const ::protowire::UtxosChangedNotificationMessage& utxoschangednotification() const;
  PROTOBUF_NODISCARD ::protowire::UtxosChangedNotificationMessage* release_utxoschangednotification();
  ::protowire::UtxosChangedNotificationMessage* mutable_utxoschangednotification();
  void set_allocated_utxoschangednotification(::protowire::UtxosChangedNotificationMessage* utxoschangednotification);
  private:
  const ::protowire::UtxosChangedNotificationMessage& _internal_utxoschangednotification() const;
  ::protowire::UtxosChangedNotificationMessage* _internal_mutable_utxoschangednotification();
  public:
  void unsafe_arena_set_allocated_utxoschangednotification(
      ::protowire::UtxosChangedNotificationMessage* utxoschangednotification);
  ::protowire::UtxosChangedNotificationMessage* unsafe_arena_release_utxoschangednotification();

  // .protowire.GetUtxosByAddressesRequestMessage getUtxosByAddressesRequest = 1052;
  bool has_getutxosbyaddressesrequest() const;
  private:
  bool _internal_has_getutxosbyaddressesrequest() const;
  public:
  void clear_getutxosbyaddressesrequest();
  const ::protowire::GetUtxosByAddressesRequestMessage& getutxosbyaddressesrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetUtxosByAddressesRequestMessage* release_getutxosbyaddressesrequest();
  ::protowire::GetUtxosByAddressesRequestMessage* mutable_getutxosbyaddressesrequest();
  void set_allocated_getutxosbyaddressesrequest(::protowire::GetUtxosByAddressesRequestMessage* getutxosbyaddressesrequest);
  private:
  const ::protowire::GetUtxosByAddressesRequestMessage& _internal_getutxosbyaddressesrequest() const;
  ::protowire::GetUtxosByAddressesRequestMessage* _internal_mutable_getutxosbyaddressesrequest();
  public:
  void unsafe_arena_set_allocated_getutxosbyaddressesrequest(
      ::protowire::GetUtxosByAddressesRequestMessage* getutxosbyaddressesrequest);
  ::protowire::GetUtxosByAddressesRequestMessage* unsafe_arena_release_getutxosbyaddressesrequest();

  // .protowire.GetUtxosByAddressesResponseMessage getUtxosByAddressesResponse = 1053;
  bool has_getutxosbyaddressesresponse() const;
  private:
  bool _internal_has_getutxosbyaddressesresponse() const;
  public:
  void clear_getutxosbyaddressesresponse();
  const ::protowire::GetUtxosByAddressesResponseMessage& getutxosbyaddressesresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetUtxosByAddressesResponseMessage* release_getutxosbyaddressesresponse();
  ::protowire::GetUtxosByAddressesResponseMessage* mutable_getutxosbyaddressesresponse();
  void set_allocated_getutxosbyaddressesresponse(::protowire::GetUtxosByAddressesResponseMessage* getutxosbyaddressesresponse);
  private:
  const ::protowire::GetUtxosByAddressesResponseMessage& _internal_getutxosbyaddressesresponse() const;
  ::protowire::GetUtxosByAddressesResponseMessage* _internal_mutable_getutxosbyaddressesresponse();
  public:
  void unsafe_arena_set_allocated_getutxosbyaddressesresponse(
      ::protowire::GetUtxosByAddressesResponseMessage* getutxosbyaddressesresponse);
  ::protowire::GetUtxosByAddressesResponseMessage* unsafe_arena_release_getutxosbyaddressesresponse();

  // .protowire.GetVirtualSelectedParentBlueScoreRequestMessage getVirtualSelectedParentBlueScoreRequest = 1054;
  bool has_getvirtualselectedparentbluescorerequest() const;
  private:
  bool _internal_has_getvirtualselectedparentbluescorerequest() const;
  public:
  void clear_getvirtualselectedparentbluescorerequest();
  const ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage& getvirtualselectedparentbluescorerequest() const;
  PROTOBUF_NODISCARD ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* release_getvirtualselectedparentbluescorerequest();
  ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* mutable_getvirtualselectedparentbluescorerequest();
  void set_allocated_getvirtualselectedparentbluescorerequest(::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* getvirtualselectedparentbluescorerequest);
  private:
  const ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage& _internal_getvirtualselectedparentbluescorerequest() const;
  ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* _internal_mutable_getvirtualselectedparentbluescorerequest();
  public:
  void unsafe_arena_set_allocated_getvirtualselectedparentbluescorerequest(
      ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* getvirtualselectedparentbluescorerequest);
  ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* unsafe_arena_release_getvirtualselectedparentbluescorerequest();

  // .protowire.GetVirtualSelectedParentBlueScoreResponseMessage getVirtualSelectedParentBlueScoreResponse = 1055;
  bool has_getvirtualselectedparentbluescoreresponse() const;
  private:
  bool _internal_has_getvirtualselectedparentbluescoreresponse() const;
  public:
  void clear_getvirtualselectedparentbluescoreresponse();
  const ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage& getvirtualselectedparentbluescoreresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* release_getvirtualselectedparentbluescoreresponse();
  ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* mutable_getvirtualselectedparentbluescoreresponse();
  void set_allocated_getvirtualselectedparentbluescoreresponse(::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* getvirtualselectedparentbluescoreresponse);
  private:
  const ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage& _internal_getvirtualselectedparentbluescoreresponse() const;
  ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* _internal_mutable_getvirtualselectedparentbluescoreresponse();
  public:
  void unsafe_arena_set_allocated_getvirtualselectedparentbluescoreresponse(
      ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* getvirtualselectedparentbluescoreresponse);
  ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* unsafe_arena_release_getvirtualselectedparentbluescoreresponse();

  // .protowire.NotifyVirtualSelectedParentBlueScoreChangedRequestMessage notifyVirtualSelectedParentBlueScoreChangedRequest = 1056;
  bool has_notifyvirtualselectedparentbluescorechangedrequest() const;
  private:
  bool _internal_has_notifyvirtualselectedparentbluescorechangedrequest() const;
  public:
  void clear_notifyvirtualselectedparentbluescorechangedrequest();
  const ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage& notifyvirtualselectedparentbluescorechangedrequest() const;
  PROTOBUF_NODISCARD ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* release_notifyvirtualselectedparentbluescorechangedrequest();
  ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* mutable_notifyvirtualselectedparentbluescorechangedrequest();
  void set_allocated_notifyvirtualselectedparentbluescorechangedrequest(::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* notifyvirtualselectedparentbluescorechangedrequest);
  private:
  const ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage& _internal_notifyvirtualselectedparentbluescorechangedrequest() const;
  ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* _internal_mutable_notifyvirtualselectedparentbluescorechangedrequest();
  public:
  void unsafe_arena_set_allocated_notifyvirtualselectedparentbluescorechangedrequest(
      ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* notifyvirtualselectedparentbluescorechangedrequest);
  ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* unsafe_arena_release_notifyvirtualselectedparentbluescorechangedrequest();

  // .protowire.NotifyVirtualSelectedParentBlueScoreChangedResponseMessage notifyVirtualSelectedParentBlueScoreChangedResponse = 1057;
  bool has_notifyvirtualselectedparentbluescorechangedresponse() const;
  private:
  bool _internal_has_notifyvirtualselectedparentbluescorechangedresponse() const;
  public:
  void clear_notifyvirtualselectedparentbluescorechangedresponse();
  const ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage& notifyvirtualselectedparentbluescorechangedresponse() const;
  PROTOBUF_NODISCARD ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* release_notifyvirtualselectedparentbluescorechangedresponse();
  ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* mutable_notifyvirtualselectedparentbluescorechangedresponse();
  void set_allocated_notifyvirtualselectedparentbluescorechangedresponse(::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* notifyvirtualselectedparentbluescorechangedresponse);
  private:
  const ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage& _internal_notifyvirtualselectedparentbluescorechangedresponse() const;
  ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* _internal_mutable_notifyvirtualselectedparentbluescorechangedresponse();
  public:
  void unsafe_arena_set_allocated_notifyvirtualselectedparentbluescorechangedresponse(
      ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* notifyvirtualselectedparentbluescorechangedresponse);
  ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* unsafe_arena_release_notifyvirtualselectedparentbluescorechangedresponse();

  // .protowire.VirtualSelectedParentBlueScoreChangedNotificationMessage virtualSelectedParentBlueScoreChangedNotification = 1058;
  bool has_virtualselectedparentbluescorechangednotification() const;
  private:
  bool _internal_has_virtualselectedparentbluescorechangednotification() const;
  public:
  void clear_virtualselectedparentbluescorechangednotification();
  const ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage& virtualselectedparentbluescorechangednotification() const;
  PROTOBUF_NODISCARD ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* release_virtualselectedparentbluescorechangednotification();
  ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* mutable_virtualselectedparentbluescorechangednotification();
  void set_allocated_virtualselectedparentbluescorechangednotification(::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* virtualselectedparentbluescorechangednotification);
  private:
  const ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage& _internal_virtualselectedparentbluescorechangednotification() const;
  ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* _internal_mutable_virtualselectedparentbluescorechangednotification();
  public:
  void unsafe_arena_set_allocated_virtualselectedparentbluescorechangednotification(
      ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* virtualselectedparentbluescorechangednotification);
  ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* unsafe_arena_release_virtualselectedparentbluescorechangednotification();

  // .protowire.BanRequestMessage banRequest = 1059;
  bool has_banrequest() const;
  private:
  bool _internal_has_banrequest() const;
  public:
  void clear_banrequest();
  const ::protowire::BanRequestMessage& banrequest() const;
  PROTOBUF_NODISCARD ::protowire::BanRequestMessage* release_banrequest();
  ::protowire::BanRequestMessage* mutable_banrequest();
  void set_allocated_banrequest(::protowire::BanRequestMessage* banrequest);
  private:
  const ::protowire::BanRequestMessage& _internal_banrequest() const;
  ::protowire::BanRequestMessage* _internal_mutable_banrequest();
  public:
  void unsafe_arena_set_allocated_banrequest(
      ::protowire::BanRequestMessage* banrequest);
  ::protowire::BanRequestMessage* unsafe_arena_release_banrequest();

  // .protowire.BanResponseMessage banResponse = 1060;
  bool has_banresponse() const;
  private:
  bool _internal_has_banresponse() const;
  public:
  void clear_banresponse();
  const ::protowire::BanResponseMessage& banresponse() const;
  PROTOBUF_NODISCARD ::protowire::BanResponseMessage* release_banresponse();
  ::protowire::BanResponseMessage* mutable_banresponse();
  void set_allocated_banresponse(::protowire::BanResponseMessage* banresponse);
  private:
  const ::protowire::BanResponseMessage& _internal_banresponse() const;
  ::protowire::BanResponseMessage* _internal_mutable_banresponse();
  public:
  void unsafe_arena_set_allocated_banresponse(
      ::protowire::BanResponseMessage* banresponse);
  ::protowire::BanResponseMessage* unsafe_arena_release_banresponse();

  // .protowire.UnbanRequestMessage unbanRequest = 1061;
  bool has_unbanrequest() const;
  private:
  bool _internal_has_unbanrequest() const;
  public:
  void clear_unbanrequest();
  const ::protowire::UnbanRequestMessage& unbanrequest() const;
  PROTOBUF_NODISCARD ::protowire::UnbanRequestMessage* release_unbanrequest();
  ::protowire::UnbanRequestMessage* mutable_unbanrequest();
  void set_allocated_unbanrequest(::protowire::UnbanRequestMessage* unbanrequest);
  private:
  const ::protowire::UnbanRequestMessage& _internal_unbanrequest() const;
  ::protowire::UnbanRequestMessage* _internal_mutable_unbanrequest();
  public:
  void unsafe_arena_set_allocated_unbanrequest(
      ::protowire::UnbanRequestMessage* unbanrequest);
  ::protowire::UnbanRequestMessage* unsafe_arena_release_unbanrequest();

  // .protowire.UnbanResponseMessage unbanResponse = 1062;
  bool has_unbanresponse() const;
  private:
  bool _internal_has_unbanresponse() const;
  public:
  void clear_unbanresponse();
  const ::protowire::UnbanResponseMessage& unbanresponse() const;
  PROTOBUF_NODISCARD ::protowire::UnbanResponseMessage* release_unbanresponse();
  ::protowire::UnbanResponseMessage* mutable_unbanresponse();
  void set_allocated_unbanresponse(::protowire::UnbanResponseMessage* unbanresponse);
  private:
  const ::protowire::UnbanResponseMessage& _internal_unbanresponse() const;
  ::protowire::UnbanResponseMessage* _internal_mutable_unbanresponse();
  public:
  void unsafe_arena_set_allocated_unbanresponse(
      ::protowire::UnbanResponseMessage* unbanresponse);
  ::protowire::UnbanResponseMessage* unsafe_arena_release_unbanresponse();

  // .protowire.GetInfoRequestMessage getInfoRequest = 1063;
  bool has_getinforequest() const;
  private:
  bool _internal_has_getinforequest() const;
  public:
  void clear_getinforequest();
  const ::protowire::GetInfoRequestMessage& getinforequest() const;
  PROTOBUF_NODISCARD ::protowire::GetInfoRequestMessage* release_getinforequest();
  ::protowire::GetInfoRequestMessage* mutable_getinforequest();
  void set_allocated_getinforequest(::protowire::GetInfoRequestMessage* getinforequest);
  private:
  const ::protowire::GetInfoRequestMessage& _internal_getinforequest() const;
  ::protowire::GetInfoRequestMessage* _internal_mutable_getinforequest();
  public:
  void unsafe_arena_set_allocated_getinforequest(
      ::protowire::GetInfoRequestMessage* getinforequest);
  ::protowire::GetInfoRequestMessage* unsafe_arena_release_getinforequest();

  // .protowire.GetInfoResponseMessage getInfoResponse = 1064;
  bool has_getinforesponse() const;
  private:
  bool _internal_has_getinforesponse() const;
  public:
  void clear_getinforesponse();
  const ::protowire::GetInfoResponseMessage& getinforesponse() const;
  PROTOBUF_NODISCARD ::protowire::GetInfoResponseMessage* release_getinforesponse();
  ::protowire::GetInfoResponseMessage* mutable_getinforesponse();
  void set_allocated_getinforesponse(::protowire::GetInfoResponseMessage* getinforesponse);
  private:
  const ::protowire::GetInfoResponseMessage& _internal_getinforesponse() const;
  ::protowire::GetInfoResponseMessage* _internal_mutable_getinforesponse();
  public:
  void unsafe_arena_set_allocated_getinforesponse(
      ::protowire::GetInfoResponseMessage* getinforesponse);
  ::protowire::GetInfoResponseMessage* unsafe_arena_release_getinforesponse();

  // .protowire.StopNotifyingUtxosChangedRequestMessage stopNotifyingUtxosChangedRequest = 1065;
  bool has_stopnotifyingutxoschangedrequest() const;
  private:
  bool _internal_has_stopnotifyingutxoschangedrequest() const;
  public:
  void clear_stopnotifyingutxoschangedrequest();
  const ::protowire::StopNotifyingUtxosChangedRequestMessage& stopnotifyingutxoschangedrequest() const;
  PROTOBUF_NODISCARD ::protowire::StopNotifyingUtxosChangedRequestMessage* release_stopnotifyingutxoschangedrequest();
  ::protowire::StopNotifyingUtxosChangedRequestMessage* mutable_stopnotifyingutxoschangedrequest();
  void set_allocated_stopnotifyingutxoschangedrequest(::protowire::StopNotifyingUtxosChangedRequestMessage* stopnotifyingutxoschangedrequest);
  private:
  const ::protowire::StopNotifyingUtxosChangedRequestMessage& _internal_stopnotifyingutxoschangedrequest() const;
  ::protowire::StopNotifyingUtxosChangedRequestMessage* _internal_mutable_stopnotifyingutxoschangedrequest();
  public:
  void unsafe_arena_set_allocated_stopnotifyingutxoschangedrequest(
      ::protowire::StopNotifyingUtxosChangedRequestMessage* stopnotifyingutxoschangedrequest);
  ::protowire::StopNotifyingUtxosChangedRequestMessage* unsafe_arena_release_stopnotifyingutxoschangedrequest();

  // .protowire.StopNotifyingUtxosChangedResponseMessage stopNotifyingUtxosChangedResponse = 1066;
  bool has_stopnotifyingutxoschangedresponse() const;
  private:
  bool _internal_has_stopnotifyingutxoschangedresponse() const;
  public:
  void clear_stopnotifyingutxoschangedresponse();
  const ::protowire::StopNotifyingUtxosChangedResponseMessage& stopnotifyingutxoschangedresponse() const;
  PROTOBUF_NODISCARD ::protowire::StopNotifyingUtxosChangedResponseMessage* release_stopnotifyingutxoschangedresponse();
  ::protowire::StopNotifyingUtxosChangedResponseMessage* mutable_stopnotifyingutxoschangedresponse();
  void set_allocated_stopnotifyingutxoschangedresponse(::protowire::StopNotifyingUtxosChangedResponseMessage* stopnotifyingutxoschangedresponse);
  private:
  const ::protowire::StopNotifyingUtxosChangedResponseMessage& _internal_stopnotifyingutxoschangedresponse() const;
  ::protowire::StopNotifyingUtxosChangedResponseMessage* _internal_mutable_stopnotifyingutxoschangedresponse();
  public:
  void unsafe_arena_set_allocated_stopnotifyingutxoschangedresponse(
      ::protowire::StopNotifyingUtxosChangedResponseMessage* stopnotifyingutxoschangedresponse);
  ::protowire::StopNotifyingUtxosChangedResponseMessage* unsafe_arena_release_stopnotifyingutxoschangedresponse();

  // .protowire.NotifyPruningPointUTXOSetOverrideRequestMessage notifyPruningPointUTXOSetOverrideRequest = 1067;
  bool has_notifypruningpointutxosetoverriderequest() const;
  private:
  bool _internal_has_notifypruningpointutxosetoverriderequest() const;
  public:
  void clear_notifypruningpointutxosetoverriderequest();
  const ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage& notifypruningpointutxosetoverriderequest() const;
  PROTOBUF_NODISCARD ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* release_notifypruningpointutxosetoverriderequest();
  ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* mutable_notifypruningpointutxosetoverriderequest();
  void set_allocated_notifypruningpointutxosetoverriderequest(::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* notifypruningpointutxosetoverriderequest);
  private:
  const ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage& _internal_notifypruningpointutxosetoverriderequest() const;
  ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* _internal_mutable_notifypruningpointutxosetoverriderequest();
  public:
  void unsafe_arena_set_allocated_notifypruningpointutxosetoverriderequest(
      ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* notifypruningpointutxosetoverriderequest);
  ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* unsafe_arena_release_notifypruningpointutxosetoverriderequest();

  // .protowire.NotifyPruningPointUTXOSetOverrideResponseMessage notifyPruningPointUTXOSetOverrideResponse = 1068;
  bool has_notifypruningpointutxosetoverrideresponse() const;
  private:
  bool _internal_has_notifypruningpointutxosetoverrideresponse() const;
  public:
  void clear_notifypruningpointutxosetoverrideresponse();
  const ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage& notifypruningpointutxosetoverrideresponse() const;
  PROTOBUF_NODISCARD ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* release_notifypruningpointutxosetoverrideresponse();
  ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* mutable_notifypruningpointutxosetoverrideresponse();
  void set_allocated_notifypruningpointutxosetoverrideresponse(::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* notifypruningpointutxosetoverrideresponse);
  private:
  const ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage& _internal_notifypruningpointutxosetoverrideresponse() const;
  ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* _internal_mutable_notifypruningpointutxosetoverrideresponse();
  public:
  void unsafe_arena_set_allocated_notifypruningpointutxosetoverrideresponse(
      ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* notifypruningpointutxosetoverrideresponse);
  ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* unsafe_arena_release_notifypruningpointutxosetoverrideresponse();

  // .protowire.PruningPointUTXOSetOverrideNotificationMessage pruningPointUTXOSetOverrideNotification = 1069;
  bool has_pruningpointutxosetoverridenotification() const;
  private:
  bool _internal_has_pruningpointutxosetoverridenotification() const;
  public:
  void clear_pruningpointutxosetoverridenotification();
  const ::protowire::PruningPointUTXOSetOverrideNotificationMessage& pruningpointutxosetoverridenotification() const;
  PROTOBUF_NODISCARD ::protowire::PruningPointUTXOSetOverrideNotificationMessage* release_pruningpointutxosetoverridenotification();
  ::protowire::PruningPointUTXOSetOverrideNotificationMessage* mutable_pruningpointutxosetoverridenotification();
  void set_allocated_pruningpointutxosetoverridenotification(::protowire::PruningPointUTXOSetOverrideNotificationMessage* pruningpointutxosetoverridenotification);
  private:
  const ::protowire::PruningPointUTXOSetOverrideNotificationMessage& _internal_pruningpointutxosetoverridenotification() const;
  ::protowire::PruningPointUTXOSetOverrideNotificationMessage* _internal_mutable_pruningpointutxosetoverridenotification();
  public:
  void unsafe_arena_set_allocated_pruningpointutxosetoverridenotification(
      ::protowire::PruningPointUTXOSetOverrideNotificationMessage* pruningpointutxosetoverridenotification);
  ::protowire::PruningPointUTXOSetOverrideNotificationMessage* unsafe_arena_release_pruningpointutxosetoverridenotification();

  // .protowire.StopNotifyingPruningPointUTXOSetOverrideRequestMessage stopNotifyingPruningPointUTXOSetOverrideRequest = 1070;
  bool has_stopnotifyingpruningpointutxosetoverriderequest() const;
  private:
  bool _internal_has_stopnotifyingpruningpointutxosetoverriderequest() const;
  public:
  void clear_stopnotifyingpruningpointutxosetoverriderequest();
  const ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage& stopnotifyingpruningpointutxosetoverriderequest() const;
  PROTOBUF_NODISCARD ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* release_stopnotifyingpruningpointutxosetoverriderequest();
  ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* mutable_stopnotifyingpruningpointutxosetoverriderequest();
  void set_allocated_stopnotifyingpruningpointutxosetoverriderequest(::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* stopnotifyingpruningpointutxosetoverriderequest);
  private:
  const ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage& _internal_stopnotifyingpruningpointutxosetoverriderequest() const;
  ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* _internal_mutable_stopnotifyingpruningpointutxosetoverriderequest();
  public:
  void unsafe_arena_set_allocated_stopnotifyingpruningpointutxosetoverriderequest(
      ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* stopnotifyingpruningpointutxosetoverriderequest);
  ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* unsafe_arena_release_stopnotifyingpruningpointutxosetoverriderequest();

  // .protowire.StopNotifyingPruningPointUTXOSetOverrideResponseMessage stopNotifyingPruningPointUTXOSetOverrideResponse = 1071;
  bool has_stopnotifyingpruningpointutxosetoverrideresponse() const;
  private:
  bool _internal_has_stopnotifyingpruningpointutxosetoverrideresponse() const;
  public:
  void clear_stopnotifyingpruningpointutxosetoverrideresponse();
  const ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage& stopnotifyingpruningpointutxosetoverrideresponse() const;
  PROTOBUF_NODISCARD ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* release_stopnotifyingpruningpointutxosetoverrideresponse();
  ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* mutable_stopnotifyingpruningpointutxosetoverrideresponse();
  void set_allocated_stopnotifyingpruningpointutxosetoverrideresponse(::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* stopnotifyingpruningpointutxosetoverrideresponse);
  private:
  const ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage& _internal_stopnotifyingpruningpointutxosetoverrideresponse() const;
  ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* _internal_mutable_stopnotifyingpruningpointutxosetoverrideresponse();
  public:
  void unsafe_arena_set_allocated_stopnotifyingpruningpointutxosetoverrideresponse(
      ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* stopnotifyingpruningpointutxosetoverrideresponse);
  ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* unsafe_arena_release_stopnotifyingpruningpointutxosetoverrideresponse();

  // .protowire.EstimateNetworkHashesPerSecondRequestMessage estimateNetworkHashesPerSecondRequest = 1072;
  bool has_estimatenetworkhashespersecondrequest() const;
  private:
  bool _internal_has_estimatenetworkhashespersecondrequest() const;
  public:
  void clear_estimatenetworkhashespersecondrequest();
  const ::protowire::EstimateNetworkHashesPerSecondRequestMessage& estimatenetworkhashespersecondrequest() const;
  PROTOBUF_NODISCARD ::protowire::EstimateNetworkHashesPerSecondRequestMessage* release_estimatenetworkhashespersecondrequest();
  ::protowire::EstimateNetworkHashesPerSecondRequestMessage* mutable_estimatenetworkhashespersecondrequest();
  void set_allocated_estimatenetworkhashespersecondrequest(::protowire::EstimateNetworkHashesPerSecondRequestMessage* estimatenetworkhashespersecondrequest);
  private:
  const ::protowire::EstimateNetworkHashesPerSecondRequestMessage& _internal_estimatenetworkhashespersecondrequest() const;
  ::protowire::EstimateNetworkHashesPerSecondRequestMessage* _internal_mutable_estimatenetworkhashespersecondrequest();
  public:
  void unsafe_arena_set_allocated_estimatenetworkhashespersecondrequest(
      ::protowire::EstimateNetworkHashesPerSecondRequestMessage* estimatenetworkhashespersecondrequest);
  ::protowire::EstimateNetworkHashesPerSecondRequestMessage* unsafe_arena_release_estimatenetworkhashespersecondrequest();

  // .protowire.EstimateNetworkHashesPerSecondResponseMessage estimateNetworkHashesPerSecondResponse = 1073;
  bool has_estimatenetworkhashespersecondresponse() const;
  private:
  bool _internal_has_estimatenetworkhashespersecondresponse() const;
  public:
  void clear_estimatenetworkhashespersecondresponse();
  const ::protowire::EstimateNetworkHashesPerSecondResponseMessage& estimatenetworkhashespersecondresponse() const;
  PROTOBUF_NODISCARD ::protowire::EstimateNetworkHashesPerSecondResponseMessage* release_estimatenetworkhashespersecondresponse();
  ::protowire::EstimateNetworkHashesPerSecondResponseMessage* mutable_estimatenetworkhashespersecondresponse();
  void set_allocated_estimatenetworkhashespersecondresponse(::protowire::EstimateNetworkHashesPerSecondResponseMessage* estimatenetworkhashespersecondresponse);
  private:
  const ::protowire::EstimateNetworkHashesPerSecondResponseMessage& _internal_estimatenetworkhashespersecondresponse() const;
  ::protowire::EstimateNetworkHashesPerSecondResponseMessage* _internal_mutable_estimatenetworkhashespersecondresponse();
  public:
  void unsafe_arena_set_allocated_estimatenetworkhashespersecondresponse(
      ::protowire::EstimateNetworkHashesPerSecondResponseMessage* estimatenetworkhashespersecondresponse);
  ::protowire::EstimateNetworkHashesPerSecondResponseMessage* unsafe_arena_release_estimatenetworkhashespersecondresponse();

  // .protowire.NotifyVirtualDaaScoreChangedRequestMessage notifyVirtualDaaScoreChangedRequest = 1074;
  bool has_notifyvirtualdaascorechangedrequest() const;
  private:
  bool _internal_has_notifyvirtualdaascorechangedrequest() const;
  public:
  void clear_notifyvirtualdaascorechangedrequest();
  const ::protowire::NotifyVirtualDaaScoreChangedRequestMessage& notifyvirtualdaascorechangedrequest() const;
  PROTOBUF_NODISCARD ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* release_notifyvirtualdaascorechangedrequest();
  ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* mutable_notifyvirtualdaascorechangedrequest();
  void set_allocated_notifyvirtualdaascorechangedrequest(::protowire::NotifyVirtualDaaScoreChangedRequestMessage* notifyvirtualdaascorechangedrequest);
  private:
  const ::protowire::NotifyVirtualDaaScoreChangedRequestMessage& _internal_notifyvirtualdaascorechangedrequest() const;
  ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* _internal_mutable_notifyvirtualdaascorechangedrequest();
  public:
  void unsafe_arena_set_allocated_notifyvirtualdaascorechangedrequest(
      ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* notifyvirtualdaascorechangedrequest);
  ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* unsafe_arena_release_notifyvirtualdaascorechangedrequest();

  // .protowire.NotifyVirtualDaaScoreChangedResponseMessage notifyVirtualDaaScoreChangedResponse = 1075;
  bool has_notifyvirtualdaascorechangedresponse() const;
  private:
  bool _internal_has_notifyvirtualdaascorechangedresponse() const;
  public:
  void clear_notifyvirtualdaascorechangedresponse();
  const ::protowire::NotifyVirtualDaaScoreChangedResponseMessage& notifyvirtualdaascorechangedresponse() const;
  PROTOBUF_NODISCARD ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* release_notifyvirtualdaascorechangedresponse();
  ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* mutable_notifyvirtualdaascorechangedresponse();
  void set_allocated_notifyvirtualdaascorechangedresponse(::protowire::NotifyVirtualDaaScoreChangedResponseMessage* notifyvirtualdaascorechangedresponse);
  private:
  const ::protowire::NotifyVirtualDaaScoreChangedResponseMessage& _internal_notifyvirtualdaascorechangedresponse() const;
  ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* _internal_mutable_notifyvirtualdaascorechangedresponse();
  public:
  void unsafe_arena_set_allocated_notifyvirtualdaascorechangedresponse(
      ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* notifyvirtualdaascorechangedresponse);
  ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* unsafe_arena_release_notifyvirtualdaascorechangedresponse();

  // .protowire.VirtualDaaScoreChangedNotificationMessage virtualDaaScoreChangedNotification = 1076;
  bool has_virtualdaascorechangednotification() const;
  private:
  bool _internal_has_virtualdaascorechangednotification() const;
  public:
  void clear_virtualdaascorechangednotification();
  const ::protowire::VirtualDaaScoreChangedNotificationMessage& virtualdaascorechangednotification() const;
  PROTOBUF_NODISCARD ::protowire::VirtualDaaScoreChangedNotificationMessage* release_virtualdaascorechangednotification();
  ::protowire::VirtualDaaScoreChangedNotificationMessage* mutable_virtualdaascorechangednotification();
  void set_allocated_virtualdaascorechangednotification(::protowire::VirtualDaaScoreChangedNotificationMessage* virtualdaascorechangednotification);
  private:
  const ::protowire::VirtualDaaScoreChangedNotificationMessage& _internal_virtualdaascorechangednotification() const;
  ::protowire::VirtualDaaScoreChangedNotificationMessage* _internal_mutable_virtualdaascorechangednotification();
  public:
  void unsafe_arena_set_allocated_virtualdaascorechangednotification(
      ::protowire::VirtualDaaScoreChangedNotificationMessage* virtualdaascorechangednotification);
  ::protowire::VirtualDaaScoreChangedNotificationMessage* unsafe_arena_release_virtualdaascorechangednotification();

  // .protowire.GetBalanceByAddressRequestMessage getBalanceByAddressRequest = 1077;
  bool has_getbalancebyaddressrequest() const;
  private:
  bool _internal_has_getbalancebyaddressrequest() const;
  public:
  void clear_getbalancebyaddressrequest();
  const ::protowire::GetBalanceByAddressRequestMessage& getbalancebyaddressrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetBalanceByAddressRequestMessage* release_getbalancebyaddressrequest();
  ::protowire::GetBalanceByAddressRequestMessage* mutable_getbalancebyaddressrequest();
  void set_allocated_getbalancebyaddressrequest(::protowire::GetBalanceByAddressRequestMessage* getbalancebyaddressrequest);
  private:
  const ::protowire::GetBalanceByAddressRequestMessage& _internal_getbalancebyaddressrequest() const;
  ::protowire::GetBalanceByAddressRequestMessage* _internal_mutable_getbalancebyaddressrequest();
  public:
  void unsafe_arena_set_allocated_getbalancebyaddressrequest(
      ::protowire::GetBalanceByAddressRequestMessage* getbalancebyaddressrequest);
  ::protowire::GetBalanceByAddressRequestMessage* unsafe_arena_release_getbalancebyaddressrequest();

  // .protowire.GetBalanceByAddressResponseMessage getBalanceByAddressResponse = 1078;
  bool has_getbalancebyaddressresponse() const;
  private:
  bool _internal_has_getbalancebyaddressresponse() const;
  public:
  void clear_getbalancebyaddressresponse();
  const ::protowire::GetBalanceByAddressResponseMessage& getbalancebyaddressresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetBalanceByAddressResponseMessage* release_getbalancebyaddressresponse();
  ::protowire::GetBalanceByAddressResponseMessage* mutable_getbalancebyaddressresponse();
  void set_allocated_getbalancebyaddressresponse(::protowire::GetBalanceByAddressResponseMessage* getbalancebyaddressresponse);
  private:
  const ::protowire::GetBalanceByAddressResponseMessage& _internal_getbalancebyaddressresponse() const;
  ::protowire::GetBalanceByAddressResponseMessage* _internal_mutable_getbalancebyaddressresponse();
  public:
  void unsafe_arena_set_allocated_getbalancebyaddressresponse(
      ::protowire::GetBalanceByAddressResponseMessage* getbalancebyaddressresponse);
  ::protowire::GetBalanceByAddressResponseMessage* unsafe_arena_release_getbalancebyaddressresponse();

  // .protowire.GetBalancesByAddressesRequestMessage getBalancesByAddressesRequest = 1079;
  bool has_getbalancesbyaddressesrequest() const;
  private:
  bool _internal_has_getbalancesbyaddressesrequest() const;
  public:
  void clear_getbalancesbyaddressesrequest();
  const ::protowire::GetBalancesByAddressesRequestMessage& getbalancesbyaddressesrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetBalancesByAddressesRequestMessage* release_getbalancesbyaddressesrequest();
  ::protowire::GetBalancesByAddressesRequestMessage* mutable_getbalancesbyaddressesrequest();
  void set_allocated_getbalancesbyaddressesrequest(::protowire::GetBalancesByAddressesRequestMessage* getbalancesbyaddressesrequest);
  private:
  const ::protowire::GetBalancesByAddressesRequestMessage& _internal_getbalancesbyaddressesrequest() const;
  ::protowire::GetBalancesByAddressesRequestMessage* _internal_mutable_getbalancesbyaddressesrequest();
  public:
  void unsafe_arena_set_allocated_getbalancesbyaddressesrequest(
      ::protowire::GetBalancesByAddressesRequestMessage* getbalancesbyaddressesrequest);
  ::protowire::GetBalancesByAddressesRequestMessage* unsafe_arena_release_getbalancesbyaddressesrequest();

  // .protowire.GetBalancesByAddressesResponseMessage getBalancesByAddressesResponse = 1080;
  bool has_getbalancesbyaddressesresponse() const;
  private:
  bool _internal_has_getbalancesbyaddressesresponse() const;
  public:
  void clear_getbalancesbyaddressesresponse();
  const ::protowire::GetBalancesByAddressesResponseMessage& getbalancesbyaddressesresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetBalancesByAddressesResponseMessage* release_getbalancesbyaddressesresponse();
  ::protowire::GetBalancesByAddressesResponseMessage* mutable_getbalancesbyaddressesresponse();
  void set_allocated_getbalancesbyaddressesresponse(::protowire::GetBalancesByAddressesResponseMessage* getbalancesbyaddressesresponse);
  private:
  const ::protowire::GetBalancesByAddressesResponseMessage& _internal_getbalancesbyaddressesresponse() const;
  ::protowire::GetBalancesByAddressesResponseMessage* _internal_mutable_getbalancesbyaddressesresponse();
  public:
  void unsafe_arena_set_allocated_getbalancesbyaddressesresponse(
      ::protowire::GetBalancesByAddressesResponseMessage* getbalancesbyaddressesresponse);
  ::protowire::GetBalancesByAddressesResponseMessage* unsafe_arena_release_getbalancesbyaddressesresponse();

  // .protowire.NotifyNewBlockTemplateRequestMessage notifyNewBlockTemplateRequest = 1081;
  bool has_notifynewblocktemplaterequest() const;
  private:
  bool _internal_has_notifynewblocktemplaterequest() const;
  public:
  void clear_notifynewblocktemplaterequest();
  const ::protowire::NotifyNewBlockTemplateRequestMessage& notifynewblocktemplaterequest() const;
  PROTOBUF_NODISCARD ::protowire::NotifyNewBlockTemplateRequestMessage* release_notifynewblocktemplaterequest();
  ::protowire::NotifyNewBlockTemplateRequestMessage* mutable_notifynewblocktemplaterequest();
  void set_allocated_notifynewblocktemplaterequest(::protowire::NotifyNewBlockTemplateRequestMessage* notifynewblocktemplaterequest);
  private:
  const ::protowire::NotifyNewBlockTemplateRequestMessage& _internal_notifynewblocktemplaterequest() const;
  ::protowire::NotifyNewBlockTemplateRequestMessage* _internal_mutable_notifynewblocktemplaterequest();
  public:
  void unsafe_arena_set_allocated_notifynewblocktemplaterequest(
      ::protowire::NotifyNewBlockTemplateRequestMessage* notifynewblocktemplaterequest);
  ::protowire::NotifyNewBlockTemplateRequestMessage* unsafe_arena_release_notifynewblocktemplaterequest();

  // .protowire.NotifyNewBlockTemplateResponseMessage notifyNewBlockTemplateResponse = 1082;
  bool has_notifynewblocktemplateresponse() const;
  private:
  bool _internal_has_notifynewblocktemplateresponse() const;
  public:
  void clear_notifynewblocktemplateresponse();
  const ::protowire::NotifyNewBlockTemplateResponseMessage& notifynewblocktemplateresponse() const;
  PROTOBUF_NODISCARD ::protowire::NotifyNewBlockTemplateResponseMessage* release_notifynewblocktemplateresponse();
  ::protowire::NotifyNewBlockTemplateResponseMessage* mutable_notifynewblocktemplateresponse();
  void set_allocated_notifynewblocktemplateresponse(::protowire::NotifyNewBlockTemplateResponseMessage* notifynewblocktemplateresponse);
  private:
  const ::protowire::NotifyNewBlockTemplateResponseMessage& _internal_notifynewblocktemplateresponse() const;
  ::protowire::NotifyNewBlockTemplateResponseMessage* _internal_mutable_notifynewblocktemplateresponse();
  public:
  void unsafe_arena_set_allocated_notifynewblocktemplateresponse(
      ::protowire::NotifyNewBlockTemplateResponseMessage* notifynewblocktemplateresponse);
  ::protowire::NotifyNewBlockTemplateResponseMessage* unsafe_arena_release_notifynewblocktemplateresponse();

  // .protowire.NewBlockTemplateNotificationMessage newBlockTemplateNotification = 1083;
  bool has_newblocktemplatenotification() const;
  private:
  bool _internal_has_newblocktemplatenotification() const;
  public:
  void clear_newblocktemplatenotification();
  const ::protowire::NewBlockTemplateNotificationMessage& newblocktemplatenotification() const;
  PROTOBUF_NODISCARD ::protowire::NewBlockTemplateNotificationMessage* release_newblocktemplatenotification();
  ::protowire::NewBlockTemplateNotificationMessage* mutable_newblocktemplatenotification();
  void set_allocated_newblocktemplatenotification(::protowire::NewBlockTemplateNotificationMessage* newblocktemplatenotification);
  private:
  const ::protowire::NewBlockTemplateNotificationMessage& _internal_newblocktemplatenotification() const;
  ::protowire::NewBlockTemplateNotificationMessage* _internal_mutable_newblocktemplatenotification();
  public:
  void unsafe_arena_set_allocated_newblocktemplatenotification(
      ::protowire::NewBlockTemplateNotificationMessage* newblocktemplatenotification);
  ::protowire::NewBlockTemplateNotificationMessage* unsafe_arena_release_newblocktemplatenotification();

  // .protowire.GetMempoolEntriesByAddressesRequestMessage getMempoolEntriesByAddressesRequest = 1084;
  bool has_getmempoolentriesbyaddressesrequest() const;
  private:
  bool _internal_has_getmempoolentriesbyaddressesrequest() const;
  public:
  void clear_getmempoolentriesbyaddressesrequest();
  const ::protowire::GetMempoolEntriesByAddressesRequestMessage& getmempoolentriesbyaddressesrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetMempoolEntriesByAddressesRequestMessage* release_getmempoolentriesbyaddressesrequest();
  ::protowire::GetMempoolEntriesByAddressesRequestMessage* mutable_getmempoolentriesbyaddressesrequest();
  void set_allocated_getmempoolentriesbyaddressesrequest(::protowire::GetMempoolEntriesByAddressesRequestMessage* getmempoolentriesbyaddressesrequest);
  private:
  const ::protowire::GetMempoolEntriesByAddressesRequestMessage& _internal_getmempoolentriesbyaddressesrequest() const;
  ::protowire::GetMempoolEntriesByAddressesRequestMessage* _internal_mutable_getmempoolentriesbyaddressesrequest();
  public:
  void unsafe_arena_set_allocated_getmempoolentriesbyaddressesrequest(
      ::protowire::GetMempoolEntriesByAddressesRequestMessage* getmempoolentriesbyaddressesrequest);
  ::protowire::GetMempoolEntriesByAddressesRequestMessage* unsafe_arena_release_getmempoolentriesbyaddressesrequest();

  // .protowire.GetMempoolEntriesByAddressesResponseMessage getMempoolEntriesByAddressesResponse = 1085;
  bool has_getmempoolentriesbyaddressesresponse() const;
  private:
  bool _internal_has_getmempoolentriesbyaddressesresponse() const;
  public:
  void clear_getmempoolentriesbyaddressesresponse();
  const ::protowire::GetMempoolEntriesByAddressesResponseMessage& getmempoolentriesbyaddressesresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetMempoolEntriesByAddressesResponseMessage* release_getmempoolentriesbyaddressesresponse();
  ::protowire::GetMempoolEntriesByAddressesResponseMessage* mutable_getmempoolentriesbyaddressesresponse();
  void set_allocated_getmempoolentriesbyaddressesresponse(::protowire::GetMempoolEntriesByAddressesResponseMessage* getmempoolentriesbyaddressesresponse);
  private:
  const ::protowire::GetMempoolEntriesByAddressesResponseMessage& _internal_getmempoolentriesbyaddressesresponse() const;
  ::protowire::GetMempoolEntriesByAddressesResponseMessage* _internal_mutable_getmempoolentriesbyaddressesresponse();
  public:
  void unsafe_arena_set_allocated_getmempoolentriesbyaddressesresponse(
      ::protowire::GetMempoolEntriesByAddressesResponseMessage* getmempoolentriesbyaddressesresponse);
  ::protowire::GetMempoolEntriesByAddressesResponseMessage* unsafe_arena_release_getmempoolentriesbyaddressesresponse();

  // .protowire.GetCoinSupplyRequestMessage getCoinSupplyRequest = 1086;
  bool has_getcoinsupplyrequest() const;
  private:
  bool _internal_has_getcoinsupplyrequest() const;
  public:
  void clear_getcoinsupplyrequest();
  const ::protowire::GetCoinSupplyRequestMessage& getcoinsupplyrequest() const;
  PROTOBUF_NODISCARD ::protowire::GetCoinSupplyRequestMessage* release_getcoinsupplyrequest();
  ::protowire::GetCoinSupplyRequestMessage* mutable_getcoinsupplyrequest();
  void set_allocated_getcoinsupplyrequest(::protowire::GetCoinSupplyRequestMessage* getcoinsupplyrequest);
  private:
  const ::protowire::GetCoinSupplyRequestMessage& _internal_getcoinsupplyrequest() const;
  ::protowire::GetCoinSupplyRequestMessage* _internal_mutable_getcoinsupplyrequest();
  public:
  void unsafe_arena_set_allocated_getcoinsupplyrequest(
      ::protowire::GetCoinSupplyRequestMessage* getcoinsupplyrequest);
  ::protowire::GetCoinSupplyRequestMessage* unsafe_arena_release_getcoinsupplyrequest();

  // .protowire.GetCoinSupplyResponseMessage getCoinSupplyResponse = 1087;
  bool has_getcoinsupplyresponse() const;
  private:
  bool _internal_has_getcoinsupplyresponse() const;
  public:
  void clear_getcoinsupplyresponse();
  const ::protowire::GetCoinSupplyResponseMessage& getcoinsupplyresponse() const;
  PROTOBUF_NODISCARD ::protowire::GetCoinSupplyResponseMessage* release_getcoinsupplyresponse();
  ::protowire::GetCoinSupplyResponseMessage* mutable_getcoinsupplyresponse();
  void set_allocated_getcoinsupplyresponse(::protowire::GetCoinSupplyResponseMessage* getcoinsupplyresponse);
  private:
  const ::protowire::GetCoinSupplyResponseMessage& _internal_getcoinsupplyresponse() const;
  ::protowire::GetCoinSupplyResponseMessage* _internal_mutable_getcoinsupplyresponse();
  public:
  void unsafe_arena_set_allocated_getcoinsupplyresponse(
      ::protowire::GetCoinSupplyResponseMessage* getcoinsupplyresponse);
  ::protowire::GetCoinSupplyResponseMessage* unsafe_arena_release_getcoinsupplyresponse();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:protowire.KaspadMessage)
 private:
  class _Internal;
  void set_has_addresses();
  void set_has_block();
  void set_has_transaction();
  void set_has_blocklocator();
  void set_has_requestaddresses();
  void set_has_requestrelayblocks();
  void set_has_requesttransactions();
  void set_has_ibdblock();
  void set_has_invrelayblock();
  void set_has_invtransactions();
  void set_has_ping();
  void set_has_pong();
  void set_has_verack();
  void set_has_version();
  void set_has_transactionnotfound();
  void set_has_reject();
  void set_has_pruningpointutxosetchunk();
  void set_has_requestibdblocks();
  void set_has_unexpectedpruningpoint();
  void set_has_ibdblocklocator();
  void set_has_ibdblocklocatorhighesthash();
  void set_has_requestnextpruningpointutxosetchunk();
  void set_has_donepruningpointutxosetchunks();
  void set_has_ibdblocklocatorhighesthashnotfound();
  void set_has_blockwithtrusteddata();
  void set_has_doneblockswithtrusteddata();
  void set_has_requestpruningpointanditsanticone();
  void set_has_blockheaders();
  void set_has_requestnextheaders();
  void set_has_doneheaders();
  void set_has_requestpruningpointutxoset();
  void set_has_requestheaders();
  void set_has_requestblocklocator();
  void set_has_pruningpoints();
  void set_has_requestpruningpointproof();
  void set_has_pruningpointproof();
  void set_has_ready();
  void set_has_blockwithtrusteddatav4();
  void set_has_trusteddata();
  void set_has_requestibdchainblocklocator();
  void set_has_ibdchainblocklocator();
  void set_has_requestanticone();
  void set_has_requestnextpruningpointanditsanticoneblocks();
  void set_has_getcurrentnetworkrequest();
  void set_has_getcurrentnetworkresponse();
  void set_has_submitblockrequest();
  void set_has_submitblockresponse();
  void set_has_getblocktemplaterequest();
  void set_has_getblocktemplateresponse();
  void set_has_notifyblockaddedrequest();
  void set_has_notifyblockaddedresponse();
  void set_has_blockaddednotification();
  void set_has_getpeeraddressesrequest();
  void set_has_getpeeraddressesresponse();
  void set_has_getselectedtiphashrequest();
  void set_has_getselectedtiphashresponse();
  void set_has_getmempoolentryrequest();
  void set_has_getmempoolentryresponse();
  void set_has_getconnectedpeerinforequest();
  void set_has_getconnectedpeerinforesponse();
  void set_has_addpeerrequest();
  void set_has_addpeerresponse();
  void set_has_submittransactionrequest();
  void set_has_submittransactionresponse();
  void set_has_notifyvirtualselectedparentchainchangedrequest();
  void set_has_notifyvirtualselectedparentchainchangedresponse();
  void set_has_virtualselectedparentchainchangednotification();
  void set_has_getblockrequest();
  void set_has_getblockresponse();
  void set_has_getsubnetworkrequest();
  void set_has_getsubnetworkresponse();
  void set_has_getvirtualselectedparentchainfromblockrequest();
  void set_has_getvirtualselectedparentchainfromblockresponse();
  void set_has_getblocksrequest();
  void set_has_getblocksresponse();
  void set_has_getblockcountrequest();
  void set_has_getblockcountresponse();
  void set_has_getblockdaginforequest();
  void set_has_getblockdaginforesponse();
  void set_has_resolvefinalityconflictrequest();
  void set_has_resolvefinalityconflictresponse();
  void set_has_notifyfinalityconflictsrequest();
  void set_has_notifyfinalityconflictsresponse();
  void set_has_finalityconflictnotification();
  void set_has_finalityconflictresolvednotification();
  void set_has_getmempoolentriesrequest();
  void set_has_getmempoolentriesresponse();
  void set_has_shutdownrequest();
  void set_has_shutdownresponse();
  void set_has_getheadersrequest();
  void set_has_getheadersresponse();
  void set_has_notifyutxoschangedrequest();
  void set_has_notifyutxoschangedresponse();
  void set_has_utxoschangednotification();
  void set_has_getutxosbyaddressesrequest();
  void set_has_getutxosbyaddressesresponse();
  void set_has_getvirtualselectedparentbluescorerequest();
  void set_has_getvirtualselectedparentbluescoreresponse();
  void set_has_notifyvirtualselectedparentbluescorechangedrequest();
  void set_has_notifyvirtualselectedparentbluescorechangedresponse();
  void set_has_virtualselectedparentbluescorechangednotification();
  void set_has_banrequest();
  void set_has_banresponse();
  void set_has_unbanrequest();
  void set_has_unbanresponse();
  void set_has_getinforequest();
  void set_has_getinforesponse();
  void set_has_stopnotifyingutxoschangedrequest();
  void set_has_stopnotifyingutxoschangedresponse();
  void set_has_notifypruningpointutxosetoverriderequest();
  void set_has_notifypruningpointutxosetoverrideresponse();
  void set_has_pruningpointutxosetoverridenotification();
  void set_has_stopnotifyingpruningpointutxosetoverriderequest();
  void set_has_stopnotifyingpruningpointutxosetoverrideresponse();
  void set_has_estimatenetworkhashespersecondrequest();
  void set_has_estimatenetworkhashespersecondresponse();
  void set_has_notifyvirtualdaascorechangedrequest();
  void set_has_notifyvirtualdaascorechangedresponse();
  void set_has_virtualdaascorechangednotification();
  void set_has_getbalancebyaddressrequest();
  void set_has_getbalancebyaddressresponse();
  void set_has_getbalancesbyaddressesrequest();
  void set_has_getbalancesbyaddressesresponse();
  void set_has_notifynewblocktemplaterequest();
  void set_has_notifynewblocktemplateresponse();
  void set_has_newblocktemplatenotification();
  void set_has_getmempoolentriesbyaddressesrequest();
  void set_has_getmempoolentriesbyaddressesresponse();
  void set_has_getcoinsupplyrequest();
  void set_has_getcoinsupplyresponse();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::protowire::AddressesMessage* addresses_;
    ::protowire::BlockMessage* block_;
    ::protowire::TransactionMessage* transaction_;
    ::protowire::BlockLocatorMessage* blocklocator_;
    ::protowire::RequestAddressesMessage* requestaddresses_;
    ::protowire::RequestRelayBlocksMessage* requestrelayblocks_;
    ::protowire::RequestTransactionsMessage* requesttransactions_;
    ::protowire::BlockMessage* ibdblock_;
    ::protowire::InvRelayBlockMessage* invrelayblock_;
    ::protowire::InvTransactionsMessage* invtransactions_;
    ::protowire::PingMessage* ping_;
    ::protowire::PongMessage* pong_;
    ::protowire::VerackMessage* verack_;
    ::protowire::VersionMessage* version_;
    ::protowire::TransactionNotFoundMessage* transactionnotfound_;
    ::protowire::RejectMessage* reject_;
    ::protowire::PruningPointUtxoSetChunkMessage* pruningpointutxosetchunk_;
    ::protowire::RequestIBDBlocksMessage* requestibdblocks_;
    ::protowire::UnexpectedPruningPointMessage* unexpectedpruningpoint_;
    ::protowire::IbdBlockLocatorMessage* ibdblocklocator_;
    ::protowire::IbdBlockLocatorHighestHashMessage* ibdblocklocatorhighesthash_;
    ::protowire::RequestNextPruningPointUtxoSetChunkMessage* requestnextpruningpointutxosetchunk_;
    ::protowire::DonePruningPointUtxoSetChunksMessage* donepruningpointutxosetchunks_;
    ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* ibdblocklocatorhighesthashnotfound_;
    ::protowire::BlockWithTrustedDataMessage* blockwithtrusteddata_;
    ::protowire::DoneBlocksWithTrustedDataMessage* doneblockswithtrusteddata_;
    ::protowire::RequestPruningPointAndItsAnticoneMessage* requestpruningpointanditsanticone_;
    ::protowire::BlockHeadersMessage* blockheaders_;
    ::protowire::RequestNextHeadersMessage* requestnextheaders_;
    ::protowire::DoneHeadersMessage* doneheaders_;
    ::protowire::RequestPruningPointUTXOSetMessage* requestpruningpointutxoset_;
    ::protowire::RequestHeadersMessage* requestheaders_;
    ::protowire::RequestBlockLocatorMessage* requestblocklocator_;
    ::protowire::PruningPointsMessage* pruningpoints_;
    ::protowire::RequestPruningPointProofMessage* requestpruningpointproof_;
    ::protowire::PruningPointProofMessage* pruningpointproof_;
    ::protowire::ReadyMessage* ready_;
    ::protowire::BlockWithTrustedDataV4Message* blockwithtrusteddatav4_;
    ::protowire::TrustedDataMessage* trusteddata_;
    ::protowire::RequestIBDChainBlockLocatorMessage* requestibdchainblocklocator_;
    ::protowire::IbdChainBlockLocatorMessage* ibdchainblocklocator_;
    ::protowire::RequestAnticoneMessage* requestanticone_;
    ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* requestnextpruningpointanditsanticoneblocks_;
    ::protowire::GetCurrentNetworkRequestMessage* getcurrentnetworkrequest_;
    ::protowire::GetCurrentNetworkResponseMessage* getcurrentnetworkresponse_;
    ::protowire::SubmitBlockRequestMessage* submitblockrequest_;
    ::protowire::SubmitBlockResponseMessage* submitblockresponse_;
    ::protowire::GetBlockTemplateRequestMessage* getblocktemplaterequest_;
    ::protowire::GetBlockTemplateResponseMessage* getblocktemplateresponse_;
    ::protowire::NotifyBlockAddedRequestMessage* notifyblockaddedrequest_;
    ::protowire::NotifyBlockAddedResponseMessage* notifyblockaddedresponse_;
    ::protowire::BlockAddedNotificationMessage* blockaddednotification_;
    ::protowire::GetPeerAddressesRequestMessage* getpeeraddressesrequest_;
    ::protowire::GetPeerAddressesResponseMessage* getpeeraddressesresponse_;
    ::protowire::GetSelectedTipHashRequestMessage* getselectedtiphashrequest_;
    ::protowire::GetSelectedTipHashResponseMessage* getselectedtiphashresponse_;
    ::protowire::GetMempoolEntryRequestMessage* getmempoolentryrequest_;
    ::protowire::GetMempoolEntryResponseMessage* getmempoolentryresponse_;
    ::protowire::GetConnectedPeerInfoRequestMessage* getconnectedpeerinforequest_;
    ::protowire::GetConnectedPeerInfoResponseMessage* getconnectedpeerinforesponse_;
    ::protowire::AddPeerRequestMessage* addpeerrequest_;
    ::protowire::AddPeerResponseMessage* addpeerresponse_;
    ::protowire::SubmitTransactionRequestMessage* submittransactionrequest_;
    ::protowire::SubmitTransactionResponseMessage* submittransactionresponse_;
    ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* notifyvirtualselectedparentchainchangedrequest_;
    ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* notifyvirtualselectedparentchainchangedresponse_;
    ::protowire::VirtualSelectedParentChainChangedNotificationMessage* virtualselectedparentchainchangednotification_;
    ::protowire::GetBlockRequestMessage* getblockrequest_;
    ::protowire::GetBlockResponseMessage* getblockresponse_;
    ::protowire::GetSubnetworkRequestMessage* getsubnetworkrequest_;
    ::protowire::GetSubnetworkResponseMessage* getsubnetworkresponse_;
    ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* getvirtualselectedparentchainfromblockrequest_;
    ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* getvirtualselectedparentchainfromblockresponse_;
    ::protowire::GetBlocksRequestMessage* getblocksrequest_;
    ::protowire::GetBlocksResponseMessage* getblocksresponse_;
    ::protowire::GetBlockCountRequestMessage* getblockcountrequest_;
    ::protowire::GetBlockCountResponseMessage* getblockcountresponse_;
    ::protowire::GetBlockDagInfoRequestMessage* getblockdaginforequest_;
    ::protowire::GetBlockDagInfoResponseMessage* getblockdaginforesponse_;
    ::protowire::ResolveFinalityConflictRequestMessage* resolvefinalityconflictrequest_;
    ::protowire::ResolveFinalityConflictResponseMessage* resolvefinalityconflictresponse_;
    ::protowire::NotifyFinalityConflictsRequestMessage* notifyfinalityconflictsrequest_;
    ::protowire::NotifyFinalityConflictsResponseMessage* notifyfinalityconflictsresponse_;
    ::protowire::FinalityConflictNotificationMessage* finalityconflictnotification_;
    ::protowire::FinalityConflictResolvedNotificationMessage* finalityconflictresolvednotification_;
    ::protowire::GetMempoolEntriesRequestMessage* getmempoolentriesrequest_;
    ::protowire::GetMempoolEntriesResponseMessage* getmempoolentriesresponse_;
    ::protowire::ShutDownRequestMessage* shutdownrequest_;
    ::protowire::ShutDownResponseMessage* shutdownresponse_;
    ::protowire::GetHeadersRequestMessage* getheadersrequest_;
    ::protowire::GetHeadersResponseMessage* getheadersresponse_;
    ::protowire::NotifyUtxosChangedRequestMessage* notifyutxoschangedrequest_;
    ::protowire::NotifyUtxosChangedResponseMessage* notifyutxoschangedresponse_;
    ::protowire::UtxosChangedNotificationMessage* utxoschangednotification_;
    ::protowire::GetUtxosByAddressesRequestMessage* getutxosbyaddressesrequest_;
    ::protowire::GetUtxosByAddressesResponseMessage* getutxosbyaddressesresponse_;
    ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* getvirtualselectedparentbluescorerequest_;
    ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* getvirtualselectedparentbluescoreresponse_;
    ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* notifyvirtualselectedparentbluescorechangedrequest_;
    ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* notifyvirtualselectedparentbluescorechangedresponse_;
    ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* virtualselectedparentbluescorechangednotification_;
    ::protowire::BanRequestMessage* banrequest_;
    ::protowire::BanResponseMessage* banresponse_;
    ::protowire::UnbanRequestMessage* unbanrequest_;
    ::protowire::UnbanResponseMessage* unbanresponse_;
    ::protowire::GetInfoRequestMessage* getinforequest_;
    ::protowire::GetInfoResponseMessage* getinforesponse_;
    ::protowire::StopNotifyingUtxosChangedRequestMessage* stopnotifyingutxoschangedrequest_;
    ::protowire::StopNotifyingUtxosChangedResponseMessage* stopnotifyingutxoschangedresponse_;
    ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* notifypruningpointutxosetoverriderequest_;
    ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* notifypruningpointutxosetoverrideresponse_;
    ::protowire::PruningPointUTXOSetOverrideNotificationMessage* pruningpointutxosetoverridenotification_;
    ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* stopnotifyingpruningpointutxosetoverriderequest_;
    ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* stopnotifyingpruningpointutxosetoverrideresponse_;
    ::protowire::EstimateNetworkHashesPerSecondRequestMessage* estimatenetworkhashespersecondrequest_;
    ::protowire::EstimateNetworkHashesPerSecondResponseMessage* estimatenetworkhashespersecondresponse_;
    ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* notifyvirtualdaascorechangedrequest_;
    ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* notifyvirtualdaascorechangedresponse_;
    ::protowire::VirtualDaaScoreChangedNotificationMessage* virtualdaascorechangednotification_;
    ::protowire::GetBalanceByAddressRequestMessage* getbalancebyaddressrequest_;
    ::protowire::GetBalanceByAddressResponseMessage* getbalancebyaddressresponse_;
    ::protowire::GetBalancesByAddressesRequestMessage* getbalancesbyaddressesrequest_;
    ::protowire::GetBalancesByAddressesResponseMessage* getbalancesbyaddressesresponse_;
    ::protowire::NotifyNewBlockTemplateRequestMessage* notifynewblocktemplaterequest_;
    ::protowire::NotifyNewBlockTemplateResponseMessage* notifynewblocktemplateresponse_;
    ::protowire::NewBlockTemplateNotificationMessage* newblocktemplatenotification_;
    ::protowire::GetMempoolEntriesByAddressesRequestMessage* getmempoolentriesbyaddressesrequest_;
    ::protowire::GetMempoolEntriesByAddressesResponseMessage* getmempoolentriesbyaddressesresponse_;
    ::protowire::GetCoinSupplyRequestMessage* getcoinsupplyrequest_;
    ::protowire::GetCoinSupplyResponseMessage* getcoinsupplyresponse_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KaspadMessage

// .protowire.AddressesMessage addresses = 1;
inline bool KaspadMessage::_internal_has_addresses() const {
  return payload_case() == kAddresses;
}
inline bool KaspadMessage::has_addresses() const {
  return _internal_has_addresses();
}
inline void KaspadMessage::set_has_addresses() {
  _oneof_case_[0] = kAddresses;
}
inline ::protowire::AddressesMessage* KaspadMessage::release_addresses() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.addresses)
  if (_internal_has_addresses()) {
    clear_has_payload();
      ::protowire::AddressesMessage* temp = payload_.addresses_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.addresses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::AddressesMessage& KaspadMessage::_internal_addresses() const {
  return _internal_has_addresses()
      ? *payload_.addresses_
      : reinterpret_cast< ::protowire::AddressesMessage&>(::protowire::_AddressesMessage_default_instance_);
}
inline const ::protowire::AddressesMessage& KaspadMessage::addresses() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.addresses)
  return _internal_addresses();
}
inline ::protowire::AddressesMessage* KaspadMessage::unsafe_arena_release_addresses() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.addresses)
  if (_internal_has_addresses()) {
    clear_has_payload();
    ::protowire::AddressesMessage* temp = payload_.addresses_;
    payload_.addresses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_addresses(::protowire::AddressesMessage* addresses) {
  clear_payload();
  if (addresses) {
    set_has_addresses();
    payload_.addresses_ = addresses;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.addresses)
}
inline ::protowire::AddressesMessage* KaspadMessage::_internal_mutable_addresses() {
  if (!_internal_has_addresses()) {
    clear_payload();
    set_has_addresses();
    payload_.addresses_ = CreateMaybeMessage< ::protowire::AddressesMessage >(GetArenaForAllocation());
  }
  return payload_.addresses_;
}
inline ::protowire::AddressesMessage* KaspadMessage::mutable_addresses() {
  ::protowire::AddressesMessage* _msg = _internal_mutable_addresses();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.addresses)
  return _msg;
}

// .protowire.BlockMessage block = 2;
inline bool KaspadMessage::_internal_has_block() const {
  return payload_case() == kBlock;
}
inline bool KaspadMessage::has_block() const {
  return _internal_has_block();
}
inline void KaspadMessage::set_has_block() {
  _oneof_case_[0] = kBlock;
}
inline ::protowire::BlockMessage* KaspadMessage::release_block() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.block)
  if (_internal_has_block()) {
    clear_has_payload();
      ::protowire::BlockMessage* temp = payload_.block_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::BlockMessage& KaspadMessage::_internal_block() const {
  return _internal_has_block()
      ? *payload_.block_
      : reinterpret_cast< ::protowire::BlockMessage&>(::protowire::_BlockMessage_default_instance_);
}
inline const ::protowire::BlockMessage& KaspadMessage::block() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.block)
  return _internal_block();
}
inline ::protowire::BlockMessage* KaspadMessage::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.block)
  if (_internal_has_block()) {
    clear_has_payload();
    ::protowire::BlockMessage* temp = payload_.block_;
    payload_.block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_block(::protowire::BlockMessage* block) {
  clear_payload();
  if (block) {
    set_has_block();
    payload_.block_ = block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.block)
}
inline ::protowire::BlockMessage* KaspadMessage::_internal_mutable_block() {
  if (!_internal_has_block()) {
    clear_payload();
    set_has_block();
    payload_.block_ = CreateMaybeMessage< ::protowire::BlockMessage >(GetArenaForAllocation());
  }
  return payload_.block_;
}
inline ::protowire::BlockMessage* KaspadMessage::mutable_block() {
  ::protowire::BlockMessage* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.block)
  return _msg;
}

// .protowire.TransactionMessage transaction = 3;
inline bool KaspadMessage::_internal_has_transaction() const {
  return payload_case() == kTransaction;
}
inline bool KaspadMessage::has_transaction() const {
  return _internal_has_transaction();
}
inline void KaspadMessage::set_has_transaction() {
  _oneof_case_[0] = kTransaction;
}
inline ::protowire::TransactionMessage* KaspadMessage::release_transaction() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.transaction)
  if (_internal_has_transaction()) {
    clear_has_payload();
      ::protowire::TransactionMessage* temp = payload_.transaction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::TransactionMessage& KaspadMessage::_internal_transaction() const {
  return _internal_has_transaction()
      ? *payload_.transaction_
      : reinterpret_cast< ::protowire::TransactionMessage&>(::protowire::_TransactionMessage_default_instance_);
}
inline const ::protowire::TransactionMessage& KaspadMessage::transaction() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.transaction)
  return _internal_transaction();
}
inline ::protowire::TransactionMessage* KaspadMessage::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.transaction)
  if (_internal_has_transaction()) {
    clear_has_payload();
    ::protowire::TransactionMessage* temp = payload_.transaction_;
    payload_.transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_transaction(::protowire::TransactionMessage* transaction) {
  clear_payload();
  if (transaction) {
    set_has_transaction();
    payload_.transaction_ = transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.transaction)
}
inline ::protowire::TransactionMessage* KaspadMessage::_internal_mutable_transaction() {
  if (!_internal_has_transaction()) {
    clear_payload();
    set_has_transaction();
    payload_.transaction_ = CreateMaybeMessage< ::protowire::TransactionMessage >(GetArenaForAllocation());
  }
  return payload_.transaction_;
}
inline ::protowire::TransactionMessage* KaspadMessage::mutable_transaction() {
  ::protowire::TransactionMessage* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.transaction)
  return _msg;
}

// .protowire.BlockLocatorMessage blockLocator = 5;
inline bool KaspadMessage::_internal_has_blocklocator() const {
  return payload_case() == kBlockLocator;
}
inline bool KaspadMessage::has_blocklocator() const {
  return _internal_has_blocklocator();
}
inline void KaspadMessage::set_has_blocklocator() {
  _oneof_case_[0] = kBlockLocator;
}
inline ::protowire::BlockLocatorMessage* KaspadMessage::release_blocklocator() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.blockLocator)
  if (_internal_has_blocklocator()) {
    clear_has_payload();
      ::protowire::BlockLocatorMessage* temp = payload_.blocklocator_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.blocklocator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::BlockLocatorMessage& KaspadMessage::_internal_blocklocator() const {
  return _internal_has_blocklocator()
      ? *payload_.blocklocator_
      : reinterpret_cast< ::protowire::BlockLocatorMessage&>(::protowire::_BlockLocatorMessage_default_instance_);
}
inline const ::protowire::BlockLocatorMessage& KaspadMessage::blocklocator() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.blockLocator)
  return _internal_blocklocator();
}
inline ::protowire::BlockLocatorMessage* KaspadMessage::unsafe_arena_release_blocklocator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.blockLocator)
  if (_internal_has_blocklocator()) {
    clear_has_payload();
    ::protowire::BlockLocatorMessage* temp = payload_.blocklocator_;
    payload_.blocklocator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_blocklocator(::protowire::BlockLocatorMessage* blocklocator) {
  clear_payload();
  if (blocklocator) {
    set_has_blocklocator();
    payload_.blocklocator_ = blocklocator;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.blockLocator)
}
inline ::protowire::BlockLocatorMessage* KaspadMessage::_internal_mutable_blocklocator() {
  if (!_internal_has_blocklocator()) {
    clear_payload();
    set_has_blocklocator();
    payload_.blocklocator_ = CreateMaybeMessage< ::protowire::BlockLocatorMessage >(GetArenaForAllocation());
  }
  return payload_.blocklocator_;
}
inline ::protowire::BlockLocatorMessage* KaspadMessage::mutable_blocklocator() {
  ::protowire::BlockLocatorMessage* _msg = _internal_mutable_blocklocator();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.blockLocator)
  return _msg;
}

// .protowire.RequestAddressesMessage requestAddresses = 6;
inline bool KaspadMessage::_internal_has_requestaddresses() const {
  return payload_case() == kRequestAddresses;
}
inline bool KaspadMessage::has_requestaddresses() const {
  return _internal_has_requestaddresses();
}
inline void KaspadMessage::set_has_requestaddresses() {
  _oneof_case_[0] = kRequestAddresses;
}
inline ::protowire::RequestAddressesMessage* KaspadMessage::release_requestaddresses() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestAddresses)
  if (_internal_has_requestaddresses()) {
    clear_has_payload();
      ::protowire::RequestAddressesMessage* temp = payload_.requestaddresses_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requestaddresses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestAddressesMessage& KaspadMessage::_internal_requestaddresses() const {
  return _internal_has_requestaddresses()
      ? *payload_.requestaddresses_
      : reinterpret_cast< ::protowire::RequestAddressesMessage&>(::protowire::_RequestAddressesMessage_default_instance_);
}
inline const ::protowire::RequestAddressesMessage& KaspadMessage::requestaddresses() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestAddresses)
  return _internal_requestaddresses();
}
inline ::protowire::RequestAddressesMessage* KaspadMessage::unsafe_arena_release_requestaddresses() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestAddresses)
  if (_internal_has_requestaddresses()) {
    clear_has_payload();
    ::protowire::RequestAddressesMessage* temp = payload_.requestaddresses_;
    payload_.requestaddresses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requestaddresses(::protowire::RequestAddressesMessage* requestaddresses) {
  clear_payload();
  if (requestaddresses) {
    set_has_requestaddresses();
    payload_.requestaddresses_ = requestaddresses;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestAddresses)
}
inline ::protowire::RequestAddressesMessage* KaspadMessage::_internal_mutable_requestaddresses() {
  if (!_internal_has_requestaddresses()) {
    clear_payload();
    set_has_requestaddresses();
    payload_.requestaddresses_ = CreateMaybeMessage< ::protowire::RequestAddressesMessage >(GetArenaForAllocation());
  }
  return payload_.requestaddresses_;
}
inline ::protowire::RequestAddressesMessage* KaspadMessage::mutable_requestaddresses() {
  ::protowire::RequestAddressesMessage* _msg = _internal_mutable_requestaddresses();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestAddresses)
  return _msg;
}

// .protowire.RequestRelayBlocksMessage requestRelayBlocks = 10;
inline bool KaspadMessage::_internal_has_requestrelayblocks() const {
  return payload_case() == kRequestRelayBlocks;
}
inline bool KaspadMessage::has_requestrelayblocks() const {
  return _internal_has_requestrelayblocks();
}
inline void KaspadMessage::set_has_requestrelayblocks() {
  _oneof_case_[0] = kRequestRelayBlocks;
}
inline ::protowire::RequestRelayBlocksMessage* KaspadMessage::release_requestrelayblocks() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestRelayBlocks)
  if (_internal_has_requestrelayblocks()) {
    clear_has_payload();
      ::protowire::RequestRelayBlocksMessage* temp = payload_.requestrelayblocks_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requestrelayblocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestRelayBlocksMessage& KaspadMessage::_internal_requestrelayblocks() const {
  return _internal_has_requestrelayblocks()
      ? *payload_.requestrelayblocks_
      : reinterpret_cast< ::protowire::RequestRelayBlocksMessage&>(::protowire::_RequestRelayBlocksMessage_default_instance_);
}
inline const ::protowire::RequestRelayBlocksMessage& KaspadMessage::requestrelayblocks() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestRelayBlocks)
  return _internal_requestrelayblocks();
}
inline ::protowire::RequestRelayBlocksMessage* KaspadMessage::unsafe_arena_release_requestrelayblocks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestRelayBlocks)
  if (_internal_has_requestrelayblocks()) {
    clear_has_payload();
    ::protowire::RequestRelayBlocksMessage* temp = payload_.requestrelayblocks_;
    payload_.requestrelayblocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requestrelayblocks(::protowire::RequestRelayBlocksMessage* requestrelayblocks) {
  clear_payload();
  if (requestrelayblocks) {
    set_has_requestrelayblocks();
    payload_.requestrelayblocks_ = requestrelayblocks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestRelayBlocks)
}
inline ::protowire::RequestRelayBlocksMessage* KaspadMessage::_internal_mutable_requestrelayblocks() {
  if (!_internal_has_requestrelayblocks()) {
    clear_payload();
    set_has_requestrelayblocks();
    payload_.requestrelayblocks_ = CreateMaybeMessage< ::protowire::RequestRelayBlocksMessage >(GetArenaForAllocation());
  }
  return payload_.requestrelayblocks_;
}
inline ::protowire::RequestRelayBlocksMessage* KaspadMessage::mutable_requestrelayblocks() {
  ::protowire::RequestRelayBlocksMessage* _msg = _internal_mutable_requestrelayblocks();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestRelayBlocks)
  return _msg;
}

// .protowire.RequestTransactionsMessage requestTransactions = 12;
inline bool KaspadMessage::_internal_has_requesttransactions() const {
  return payload_case() == kRequestTransactions;
}
inline bool KaspadMessage::has_requesttransactions() const {
  return _internal_has_requesttransactions();
}
inline void KaspadMessage::set_has_requesttransactions() {
  _oneof_case_[0] = kRequestTransactions;
}
inline ::protowire::RequestTransactionsMessage* KaspadMessage::release_requesttransactions() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestTransactions)
  if (_internal_has_requesttransactions()) {
    clear_has_payload();
      ::protowire::RequestTransactionsMessage* temp = payload_.requesttransactions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requesttransactions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestTransactionsMessage& KaspadMessage::_internal_requesttransactions() const {
  return _internal_has_requesttransactions()
      ? *payload_.requesttransactions_
      : reinterpret_cast< ::protowire::RequestTransactionsMessage&>(::protowire::_RequestTransactionsMessage_default_instance_);
}
inline const ::protowire::RequestTransactionsMessage& KaspadMessage::requesttransactions() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestTransactions)
  return _internal_requesttransactions();
}
inline ::protowire::RequestTransactionsMessage* KaspadMessage::unsafe_arena_release_requesttransactions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestTransactions)
  if (_internal_has_requesttransactions()) {
    clear_has_payload();
    ::protowire::RequestTransactionsMessage* temp = payload_.requesttransactions_;
    payload_.requesttransactions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requesttransactions(::protowire::RequestTransactionsMessage* requesttransactions) {
  clear_payload();
  if (requesttransactions) {
    set_has_requesttransactions();
    payload_.requesttransactions_ = requesttransactions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestTransactions)
}
inline ::protowire::RequestTransactionsMessage* KaspadMessage::_internal_mutable_requesttransactions() {
  if (!_internal_has_requesttransactions()) {
    clear_payload();
    set_has_requesttransactions();
    payload_.requesttransactions_ = CreateMaybeMessage< ::protowire::RequestTransactionsMessage >(GetArenaForAllocation());
  }
  return payload_.requesttransactions_;
}
inline ::protowire::RequestTransactionsMessage* KaspadMessage::mutable_requesttransactions() {
  ::protowire::RequestTransactionsMessage* _msg = _internal_mutable_requesttransactions();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestTransactions)
  return _msg;
}

// .protowire.BlockMessage ibdBlock = 13;
inline bool KaspadMessage::_internal_has_ibdblock() const {
  return payload_case() == kIbdBlock;
}
inline bool KaspadMessage::has_ibdblock() const {
  return _internal_has_ibdblock();
}
inline void KaspadMessage::set_has_ibdblock() {
  _oneof_case_[0] = kIbdBlock;
}
inline ::protowire::BlockMessage* KaspadMessage::release_ibdblock() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.ibdBlock)
  if (_internal_has_ibdblock()) {
    clear_has_payload();
      ::protowire::BlockMessage* temp = payload_.ibdblock_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.ibdblock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::BlockMessage& KaspadMessage::_internal_ibdblock() const {
  return _internal_has_ibdblock()
      ? *payload_.ibdblock_
      : reinterpret_cast< ::protowire::BlockMessage&>(::protowire::_BlockMessage_default_instance_);
}
inline const ::protowire::BlockMessage& KaspadMessage::ibdblock() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.ibdBlock)
  return _internal_ibdblock();
}
inline ::protowire::BlockMessage* KaspadMessage::unsafe_arena_release_ibdblock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.ibdBlock)
  if (_internal_has_ibdblock()) {
    clear_has_payload();
    ::protowire::BlockMessage* temp = payload_.ibdblock_;
    payload_.ibdblock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_ibdblock(::protowire::BlockMessage* ibdblock) {
  clear_payload();
  if (ibdblock) {
    set_has_ibdblock();
    payload_.ibdblock_ = ibdblock;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.ibdBlock)
}
inline ::protowire::BlockMessage* KaspadMessage::_internal_mutable_ibdblock() {
  if (!_internal_has_ibdblock()) {
    clear_payload();
    set_has_ibdblock();
    payload_.ibdblock_ = CreateMaybeMessage< ::protowire::BlockMessage >(GetArenaForAllocation());
  }
  return payload_.ibdblock_;
}
inline ::protowire::BlockMessage* KaspadMessage::mutable_ibdblock() {
  ::protowire::BlockMessage* _msg = _internal_mutable_ibdblock();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.ibdBlock)
  return _msg;
}

// .protowire.InvRelayBlockMessage invRelayBlock = 14;
inline bool KaspadMessage::_internal_has_invrelayblock() const {
  return payload_case() == kInvRelayBlock;
}
inline bool KaspadMessage::has_invrelayblock() const {
  return _internal_has_invrelayblock();
}
inline void KaspadMessage::set_has_invrelayblock() {
  _oneof_case_[0] = kInvRelayBlock;
}
inline ::protowire::InvRelayBlockMessage* KaspadMessage::release_invrelayblock() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.invRelayBlock)
  if (_internal_has_invrelayblock()) {
    clear_has_payload();
      ::protowire::InvRelayBlockMessage* temp = payload_.invrelayblock_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.invrelayblock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::InvRelayBlockMessage& KaspadMessage::_internal_invrelayblock() const {
  return _internal_has_invrelayblock()
      ? *payload_.invrelayblock_
      : reinterpret_cast< ::protowire::InvRelayBlockMessage&>(::protowire::_InvRelayBlockMessage_default_instance_);
}
inline const ::protowire::InvRelayBlockMessage& KaspadMessage::invrelayblock() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.invRelayBlock)
  return _internal_invrelayblock();
}
inline ::protowire::InvRelayBlockMessage* KaspadMessage::unsafe_arena_release_invrelayblock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.invRelayBlock)
  if (_internal_has_invrelayblock()) {
    clear_has_payload();
    ::protowire::InvRelayBlockMessage* temp = payload_.invrelayblock_;
    payload_.invrelayblock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_invrelayblock(::protowire::InvRelayBlockMessage* invrelayblock) {
  clear_payload();
  if (invrelayblock) {
    set_has_invrelayblock();
    payload_.invrelayblock_ = invrelayblock;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.invRelayBlock)
}
inline ::protowire::InvRelayBlockMessage* KaspadMessage::_internal_mutable_invrelayblock() {
  if (!_internal_has_invrelayblock()) {
    clear_payload();
    set_has_invrelayblock();
    payload_.invrelayblock_ = CreateMaybeMessage< ::protowire::InvRelayBlockMessage >(GetArenaForAllocation());
  }
  return payload_.invrelayblock_;
}
inline ::protowire::InvRelayBlockMessage* KaspadMessage::mutable_invrelayblock() {
  ::protowire::InvRelayBlockMessage* _msg = _internal_mutable_invrelayblock();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.invRelayBlock)
  return _msg;
}

// .protowire.InvTransactionsMessage invTransactions = 15;
inline bool KaspadMessage::_internal_has_invtransactions() const {
  return payload_case() == kInvTransactions;
}
inline bool KaspadMessage::has_invtransactions() const {
  return _internal_has_invtransactions();
}
inline void KaspadMessage::set_has_invtransactions() {
  _oneof_case_[0] = kInvTransactions;
}
inline ::protowire::InvTransactionsMessage* KaspadMessage::release_invtransactions() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.invTransactions)
  if (_internal_has_invtransactions()) {
    clear_has_payload();
      ::protowire::InvTransactionsMessage* temp = payload_.invtransactions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.invtransactions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::InvTransactionsMessage& KaspadMessage::_internal_invtransactions() const {
  return _internal_has_invtransactions()
      ? *payload_.invtransactions_
      : reinterpret_cast< ::protowire::InvTransactionsMessage&>(::protowire::_InvTransactionsMessage_default_instance_);
}
inline const ::protowire::InvTransactionsMessage& KaspadMessage::invtransactions() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.invTransactions)
  return _internal_invtransactions();
}
inline ::protowire::InvTransactionsMessage* KaspadMessage::unsafe_arena_release_invtransactions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.invTransactions)
  if (_internal_has_invtransactions()) {
    clear_has_payload();
    ::protowire::InvTransactionsMessage* temp = payload_.invtransactions_;
    payload_.invtransactions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_invtransactions(::protowire::InvTransactionsMessage* invtransactions) {
  clear_payload();
  if (invtransactions) {
    set_has_invtransactions();
    payload_.invtransactions_ = invtransactions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.invTransactions)
}
inline ::protowire::InvTransactionsMessage* KaspadMessage::_internal_mutable_invtransactions() {
  if (!_internal_has_invtransactions()) {
    clear_payload();
    set_has_invtransactions();
    payload_.invtransactions_ = CreateMaybeMessage< ::protowire::InvTransactionsMessage >(GetArenaForAllocation());
  }
  return payload_.invtransactions_;
}
inline ::protowire::InvTransactionsMessage* KaspadMessage::mutable_invtransactions() {
  ::protowire::InvTransactionsMessage* _msg = _internal_mutable_invtransactions();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.invTransactions)
  return _msg;
}

// .protowire.PingMessage ping = 16;
inline bool KaspadMessage::_internal_has_ping() const {
  return payload_case() == kPing;
}
inline bool KaspadMessage::has_ping() const {
  return _internal_has_ping();
}
inline void KaspadMessage::set_has_ping() {
  _oneof_case_[0] = kPing;
}
inline ::protowire::PingMessage* KaspadMessage::release_ping() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.ping)
  if (_internal_has_ping()) {
    clear_has_payload();
      ::protowire::PingMessage* temp = payload_.ping_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::PingMessage& KaspadMessage::_internal_ping() const {
  return _internal_has_ping()
      ? *payload_.ping_
      : reinterpret_cast< ::protowire::PingMessage&>(::protowire::_PingMessage_default_instance_);
}
inline const ::protowire::PingMessage& KaspadMessage::ping() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.ping)
  return _internal_ping();
}
inline ::protowire::PingMessage* KaspadMessage::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.ping)
  if (_internal_has_ping()) {
    clear_has_payload();
    ::protowire::PingMessage* temp = payload_.ping_;
    payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_ping(::protowire::PingMessage* ping) {
  clear_payload();
  if (ping) {
    set_has_ping();
    payload_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.ping)
}
inline ::protowire::PingMessage* KaspadMessage::_internal_mutable_ping() {
  if (!_internal_has_ping()) {
    clear_payload();
    set_has_ping();
    payload_.ping_ = CreateMaybeMessage< ::protowire::PingMessage >(GetArenaForAllocation());
  }
  return payload_.ping_;
}
inline ::protowire::PingMessage* KaspadMessage::mutable_ping() {
  ::protowire::PingMessage* _msg = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.ping)
  return _msg;
}

// .protowire.PongMessage pong = 17;
inline bool KaspadMessage::_internal_has_pong() const {
  return payload_case() == kPong;
}
inline bool KaspadMessage::has_pong() const {
  return _internal_has_pong();
}
inline void KaspadMessage::set_has_pong() {
  _oneof_case_[0] = kPong;
}
inline ::protowire::PongMessage* KaspadMessage::release_pong() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.pong)
  if (_internal_has_pong()) {
    clear_has_payload();
      ::protowire::PongMessage* temp = payload_.pong_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.pong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::PongMessage& KaspadMessage::_internal_pong() const {
  return _internal_has_pong()
      ? *payload_.pong_
      : reinterpret_cast< ::protowire::PongMessage&>(::protowire::_PongMessage_default_instance_);
}
inline const ::protowire::PongMessage& KaspadMessage::pong() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.pong)
  return _internal_pong();
}
inline ::protowire::PongMessage* KaspadMessage::unsafe_arena_release_pong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.pong)
  if (_internal_has_pong()) {
    clear_has_payload();
    ::protowire::PongMessage* temp = payload_.pong_;
    payload_.pong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_pong(::protowire::PongMessage* pong) {
  clear_payload();
  if (pong) {
    set_has_pong();
    payload_.pong_ = pong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.pong)
}
inline ::protowire::PongMessage* KaspadMessage::_internal_mutable_pong() {
  if (!_internal_has_pong()) {
    clear_payload();
    set_has_pong();
    payload_.pong_ = CreateMaybeMessage< ::protowire::PongMessage >(GetArenaForAllocation());
  }
  return payload_.pong_;
}
inline ::protowire::PongMessage* KaspadMessage::mutable_pong() {
  ::protowire::PongMessage* _msg = _internal_mutable_pong();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.pong)
  return _msg;
}

// .protowire.VerackMessage verack = 19;
inline bool KaspadMessage::_internal_has_verack() const {
  return payload_case() == kVerack;
}
inline bool KaspadMessage::has_verack() const {
  return _internal_has_verack();
}
inline void KaspadMessage::set_has_verack() {
  _oneof_case_[0] = kVerack;
}
inline ::protowire::VerackMessage* KaspadMessage::release_verack() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.verack)
  if (_internal_has_verack()) {
    clear_has_payload();
      ::protowire::VerackMessage* temp = payload_.verack_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.verack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::VerackMessage& KaspadMessage::_internal_verack() const {
  return _internal_has_verack()
      ? *payload_.verack_
      : reinterpret_cast< ::protowire::VerackMessage&>(::protowire::_VerackMessage_default_instance_);
}
inline const ::protowire::VerackMessage& KaspadMessage::verack() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.verack)
  return _internal_verack();
}
inline ::protowire::VerackMessage* KaspadMessage::unsafe_arena_release_verack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.verack)
  if (_internal_has_verack()) {
    clear_has_payload();
    ::protowire::VerackMessage* temp = payload_.verack_;
    payload_.verack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_verack(::protowire::VerackMessage* verack) {
  clear_payload();
  if (verack) {
    set_has_verack();
    payload_.verack_ = verack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.verack)
}
inline ::protowire::VerackMessage* KaspadMessage::_internal_mutable_verack() {
  if (!_internal_has_verack()) {
    clear_payload();
    set_has_verack();
    payload_.verack_ = CreateMaybeMessage< ::protowire::VerackMessage >(GetArenaForAllocation());
  }
  return payload_.verack_;
}
inline ::protowire::VerackMessage* KaspadMessage::mutable_verack() {
  ::protowire::VerackMessage* _msg = _internal_mutable_verack();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.verack)
  return _msg;
}

// .protowire.VersionMessage version = 20;
inline bool KaspadMessage::_internal_has_version() const {
  return payload_case() == kVersion;
}
inline bool KaspadMessage::has_version() const {
  return _internal_has_version();
}
inline void KaspadMessage::set_has_version() {
  _oneof_case_[0] = kVersion;
}
inline ::protowire::VersionMessage* KaspadMessage::release_version() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.version)
  if (_internal_has_version()) {
    clear_has_payload();
      ::protowire::VersionMessage* temp = payload_.version_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.version_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::VersionMessage& KaspadMessage::_internal_version() const {
  return _internal_has_version()
      ? *payload_.version_
      : reinterpret_cast< ::protowire::VersionMessage&>(::protowire::_VersionMessage_default_instance_);
}
inline const ::protowire::VersionMessage& KaspadMessage::version() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.version)
  return _internal_version();
}
inline ::protowire::VersionMessage* KaspadMessage::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.version)
  if (_internal_has_version()) {
    clear_has_payload();
    ::protowire::VersionMessage* temp = payload_.version_;
    payload_.version_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_version(::protowire::VersionMessage* version) {
  clear_payload();
  if (version) {
    set_has_version();
    payload_.version_ = version;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.version)
}
inline ::protowire::VersionMessage* KaspadMessage::_internal_mutable_version() {
  if (!_internal_has_version()) {
    clear_payload();
    set_has_version();
    payload_.version_ = CreateMaybeMessage< ::protowire::VersionMessage >(GetArenaForAllocation());
  }
  return payload_.version_;
}
inline ::protowire::VersionMessage* KaspadMessage::mutable_version() {
  ::protowire::VersionMessage* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.version)
  return _msg;
}

// .protowire.TransactionNotFoundMessage transactionNotFound = 21;
inline bool KaspadMessage::_internal_has_transactionnotfound() const {
  return payload_case() == kTransactionNotFound;
}
inline bool KaspadMessage::has_transactionnotfound() const {
  return _internal_has_transactionnotfound();
}
inline void KaspadMessage::set_has_transactionnotfound() {
  _oneof_case_[0] = kTransactionNotFound;
}
inline ::protowire::TransactionNotFoundMessage* KaspadMessage::release_transactionnotfound() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.transactionNotFound)
  if (_internal_has_transactionnotfound()) {
    clear_has_payload();
      ::protowire::TransactionNotFoundMessage* temp = payload_.transactionnotfound_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.transactionnotfound_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::TransactionNotFoundMessage& KaspadMessage::_internal_transactionnotfound() const {
  return _internal_has_transactionnotfound()
      ? *payload_.transactionnotfound_
      : reinterpret_cast< ::protowire::TransactionNotFoundMessage&>(::protowire::_TransactionNotFoundMessage_default_instance_);
}
inline const ::protowire::TransactionNotFoundMessage& KaspadMessage::transactionnotfound() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.transactionNotFound)
  return _internal_transactionnotfound();
}
inline ::protowire::TransactionNotFoundMessage* KaspadMessage::unsafe_arena_release_transactionnotfound() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.transactionNotFound)
  if (_internal_has_transactionnotfound()) {
    clear_has_payload();
    ::protowire::TransactionNotFoundMessage* temp = payload_.transactionnotfound_;
    payload_.transactionnotfound_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_transactionnotfound(::protowire::TransactionNotFoundMessage* transactionnotfound) {
  clear_payload();
  if (transactionnotfound) {
    set_has_transactionnotfound();
    payload_.transactionnotfound_ = transactionnotfound;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.transactionNotFound)
}
inline ::protowire::TransactionNotFoundMessage* KaspadMessage::_internal_mutable_transactionnotfound() {
  if (!_internal_has_transactionnotfound()) {
    clear_payload();
    set_has_transactionnotfound();
    payload_.transactionnotfound_ = CreateMaybeMessage< ::protowire::TransactionNotFoundMessage >(GetArenaForAllocation());
  }
  return payload_.transactionnotfound_;
}
inline ::protowire::TransactionNotFoundMessage* KaspadMessage::mutable_transactionnotfound() {
  ::protowire::TransactionNotFoundMessage* _msg = _internal_mutable_transactionnotfound();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.transactionNotFound)
  return _msg;
}

// .protowire.RejectMessage reject = 22;
inline bool KaspadMessage::_internal_has_reject() const {
  return payload_case() == kReject;
}
inline bool KaspadMessage::has_reject() const {
  return _internal_has_reject();
}
inline void KaspadMessage::set_has_reject() {
  _oneof_case_[0] = kReject;
}
inline ::protowire::RejectMessage* KaspadMessage::release_reject() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.reject)
  if (_internal_has_reject()) {
    clear_has_payload();
      ::protowire::RejectMessage* temp = payload_.reject_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.reject_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RejectMessage& KaspadMessage::_internal_reject() const {
  return _internal_has_reject()
      ? *payload_.reject_
      : reinterpret_cast< ::protowire::RejectMessage&>(::protowire::_RejectMessage_default_instance_);
}
inline const ::protowire::RejectMessage& KaspadMessage::reject() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.reject)
  return _internal_reject();
}
inline ::protowire::RejectMessage* KaspadMessage::unsafe_arena_release_reject() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.reject)
  if (_internal_has_reject()) {
    clear_has_payload();
    ::protowire::RejectMessage* temp = payload_.reject_;
    payload_.reject_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_reject(::protowire::RejectMessage* reject) {
  clear_payload();
  if (reject) {
    set_has_reject();
    payload_.reject_ = reject;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.reject)
}
inline ::protowire::RejectMessage* KaspadMessage::_internal_mutable_reject() {
  if (!_internal_has_reject()) {
    clear_payload();
    set_has_reject();
    payload_.reject_ = CreateMaybeMessage< ::protowire::RejectMessage >(GetArenaForAllocation());
  }
  return payload_.reject_;
}
inline ::protowire::RejectMessage* KaspadMessage::mutable_reject() {
  ::protowire::RejectMessage* _msg = _internal_mutable_reject();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.reject)
  return _msg;
}

// .protowire.PruningPointUtxoSetChunkMessage pruningPointUtxoSetChunk = 25;
inline bool KaspadMessage::_internal_has_pruningpointutxosetchunk() const {
  return payload_case() == kPruningPointUtxoSetChunk;
}
inline bool KaspadMessage::has_pruningpointutxosetchunk() const {
  return _internal_has_pruningpointutxosetchunk();
}
inline void KaspadMessage::set_has_pruningpointutxosetchunk() {
  _oneof_case_[0] = kPruningPointUtxoSetChunk;
}
inline ::protowire::PruningPointUtxoSetChunkMessage* KaspadMessage::release_pruningpointutxosetchunk() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.pruningPointUtxoSetChunk)
  if (_internal_has_pruningpointutxosetchunk()) {
    clear_has_payload();
      ::protowire::PruningPointUtxoSetChunkMessage* temp = payload_.pruningpointutxosetchunk_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.pruningpointutxosetchunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::PruningPointUtxoSetChunkMessage& KaspadMessage::_internal_pruningpointutxosetchunk() const {
  return _internal_has_pruningpointutxosetchunk()
      ? *payload_.pruningpointutxosetchunk_
      : reinterpret_cast< ::protowire::PruningPointUtxoSetChunkMessage&>(::protowire::_PruningPointUtxoSetChunkMessage_default_instance_);
}
inline const ::protowire::PruningPointUtxoSetChunkMessage& KaspadMessage::pruningpointutxosetchunk() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.pruningPointUtxoSetChunk)
  return _internal_pruningpointutxosetchunk();
}
inline ::protowire::PruningPointUtxoSetChunkMessage* KaspadMessage::unsafe_arena_release_pruningpointutxosetchunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.pruningPointUtxoSetChunk)
  if (_internal_has_pruningpointutxosetchunk()) {
    clear_has_payload();
    ::protowire::PruningPointUtxoSetChunkMessage* temp = payload_.pruningpointutxosetchunk_;
    payload_.pruningpointutxosetchunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_pruningpointutxosetchunk(::protowire::PruningPointUtxoSetChunkMessage* pruningpointutxosetchunk) {
  clear_payload();
  if (pruningpointutxosetchunk) {
    set_has_pruningpointutxosetchunk();
    payload_.pruningpointutxosetchunk_ = pruningpointutxosetchunk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.pruningPointUtxoSetChunk)
}
inline ::protowire::PruningPointUtxoSetChunkMessage* KaspadMessage::_internal_mutable_pruningpointutxosetchunk() {
  if (!_internal_has_pruningpointutxosetchunk()) {
    clear_payload();
    set_has_pruningpointutxosetchunk();
    payload_.pruningpointutxosetchunk_ = CreateMaybeMessage< ::protowire::PruningPointUtxoSetChunkMessage >(GetArenaForAllocation());
  }
  return payload_.pruningpointutxosetchunk_;
}
inline ::protowire::PruningPointUtxoSetChunkMessage* KaspadMessage::mutable_pruningpointutxosetchunk() {
  ::protowire::PruningPointUtxoSetChunkMessage* _msg = _internal_mutable_pruningpointutxosetchunk();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.pruningPointUtxoSetChunk)
  return _msg;
}

// .protowire.RequestIBDBlocksMessage requestIBDBlocks = 26;
inline bool KaspadMessage::_internal_has_requestibdblocks() const {
  return payload_case() == kRequestIBDBlocks;
}
inline bool KaspadMessage::has_requestibdblocks() const {
  return _internal_has_requestibdblocks();
}
inline void KaspadMessage::set_has_requestibdblocks() {
  _oneof_case_[0] = kRequestIBDBlocks;
}
inline ::protowire::RequestIBDBlocksMessage* KaspadMessage::release_requestibdblocks() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestIBDBlocks)
  if (_internal_has_requestibdblocks()) {
    clear_has_payload();
      ::protowire::RequestIBDBlocksMessage* temp = payload_.requestibdblocks_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requestibdblocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestIBDBlocksMessage& KaspadMessage::_internal_requestibdblocks() const {
  return _internal_has_requestibdblocks()
      ? *payload_.requestibdblocks_
      : reinterpret_cast< ::protowire::RequestIBDBlocksMessage&>(::protowire::_RequestIBDBlocksMessage_default_instance_);
}
inline const ::protowire::RequestIBDBlocksMessage& KaspadMessage::requestibdblocks() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestIBDBlocks)
  return _internal_requestibdblocks();
}
inline ::protowire::RequestIBDBlocksMessage* KaspadMessage::unsafe_arena_release_requestibdblocks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestIBDBlocks)
  if (_internal_has_requestibdblocks()) {
    clear_has_payload();
    ::protowire::RequestIBDBlocksMessage* temp = payload_.requestibdblocks_;
    payload_.requestibdblocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requestibdblocks(::protowire::RequestIBDBlocksMessage* requestibdblocks) {
  clear_payload();
  if (requestibdblocks) {
    set_has_requestibdblocks();
    payload_.requestibdblocks_ = requestibdblocks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestIBDBlocks)
}
inline ::protowire::RequestIBDBlocksMessage* KaspadMessage::_internal_mutable_requestibdblocks() {
  if (!_internal_has_requestibdblocks()) {
    clear_payload();
    set_has_requestibdblocks();
    payload_.requestibdblocks_ = CreateMaybeMessage< ::protowire::RequestIBDBlocksMessage >(GetArenaForAllocation());
  }
  return payload_.requestibdblocks_;
}
inline ::protowire::RequestIBDBlocksMessage* KaspadMessage::mutable_requestibdblocks() {
  ::protowire::RequestIBDBlocksMessage* _msg = _internal_mutable_requestibdblocks();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestIBDBlocks)
  return _msg;
}

// .protowire.UnexpectedPruningPointMessage unexpectedPruningPoint = 27;
inline bool KaspadMessage::_internal_has_unexpectedpruningpoint() const {
  return payload_case() == kUnexpectedPruningPoint;
}
inline bool KaspadMessage::has_unexpectedpruningpoint() const {
  return _internal_has_unexpectedpruningpoint();
}
inline void KaspadMessage::set_has_unexpectedpruningpoint() {
  _oneof_case_[0] = kUnexpectedPruningPoint;
}
inline ::protowire::UnexpectedPruningPointMessage* KaspadMessage::release_unexpectedpruningpoint() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.unexpectedPruningPoint)
  if (_internal_has_unexpectedpruningpoint()) {
    clear_has_payload();
      ::protowire::UnexpectedPruningPointMessage* temp = payload_.unexpectedpruningpoint_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.unexpectedpruningpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::UnexpectedPruningPointMessage& KaspadMessage::_internal_unexpectedpruningpoint() const {
  return _internal_has_unexpectedpruningpoint()
      ? *payload_.unexpectedpruningpoint_
      : reinterpret_cast< ::protowire::UnexpectedPruningPointMessage&>(::protowire::_UnexpectedPruningPointMessage_default_instance_);
}
inline const ::protowire::UnexpectedPruningPointMessage& KaspadMessage::unexpectedpruningpoint() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.unexpectedPruningPoint)
  return _internal_unexpectedpruningpoint();
}
inline ::protowire::UnexpectedPruningPointMessage* KaspadMessage::unsafe_arena_release_unexpectedpruningpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.unexpectedPruningPoint)
  if (_internal_has_unexpectedpruningpoint()) {
    clear_has_payload();
    ::protowire::UnexpectedPruningPointMessage* temp = payload_.unexpectedpruningpoint_;
    payload_.unexpectedpruningpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_unexpectedpruningpoint(::protowire::UnexpectedPruningPointMessage* unexpectedpruningpoint) {
  clear_payload();
  if (unexpectedpruningpoint) {
    set_has_unexpectedpruningpoint();
    payload_.unexpectedpruningpoint_ = unexpectedpruningpoint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.unexpectedPruningPoint)
}
inline ::protowire::UnexpectedPruningPointMessage* KaspadMessage::_internal_mutable_unexpectedpruningpoint() {
  if (!_internal_has_unexpectedpruningpoint()) {
    clear_payload();
    set_has_unexpectedpruningpoint();
    payload_.unexpectedpruningpoint_ = CreateMaybeMessage< ::protowire::UnexpectedPruningPointMessage >(GetArenaForAllocation());
  }
  return payload_.unexpectedpruningpoint_;
}
inline ::protowire::UnexpectedPruningPointMessage* KaspadMessage::mutable_unexpectedpruningpoint() {
  ::protowire::UnexpectedPruningPointMessage* _msg = _internal_mutable_unexpectedpruningpoint();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.unexpectedPruningPoint)
  return _msg;
}

// .protowire.IbdBlockLocatorMessage ibdBlockLocator = 30;
inline bool KaspadMessage::_internal_has_ibdblocklocator() const {
  return payload_case() == kIbdBlockLocator;
}
inline bool KaspadMessage::has_ibdblocklocator() const {
  return _internal_has_ibdblocklocator();
}
inline void KaspadMessage::set_has_ibdblocklocator() {
  _oneof_case_[0] = kIbdBlockLocator;
}
inline ::protowire::IbdBlockLocatorMessage* KaspadMessage::release_ibdblocklocator() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.ibdBlockLocator)
  if (_internal_has_ibdblocklocator()) {
    clear_has_payload();
      ::protowire::IbdBlockLocatorMessage* temp = payload_.ibdblocklocator_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.ibdblocklocator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::IbdBlockLocatorMessage& KaspadMessage::_internal_ibdblocklocator() const {
  return _internal_has_ibdblocklocator()
      ? *payload_.ibdblocklocator_
      : reinterpret_cast< ::protowire::IbdBlockLocatorMessage&>(::protowire::_IbdBlockLocatorMessage_default_instance_);
}
inline const ::protowire::IbdBlockLocatorMessage& KaspadMessage::ibdblocklocator() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.ibdBlockLocator)
  return _internal_ibdblocklocator();
}
inline ::protowire::IbdBlockLocatorMessage* KaspadMessage::unsafe_arena_release_ibdblocklocator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.ibdBlockLocator)
  if (_internal_has_ibdblocklocator()) {
    clear_has_payload();
    ::protowire::IbdBlockLocatorMessage* temp = payload_.ibdblocklocator_;
    payload_.ibdblocklocator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_ibdblocklocator(::protowire::IbdBlockLocatorMessage* ibdblocklocator) {
  clear_payload();
  if (ibdblocklocator) {
    set_has_ibdblocklocator();
    payload_.ibdblocklocator_ = ibdblocklocator;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.ibdBlockLocator)
}
inline ::protowire::IbdBlockLocatorMessage* KaspadMessage::_internal_mutable_ibdblocklocator() {
  if (!_internal_has_ibdblocklocator()) {
    clear_payload();
    set_has_ibdblocklocator();
    payload_.ibdblocklocator_ = CreateMaybeMessage< ::protowire::IbdBlockLocatorMessage >(GetArenaForAllocation());
  }
  return payload_.ibdblocklocator_;
}
inline ::protowire::IbdBlockLocatorMessage* KaspadMessage::mutable_ibdblocklocator() {
  ::protowire::IbdBlockLocatorMessage* _msg = _internal_mutable_ibdblocklocator();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.ibdBlockLocator)
  return _msg;
}

// .protowire.IbdBlockLocatorHighestHashMessage ibdBlockLocatorHighestHash = 31;
inline bool KaspadMessage::_internal_has_ibdblocklocatorhighesthash() const {
  return payload_case() == kIbdBlockLocatorHighestHash;
}
inline bool KaspadMessage::has_ibdblocklocatorhighesthash() const {
  return _internal_has_ibdblocklocatorhighesthash();
}
inline void KaspadMessage::set_has_ibdblocklocatorhighesthash() {
  _oneof_case_[0] = kIbdBlockLocatorHighestHash;
}
inline ::protowire::IbdBlockLocatorHighestHashMessage* KaspadMessage::release_ibdblocklocatorhighesthash() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.ibdBlockLocatorHighestHash)
  if (_internal_has_ibdblocklocatorhighesthash()) {
    clear_has_payload();
      ::protowire::IbdBlockLocatorHighestHashMessage* temp = payload_.ibdblocklocatorhighesthash_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.ibdblocklocatorhighesthash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::IbdBlockLocatorHighestHashMessage& KaspadMessage::_internal_ibdblocklocatorhighesthash() const {
  return _internal_has_ibdblocklocatorhighesthash()
      ? *payload_.ibdblocklocatorhighesthash_
      : reinterpret_cast< ::protowire::IbdBlockLocatorHighestHashMessage&>(::protowire::_IbdBlockLocatorHighestHashMessage_default_instance_);
}
inline const ::protowire::IbdBlockLocatorHighestHashMessage& KaspadMessage::ibdblocklocatorhighesthash() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.ibdBlockLocatorHighestHash)
  return _internal_ibdblocklocatorhighesthash();
}
inline ::protowire::IbdBlockLocatorHighestHashMessage* KaspadMessage::unsafe_arena_release_ibdblocklocatorhighesthash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.ibdBlockLocatorHighestHash)
  if (_internal_has_ibdblocklocatorhighesthash()) {
    clear_has_payload();
    ::protowire::IbdBlockLocatorHighestHashMessage* temp = payload_.ibdblocklocatorhighesthash_;
    payload_.ibdblocklocatorhighesthash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_ibdblocklocatorhighesthash(::protowire::IbdBlockLocatorHighestHashMessage* ibdblocklocatorhighesthash) {
  clear_payload();
  if (ibdblocklocatorhighesthash) {
    set_has_ibdblocklocatorhighesthash();
    payload_.ibdblocklocatorhighesthash_ = ibdblocklocatorhighesthash;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.ibdBlockLocatorHighestHash)
}
inline ::protowire::IbdBlockLocatorHighestHashMessage* KaspadMessage::_internal_mutable_ibdblocklocatorhighesthash() {
  if (!_internal_has_ibdblocklocatorhighesthash()) {
    clear_payload();
    set_has_ibdblocklocatorhighesthash();
    payload_.ibdblocklocatorhighesthash_ = CreateMaybeMessage< ::protowire::IbdBlockLocatorHighestHashMessage >(GetArenaForAllocation());
  }
  return payload_.ibdblocklocatorhighesthash_;
}
inline ::protowire::IbdBlockLocatorHighestHashMessage* KaspadMessage::mutable_ibdblocklocatorhighesthash() {
  ::protowire::IbdBlockLocatorHighestHashMessage* _msg = _internal_mutable_ibdblocklocatorhighesthash();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.ibdBlockLocatorHighestHash)
  return _msg;
}

// .protowire.RequestNextPruningPointUtxoSetChunkMessage requestNextPruningPointUtxoSetChunk = 33;
inline bool KaspadMessage::_internal_has_requestnextpruningpointutxosetchunk() const {
  return payload_case() == kRequestNextPruningPointUtxoSetChunk;
}
inline bool KaspadMessage::has_requestnextpruningpointutxosetchunk() const {
  return _internal_has_requestnextpruningpointutxosetchunk();
}
inline void KaspadMessage::set_has_requestnextpruningpointutxosetchunk() {
  _oneof_case_[0] = kRequestNextPruningPointUtxoSetChunk;
}
inline ::protowire::RequestNextPruningPointUtxoSetChunkMessage* KaspadMessage::release_requestnextpruningpointutxosetchunk() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestNextPruningPointUtxoSetChunk)
  if (_internal_has_requestnextpruningpointutxosetchunk()) {
    clear_has_payload();
      ::protowire::RequestNextPruningPointUtxoSetChunkMessage* temp = payload_.requestnextpruningpointutxosetchunk_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requestnextpruningpointutxosetchunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestNextPruningPointUtxoSetChunkMessage& KaspadMessage::_internal_requestnextpruningpointutxosetchunk() const {
  return _internal_has_requestnextpruningpointutxosetchunk()
      ? *payload_.requestnextpruningpointutxosetchunk_
      : reinterpret_cast< ::protowire::RequestNextPruningPointUtxoSetChunkMessage&>(::protowire::_RequestNextPruningPointUtxoSetChunkMessage_default_instance_);
}
inline const ::protowire::RequestNextPruningPointUtxoSetChunkMessage& KaspadMessage::requestnextpruningpointutxosetchunk() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestNextPruningPointUtxoSetChunk)
  return _internal_requestnextpruningpointutxosetchunk();
}
inline ::protowire::RequestNextPruningPointUtxoSetChunkMessage* KaspadMessage::unsafe_arena_release_requestnextpruningpointutxosetchunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestNextPruningPointUtxoSetChunk)
  if (_internal_has_requestnextpruningpointutxosetchunk()) {
    clear_has_payload();
    ::protowire::RequestNextPruningPointUtxoSetChunkMessage* temp = payload_.requestnextpruningpointutxosetchunk_;
    payload_.requestnextpruningpointutxosetchunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requestnextpruningpointutxosetchunk(::protowire::RequestNextPruningPointUtxoSetChunkMessage* requestnextpruningpointutxosetchunk) {
  clear_payload();
  if (requestnextpruningpointutxosetchunk) {
    set_has_requestnextpruningpointutxosetchunk();
    payload_.requestnextpruningpointutxosetchunk_ = requestnextpruningpointutxosetchunk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestNextPruningPointUtxoSetChunk)
}
inline ::protowire::RequestNextPruningPointUtxoSetChunkMessage* KaspadMessage::_internal_mutable_requestnextpruningpointutxosetchunk() {
  if (!_internal_has_requestnextpruningpointutxosetchunk()) {
    clear_payload();
    set_has_requestnextpruningpointutxosetchunk();
    payload_.requestnextpruningpointutxosetchunk_ = CreateMaybeMessage< ::protowire::RequestNextPruningPointUtxoSetChunkMessage >(GetArenaForAllocation());
  }
  return payload_.requestnextpruningpointutxosetchunk_;
}
inline ::protowire::RequestNextPruningPointUtxoSetChunkMessage* KaspadMessage::mutable_requestnextpruningpointutxosetchunk() {
  ::protowire::RequestNextPruningPointUtxoSetChunkMessage* _msg = _internal_mutable_requestnextpruningpointutxosetchunk();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestNextPruningPointUtxoSetChunk)
  return _msg;
}

// .protowire.DonePruningPointUtxoSetChunksMessage donePruningPointUtxoSetChunks = 34;
inline bool KaspadMessage::_internal_has_donepruningpointutxosetchunks() const {
  return payload_case() == kDonePruningPointUtxoSetChunks;
}
inline bool KaspadMessage::has_donepruningpointutxosetchunks() const {
  return _internal_has_donepruningpointutxosetchunks();
}
inline void KaspadMessage::set_has_donepruningpointutxosetchunks() {
  _oneof_case_[0] = kDonePruningPointUtxoSetChunks;
}
inline ::protowire::DonePruningPointUtxoSetChunksMessage* KaspadMessage::release_donepruningpointutxosetchunks() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.donePruningPointUtxoSetChunks)
  if (_internal_has_donepruningpointutxosetchunks()) {
    clear_has_payload();
      ::protowire::DonePruningPointUtxoSetChunksMessage* temp = payload_.donepruningpointutxosetchunks_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.donepruningpointutxosetchunks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::DonePruningPointUtxoSetChunksMessage& KaspadMessage::_internal_donepruningpointutxosetchunks() const {
  return _internal_has_donepruningpointutxosetchunks()
      ? *payload_.donepruningpointutxosetchunks_
      : reinterpret_cast< ::protowire::DonePruningPointUtxoSetChunksMessage&>(::protowire::_DonePruningPointUtxoSetChunksMessage_default_instance_);
}
inline const ::protowire::DonePruningPointUtxoSetChunksMessage& KaspadMessage::donepruningpointutxosetchunks() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.donePruningPointUtxoSetChunks)
  return _internal_donepruningpointutxosetchunks();
}
inline ::protowire::DonePruningPointUtxoSetChunksMessage* KaspadMessage::unsafe_arena_release_donepruningpointutxosetchunks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.donePruningPointUtxoSetChunks)
  if (_internal_has_donepruningpointutxosetchunks()) {
    clear_has_payload();
    ::protowire::DonePruningPointUtxoSetChunksMessage* temp = payload_.donepruningpointutxosetchunks_;
    payload_.donepruningpointutxosetchunks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_donepruningpointutxosetchunks(::protowire::DonePruningPointUtxoSetChunksMessage* donepruningpointutxosetchunks) {
  clear_payload();
  if (donepruningpointutxosetchunks) {
    set_has_donepruningpointutxosetchunks();
    payload_.donepruningpointutxosetchunks_ = donepruningpointutxosetchunks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.donePruningPointUtxoSetChunks)
}
inline ::protowire::DonePruningPointUtxoSetChunksMessage* KaspadMessage::_internal_mutable_donepruningpointutxosetchunks() {
  if (!_internal_has_donepruningpointutxosetchunks()) {
    clear_payload();
    set_has_donepruningpointutxosetchunks();
    payload_.donepruningpointutxosetchunks_ = CreateMaybeMessage< ::protowire::DonePruningPointUtxoSetChunksMessage >(GetArenaForAllocation());
  }
  return payload_.donepruningpointutxosetchunks_;
}
inline ::protowire::DonePruningPointUtxoSetChunksMessage* KaspadMessage::mutable_donepruningpointutxosetchunks() {
  ::protowire::DonePruningPointUtxoSetChunksMessage* _msg = _internal_mutable_donepruningpointutxosetchunks();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.donePruningPointUtxoSetChunks)
  return _msg;
}

// .protowire.IbdBlockLocatorHighestHashNotFoundMessage ibdBlockLocatorHighestHashNotFound = 35;
inline bool KaspadMessage::_internal_has_ibdblocklocatorhighesthashnotfound() const {
  return payload_case() == kIbdBlockLocatorHighestHashNotFound;
}
inline bool KaspadMessage::has_ibdblocklocatorhighesthashnotfound() const {
  return _internal_has_ibdblocklocatorhighesthashnotfound();
}
inline void KaspadMessage::set_has_ibdblocklocatorhighesthashnotfound() {
  _oneof_case_[0] = kIbdBlockLocatorHighestHashNotFound;
}
inline ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* KaspadMessage::release_ibdblocklocatorhighesthashnotfound() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.ibdBlockLocatorHighestHashNotFound)
  if (_internal_has_ibdblocklocatorhighesthashnotfound()) {
    clear_has_payload();
      ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* temp = payload_.ibdblocklocatorhighesthashnotfound_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.ibdblocklocatorhighesthashnotfound_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::IbdBlockLocatorHighestHashNotFoundMessage& KaspadMessage::_internal_ibdblocklocatorhighesthashnotfound() const {
  return _internal_has_ibdblocklocatorhighesthashnotfound()
      ? *payload_.ibdblocklocatorhighesthashnotfound_
      : reinterpret_cast< ::protowire::IbdBlockLocatorHighestHashNotFoundMessage&>(::protowire::_IbdBlockLocatorHighestHashNotFoundMessage_default_instance_);
}
inline const ::protowire::IbdBlockLocatorHighestHashNotFoundMessage& KaspadMessage::ibdblocklocatorhighesthashnotfound() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.ibdBlockLocatorHighestHashNotFound)
  return _internal_ibdblocklocatorhighesthashnotfound();
}
inline ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* KaspadMessage::unsafe_arena_release_ibdblocklocatorhighesthashnotfound() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.ibdBlockLocatorHighestHashNotFound)
  if (_internal_has_ibdblocklocatorhighesthashnotfound()) {
    clear_has_payload();
    ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* temp = payload_.ibdblocklocatorhighesthashnotfound_;
    payload_.ibdblocklocatorhighesthashnotfound_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_ibdblocklocatorhighesthashnotfound(::protowire::IbdBlockLocatorHighestHashNotFoundMessage* ibdblocklocatorhighesthashnotfound) {
  clear_payload();
  if (ibdblocklocatorhighesthashnotfound) {
    set_has_ibdblocklocatorhighesthashnotfound();
    payload_.ibdblocklocatorhighesthashnotfound_ = ibdblocklocatorhighesthashnotfound;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.ibdBlockLocatorHighestHashNotFound)
}
inline ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* KaspadMessage::_internal_mutable_ibdblocklocatorhighesthashnotfound() {
  if (!_internal_has_ibdblocklocatorhighesthashnotfound()) {
    clear_payload();
    set_has_ibdblocklocatorhighesthashnotfound();
    payload_.ibdblocklocatorhighesthashnotfound_ = CreateMaybeMessage< ::protowire::IbdBlockLocatorHighestHashNotFoundMessage >(GetArenaForAllocation());
  }
  return payload_.ibdblocklocatorhighesthashnotfound_;
}
inline ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* KaspadMessage::mutable_ibdblocklocatorhighesthashnotfound() {
  ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* _msg = _internal_mutable_ibdblocklocatorhighesthashnotfound();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.ibdBlockLocatorHighestHashNotFound)
  return _msg;
}

// .protowire.BlockWithTrustedDataMessage blockWithTrustedData = 36;
inline bool KaspadMessage::_internal_has_blockwithtrusteddata() const {
  return payload_case() == kBlockWithTrustedData;
}
inline bool KaspadMessage::has_blockwithtrusteddata() const {
  return _internal_has_blockwithtrusteddata();
}
inline void KaspadMessage::set_has_blockwithtrusteddata() {
  _oneof_case_[0] = kBlockWithTrustedData;
}
inline ::protowire::BlockWithTrustedDataMessage* KaspadMessage::release_blockwithtrusteddata() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.blockWithTrustedData)
  if (_internal_has_blockwithtrusteddata()) {
    clear_has_payload();
      ::protowire::BlockWithTrustedDataMessage* temp = payload_.blockwithtrusteddata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.blockwithtrusteddata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::BlockWithTrustedDataMessage& KaspadMessage::_internal_blockwithtrusteddata() const {
  return _internal_has_blockwithtrusteddata()
      ? *payload_.blockwithtrusteddata_
      : reinterpret_cast< ::protowire::BlockWithTrustedDataMessage&>(::protowire::_BlockWithTrustedDataMessage_default_instance_);
}
inline const ::protowire::BlockWithTrustedDataMessage& KaspadMessage::blockwithtrusteddata() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.blockWithTrustedData)
  return _internal_blockwithtrusteddata();
}
inline ::protowire::BlockWithTrustedDataMessage* KaspadMessage::unsafe_arena_release_blockwithtrusteddata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.blockWithTrustedData)
  if (_internal_has_blockwithtrusteddata()) {
    clear_has_payload();
    ::protowire::BlockWithTrustedDataMessage* temp = payload_.blockwithtrusteddata_;
    payload_.blockwithtrusteddata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_blockwithtrusteddata(::protowire::BlockWithTrustedDataMessage* blockwithtrusteddata) {
  clear_payload();
  if (blockwithtrusteddata) {
    set_has_blockwithtrusteddata();
    payload_.blockwithtrusteddata_ = blockwithtrusteddata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.blockWithTrustedData)
}
inline ::protowire::BlockWithTrustedDataMessage* KaspadMessage::_internal_mutable_blockwithtrusteddata() {
  if (!_internal_has_blockwithtrusteddata()) {
    clear_payload();
    set_has_blockwithtrusteddata();
    payload_.blockwithtrusteddata_ = CreateMaybeMessage< ::protowire::BlockWithTrustedDataMessage >(GetArenaForAllocation());
  }
  return payload_.blockwithtrusteddata_;
}
inline ::protowire::BlockWithTrustedDataMessage* KaspadMessage::mutable_blockwithtrusteddata() {
  ::protowire::BlockWithTrustedDataMessage* _msg = _internal_mutable_blockwithtrusteddata();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.blockWithTrustedData)
  return _msg;
}

// .protowire.DoneBlocksWithTrustedDataMessage doneBlocksWithTrustedData = 37;
inline bool KaspadMessage::_internal_has_doneblockswithtrusteddata() const {
  return payload_case() == kDoneBlocksWithTrustedData;
}
inline bool KaspadMessage::has_doneblockswithtrusteddata() const {
  return _internal_has_doneblockswithtrusteddata();
}
inline void KaspadMessage::set_has_doneblockswithtrusteddata() {
  _oneof_case_[0] = kDoneBlocksWithTrustedData;
}
inline ::protowire::DoneBlocksWithTrustedDataMessage* KaspadMessage::release_doneblockswithtrusteddata() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.doneBlocksWithTrustedData)
  if (_internal_has_doneblockswithtrusteddata()) {
    clear_has_payload();
      ::protowire::DoneBlocksWithTrustedDataMessage* temp = payload_.doneblockswithtrusteddata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.doneblockswithtrusteddata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::DoneBlocksWithTrustedDataMessage& KaspadMessage::_internal_doneblockswithtrusteddata() const {
  return _internal_has_doneblockswithtrusteddata()
      ? *payload_.doneblockswithtrusteddata_
      : reinterpret_cast< ::protowire::DoneBlocksWithTrustedDataMessage&>(::protowire::_DoneBlocksWithTrustedDataMessage_default_instance_);
}
inline const ::protowire::DoneBlocksWithTrustedDataMessage& KaspadMessage::doneblockswithtrusteddata() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.doneBlocksWithTrustedData)
  return _internal_doneblockswithtrusteddata();
}
inline ::protowire::DoneBlocksWithTrustedDataMessage* KaspadMessage::unsafe_arena_release_doneblockswithtrusteddata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.doneBlocksWithTrustedData)
  if (_internal_has_doneblockswithtrusteddata()) {
    clear_has_payload();
    ::protowire::DoneBlocksWithTrustedDataMessage* temp = payload_.doneblockswithtrusteddata_;
    payload_.doneblockswithtrusteddata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_doneblockswithtrusteddata(::protowire::DoneBlocksWithTrustedDataMessage* doneblockswithtrusteddata) {
  clear_payload();
  if (doneblockswithtrusteddata) {
    set_has_doneblockswithtrusteddata();
    payload_.doneblockswithtrusteddata_ = doneblockswithtrusteddata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.doneBlocksWithTrustedData)
}
inline ::protowire::DoneBlocksWithTrustedDataMessage* KaspadMessage::_internal_mutable_doneblockswithtrusteddata() {
  if (!_internal_has_doneblockswithtrusteddata()) {
    clear_payload();
    set_has_doneblockswithtrusteddata();
    payload_.doneblockswithtrusteddata_ = CreateMaybeMessage< ::protowire::DoneBlocksWithTrustedDataMessage >(GetArenaForAllocation());
  }
  return payload_.doneblockswithtrusteddata_;
}
inline ::protowire::DoneBlocksWithTrustedDataMessage* KaspadMessage::mutable_doneblockswithtrusteddata() {
  ::protowire::DoneBlocksWithTrustedDataMessage* _msg = _internal_mutable_doneblockswithtrusteddata();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.doneBlocksWithTrustedData)
  return _msg;
}

// .protowire.RequestPruningPointAndItsAnticoneMessage requestPruningPointAndItsAnticone = 40;
inline bool KaspadMessage::_internal_has_requestpruningpointanditsanticone() const {
  return payload_case() == kRequestPruningPointAndItsAnticone;
}
inline bool KaspadMessage::has_requestpruningpointanditsanticone() const {
  return _internal_has_requestpruningpointanditsanticone();
}
inline void KaspadMessage::set_has_requestpruningpointanditsanticone() {
  _oneof_case_[0] = kRequestPruningPointAndItsAnticone;
}
inline ::protowire::RequestPruningPointAndItsAnticoneMessage* KaspadMessage::release_requestpruningpointanditsanticone() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestPruningPointAndItsAnticone)
  if (_internal_has_requestpruningpointanditsanticone()) {
    clear_has_payload();
      ::protowire::RequestPruningPointAndItsAnticoneMessage* temp = payload_.requestpruningpointanditsanticone_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requestpruningpointanditsanticone_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestPruningPointAndItsAnticoneMessage& KaspadMessage::_internal_requestpruningpointanditsanticone() const {
  return _internal_has_requestpruningpointanditsanticone()
      ? *payload_.requestpruningpointanditsanticone_
      : reinterpret_cast< ::protowire::RequestPruningPointAndItsAnticoneMessage&>(::protowire::_RequestPruningPointAndItsAnticoneMessage_default_instance_);
}
inline const ::protowire::RequestPruningPointAndItsAnticoneMessage& KaspadMessage::requestpruningpointanditsanticone() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestPruningPointAndItsAnticone)
  return _internal_requestpruningpointanditsanticone();
}
inline ::protowire::RequestPruningPointAndItsAnticoneMessage* KaspadMessage::unsafe_arena_release_requestpruningpointanditsanticone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestPruningPointAndItsAnticone)
  if (_internal_has_requestpruningpointanditsanticone()) {
    clear_has_payload();
    ::protowire::RequestPruningPointAndItsAnticoneMessage* temp = payload_.requestpruningpointanditsanticone_;
    payload_.requestpruningpointanditsanticone_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requestpruningpointanditsanticone(::protowire::RequestPruningPointAndItsAnticoneMessage* requestpruningpointanditsanticone) {
  clear_payload();
  if (requestpruningpointanditsanticone) {
    set_has_requestpruningpointanditsanticone();
    payload_.requestpruningpointanditsanticone_ = requestpruningpointanditsanticone;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestPruningPointAndItsAnticone)
}
inline ::protowire::RequestPruningPointAndItsAnticoneMessage* KaspadMessage::_internal_mutable_requestpruningpointanditsanticone() {
  if (!_internal_has_requestpruningpointanditsanticone()) {
    clear_payload();
    set_has_requestpruningpointanditsanticone();
    payload_.requestpruningpointanditsanticone_ = CreateMaybeMessage< ::protowire::RequestPruningPointAndItsAnticoneMessage >(GetArenaForAllocation());
  }
  return payload_.requestpruningpointanditsanticone_;
}
inline ::protowire::RequestPruningPointAndItsAnticoneMessage* KaspadMessage::mutable_requestpruningpointanditsanticone() {
  ::protowire::RequestPruningPointAndItsAnticoneMessage* _msg = _internal_mutable_requestpruningpointanditsanticone();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestPruningPointAndItsAnticone)
  return _msg;
}

// .protowire.BlockHeadersMessage blockHeaders = 41;
inline bool KaspadMessage::_internal_has_blockheaders() const {
  return payload_case() == kBlockHeaders;
}
inline bool KaspadMessage::has_blockheaders() const {
  return _internal_has_blockheaders();
}
inline void KaspadMessage::set_has_blockheaders() {
  _oneof_case_[0] = kBlockHeaders;
}
inline ::protowire::BlockHeadersMessage* KaspadMessage::release_blockheaders() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.blockHeaders)
  if (_internal_has_blockheaders()) {
    clear_has_payload();
      ::protowire::BlockHeadersMessage* temp = payload_.blockheaders_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.blockheaders_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::BlockHeadersMessage& KaspadMessage::_internal_blockheaders() const {
  return _internal_has_blockheaders()
      ? *payload_.blockheaders_
      : reinterpret_cast< ::protowire::BlockHeadersMessage&>(::protowire::_BlockHeadersMessage_default_instance_);
}
inline const ::protowire::BlockHeadersMessage& KaspadMessage::blockheaders() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.blockHeaders)
  return _internal_blockheaders();
}
inline ::protowire::BlockHeadersMessage* KaspadMessage::unsafe_arena_release_blockheaders() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.blockHeaders)
  if (_internal_has_blockheaders()) {
    clear_has_payload();
    ::protowire::BlockHeadersMessage* temp = payload_.blockheaders_;
    payload_.blockheaders_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_blockheaders(::protowire::BlockHeadersMessage* blockheaders) {
  clear_payload();
  if (blockheaders) {
    set_has_blockheaders();
    payload_.blockheaders_ = blockheaders;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.blockHeaders)
}
inline ::protowire::BlockHeadersMessage* KaspadMessage::_internal_mutable_blockheaders() {
  if (!_internal_has_blockheaders()) {
    clear_payload();
    set_has_blockheaders();
    payload_.blockheaders_ = CreateMaybeMessage< ::protowire::BlockHeadersMessage >(GetArenaForAllocation());
  }
  return payload_.blockheaders_;
}
inline ::protowire::BlockHeadersMessage* KaspadMessage::mutable_blockheaders() {
  ::protowire::BlockHeadersMessage* _msg = _internal_mutable_blockheaders();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.blockHeaders)
  return _msg;
}

// .protowire.RequestNextHeadersMessage requestNextHeaders = 42;
inline bool KaspadMessage::_internal_has_requestnextheaders() const {
  return payload_case() == kRequestNextHeaders;
}
inline bool KaspadMessage::has_requestnextheaders() const {
  return _internal_has_requestnextheaders();
}
inline void KaspadMessage::set_has_requestnextheaders() {
  _oneof_case_[0] = kRequestNextHeaders;
}
inline ::protowire::RequestNextHeadersMessage* KaspadMessage::release_requestnextheaders() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestNextHeaders)
  if (_internal_has_requestnextheaders()) {
    clear_has_payload();
      ::protowire::RequestNextHeadersMessage* temp = payload_.requestnextheaders_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requestnextheaders_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestNextHeadersMessage& KaspadMessage::_internal_requestnextheaders() const {
  return _internal_has_requestnextheaders()
      ? *payload_.requestnextheaders_
      : reinterpret_cast< ::protowire::RequestNextHeadersMessage&>(::protowire::_RequestNextHeadersMessage_default_instance_);
}
inline const ::protowire::RequestNextHeadersMessage& KaspadMessage::requestnextheaders() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestNextHeaders)
  return _internal_requestnextheaders();
}
inline ::protowire::RequestNextHeadersMessage* KaspadMessage::unsafe_arena_release_requestnextheaders() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestNextHeaders)
  if (_internal_has_requestnextheaders()) {
    clear_has_payload();
    ::protowire::RequestNextHeadersMessage* temp = payload_.requestnextheaders_;
    payload_.requestnextheaders_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requestnextheaders(::protowire::RequestNextHeadersMessage* requestnextheaders) {
  clear_payload();
  if (requestnextheaders) {
    set_has_requestnextheaders();
    payload_.requestnextheaders_ = requestnextheaders;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestNextHeaders)
}
inline ::protowire::RequestNextHeadersMessage* KaspadMessage::_internal_mutable_requestnextheaders() {
  if (!_internal_has_requestnextheaders()) {
    clear_payload();
    set_has_requestnextheaders();
    payload_.requestnextheaders_ = CreateMaybeMessage< ::protowire::RequestNextHeadersMessage >(GetArenaForAllocation());
  }
  return payload_.requestnextheaders_;
}
inline ::protowire::RequestNextHeadersMessage* KaspadMessage::mutable_requestnextheaders() {
  ::protowire::RequestNextHeadersMessage* _msg = _internal_mutable_requestnextheaders();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestNextHeaders)
  return _msg;
}

// .protowire.DoneHeadersMessage DoneHeaders = 43;
inline bool KaspadMessage::_internal_has_doneheaders() const {
  return payload_case() == kDoneHeaders;
}
inline bool KaspadMessage::has_doneheaders() const {
  return _internal_has_doneheaders();
}
inline void KaspadMessage::set_has_doneheaders() {
  _oneof_case_[0] = kDoneHeaders;
}
inline ::protowire::DoneHeadersMessage* KaspadMessage::release_doneheaders() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.DoneHeaders)
  if (_internal_has_doneheaders()) {
    clear_has_payload();
      ::protowire::DoneHeadersMessage* temp = payload_.doneheaders_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.doneheaders_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::DoneHeadersMessage& KaspadMessage::_internal_doneheaders() const {
  return _internal_has_doneheaders()
      ? *payload_.doneheaders_
      : reinterpret_cast< ::protowire::DoneHeadersMessage&>(::protowire::_DoneHeadersMessage_default_instance_);
}
inline const ::protowire::DoneHeadersMessage& KaspadMessage::doneheaders() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.DoneHeaders)
  return _internal_doneheaders();
}
inline ::protowire::DoneHeadersMessage* KaspadMessage::unsafe_arena_release_doneheaders() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.DoneHeaders)
  if (_internal_has_doneheaders()) {
    clear_has_payload();
    ::protowire::DoneHeadersMessage* temp = payload_.doneheaders_;
    payload_.doneheaders_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_doneheaders(::protowire::DoneHeadersMessage* doneheaders) {
  clear_payload();
  if (doneheaders) {
    set_has_doneheaders();
    payload_.doneheaders_ = doneheaders;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.DoneHeaders)
}
inline ::protowire::DoneHeadersMessage* KaspadMessage::_internal_mutable_doneheaders() {
  if (!_internal_has_doneheaders()) {
    clear_payload();
    set_has_doneheaders();
    payload_.doneheaders_ = CreateMaybeMessage< ::protowire::DoneHeadersMessage >(GetArenaForAllocation());
  }
  return payload_.doneheaders_;
}
inline ::protowire::DoneHeadersMessage* KaspadMessage::mutable_doneheaders() {
  ::protowire::DoneHeadersMessage* _msg = _internal_mutable_doneheaders();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.DoneHeaders)
  return _msg;
}

// .protowire.RequestPruningPointUTXOSetMessage requestPruningPointUTXOSet = 44;
inline bool KaspadMessage::_internal_has_requestpruningpointutxoset() const {
  return payload_case() == kRequestPruningPointUTXOSet;
}
inline bool KaspadMessage::has_requestpruningpointutxoset() const {
  return _internal_has_requestpruningpointutxoset();
}
inline void KaspadMessage::set_has_requestpruningpointutxoset() {
  _oneof_case_[0] = kRequestPruningPointUTXOSet;
}
inline ::protowire::RequestPruningPointUTXOSetMessage* KaspadMessage::release_requestpruningpointutxoset() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestPruningPointUTXOSet)
  if (_internal_has_requestpruningpointutxoset()) {
    clear_has_payload();
      ::protowire::RequestPruningPointUTXOSetMessage* temp = payload_.requestpruningpointutxoset_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requestpruningpointutxoset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestPruningPointUTXOSetMessage& KaspadMessage::_internal_requestpruningpointutxoset() const {
  return _internal_has_requestpruningpointutxoset()
      ? *payload_.requestpruningpointutxoset_
      : reinterpret_cast< ::protowire::RequestPruningPointUTXOSetMessage&>(::protowire::_RequestPruningPointUTXOSetMessage_default_instance_);
}
inline const ::protowire::RequestPruningPointUTXOSetMessage& KaspadMessage::requestpruningpointutxoset() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestPruningPointUTXOSet)
  return _internal_requestpruningpointutxoset();
}
inline ::protowire::RequestPruningPointUTXOSetMessage* KaspadMessage::unsafe_arena_release_requestpruningpointutxoset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestPruningPointUTXOSet)
  if (_internal_has_requestpruningpointutxoset()) {
    clear_has_payload();
    ::protowire::RequestPruningPointUTXOSetMessage* temp = payload_.requestpruningpointutxoset_;
    payload_.requestpruningpointutxoset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requestpruningpointutxoset(::protowire::RequestPruningPointUTXOSetMessage* requestpruningpointutxoset) {
  clear_payload();
  if (requestpruningpointutxoset) {
    set_has_requestpruningpointutxoset();
    payload_.requestpruningpointutxoset_ = requestpruningpointutxoset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestPruningPointUTXOSet)
}
inline ::protowire::RequestPruningPointUTXOSetMessage* KaspadMessage::_internal_mutable_requestpruningpointutxoset() {
  if (!_internal_has_requestpruningpointutxoset()) {
    clear_payload();
    set_has_requestpruningpointutxoset();
    payload_.requestpruningpointutxoset_ = CreateMaybeMessage< ::protowire::RequestPruningPointUTXOSetMessage >(GetArenaForAllocation());
  }
  return payload_.requestpruningpointutxoset_;
}
inline ::protowire::RequestPruningPointUTXOSetMessage* KaspadMessage::mutable_requestpruningpointutxoset() {
  ::protowire::RequestPruningPointUTXOSetMessage* _msg = _internal_mutable_requestpruningpointutxoset();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestPruningPointUTXOSet)
  return _msg;
}

// .protowire.RequestHeadersMessage requestHeaders = 45;
inline bool KaspadMessage::_internal_has_requestheaders() const {
  return payload_case() == kRequestHeaders;
}
inline bool KaspadMessage::has_requestheaders() const {
  return _internal_has_requestheaders();
}
inline void KaspadMessage::set_has_requestheaders() {
  _oneof_case_[0] = kRequestHeaders;
}
inline ::protowire::RequestHeadersMessage* KaspadMessage::release_requestheaders() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestHeaders)
  if (_internal_has_requestheaders()) {
    clear_has_payload();
      ::protowire::RequestHeadersMessage* temp = payload_.requestheaders_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requestheaders_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestHeadersMessage& KaspadMessage::_internal_requestheaders() const {
  return _internal_has_requestheaders()
      ? *payload_.requestheaders_
      : reinterpret_cast< ::protowire::RequestHeadersMessage&>(::protowire::_RequestHeadersMessage_default_instance_);
}
inline const ::protowire::RequestHeadersMessage& KaspadMessage::requestheaders() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestHeaders)
  return _internal_requestheaders();
}
inline ::protowire::RequestHeadersMessage* KaspadMessage::unsafe_arena_release_requestheaders() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestHeaders)
  if (_internal_has_requestheaders()) {
    clear_has_payload();
    ::protowire::RequestHeadersMessage* temp = payload_.requestheaders_;
    payload_.requestheaders_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requestheaders(::protowire::RequestHeadersMessage* requestheaders) {
  clear_payload();
  if (requestheaders) {
    set_has_requestheaders();
    payload_.requestheaders_ = requestheaders;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestHeaders)
}
inline ::protowire::RequestHeadersMessage* KaspadMessage::_internal_mutable_requestheaders() {
  if (!_internal_has_requestheaders()) {
    clear_payload();
    set_has_requestheaders();
    payload_.requestheaders_ = CreateMaybeMessage< ::protowire::RequestHeadersMessage >(GetArenaForAllocation());
  }
  return payload_.requestheaders_;
}
inline ::protowire::RequestHeadersMessage* KaspadMessage::mutable_requestheaders() {
  ::protowire::RequestHeadersMessage* _msg = _internal_mutable_requestheaders();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestHeaders)
  return _msg;
}

// .protowire.RequestBlockLocatorMessage requestBlockLocator = 46;
inline bool KaspadMessage::_internal_has_requestblocklocator() const {
  return payload_case() == kRequestBlockLocator;
}
inline bool KaspadMessage::has_requestblocklocator() const {
  return _internal_has_requestblocklocator();
}
inline void KaspadMessage::set_has_requestblocklocator() {
  _oneof_case_[0] = kRequestBlockLocator;
}
inline ::protowire::RequestBlockLocatorMessage* KaspadMessage::release_requestblocklocator() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestBlockLocator)
  if (_internal_has_requestblocklocator()) {
    clear_has_payload();
      ::protowire::RequestBlockLocatorMessage* temp = payload_.requestblocklocator_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requestblocklocator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestBlockLocatorMessage& KaspadMessage::_internal_requestblocklocator() const {
  return _internal_has_requestblocklocator()
      ? *payload_.requestblocklocator_
      : reinterpret_cast< ::protowire::RequestBlockLocatorMessage&>(::protowire::_RequestBlockLocatorMessage_default_instance_);
}
inline const ::protowire::RequestBlockLocatorMessage& KaspadMessage::requestblocklocator() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestBlockLocator)
  return _internal_requestblocklocator();
}
inline ::protowire::RequestBlockLocatorMessage* KaspadMessage::unsafe_arena_release_requestblocklocator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestBlockLocator)
  if (_internal_has_requestblocklocator()) {
    clear_has_payload();
    ::protowire::RequestBlockLocatorMessage* temp = payload_.requestblocklocator_;
    payload_.requestblocklocator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requestblocklocator(::protowire::RequestBlockLocatorMessage* requestblocklocator) {
  clear_payload();
  if (requestblocklocator) {
    set_has_requestblocklocator();
    payload_.requestblocklocator_ = requestblocklocator;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestBlockLocator)
}
inline ::protowire::RequestBlockLocatorMessage* KaspadMessage::_internal_mutable_requestblocklocator() {
  if (!_internal_has_requestblocklocator()) {
    clear_payload();
    set_has_requestblocklocator();
    payload_.requestblocklocator_ = CreateMaybeMessage< ::protowire::RequestBlockLocatorMessage >(GetArenaForAllocation());
  }
  return payload_.requestblocklocator_;
}
inline ::protowire::RequestBlockLocatorMessage* KaspadMessage::mutable_requestblocklocator() {
  ::protowire::RequestBlockLocatorMessage* _msg = _internal_mutable_requestblocklocator();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestBlockLocator)
  return _msg;
}

// .protowire.PruningPointsMessage pruningPoints = 47;
inline bool KaspadMessage::_internal_has_pruningpoints() const {
  return payload_case() == kPruningPoints;
}
inline bool KaspadMessage::has_pruningpoints() const {
  return _internal_has_pruningpoints();
}
inline void KaspadMessage::set_has_pruningpoints() {
  _oneof_case_[0] = kPruningPoints;
}
inline ::protowire::PruningPointsMessage* KaspadMessage::release_pruningpoints() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.pruningPoints)
  if (_internal_has_pruningpoints()) {
    clear_has_payload();
      ::protowire::PruningPointsMessage* temp = payload_.pruningpoints_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.pruningpoints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::PruningPointsMessage& KaspadMessage::_internal_pruningpoints() const {
  return _internal_has_pruningpoints()
      ? *payload_.pruningpoints_
      : reinterpret_cast< ::protowire::PruningPointsMessage&>(::protowire::_PruningPointsMessage_default_instance_);
}
inline const ::protowire::PruningPointsMessage& KaspadMessage::pruningpoints() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.pruningPoints)
  return _internal_pruningpoints();
}
inline ::protowire::PruningPointsMessage* KaspadMessage::unsafe_arena_release_pruningpoints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.pruningPoints)
  if (_internal_has_pruningpoints()) {
    clear_has_payload();
    ::protowire::PruningPointsMessage* temp = payload_.pruningpoints_;
    payload_.pruningpoints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_pruningpoints(::protowire::PruningPointsMessage* pruningpoints) {
  clear_payload();
  if (pruningpoints) {
    set_has_pruningpoints();
    payload_.pruningpoints_ = pruningpoints;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.pruningPoints)
}
inline ::protowire::PruningPointsMessage* KaspadMessage::_internal_mutable_pruningpoints() {
  if (!_internal_has_pruningpoints()) {
    clear_payload();
    set_has_pruningpoints();
    payload_.pruningpoints_ = CreateMaybeMessage< ::protowire::PruningPointsMessage >(GetArenaForAllocation());
  }
  return payload_.pruningpoints_;
}
inline ::protowire::PruningPointsMessage* KaspadMessage::mutable_pruningpoints() {
  ::protowire::PruningPointsMessage* _msg = _internal_mutable_pruningpoints();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.pruningPoints)
  return _msg;
}

// .protowire.RequestPruningPointProofMessage requestPruningPointProof = 48;
inline bool KaspadMessage::_internal_has_requestpruningpointproof() const {
  return payload_case() == kRequestPruningPointProof;
}
inline bool KaspadMessage::has_requestpruningpointproof() const {
  return _internal_has_requestpruningpointproof();
}
inline void KaspadMessage::set_has_requestpruningpointproof() {
  _oneof_case_[0] = kRequestPruningPointProof;
}
inline ::protowire::RequestPruningPointProofMessage* KaspadMessage::release_requestpruningpointproof() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestPruningPointProof)
  if (_internal_has_requestpruningpointproof()) {
    clear_has_payload();
      ::protowire::RequestPruningPointProofMessage* temp = payload_.requestpruningpointproof_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requestpruningpointproof_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestPruningPointProofMessage& KaspadMessage::_internal_requestpruningpointproof() const {
  return _internal_has_requestpruningpointproof()
      ? *payload_.requestpruningpointproof_
      : reinterpret_cast< ::protowire::RequestPruningPointProofMessage&>(::protowire::_RequestPruningPointProofMessage_default_instance_);
}
inline const ::protowire::RequestPruningPointProofMessage& KaspadMessage::requestpruningpointproof() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestPruningPointProof)
  return _internal_requestpruningpointproof();
}
inline ::protowire::RequestPruningPointProofMessage* KaspadMessage::unsafe_arena_release_requestpruningpointproof() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestPruningPointProof)
  if (_internal_has_requestpruningpointproof()) {
    clear_has_payload();
    ::protowire::RequestPruningPointProofMessage* temp = payload_.requestpruningpointproof_;
    payload_.requestpruningpointproof_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requestpruningpointproof(::protowire::RequestPruningPointProofMessage* requestpruningpointproof) {
  clear_payload();
  if (requestpruningpointproof) {
    set_has_requestpruningpointproof();
    payload_.requestpruningpointproof_ = requestpruningpointproof;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestPruningPointProof)
}
inline ::protowire::RequestPruningPointProofMessage* KaspadMessage::_internal_mutable_requestpruningpointproof() {
  if (!_internal_has_requestpruningpointproof()) {
    clear_payload();
    set_has_requestpruningpointproof();
    payload_.requestpruningpointproof_ = CreateMaybeMessage< ::protowire::RequestPruningPointProofMessage >(GetArenaForAllocation());
  }
  return payload_.requestpruningpointproof_;
}
inline ::protowire::RequestPruningPointProofMessage* KaspadMessage::mutable_requestpruningpointproof() {
  ::protowire::RequestPruningPointProofMessage* _msg = _internal_mutable_requestpruningpointproof();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestPruningPointProof)
  return _msg;
}

// .protowire.PruningPointProofMessage pruningPointProof = 49;
inline bool KaspadMessage::_internal_has_pruningpointproof() const {
  return payload_case() == kPruningPointProof;
}
inline bool KaspadMessage::has_pruningpointproof() const {
  return _internal_has_pruningpointproof();
}
inline void KaspadMessage::set_has_pruningpointproof() {
  _oneof_case_[0] = kPruningPointProof;
}
inline ::protowire::PruningPointProofMessage* KaspadMessage::release_pruningpointproof() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.pruningPointProof)
  if (_internal_has_pruningpointproof()) {
    clear_has_payload();
      ::protowire::PruningPointProofMessage* temp = payload_.pruningpointproof_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.pruningpointproof_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::PruningPointProofMessage& KaspadMessage::_internal_pruningpointproof() const {
  return _internal_has_pruningpointproof()
      ? *payload_.pruningpointproof_
      : reinterpret_cast< ::protowire::PruningPointProofMessage&>(::protowire::_PruningPointProofMessage_default_instance_);
}
inline const ::protowire::PruningPointProofMessage& KaspadMessage::pruningpointproof() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.pruningPointProof)
  return _internal_pruningpointproof();
}
inline ::protowire::PruningPointProofMessage* KaspadMessage::unsafe_arena_release_pruningpointproof() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.pruningPointProof)
  if (_internal_has_pruningpointproof()) {
    clear_has_payload();
    ::protowire::PruningPointProofMessage* temp = payload_.pruningpointproof_;
    payload_.pruningpointproof_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_pruningpointproof(::protowire::PruningPointProofMessage* pruningpointproof) {
  clear_payload();
  if (pruningpointproof) {
    set_has_pruningpointproof();
    payload_.pruningpointproof_ = pruningpointproof;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.pruningPointProof)
}
inline ::protowire::PruningPointProofMessage* KaspadMessage::_internal_mutable_pruningpointproof() {
  if (!_internal_has_pruningpointproof()) {
    clear_payload();
    set_has_pruningpointproof();
    payload_.pruningpointproof_ = CreateMaybeMessage< ::protowire::PruningPointProofMessage >(GetArenaForAllocation());
  }
  return payload_.pruningpointproof_;
}
inline ::protowire::PruningPointProofMessage* KaspadMessage::mutable_pruningpointproof() {
  ::protowire::PruningPointProofMessage* _msg = _internal_mutable_pruningpointproof();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.pruningPointProof)
  return _msg;
}

// .protowire.ReadyMessage ready = 50;
inline bool KaspadMessage::_internal_has_ready() const {
  return payload_case() == kReady;
}
inline bool KaspadMessage::has_ready() const {
  return _internal_has_ready();
}
inline void KaspadMessage::set_has_ready() {
  _oneof_case_[0] = kReady;
}
inline ::protowire::ReadyMessage* KaspadMessage::release_ready() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.ready)
  if (_internal_has_ready()) {
    clear_has_payload();
      ::protowire::ReadyMessage* temp = payload_.ready_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.ready_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::ReadyMessage& KaspadMessage::_internal_ready() const {
  return _internal_has_ready()
      ? *payload_.ready_
      : reinterpret_cast< ::protowire::ReadyMessage&>(::protowire::_ReadyMessage_default_instance_);
}
inline const ::protowire::ReadyMessage& KaspadMessage::ready() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.ready)
  return _internal_ready();
}
inline ::protowire::ReadyMessage* KaspadMessage::unsafe_arena_release_ready() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.ready)
  if (_internal_has_ready()) {
    clear_has_payload();
    ::protowire::ReadyMessage* temp = payload_.ready_;
    payload_.ready_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_ready(::protowire::ReadyMessage* ready) {
  clear_payload();
  if (ready) {
    set_has_ready();
    payload_.ready_ = ready;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.ready)
}
inline ::protowire::ReadyMessage* KaspadMessage::_internal_mutable_ready() {
  if (!_internal_has_ready()) {
    clear_payload();
    set_has_ready();
    payload_.ready_ = CreateMaybeMessage< ::protowire::ReadyMessage >(GetArenaForAllocation());
  }
  return payload_.ready_;
}
inline ::protowire::ReadyMessage* KaspadMessage::mutable_ready() {
  ::protowire::ReadyMessage* _msg = _internal_mutable_ready();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.ready)
  return _msg;
}

// .protowire.BlockWithTrustedDataV4Message blockWithTrustedDataV4 = 51;
inline bool KaspadMessage::_internal_has_blockwithtrusteddatav4() const {
  return payload_case() == kBlockWithTrustedDataV4;
}
inline bool KaspadMessage::has_blockwithtrusteddatav4() const {
  return _internal_has_blockwithtrusteddatav4();
}
inline void KaspadMessage::set_has_blockwithtrusteddatav4() {
  _oneof_case_[0] = kBlockWithTrustedDataV4;
}
inline ::protowire::BlockWithTrustedDataV4Message* KaspadMessage::release_blockwithtrusteddatav4() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.blockWithTrustedDataV4)
  if (_internal_has_blockwithtrusteddatav4()) {
    clear_has_payload();
      ::protowire::BlockWithTrustedDataV4Message* temp = payload_.blockwithtrusteddatav4_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.blockwithtrusteddatav4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::BlockWithTrustedDataV4Message& KaspadMessage::_internal_blockwithtrusteddatav4() const {
  return _internal_has_blockwithtrusteddatav4()
      ? *payload_.blockwithtrusteddatav4_
      : reinterpret_cast< ::protowire::BlockWithTrustedDataV4Message&>(::protowire::_BlockWithTrustedDataV4Message_default_instance_);
}
inline const ::protowire::BlockWithTrustedDataV4Message& KaspadMessage::blockwithtrusteddatav4() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.blockWithTrustedDataV4)
  return _internal_blockwithtrusteddatav4();
}
inline ::protowire::BlockWithTrustedDataV4Message* KaspadMessage::unsafe_arena_release_blockwithtrusteddatav4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.blockWithTrustedDataV4)
  if (_internal_has_blockwithtrusteddatav4()) {
    clear_has_payload();
    ::protowire::BlockWithTrustedDataV4Message* temp = payload_.blockwithtrusteddatav4_;
    payload_.blockwithtrusteddatav4_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_blockwithtrusteddatav4(::protowire::BlockWithTrustedDataV4Message* blockwithtrusteddatav4) {
  clear_payload();
  if (blockwithtrusteddatav4) {
    set_has_blockwithtrusteddatav4();
    payload_.blockwithtrusteddatav4_ = blockwithtrusteddatav4;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.blockWithTrustedDataV4)
}
inline ::protowire::BlockWithTrustedDataV4Message* KaspadMessage::_internal_mutable_blockwithtrusteddatav4() {
  if (!_internal_has_blockwithtrusteddatav4()) {
    clear_payload();
    set_has_blockwithtrusteddatav4();
    payload_.blockwithtrusteddatav4_ = CreateMaybeMessage< ::protowire::BlockWithTrustedDataV4Message >(GetArenaForAllocation());
  }
  return payload_.blockwithtrusteddatav4_;
}
inline ::protowire::BlockWithTrustedDataV4Message* KaspadMessage::mutable_blockwithtrusteddatav4() {
  ::protowire::BlockWithTrustedDataV4Message* _msg = _internal_mutable_blockwithtrusteddatav4();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.blockWithTrustedDataV4)
  return _msg;
}

// .protowire.TrustedDataMessage trustedData = 52;
inline bool KaspadMessage::_internal_has_trusteddata() const {
  return payload_case() == kTrustedData;
}
inline bool KaspadMessage::has_trusteddata() const {
  return _internal_has_trusteddata();
}
inline void KaspadMessage::set_has_trusteddata() {
  _oneof_case_[0] = kTrustedData;
}
inline ::protowire::TrustedDataMessage* KaspadMessage::release_trusteddata() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.trustedData)
  if (_internal_has_trusteddata()) {
    clear_has_payload();
      ::protowire::TrustedDataMessage* temp = payload_.trusteddata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.trusteddata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::TrustedDataMessage& KaspadMessage::_internal_trusteddata() const {
  return _internal_has_trusteddata()
      ? *payload_.trusteddata_
      : reinterpret_cast< ::protowire::TrustedDataMessage&>(::protowire::_TrustedDataMessage_default_instance_);
}
inline const ::protowire::TrustedDataMessage& KaspadMessage::trusteddata() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.trustedData)
  return _internal_trusteddata();
}
inline ::protowire::TrustedDataMessage* KaspadMessage::unsafe_arena_release_trusteddata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.trustedData)
  if (_internal_has_trusteddata()) {
    clear_has_payload();
    ::protowire::TrustedDataMessage* temp = payload_.trusteddata_;
    payload_.trusteddata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_trusteddata(::protowire::TrustedDataMessage* trusteddata) {
  clear_payload();
  if (trusteddata) {
    set_has_trusteddata();
    payload_.trusteddata_ = trusteddata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.trustedData)
}
inline ::protowire::TrustedDataMessage* KaspadMessage::_internal_mutable_trusteddata() {
  if (!_internal_has_trusteddata()) {
    clear_payload();
    set_has_trusteddata();
    payload_.trusteddata_ = CreateMaybeMessage< ::protowire::TrustedDataMessage >(GetArenaForAllocation());
  }
  return payload_.trusteddata_;
}
inline ::protowire::TrustedDataMessage* KaspadMessage::mutable_trusteddata() {
  ::protowire::TrustedDataMessage* _msg = _internal_mutable_trusteddata();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.trustedData)
  return _msg;
}

// .protowire.RequestIBDChainBlockLocatorMessage requestIBDChainBlockLocator = 53;
inline bool KaspadMessage::_internal_has_requestibdchainblocklocator() const {
  return payload_case() == kRequestIBDChainBlockLocator;
}
inline bool KaspadMessage::has_requestibdchainblocklocator() const {
  return _internal_has_requestibdchainblocklocator();
}
inline void KaspadMessage::set_has_requestibdchainblocklocator() {
  _oneof_case_[0] = kRequestIBDChainBlockLocator;
}
inline ::protowire::RequestIBDChainBlockLocatorMessage* KaspadMessage::release_requestibdchainblocklocator() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestIBDChainBlockLocator)
  if (_internal_has_requestibdchainblocklocator()) {
    clear_has_payload();
      ::protowire::RequestIBDChainBlockLocatorMessage* temp = payload_.requestibdchainblocklocator_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requestibdchainblocklocator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestIBDChainBlockLocatorMessage& KaspadMessage::_internal_requestibdchainblocklocator() const {
  return _internal_has_requestibdchainblocklocator()
      ? *payload_.requestibdchainblocklocator_
      : reinterpret_cast< ::protowire::RequestIBDChainBlockLocatorMessage&>(::protowire::_RequestIBDChainBlockLocatorMessage_default_instance_);
}
inline const ::protowire::RequestIBDChainBlockLocatorMessage& KaspadMessage::requestibdchainblocklocator() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestIBDChainBlockLocator)
  return _internal_requestibdchainblocklocator();
}
inline ::protowire::RequestIBDChainBlockLocatorMessage* KaspadMessage::unsafe_arena_release_requestibdchainblocklocator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestIBDChainBlockLocator)
  if (_internal_has_requestibdchainblocklocator()) {
    clear_has_payload();
    ::protowire::RequestIBDChainBlockLocatorMessage* temp = payload_.requestibdchainblocklocator_;
    payload_.requestibdchainblocklocator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requestibdchainblocklocator(::protowire::RequestIBDChainBlockLocatorMessage* requestibdchainblocklocator) {
  clear_payload();
  if (requestibdchainblocklocator) {
    set_has_requestibdchainblocklocator();
    payload_.requestibdchainblocklocator_ = requestibdchainblocklocator;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestIBDChainBlockLocator)
}
inline ::protowire::RequestIBDChainBlockLocatorMessage* KaspadMessage::_internal_mutable_requestibdchainblocklocator() {
  if (!_internal_has_requestibdchainblocklocator()) {
    clear_payload();
    set_has_requestibdchainblocklocator();
    payload_.requestibdchainblocklocator_ = CreateMaybeMessage< ::protowire::RequestIBDChainBlockLocatorMessage >(GetArenaForAllocation());
  }
  return payload_.requestibdchainblocklocator_;
}
inline ::protowire::RequestIBDChainBlockLocatorMessage* KaspadMessage::mutable_requestibdchainblocklocator() {
  ::protowire::RequestIBDChainBlockLocatorMessage* _msg = _internal_mutable_requestibdchainblocklocator();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestIBDChainBlockLocator)
  return _msg;
}

// .protowire.IbdChainBlockLocatorMessage ibdChainBlockLocator = 54;
inline bool KaspadMessage::_internal_has_ibdchainblocklocator() const {
  return payload_case() == kIbdChainBlockLocator;
}
inline bool KaspadMessage::has_ibdchainblocklocator() const {
  return _internal_has_ibdchainblocklocator();
}
inline void KaspadMessage::set_has_ibdchainblocklocator() {
  _oneof_case_[0] = kIbdChainBlockLocator;
}
inline ::protowire::IbdChainBlockLocatorMessage* KaspadMessage::release_ibdchainblocklocator() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.ibdChainBlockLocator)
  if (_internal_has_ibdchainblocklocator()) {
    clear_has_payload();
      ::protowire::IbdChainBlockLocatorMessage* temp = payload_.ibdchainblocklocator_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.ibdchainblocklocator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::IbdChainBlockLocatorMessage& KaspadMessage::_internal_ibdchainblocklocator() const {
  return _internal_has_ibdchainblocklocator()
      ? *payload_.ibdchainblocklocator_
      : reinterpret_cast< ::protowire::IbdChainBlockLocatorMessage&>(::protowire::_IbdChainBlockLocatorMessage_default_instance_);
}
inline const ::protowire::IbdChainBlockLocatorMessage& KaspadMessage::ibdchainblocklocator() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.ibdChainBlockLocator)
  return _internal_ibdchainblocklocator();
}
inline ::protowire::IbdChainBlockLocatorMessage* KaspadMessage::unsafe_arena_release_ibdchainblocklocator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.ibdChainBlockLocator)
  if (_internal_has_ibdchainblocklocator()) {
    clear_has_payload();
    ::protowire::IbdChainBlockLocatorMessage* temp = payload_.ibdchainblocklocator_;
    payload_.ibdchainblocklocator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_ibdchainblocklocator(::protowire::IbdChainBlockLocatorMessage* ibdchainblocklocator) {
  clear_payload();
  if (ibdchainblocklocator) {
    set_has_ibdchainblocklocator();
    payload_.ibdchainblocklocator_ = ibdchainblocklocator;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.ibdChainBlockLocator)
}
inline ::protowire::IbdChainBlockLocatorMessage* KaspadMessage::_internal_mutable_ibdchainblocklocator() {
  if (!_internal_has_ibdchainblocklocator()) {
    clear_payload();
    set_has_ibdchainblocklocator();
    payload_.ibdchainblocklocator_ = CreateMaybeMessage< ::protowire::IbdChainBlockLocatorMessage >(GetArenaForAllocation());
  }
  return payload_.ibdchainblocklocator_;
}
inline ::protowire::IbdChainBlockLocatorMessage* KaspadMessage::mutable_ibdchainblocklocator() {
  ::protowire::IbdChainBlockLocatorMessage* _msg = _internal_mutable_ibdchainblocklocator();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.ibdChainBlockLocator)
  return _msg;
}

// .protowire.RequestAnticoneMessage requestAnticone = 55;
inline bool KaspadMessage::_internal_has_requestanticone() const {
  return payload_case() == kRequestAnticone;
}
inline bool KaspadMessage::has_requestanticone() const {
  return _internal_has_requestanticone();
}
inline void KaspadMessage::set_has_requestanticone() {
  _oneof_case_[0] = kRequestAnticone;
}
inline ::protowire::RequestAnticoneMessage* KaspadMessage::release_requestanticone() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestAnticone)
  if (_internal_has_requestanticone()) {
    clear_has_payload();
      ::protowire::RequestAnticoneMessage* temp = payload_.requestanticone_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requestanticone_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestAnticoneMessage& KaspadMessage::_internal_requestanticone() const {
  return _internal_has_requestanticone()
      ? *payload_.requestanticone_
      : reinterpret_cast< ::protowire::RequestAnticoneMessage&>(::protowire::_RequestAnticoneMessage_default_instance_);
}
inline const ::protowire::RequestAnticoneMessage& KaspadMessage::requestanticone() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestAnticone)
  return _internal_requestanticone();
}
inline ::protowire::RequestAnticoneMessage* KaspadMessage::unsafe_arena_release_requestanticone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestAnticone)
  if (_internal_has_requestanticone()) {
    clear_has_payload();
    ::protowire::RequestAnticoneMessage* temp = payload_.requestanticone_;
    payload_.requestanticone_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requestanticone(::protowire::RequestAnticoneMessage* requestanticone) {
  clear_payload();
  if (requestanticone) {
    set_has_requestanticone();
    payload_.requestanticone_ = requestanticone;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestAnticone)
}
inline ::protowire::RequestAnticoneMessage* KaspadMessage::_internal_mutable_requestanticone() {
  if (!_internal_has_requestanticone()) {
    clear_payload();
    set_has_requestanticone();
    payload_.requestanticone_ = CreateMaybeMessage< ::protowire::RequestAnticoneMessage >(GetArenaForAllocation());
  }
  return payload_.requestanticone_;
}
inline ::protowire::RequestAnticoneMessage* KaspadMessage::mutable_requestanticone() {
  ::protowire::RequestAnticoneMessage* _msg = _internal_mutable_requestanticone();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestAnticone)
  return _msg;
}

// .protowire.RequestNextPruningPointAndItsAnticoneBlocksMessage requestNextPruningPointAndItsAnticoneBlocks = 56;
inline bool KaspadMessage::_internal_has_requestnextpruningpointanditsanticoneblocks() const {
  return payload_case() == kRequestNextPruningPointAndItsAnticoneBlocks;
}
inline bool KaspadMessage::has_requestnextpruningpointanditsanticoneblocks() const {
  return _internal_has_requestnextpruningpointanditsanticoneblocks();
}
inline void KaspadMessage::set_has_requestnextpruningpointanditsanticoneblocks() {
  _oneof_case_[0] = kRequestNextPruningPointAndItsAnticoneBlocks;
}
inline ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* KaspadMessage::release_requestnextpruningpointanditsanticoneblocks() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.requestNextPruningPointAndItsAnticoneBlocks)
  if (_internal_has_requestnextpruningpointanditsanticoneblocks()) {
    clear_has_payload();
      ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* temp = payload_.requestnextpruningpointanditsanticoneblocks_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.requestnextpruningpointanditsanticoneblocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage& KaspadMessage::_internal_requestnextpruningpointanditsanticoneblocks() const {
  return _internal_has_requestnextpruningpointanditsanticoneblocks()
      ? *payload_.requestnextpruningpointanditsanticoneblocks_
      : reinterpret_cast< ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage&>(::protowire::_RequestNextPruningPointAndItsAnticoneBlocksMessage_default_instance_);
}
inline const ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage& KaspadMessage::requestnextpruningpointanditsanticoneblocks() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.requestNextPruningPointAndItsAnticoneBlocks)
  return _internal_requestnextpruningpointanditsanticoneblocks();
}
inline ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* KaspadMessage::unsafe_arena_release_requestnextpruningpointanditsanticoneblocks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.requestNextPruningPointAndItsAnticoneBlocks)
  if (_internal_has_requestnextpruningpointanditsanticoneblocks()) {
    clear_has_payload();
    ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* temp = payload_.requestnextpruningpointanditsanticoneblocks_;
    payload_.requestnextpruningpointanditsanticoneblocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_requestnextpruningpointanditsanticoneblocks(::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* requestnextpruningpointanditsanticoneblocks) {
  clear_payload();
  if (requestnextpruningpointanditsanticoneblocks) {
    set_has_requestnextpruningpointanditsanticoneblocks();
    payload_.requestnextpruningpointanditsanticoneblocks_ = requestnextpruningpointanditsanticoneblocks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.requestNextPruningPointAndItsAnticoneBlocks)
}
inline ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* KaspadMessage::_internal_mutable_requestnextpruningpointanditsanticoneblocks() {
  if (!_internal_has_requestnextpruningpointanditsanticoneblocks()) {
    clear_payload();
    set_has_requestnextpruningpointanditsanticoneblocks();
    payload_.requestnextpruningpointanditsanticoneblocks_ = CreateMaybeMessage< ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage >(GetArenaForAllocation());
  }
  return payload_.requestnextpruningpointanditsanticoneblocks_;
}
inline ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* KaspadMessage::mutable_requestnextpruningpointanditsanticoneblocks() {
  ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* _msg = _internal_mutable_requestnextpruningpointanditsanticoneblocks();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.requestNextPruningPointAndItsAnticoneBlocks)
  return _msg;
}

// .protowire.GetCurrentNetworkRequestMessage getCurrentNetworkRequest = 1001;
inline bool KaspadMessage::_internal_has_getcurrentnetworkrequest() const {
  return payload_case() == kGetCurrentNetworkRequest;
}
inline bool KaspadMessage::has_getcurrentnetworkrequest() const {
  return _internal_has_getcurrentnetworkrequest();
}
inline void KaspadMessage::set_has_getcurrentnetworkrequest() {
  _oneof_case_[0] = kGetCurrentNetworkRequest;
}
inline ::protowire::GetCurrentNetworkRequestMessage* KaspadMessage::release_getcurrentnetworkrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getCurrentNetworkRequest)
  if (_internal_has_getcurrentnetworkrequest()) {
    clear_has_payload();
      ::protowire::GetCurrentNetworkRequestMessage* temp = payload_.getcurrentnetworkrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getcurrentnetworkrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetCurrentNetworkRequestMessage& KaspadMessage::_internal_getcurrentnetworkrequest() const {
  return _internal_has_getcurrentnetworkrequest()
      ? *payload_.getcurrentnetworkrequest_
      : reinterpret_cast< ::protowire::GetCurrentNetworkRequestMessage&>(::protowire::_GetCurrentNetworkRequestMessage_default_instance_);
}
inline const ::protowire::GetCurrentNetworkRequestMessage& KaspadMessage::getcurrentnetworkrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getCurrentNetworkRequest)
  return _internal_getcurrentnetworkrequest();
}
inline ::protowire::GetCurrentNetworkRequestMessage* KaspadMessage::unsafe_arena_release_getcurrentnetworkrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getCurrentNetworkRequest)
  if (_internal_has_getcurrentnetworkrequest()) {
    clear_has_payload();
    ::protowire::GetCurrentNetworkRequestMessage* temp = payload_.getcurrentnetworkrequest_;
    payload_.getcurrentnetworkrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getcurrentnetworkrequest(::protowire::GetCurrentNetworkRequestMessage* getcurrentnetworkrequest) {
  clear_payload();
  if (getcurrentnetworkrequest) {
    set_has_getcurrentnetworkrequest();
    payload_.getcurrentnetworkrequest_ = getcurrentnetworkrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getCurrentNetworkRequest)
}
inline ::protowire::GetCurrentNetworkRequestMessage* KaspadMessage::_internal_mutable_getcurrentnetworkrequest() {
  if (!_internal_has_getcurrentnetworkrequest()) {
    clear_payload();
    set_has_getcurrentnetworkrequest();
    payload_.getcurrentnetworkrequest_ = CreateMaybeMessage< ::protowire::GetCurrentNetworkRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getcurrentnetworkrequest_;
}
inline ::protowire::GetCurrentNetworkRequestMessage* KaspadMessage::mutable_getcurrentnetworkrequest() {
  ::protowire::GetCurrentNetworkRequestMessage* _msg = _internal_mutable_getcurrentnetworkrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getCurrentNetworkRequest)
  return _msg;
}

// .protowire.GetCurrentNetworkResponseMessage getCurrentNetworkResponse = 1002;
inline bool KaspadMessage::_internal_has_getcurrentnetworkresponse() const {
  return payload_case() == kGetCurrentNetworkResponse;
}
inline bool KaspadMessage::has_getcurrentnetworkresponse() const {
  return _internal_has_getcurrentnetworkresponse();
}
inline void KaspadMessage::set_has_getcurrentnetworkresponse() {
  _oneof_case_[0] = kGetCurrentNetworkResponse;
}
inline ::protowire::GetCurrentNetworkResponseMessage* KaspadMessage::release_getcurrentnetworkresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getCurrentNetworkResponse)
  if (_internal_has_getcurrentnetworkresponse()) {
    clear_has_payload();
      ::protowire::GetCurrentNetworkResponseMessage* temp = payload_.getcurrentnetworkresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getcurrentnetworkresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetCurrentNetworkResponseMessage& KaspadMessage::_internal_getcurrentnetworkresponse() const {
  return _internal_has_getcurrentnetworkresponse()
      ? *payload_.getcurrentnetworkresponse_
      : reinterpret_cast< ::protowire::GetCurrentNetworkResponseMessage&>(::protowire::_GetCurrentNetworkResponseMessage_default_instance_);
}
inline const ::protowire::GetCurrentNetworkResponseMessage& KaspadMessage::getcurrentnetworkresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getCurrentNetworkResponse)
  return _internal_getcurrentnetworkresponse();
}
inline ::protowire::GetCurrentNetworkResponseMessage* KaspadMessage::unsafe_arena_release_getcurrentnetworkresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getCurrentNetworkResponse)
  if (_internal_has_getcurrentnetworkresponse()) {
    clear_has_payload();
    ::protowire::GetCurrentNetworkResponseMessage* temp = payload_.getcurrentnetworkresponse_;
    payload_.getcurrentnetworkresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getcurrentnetworkresponse(::protowire::GetCurrentNetworkResponseMessage* getcurrentnetworkresponse) {
  clear_payload();
  if (getcurrentnetworkresponse) {
    set_has_getcurrentnetworkresponse();
    payload_.getcurrentnetworkresponse_ = getcurrentnetworkresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getCurrentNetworkResponse)
}
inline ::protowire::GetCurrentNetworkResponseMessage* KaspadMessage::_internal_mutable_getcurrentnetworkresponse() {
  if (!_internal_has_getcurrentnetworkresponse()) {
    clear_payload();
    set_has_getcurrentnetworkresponse();
    payload_.getcurrentnetworkresponse_ = CreateMaybeMessage< ::protowire::GetCurrentNetworkResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getcurrentnetworkresponse_;
}
inline ::protowire::GetCurrentNetworkResponseMessage* KaspadMessage::mutable_getcurrentnetworkresponse() {
  ::protowire::GetCurrentNetworkResponseMessage* _msg = _internal_mutable_getcurrentnetworkresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getCurrentNetworkResponse)
  return _msg;
}

// .protowire.SubmitBlockRequestMessage submitBlockRequest = 1003;
inline bool KaspadMessage::_internal_has_submitblockrequest() const {
  return payload_case() == kSubmitBlockRequest;
}
inline bool KaspadMessage::has_submitblockrequest() const {
  return _internal_has_submitblockrequest();
}
inline void KaspadMessage::set_has_submitblockrequest() {
  _oneof_case_[0] = kSubmitBlockRequest;
}
inline ::protowire::SubmitBlockRequestMessage* KaspadMessage::release_submitblockrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.submitBlockRequest)
  if (_internal_has_submitblockrequest()) {
    clear_has_payload();
      ::protowire::SubmitBlockRequestMessage* temp = payload_.submitblockrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.submitblockrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::SubmitBlockRequestMessage& KaspadMessage::_internal_submitblockrequest() const {
  return _internal_has_submitblockrequest()
      ? *payload_.submitblockrequest_
      : reinterpret_cast< ::protowire::SubmitBlockRequestMessage&>(::protowire::_SubmitBlockRequestMessage_default_instance_);
}
inline const ::protowire::SubmitBlockRequestMessage& KaspadMessage::submitblockrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.submitBlockRequest)
  return _internal_submitblockrequest();
}
inline ::protowire::SubmitBlockRequestMessage* KaspadMessage::unsafe_arena_release_submitblockrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.submitBlockRequest)
  if (_internal_has_submitblockrequest()) {
    clear_has_payload();
    ::protowire::SubmitBlockRequestMessage* temp = payload_.submitblockrequest_;
    payload_.submitblockrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_submitblockrequest(::protowire::SubmitBlockRequestMessage* submitblockrequest) {
  clear_payload();
  if (submitblockrequest) {
    set_has_submitblockrequest();
    payload_.submitblockrequest_ = submitblockrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.submitBlockRequest)
}
inline ::protowire::SubmitBlockRequestMessage* KaspadMessage::_internal_mutable_submitblockrequest() {
  if (!_internal_has_submitblockrequest()) {
    clear_payload();
    set_has_submitblockrequest();
    payload_.submitblockrequest_ = CreateMaybeMessage< ::protowire::SubmitBlockRequestMessage >(GetArenaForAllocation());
  }
  return payload_.submitblockrequest_;
}
inline ::protowire::SubmitBlockRequestMessage* KaspadMessage::mutable_submitblockrequest() {
  ::protowire::SubmitBlockRequestMessage* _msg = _internal_mutable_submitblockrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.submitBlockRequest)
  return _msg;
}

// .protowire.SubmitBlockResponseMessage submitBlockResponse = 1004;
inline bool KaspadMessage::_internal_has_submitblockresponse() const {
  return payload_case() == kSubmitBlockResponse;
}
inline bool KaspadMessage::has_submitblockresponse() const {
  return _internal_has_submitblockresponse();
}
inline void KaspadMessage::set_has_submitblockresponse() {
  _oneof_case_[0] = kSubmitBlockResponse;
}
inline ::protowire::SubmitBlockResponseMessage* KaspadMessage::release_submitblockresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.submitBlockResponse)
  if (_internal_has_submitblockresponse()) {
    clear_has_payload();
      ::protowire::SubmitBlockResponseMessage* temp = payload_.submitblockresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.submitblockresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::SubmitBlockResponseMessage& KaspadMessage::_internal_submitblockresponse() const {
  return _internal_has_submitblockresponse()
      ? *payload_.submitblockresponse_
      : reinterpret_cast< ::protowire::SubmitBlockResponseMessage&>(::protowire::_SubmitBlockResponseMessage_default_instance_);
}
inline const ::protowire::SubmitBlockResponseMessage& KaspadMessage::submitblockresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.submitBlockResponse)
  return _internal_submitblockresponse();
}
inline ::protowire::SubmitBlockResponseMessage* KaspadMessage::unsafe_arena_release_submitblockresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.submitBlockResponse)
  if (_internal_has_submitblockresponse()) {
    clear_has_payload();
    ::protowire::SubmitBlockResponseMessage* temp = payload_.submitblockresponse_;
    payload_.submitblockresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_submitblockresponse(::protowire::SubmitBlockResponseMessage* submitblockresponse) {
  clear_payload();
  if (submitblockresponse) {
    set_has_submitblockresponse();
    payload_.submitblockresponse_ = submitblockresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.submitBlockResponse)
}
inline ::protowire::SubmitBlockResponseMessage* KaspadMessage::_internal_mutable_submitblockresponse() {
  if (!_internal_has_submitblockresponse()) {
    clear_payload();
    set_has_submitblockresponse();
    payload_.submitblockresponse_ = CreateMaybeMessage< ::protowire::SubmitBlockResponseMessage >(GetArenaForAllocation());
  }
  return payload_.submitblockresponse_;
}
inline ::protowire::SubmitBlockResponseMessage* KaspadMessage::mutable_submitblockresponse() {
  ::protowire::SubmitBlockResponseMessage* _msg = _internal_mutable_submitblockresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.submitBlockResponse)
  return _msg;
}

// .protowire.GetBlockTemplateRequestMessage getBlockTemplateRequest = 1005;
inline bool KaspadMessage::_internal_has_getblocktemplaterequest() const {
  return payload_case() == kGetBlockTemplateRequest;
}
inline bool KaspadMessage::has_getblocktemplaterequest() const {
  return _internal_has_getblocktemplaterequest();
}
inline void KaspadMessage::set_has_getblocktemplaterequest() {
  _oneof_case_[0] = kGetBlockTemplateRequest;
}
inline ::protowire::GetBlockTemplateRequestMessage* KaspadMessage::release_getblocktemplaterequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBlockTemplateRequest)
  if (_internal_has_getblocktemplaterequest()) {
    clear_has_payload();
      ::protowire::GetBlockTemplateRequestMessage* temp = payload_.getblocktemplaterequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getblocktemplaterequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBlockTemplateRequestMessage& KaspadMessage::_internal_getblocktemplaterequest() const {
  return _internal_has_getblocktemplaterequest()
      ? *payload_.getblocktemplaterequest_
      : reinterpret_cast< ::protowire::GetBlockTemplateRequestMessage&>(::protowire::_GetBlockTemplateRequestMessage_default_instance_);
}
inline const ::protowire::GetBlockTemplateRequestMessage& KaspadMessage::getblocktemplaterequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBlockTemplateRequest)
  return _internal_getblocktemplaterequest();
}
inline ::protowire::GetBlockTemplateRequestMessage* KaspadMessage::unsafe_arena_release_getblocktemplaterequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBlockTemplateRequest)
  if (_internal_has_getblocktemplaterequest()) {
    clear_has_payload();
    ::protowire::GetBlockTemplateRequestMessage* temp = payload_.getblocktemplaterequest_;
    payload_.getblocktemplaterequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getblocktemplaterequest(::protowire::GetBlockTemplateRequestMessage* getblocktemplaterequest) {
  clear_payload();
  if (getblocktemplaterequest) {
    set_has_getblocktemplaterequest();
    payload_.getblocktemplaterequest_ = getblocktemplaterequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBlockTemplateRequest)
}
inline ::protowire::GetBlockTemplateRequestMessage* KaspadMessage::_internal_mutable_getblocktemplaterequest() {
  if (!_internal_has_getblocktemplaterequest()) {
    clear_payload();
    set_has_getblocktemplaterequest();
    payload_.getblocktemplaterequest_ = CreateMaybeMessage< ::protowire::GetBlockTemplateRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getblocktemplaterequest_;
}
inline ::protowire::GetBlockTemplateRequestMessage* KaspadMessage::mutable_getblocktemplaterequest() {
  ::protowire::GetBlockTemplateRequestMessage* _msg = _internal_mutable_getblocktemplaterequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBlockTemplateRequest)
  return _msg;
}

// .protowire.GetBlockTemplateResponseMessage getBlockTemplateResponse = 1006;
inline bool KaspadMessage::_internal_has_getblocktemplateresponse() const {
  return payload_case() == kGetBlockTemplateResponse;
}
inline bool KaspadMessage::has_getblocktemplateresponse() const {
  return _internal_has_getblocktemplateresponse();
}
inline void KaspadMessage::set_has_getblocktemplateresponse() {
  _oneof_case_[0] = kGetBlockTemplateResponse;
}
inline ::protowire::GetBlockTemplateResponseMessage* KaspadMessage::release_getblocktemplateresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBlockTemplateResponse)
  if (_internal_has_getblocktemplateresponse()) {
    clear_has_payload();
      ::protowire::GetBlockTemplateResponseMessage* temp = payload_.getblocktemplateresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getblocktemplateresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBlockTemplateResponseMessage& KaspadMessage::_internal_getblocktemplateresponse() const {
  return _internal_has_getblocktemplateresponse()
      ? *payload_.getblocktemplateresponse_
      : reinterpret_cast< ::protowire::GetBlockTemplateResponseMessage&>(::protowire::_GetBlockTemplateResponseMessage_default_instance_);
}
inline const ::protowire::GetBlockTemplateResponseMessage& KaspadMessage::getblocktemplateresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBlockTemplateResponse)
  return _internal_getblocktemplateresponse();
}
inline ::protowire::GetBlockTemplateResponseMessage* KaspadMessage::unsafe_arena_release_getblocktemplateresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBlockTemplateResponse)
  if (_internal_has_getblocktemplateresponse()) {
    clear_has_payload();
    ::protowire::GetBlockTemplateResponseMessage* temp = payload_.getblocktemplateresponse_;
    payload_.getblocktemplateresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getblocktemplateresponse(::protowire::GetBlockTemplateResponseMessage* getblocktemplateresponse) {
  clear_payload();
  if (getblocktemplateresponse) {
    set_has_getblocktemplateresponse();
    payload_.getblocktemplateresponse_ = getblocktemplateresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBlockTemplateResponse)
}
inline ::protowire::GetBlockTemplateResponseMessage* KaspadMessage::_internal_mutable_getblocktemplateresponse() {
  if (!_internal_has_getblocktemplateresponse()) {
    clear_payload();
    set_has_getblocktemplateresponse();
    payload_.getblocktemplateresponse_ = CreateMaybeMessage< ::protowire::GetBlockTemplateResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getblocktemplateresponse_;
}
inline ::protowire::GetBlockTemplateResponseMessage* KaspadMessage::mutable_getblocktemplateresponse() {
  ::protowire::GetBlockTemplateResponseMessage* _msg = _internal_mutable_getblocktemplateresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBlockTemplateResponse)
  return _msg;
}

// .protowire.NotifyBlockAddedRequestMessage notifyBlockAddedRequest = 1007;
inline bool KaspadMessage::_internal_has_notifyblockaddedrequest() const {
  return payload_case() == kNotifyBlockAddedRequest;
}
inline bool KaspadMessage::has_notifyblockaddedrequest() const {
  return _internal_has_notifyblockaddedrequest();
}
inline void KaspadMessage::set_has_notifyblockaddedrequest() {
  _oneof_case_[0] = kNotifyBlockAddedRequest;
}
inline ::protowire::NotifyBlockAddedRequestMessage* KaspadMessage::release_notifyblockaddedrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyBlockAddedRequest)
  if (_internal_has_notifyblockaddedrequest()) {
    clear_has_payload();
      ::protowire::NotifyBlockAddedRequestMessage* temp = payload_.notifyblockaddedrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifyblockaddedrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyBlockAddedRequestMessage& KaspadMessage::_internal_notifyblockaddedrequest() const {
  return _internal_has_notifyblockaddedrequest()
      ? *payload_.notifyblockaddedrequest_
      : reinterpret_cast< ::protowire::NotifyBlockAddedRequestMessage&>(::protowire::_NotifyBlockAddedRequestMessage_default_instance_);
}
inline const ::protowire::NotifyBlockAddedRequestMessage& KaspadMessage::notifyblockaddedrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyBlockAddedRequest)
  return _internal_notifyblockaddedrequest();
}
inline ::protowire::NotifyBlockAddedRequestMessage* KaspadMessage::unsafe_arena_release_notifyblockaddedrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyBlockAddedRequest)
  if (_internal_has_notifyblockaddedrequest()) {
    clear_has_payload();
    ::protowire::NotifyBlockAddedRequestMessage* temp = payload_.notifyblockaddedrequest_;
    payload_.notifyblockaddedrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifyblockaddedrequest(::protowire::NotifyBlockAddedRequestMessage* notifyblockaddedrequest) {
  clear_payload();
  if (notifyblockaddedrequest) {
    set_has_notifyblockaddedrequest();
    payload_.notifyblockaddedrequest_ = notifyblockaddedrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyBlockAddedRequest)
}
inline ::protowire::NotifyBlockAddedRequestMessage* KaspadMessage::_internal_mutable_notifyblockaddedrequest() {
  if (!_internal_has_notifyblockaddedrequest()) {
    clear_payload();
    set_has_notifyblockaddedrequest();
    payload_.notifyblockaddedrequest_ = CreateMaybeMessage< ::protowire::NotifyBlockAddedRequestMessage >(GetArenaForAllocation());
  }
  return payload_.notifyblockaddedrequest_;
}
inline ::protowire::NotifyBlockAddedRequestMessage* KaspadMessage::mutable_notifyblockaddedrequest() {
  ::protowire::NotifyBlockAddedRequestMessage* _msg = _internal_mutable_notifyblockaddedrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyBlockAddedRequest)
  return _msg;
}

// .protowire.NotifyBlockAddedResponseMessage notifyBlockAddedResponse = 1008;
inline bool KaspadMessage::_internal_has_notifyblockaddedresponse() const {
  return payload_case() == kNotifyBlockAddedResponse;
}
inline bool KaspadMessage::has_notifyblockaddedresponse() const {
  return _internal_has_notifyblockaddedresponse();
}
inline void KaspadMessage::set_has_notifyblockaddedresponse() {
  _oneof_case_[0] = kNotifyBlockAddedResponse;
}
inline ::protowire::NotifyBlockAddedResponseMessage* KaspadMessage::release_notifyblockaddedresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyBlockAddedResponse)
  if (_internal_has_notifyblockaddedresponse()) {
    clear_has_payload();
      ::protowire::NotifyBlockAddedResponseMessage* temp = payload_.notifyblockaddedresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifyblockaddedresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyBlockAddedResponseMessage& KaspadMessage::_internal_notifyblockaddedresponse() const {
  return _internal_has_notifyblockaddedresponse()
      ? *payload_.notifyblockaddedresponse_
      : reinterpret_cast< ::protowire::NotifyBlockAddedResponseMessage&>(::protowire::_NotifyBlockAddedResponseMessage_default_instance_);
}
inline const ::protowire::NotifyBlockAddedResponseMessage& KaspadMessage::notifyblockaddedresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyBlockAddedResponse)
  return _internal_notifyblockaddedresponse();
}
inline ::protowire::NotifyBlockAddedResponseMessage* KaspadMessage::unsafe_arena_release_notifyblockaddedresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyBlockAddedResponse)
  if (_internal_has_notifyblockaddedresponse()) {
    clear_has_payload();
    ::protowire::NotifyBlockAddedResponseMessage* temp = payload_.notifyblockaddedresponse_;
    payload_.notifyblockaddedresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifyblockaddedresponse(::protowire::NotifyBlockAddedResponseMessage* notifyblockaddedresponse) {
  clear_payload();
  if (notifyblockaddedresponse) {
    set_has_notifyblockaddedresponse();
    payload_.notifyblockaddedresponse_ = notifyblockaddedresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyBlockAddedResponse)
}
inline ::protowire::NotifyBlockAddedResponseMessage* KaspadMessage::_internal_mutable_notifyblockaddedresponse() {
  if (!_internal_has_notifyblockaddedresponse()) {
    clear_payload();
    set_has_notifyblockaddedresponse();
    payload_.notifyblockaddedresponse_ = CreateMaybeMessage< ::protowire::NotifyBlockAddedResponseMessage >(GetArenaForAllocation());
  }
  return payload_.notifyblockaddedresponse_;
}
inline ::protowire::NotifyBlockAddedResponseMessage* KaspadMessage::mutable_notifyblockaddedresponse() {
  ::protowire::NotifyBlockAddedResponseMessage* _msg = _internal_mutable_notifyblockaddedresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyBlockAddedResponse)
  return _msg;
}

// .protowire.BlockAddedNotificationMessage blockAddedNotification = 1009;
inline bool KaspadMessage::_internal_has_blockaddednotification() const {
  return payload_case() == kBlockAddedNotification;
}
inline bool KaspadMessage::has_blockaddednotification() const {
  return _internal_has_blockaddednotification();
}
inline void KaspadMessage::set_has_blockaddednotification() {
  _oneof_case_[0] = kBlockAddedNotification;
}
inline ::protowire::BlockAddedNotificationMessage* KaspadMessage::release_blockaddednotification() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.blockAddedNotification)
  if (_internal_has_blockaddednotification()) {
    clear_has_payload();
      ::protowire::BlockAddedNotificationMessage* temp = payload_.blockaddednotification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.blockaddednotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::BlockAddedNotificationMessage& KaspadMessage::_internal_blockaddednotification() const {
  return _internal_has_blockaddednotification()
      ? *payload_.blockaddednotification_
      : reinterpret_cast< ::protowire::BlockAddedNotificationMessage&>(::protowire::_BlockAddedNotificationMessage_default_instance_);
}
inline const ::protowire::BlockAddedNotificationMessage& KaspadMessage::blockaddednotification() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.blockAddedNotification)
  return _internal_blockaddednotification();
}
inline ::protowire::BlockAddedNotificationMessage* KaspadMessage::unsafe_arena_release_blockaddednotification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.blockAddedNotification)
  if (_internal_has_blockaddednotification()) {
    clear_has_payload();
    ::protowire::BlockAddedNotificationMessage* temp = payload_.blockaddednotification_;
    payload_.blockaddednotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_blockaddednotification(::protowire::BlockAddedNotificationMessage* blockaddednotification) {
  clear_payload();
  if (blockaddednotification) {
    set_has_blockaddednotification();
    payload_.blockaddednotification_ = blockaddednotification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.blockAddedNotification)
}
inline ::protowire::BlockAddedNotificationMessage* KaspadMessage::_internal_mutable_blockaddednotification() {
  if (!_internal_has_blockaddednotification()) {
    clear_payload();
    set_has_blockaddednotification();
    payload_.blockaddednotification_ = CreateMaybeMessage< ::protowire::BlockAddedNotificationMessage >(GetArenaForAllocation());
  }
  return payload_.blockaddednotification_;
}
inline ::protowire::BlockAddedNotificationMessage* KaspadMessage::mutable_blockaddednotification() {
  ::protowire::BlockAddedNotificationMessage* _msg = _internal_mutable_blockaddednotification();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.blockAddedNotification)
  return _msg;
}

// .protowire.GetPeerAddressesRequestMessage getPeerAddressesRequest = 1010;
inline bool KaspadMessage::_internal_has_getpeeraddressesrequest() const {
  return payload_case() == kGetPeerAddressesRequest;
}
inline bool KaspadMessage::has_getpeeraddressesrequest() const {
  return _internal_has_getpeeraddressesrequest();
}
inline void KaspadMessage::set_has_getpeeraddressesrequest() {
  _oneof_case_[0] = kGetPeerAddressesRequest;
}
inline ::protowire::GetPeerAddressesRequestMessage* KaspadMessage::release_getpeeraddressesrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getPeerAddressesRequest)
  if (_internal_has_getpeeraddressesrequest()) {
    clear_has_payload();
      ::protowire::GetPeerAddressesRequestMessage* temp = payload_.getpeeraddressesrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getpeeraddressesrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetPeerAddressesRequestMessage& KaspadMessage::_internal_getpeeraddressesrequest() const {
  return _internal_has_getpeeraddressesrequest()
      ? *payload_.getpeeraddressesrequest_
      : reinterpret_cast< ::protowire::GetPeerAddressesRequestMessage&>(::protowire::_GetPeerAddressesRequestMessage_default_instance_);
}
inline const ::protowire::GetPeerAddressesRequestMessage& KaspadMessage::getpeeraddressesrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getPeerAddressesRequest)
  return _internal_getpeeraddressesrequest();
}
inline ::protowire::GetPeerAddressesRequestMessage* KaspadMessage::unsafe_arena_release_getpeeraddressesrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getPeerAddressesRequest)
  if (_internal_has_getpeeraddressesrequest()) {
    clear_has_payload();
    ::protowire::GetPeerAddressesRequestMessage* temp = payload_.getpeeraddressesrequest_;
    payload_.getpeeraddressesrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getpeeraddressesrequest(::protowire::GetPeerAddressesRequestMessage* getpeeraddressesrequest) {
  clear_payload();
  if (getpeeraddressesrequest) {
    set_has_getpeeraddressesrequest();
    payload_.getpeeraddressesrequest_ = getpeeraddressesrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getPeerAddressesRequest)
}
inline ::protowire::GetPeerAddressesRequestMessage* KaspadMessage::_internal_mutable_getpeeraddressesrequest() {
  if (!_internal_has_getpeeraddressesrequest()) {
    clear_payload();
    set_has_getpeeraddressesrequest();
    payload_.getpeeraddressesrequest_ = CreateMaybeMessage< ::protowire::GetPeerAddressesRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getpeeraddressesrequest_;
}
inline ::protowire::GetPeerAddressesRequestMessage* KaspadMessage::mutable_getpeeraddressesrequest() {
  ::protowire::GetPeerAddressesRequestMessage* _msg = _internal_mutable_getpeeraddressesrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getPeerAddressesRequest)
  return _msg;
}

// .protowire.GetPeerAddressesResponseMessage getPeerAddressesResponse = 1011;
inline bool KaspadMessage::_internal_has_getpeeraddressesresponse() const {
  return payload_case() == kGetPeerAddressesResponse;
}
inline bool KaspadMessage::has_getpeeraddressesresponse() const {
  return _internal_has_getpeeraddressesresponse();
}
inline void KaspadMessage::set_has_getpeeraddressesresponse() {
  _oneof_case_[0] = kGetPeerAddressesResponse;
}
inline ::protowire::GetPeerAddressesResponseMessage* KaspadMessage::release_getpeeraddressesresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getPeerAddressesResponse)
  if (_internal_has_getpeeraddressesresponse()) {
    clear_has_payload();
      ::protowire::GetPeerAddressesResponseMessage* temp = payload_.getpeeraddressesresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getpeeraddressesresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetPeerAddressesResponseMessage& KaspadMessage::_internal_getpeeraddressesresponse() const {
  return _internal_has_getpeeraddressesresponse()
      ? *payload_.getpeeraddressesresponse_
      : reinterpret_cast< ::protowire::GetPeerAddressesResponseMessage&>(::protowire::_GetPeerAddressesResponseMessage_default_instance_);
}
inline const ::protowire::GetPeerAddressesResponseMessage& KaspadMessage::getpeeraddressesresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getPeerAddressesResponse)
  return _internal_getpeeraddressesresponse();
}
inline ::protowire::GetPeerAddressesResponseMessage* KaspadMessage::unsafe_arena_release_getpeeraddressesresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getPeerAddressesResponse)
  if (_internal_has_getpeeraddressesresponse()) {
    clear_has_payload();
    ::protowire::GetPeerAddressesResponseMessage* temp = payload_.getpeeraddressesresponse_;
    payload_.getpeeraddressesresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getpeeraddressesresponse(::protowire::GetPeerAddressesResponseMessage* getpeeraddressesresponse) {
  clear_payload();
  if (getpeeraddressesresponse) {
    set_has_getpeeraddressesresponse();
    payload_.getpeeraddressesresponse_ = getpeeraddressesresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getPeerAddressesResponse)
}
inline ::protowire::GetPeerAddressesResponseMessage* KaspadMessage::_internal_mutable_getpeeraddressesresponse() {
  if (!_internal_has_getpeeraddressesresponse()) {
    clear_payload();
    set_has_getpeeraddressesresponse();
    payload_.getpeeraddressesresponse_ = CreateMaybeMessage< ::protowire::GetPeerAddressesResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getpeeraddressesresponse_;
}
inline ::protowire::GetPeerAddressesResponseMessage* KaspadMessage::mutable_getpeeraddressesresponse() {
  ::protowire::GetPeerAddressesResponseMessage* _msg = _internal_mutable_getpeeraddressesresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getPeerAddressesResponse)
  return _msg;
}

// .protowire.GetSelectedTipHashRequestMessage getSelectedTipHashRequest = 1012;
inline bool KaspadMessage::_internal_has_getselectedtiphashrequest() const {
  return payload_case() == kGetSelectedTipHashRequest;
}
inline bool KaspadMessage::has_getselectedtiphashrequest() const {
  return _internal_has_getselectedtiphashrequest();
}
inline void KaspadMessage::set_has_getselectedtiphashrequest() {
  _oneof_case_[0] = kGetSelectedTipHashRequest;
}
inline ::protowire::GetSelectedTipHashRequestMessage* KaspadMessage::release_getselectedtiphashrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getSelectedTipHashRequest)
  if (_internal_has_getselectedtiphashrequest()) {
    clear_has_payload();
      ::protowire::GetSelectedTipHashRequestMessage* temp = payload_.getselectedtiphashrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getselectedtiphashrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetSelectedTipHashRequestMessage& KaspadMessage::_internal_getselectedtiphashrequest() const {
  return _internal_has_getselectedtiphashrequest()
      ? *payload_.getselectedtiphashrequest_
      : reinterpret_cast< ::protowire::GetSelectedTipHashRequestMessage&>(::protowire::_GetSelectedTipHashRequestMessage_default_instance_);
}
inline const ::protowire::GetSelectedTipHashRequestMessage& KaspadMessage::getselectedtiphashrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getSelectedTipHashRequest)
  return _internal_getselectedtiphashrequest();
}
inline ::protowire::GetSelectedTipHashRequestMessage* KaspadMessage::unsafe_arena_release_getselectedtiphashrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getSelectedTipHashRequest)
  if (_internal_has_getselectedtiphashrequest()) {
    clear_has_payload();
    ::protowire::GetSelectedTipHashRequestMessage* temp = payload_.getselectedtiphashrequest_;
    payload_.getselectedtiphashrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getselectedtiphashrequest(::protowire::GetSelectedTipHashRequestMessage* getselectedtiphashrequest) {
  clear_payload();
  if (getselectedtiphashrequest) {
    set_has_getselectedtiphashrequest();
    payload_.getselectedtiphashrequest_ = getselectedtiphashrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getSelectedTipHashRequest)
}
inline ::protowire::GetSelectedTipHashRequestMessage* KaspadMessage::_internal_mutable_getselectedtiphashrequest() {
  if (!_internal_has_getselectedtiphashrequest()) {
    clear_payload();
    set_has_getselectedtiphashrequest();
    payload_.getselectedtiphashrequest_ = CreateMaybeMessage< ::protowire::GetSelectedTipHashRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getselectedtiphashrequest_;
}
inline ::protowire::GetSelectedTipHashRequestMessage* KaspadMessage::mutable_getselectedtiphashrequest() {
  ::protowire::GetSelectedTipHashRequestMessage* _msg = _internal_mutable_getselectedtiphashrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getSelectedTipHashRequest)
  return _msg;
}

// .protowire.GetSelectedTipHashResponseMessage getSelectedTipHashResponse = 1013;
inline bool KaspadMessage::_internal_has_getselectedtiphashresponse() const {
  return payload_case() == kGetSelectedTipHashResponse;
}
inline bool KaspadMessage::has_getselectedtiphashresponse() const {
  return _internal_has_getselectedtiphashresponse();
}
inline void KaspadMessage::set_has_getselectedtiphashresponse() {
  _oneof_case_[0] = kGetSelectedTipHashResponse;
}
inline ::protowire::GetSelectedTipHashResponseMessage* KaspadMessage::release_getselectedtiphashresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getSelectedTipHashResponse)
  if (_internal_has_getselectedtiphashresponse()) {
    clear_has_payload();
      ::protowire::GetSelectedTipHashResponseMessage* temp = payload_.getselectedtiphashresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getselectedtiphashresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetSelectedTipHashResponseMessage& KaspadMessage::_internal_getselectedtiphashresponse() const {
  return _internal_has_getselectedtiphashresponse()
      ? *payload_.getselectedtiphashresponse_
      : reinterpret_cast< ::protowire::GetSelectedTipHashResponseMessage&>(::protowire::_GetSelectedTipHashResponseMessage_default_instance_);
}
inline const ::protowire::GetSelectedTipHashResponseMessage& KaspadMessage::getselectedtiphashresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getSelectedTipHashResponse)
  return _internal_getselectedtiphashresponse();
}
inline ::protowire::GetSelectedTipHashResponseMessage* KaspadMessage::unsafe_arena_release_getselectedtiphashresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getSelectedTipHashResponse)
  if (_internal_has_getselectedtiphashresponse()) {
    clear_has_payload();
    ::protowire::GetSelectedTipHashResponseMessage* temp = payload_.getselectedtiphashresponse_;
    payload_.getselectedtiphashresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getselectedtiphashresponse(::protowire::GetSelectedTipHashResponseMessage* getselectedtiphashresponse) {
  clear_payload();
  if (getselectedtiphashresponse) {
    set_has_getselectedtiphashresponse();
    payload_.getselectedtiphashresponse_ = getselectedtiphashresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getSelectedTipHashResponse)
}
inline ::protowire::GetSelectedTipHashResponseMessage* KaspadMessage::_internal_mutable_getselectedtiphashresponse() {
  if (!_internal_has_getselectedtiphashresponse()) {
    clear_payload();
    set_has_getselectedtiphashresponse();
    payload_.getselectedtiphashresponse_ = CreateMaybeMessage< ::protowire::GetSelectedTipHashResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getselectedtiphashresponse_;
}
inline ::protowire::GetSelectedTipHashResponseMessage* KaspadMessage::mutable_getselectedtiphashresponse() {
  ::protowire::GetSelectedTipHashResponseMessage* _msg = _internal_mutable_getselectedtiphashresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getSelectedTipHashResponse)
  return _msg;
}

// .protowire.GetMempoolEntryRequestMessage getMempoolEntryRequest = 1014;
inline bool KaspadMessage::_internal_has_getmempoolentryrequest() const {
  return payload_case() == kGetMempoolEntryRequest;
}
inline bool KaspadMessage::has_getmempoolentryrequest() const {
  return _internal_has_getmempoolentryrequest();
}
inline void KaspadMessage::set_has_getmempoolentryrequest() {
  _oneof_case_[0] = kGetMempoolEntryRequest;
}
inline ::protowire::GetMempoolEntryRequestMessage* KaspadMessage::release_getmempoolentryrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getMempoolEntryRequest)
  if (_internal_has_getmempoolentryrequest()) {
    clear_has_payload();
      ::protowire::GetMempoolEntryRequestMessage* temp = payload_.getmempoolentryrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getmempoolentryrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetMempoolEntryRequestMessage& KaspadMessage::_internal_getmempoolentryrequest() const {
  return _internal_has_getmempoolentryrequest()
      ? *payload_.getmempoolentryrequest_
      : reinterpret_cast< ::protowire::GetMempoolEntryRequestMessage&>(::protowire::_GetMempoolEntryRequestMessage_default_instance_);
}
inline const ::protowire::GetMempoolEntryRequestMessage& KaspadMessage::getmempoolentryrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getMempoolEntryRequest)
  return _internal_getmempoolentryrequest();
}
inline ::protowire::GetMempoolEntryRequestMessage* KaspadMessage::unsafe_arena_release_getmempoolentryrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getMempoolEntryRequest)
  if (_internal_has_getmempoolentryrequest()) {
    clear_has_payload();
    ::protowire::GetMempoolEntryRequestMessage* temp = payload_.getmempoolentryrequest_;
    payload_.getmempoolentryrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getmempoolentryrequest(::protowire::GetMempoolEntryRequestMessage* getmempoolentryrequest) {
  clear_payload();
  if (getmempoolentryrequest) {
    set_has_getmempoolentryrequest();
    payload_.getmempoolentryrequest_ = getmempoolentryrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getMempoolEntryRequest)
}
inline ::protowire::GetMempoolEntryRequestMessage* KaspadMessage::_internal_mutable_getmempoolentryrequest() {
  if (!_internal_has_getmempoolentryrequest()) {
    clear_payload();
    set_has_getmempoolentryrequest();
    payload_.getmempoolentryrequest_ = CreateMaybeMessage< ::protowire::GetMempoolEntryRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getmempoolentryrequest_;
}
inline ::protowire::GetMempoolEntryRequestMessage* KaspadMessage::mutable_getmempoolentryrequest() {
  ::protowire::GetMempoolEntryRequestMessage* _msg = _internal_mutable_getmempoolentryrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getMempoolEntryRequest)
  return _msg;
}

// .protowire.GetMempoolEntryResponseMessage getMempoolEntryResponse = 1015;
inline bool KaspadMessage::_internal_has_getmempoolentryresponse() const {
  return payload_case() == kGetMempoolEntryResponse;
}
inline bool KaspadMessage::has_getmempoolentryresponse() const {
  return _internal_has_getmempoolentryresponse();
}
inline void KaspadMessage::set_has_getmempoolentryresponse() {
  _oneof_case_[0] = kGetMempoolEntryResponse;
}
inline ::protowire::GetMempoolEntryResponseMessage* KaspadMessage::release_getmempoolentryresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getMempoolEntryResponse)
  if (_internal_has_getmempoolentryresponse()) {
    clear_has_payload();
      ::protowire::GetMempoolEntryResponseMessage* temp = payload_.getmempoolentryresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getmempoolentryresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetMempoolEntryResponseMessage& KaspadMessage::_internal_getmempoolentryresponse() const {
  return _internal_has_getmempoolentryresponse()
      ? *payload_.getmempoolentryresponse_
      : reinterpret_cast< ::protowire::GetMempoolEntryResponseMessage&>(::protowire::_GetMempoolEntryResponseMessage_default_instance_);
}
inline const ::protowire::GetMempoolEntryResponseMessage& KaspadMessage::getmempoolentryresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getMempoolEntryResponse)
  return _internal_getmempoolentryresponse();
}
inline ::protowire::GetMempoolEntryResponseMessage* KaspadMessage::unsafe_arena_release_getmempoolentryresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getMempoolEntryResponse)
  if (_internal_has_getmempoolentryresponse()) {
    clear_has_payload();
    ::protowire::GetMempoolEntryResponseMessage* temp = payload_.getmempoolentryresponse_;
    payload_.getmempoolentryresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getmempoolentryresponse(::protowire::GetMempoolEntryResponseMessage* getmempoolentryresponse) {
  clear_payload();
  if (getmempoolentryresponse) {
    set_has_getmempoolentryresponse();
    payload_.getmempoolentryresponse_ = getmempoolentryresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getMempoolEntryResponse)
}
inline ::protowire::GetMempoolEntryResponseMessage* KaspadMessage::_internal_mutable_getmempoolentryresponse() {
  if (!_internal_has_getmempoolentryresponse()) {
    clear_payload();
    set_has_getmempoolentryresponse();
    payload_.getmempoolentryresponse_ = CreateMaybeMessage< ::protowire::GetMempoolEntryResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getmempoolentryresponse_;
}
inline ::protowire::GetMempoolEntryResponseMessage* KaspadMessage::mutable_getmempoolentryresponse() {
  ::protowire::GetMempoolEntryResponseMessage* _msg = _internal_mutable_getmempoolentryresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getMempoolEntryResponse)
  return _msg;
}

// .protowire.GetConnectedPeerInfoRequestMessage getConnectedPeerInfoRequest = 1016;
inline bool KaspadMessage::_internal_has_getconnectedpeerinforequest() const {
  return payload_case() == kGetConnectedPeerInfoRequest;
}
inline bool KaspadMessage::has_getconnectedpeerinforequest() const {
  return _internal_has_getconnectedpeerinforequest();
}
inline void KaspadMessage::set_has_getconnectedpeerinforequest() {
  _oneof_case_[0] = kGetConnectedPeerInfoRequest;
}
inline ::protowire::GetConnectedPeerInfoRequestMessage* KaspadMessage::release_getconnectedpeerinforequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getConnectedPeerInfoRequest)
  if (_internal_has_getconnectedpeerinforequest()) {
    clear_has_payload();
      ::protowire::GetConnectedPeerInfoRequestMessage* temp = payload_.getconnectedpeerinforequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getconnectedpeerinforequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetConnectedPeerInfoRequestMessage& KaspadMessage::_internal_getconnectedpeerinforequest() const {
  return _internal_has_getconnectedpeerinforequest()
      ? *payload_.getconnectedpeerinforequest_
      : reinterpret_cast< ::protowire::GetConnectedPeerInfoRequestMessage&>(::protowire::_GetConnectedPeerInfoRequestMessage_default_instance_);
}
inline const ::protowire::GetConnectedPeerInfoRequestMessage& KaspadMessage::getconnectedpeerinforequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getConnectedPeerInfoRequest)
  return _internal_getconnectedpeerinforequest();
}
inline ::protowire::GetConnectedPeerInfoRequestMessage* KaspadMessage::unsafe_arena_release_getconnectedpeerinforequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getConnectedPeerInfoRequest)
  if (_internal_has_getconnectedpeerinforequest()) {
    clear_has_payload();
    ::protowire::GetConnectedPeerInfoRequestMessage* temp = payload_.getconnectedpeerinforequest_;
    payload_.getconnectedpeerinforequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getconnectedpeerinforequest(::protowire::GetConnectedPeerInfoRequestMessage* getconnectedpeerinforequest) {
  clear_payload();
  if (getconnectedpeerinforequest) {
    set_has_getconnectedpeerinforequest();
    payload_.getconnectedpeerinforequest_ = getconnectedpeerinforequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getConnectedPeerInfoRequest)
}
inline ::protowire::GetConnectedPeerInfoRequestMessage* KaspadMessage::_internal_mutable_getconnectedpeerinforequest() {
  if (!_internal_has_getconnectedpeerinforequest()) {
    clear_payload();
    set_has_getconnectedpeerinforequest();
    payload_.getconnectedpeerinforequest_ = CreateMaybeMessage< ::protowire::GetConnectedPeerInfoRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getconnectedpeerinforequest_;
}
inline ::protowire::GetConnectedPeerInfoRequestMessage* KaspadMessage::mutable_getconnectedpeerinforequest() {
  ::protowire::GetConnectedPeerInfoRequestMessage* _msg = _internal_mutable_getconnectedpeerinforequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getConnectedPeerInfoRequest)
  return _msg;
}

// .protowire.GetConnectedPeerInfoResponseMessage getConnectedPeerInfoResponse = 1017;
inline bool KaspadMessage::_internal_has_getconnectedpeerinforesponse() const {
  return payload_case() == kGetConnectedPeerInfoResponse;
}
inline bool KaspadMessage::has_getconnectedpeerinforesponse() const {
  return _internal_has_getconnectedpeerinforesponse();
}
inline void KaspadMessage::set_has_getconnectedpeerinforesponse() {
  _oneof_case_[0] = kGetConnectedPeerInfoResponse;
}
inline ::protowire::GetConnectedPeerInfoResponseMessage* KaspadMessage::release_getconnectedpeerinforesponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getConnectedPeerInfoResponse)
  if (_internal_has_getconnectedpeerinforesponse()) {
    clear_has_payload();
      ::protowire::GetConnectedPeerInfoResponseMessage* temp = payload_.getconnectedpeerinforesponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getconnectedpeerinforesponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetConnectedPeerInfoResponseMessage& KaspadMessage::_internal_getconnectedpeerinforesponse() const {
  return _internal_has_getconnectedpeerinforesponse()
      ? *payload_.getconnectedpeerinforesponse_
      : reinterpret_cast< ::protowire::GetConnectedPeerInfoResponseMessage&>(::protowire::_GetConnectedPeerInfoResponseMessage_default_instance_);
}
inline const ::protowire::GetConnectedPeerInfoResponseMessage& KaspadMessage::getconnectedpeerinforesponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getConnectedPeerInfoResponse)
  return _internal_getconnectedpeerinforesponse();
}
inline ::protowire::GetConnectedPeerInfoResponseMessage* KaspadMessage::unsafe_arena_release_getconnectedpeerinforesponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getConnectedPeerInfoResponse)
  if (_internal_has_getconnectedpeerinforesponse()) {
    clear_has_payload();
    ::protowire::GetConnectedPeerInfoResponseMessage* temp = payload_.getconnectedpeerinforesponse_;
    payload_.getconnectedpeerinforesponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getconnectedpeerinforesponse(::protowire::GetConnectedPeerInfoResponseMessage* getconnectedpeerinforesponse) {
  clear_payload();
  if (getconnectedpeerinforesponse) {
    set_has_getconnectedpeerinforesponse();
    payload_.getconnectedpeerinforesponse_ = getconnectedpeerinforesponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getConnectedPeerInfoResponse)
}
inline ::protowire::GetConnectedPeerInfoResponseMessage* KaspadMessage::_internal_mutable_getconnectedpeerinforesponse() {
  if (!_internal_has_getconnectedpeerinforesponse()) {
    clear_payload();
    set_has_getconnectedpeerinforesponse();
    payload_.getconnectedpeerinforesponse_ = CreateMaybeMessage< ::protowire::GetConnectedPeerInfoResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getconnectedpeerinforesponse_;
}
inline ::protowire::GetConnectedPeerInfoResponseMessage* KaspadMessage::mutable_getconnectedpeerinforesponse() {
  ::protowire::GetConnectedPeerInfoResponseMessage* _msg = _internal_mutable_getconnectedpeerinforesponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getConnectedPeerInfoResponse)
  return _msg;
}

// .protowire.AddPeerRequestMessage addPeerRequest = 1018;
inline bool KaspadMessage::_internal_has_addpeerrequest() const {
  return payload_case() == kAddPeerRequest;
}
inline bool KaspadMessage::has_addpeerrequest() const {
  return _internal_has_addpeerrequest();
}
inline void KaspadMessage::set_has_addpeerrequest() {
  _oneof_case_[0] = kAddPeerRequest;
}
inline ::protowire::AddPeerRequestMessage* KaspadMessage::release_addpeerrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.addPeerRequest)
  if (_internal_has_addpeerrequest()) {
    clear_has_payload();
      ::protowire::AddPeerRequestMessage* temp = payload_.addpeerrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.addpeerrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::AddPeerRequestMessage& KaspadMessage::_internal_addpeerrequest() const {
  return _internal_has_addpeerrequest()
      ? *payload_.addpeerrequest_
      : reinterpret_cast< ::protowire::AddPeerRequestMessage&>(::protowire::_AddPeerRequestMessage_default_instance_);
}
inline const ::protowire::AddPeerRequestMessage& KaspadMessage::addpeerrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.addPeerRequest)
  return _internal_addpeerrequest();
}
inline ::protowire::AddPeerRequestMessage* KaspadMessage::unsafe_arena_release_addpeerrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.addPeerRequest)
  if (_internal_has_addpeerrequest()) {
    clear_has_payload();
    ::protowire::AddPeerRequestMessage* temp = payload_.addpeerrequest_;
    payload_.addpeerrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_addpeerrequest(::protowire::AddPeerRequestMessage* addpeerrequest) {
  clear_payload();
  if (addpeerrequest) {
    set_has_addpeerrequest();
    payload_.addpeerrequest_ = addpeerrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.addPeerRequest)
}
inline ::protowire::AddPeerRequestMessage* KaspadMessage::_internal_mutable_addpeerrequest() {
  if (!_internal_has_addpeerrequest()) {
    clear_payload();
    set_has_addpeerrequest();
    payload_.addpeerrequest_ = CreateMaybeMessage< ::protowire::AddPeerRequestMessage >(GetArenaForAllocation());
  }
  return payload_.addpeerrequest_;
}
inline ::protowire::AddPeerRequestMessage* KaspadMessage::mutable_addpeerrequest() {
  ::protowire::AddPeerRequestMessage* _msg = _internal_mutable_addpeerrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.addPeerRequest)
  return _msg;
}

// .protowire.AddPeerResponseMessage addPeerResponse = 1019;
inline bool KaspadMessage::_internal_has_addpeerresponse() const {
  return payload_case() == kAddPeerResponse;
}
inline bool KaspadMessage::has_addpeerresponse() const {
  return _internal_has_addpeerresponse();
}
inline void KaspadMessage::set_has_addpeerresponse() {
  _oneof_case_[0] = kAddPeerResponse;
}
inline ::protowire::AddPeerResponseMessage* KaspadMessage::release_addpeerresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.addPeerResponse)
  if (_internal_has_addpeerresponse()) {
    clear_has_payload();
      ::protowire::AddPeerResponseMessage* temp = payload_.addpeerresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.addpeerresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::AddPeerResponseMessage& KaspadMessage::_internal_addpeerresponse() const {
  return _internal_has_addpeerresponse()
      ? *payload_.addpeerresponse_
      : reinterpret_cast< ::protowire::AddPeerResponseMessage&>(::protowire::_AddPeerResponseMessage_default_instance_);
}
inline const ::protowire::AddPeerResponseMessage& KaspadMessage::addpeerresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.addPeerResponse)
  return _internal_addpeerresponse();
}
inline ::protowire::AddPeerResponseMessage* KaspadMessage::unsafe_arena_release_addpeerresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.addPeerResponse)
  if (_internal_has_addpeerresponse()) {
    clear_has_payload();
    ::protowire::AddPeerResponseMessage* temp = payload_.addpeerresponse_;
    payload_.addpeerresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_addpeerresponse(::protowire::AddPeerResponseMessage* addpeerresponse) {
  clear_payload();
  if (addpeerresponse) {
    set_has_addpeerresponse();
    payload_.addpeerresponse_ = addpeerresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.addPeerResponse)
}
inline ::protowire::AddPeerResponseMessage* KaspadMessage::_internal_mutable_addpeerresponse() {
  if (!_internal_has_addpeerresponse()) {
    clear_payload();
    set_has_addpeerresponse();
    payload_.addpeerresponse_ = CreateMaybeMessage< ::protowire::AddPeerResponseMessage >(GetArenaForAllocation());
  }
  return payload_.addpeerresponse_;
}
inline ::protowire::AddPeerResponseMessage* KaspadMessage::mutable_addpeerresponse() {
  ::protowire::AddPeerResponseMessage* _msg = _internal_mutable_addpeerresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.addPeerResponse)
  return _msg;
}

// .protowire.SubmitTransactionRequestMessage submitTransactionRequest = 1020;
inline bool KaspadMessage::_internal_has_submittransactionrequest() const {
  return payload_case() == kSubmitTransactionRequest;
}
inline bool KaspadMessage::has_submittransactionrequest() const {
  return _internal_has_submittransactionrequest();
}
inline void KaspadMessage::set_has_submittransactionrequest() {
  _oneof_case_[0] = kSubmitTransactionRequest;
}
inline ::protowire::SubmitTransactionRequestMessage* KaspadMessage::release_submittransactionrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.submitTransactionRequest)
  if (_internal_has_submittransactionrequest()) {
    clear_has_payload();
      ::protowire::SubmitTransactionRequestMessage* temp = payload_.submittransactionrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.submittransactionrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::SubmitTransactionRequestMessage& KaspadMessage::_internal_submittransactionrequest() const {
  return _internal_has_submittransactionrequest()
      ? *payload_.submittransactionrequest_
      : reinterpret_cast< ::protowire::SubmitTransactionRequestMessage&>(::protowire::_SubmitTransactionRequestMessage_default_instance_);
}
inline const ::protowire::SubmitTransactionRequestMessage& KaspadMessage::submittransactionrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.submitTransactionRequest)
  return _internal_submittransactionrequest();
}
inline ::protowire::SubmitTransactionRequestMessage* KaspadMessage::unsafe_arena_release_submittransactionrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.submitTransactionRequest)
  if (_internal_has_submittransactionrequest()) {
    clear_has_payload();
    ::protowire::SubmitTransactionRequestMessage* temp = payload_.submittransactionrequest_;
    payload_.submittransactionrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_submittransactionrequest(::protowire::SubmitTransactionRequestMessage* submittransactionrequest) {
  clear_payload();
  if (submittransactionrequest) {
    set_has_submittransactionrequest();
    payload_.submittransactionrequest_ = submittransactionrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.submitTransactionRequest)
}
inline ::protowire::SubmitTransactionRequestMessage* KaspadMessage::_internal_mutable_submittransactionrequest() {
  if (!_internal_has_submittransactionrequest()) {
    clear_payload();
    set_has_submittransactionrequest();
    payload_.submittransactionrequest_ = CreateMaybeMessage< ::protowire::SubmitTransactionRequestMessage >(GetArenaForAllocation());
  }
  return payload_.submittransactionrequest_;
}
inline ::protowire::SubmitTransactionRequestMessage* KaspadMessage::mutable_submittransactionrequest() {
  ::protowire::SubmitTransactionRequestMessage* _msg = _internal_mutable_submittransactionrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.submitTransactionRequest)
  return _msg;
}

// .protowire.SubmitTransactionResponseMessage submitTransactionResponse = 1021;
inline bool KaspadMessage::_internal_has_submittransactionresponse() const {
  return payload_case() == kSubmitTransactionResponse;
}
inline bool KaspadMessage::has_submittransactionresponse() const {
  return _internal_has_submittransactionresponse();
}
inline void KaspadMessage::set_has_submittransactionresponse() {
  _oneof_case_[0] = kSubmitTransactionResponse;
}
inline ::protowire::SubmitTransactionResponseMessage* KaspadMessage::release_submittransactionresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.submitTransactionResponse)
  if (_internal_has_submittransactionresponse()) {
    clear_has_payload();
      ::protowire::SubmitTransactionResponseMessage* temp = payload_.submittransactionresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.submittransactionresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::SubmitTransactionResponseMessage& KaspadMessage::_internal_submittransactionresponse() const {
  return _internal_has_submittransactionresponse()
      ? *payload_.submittransactionresponse_
      : reinterpret_cast< ::protowire::SubmitTransactionResponseMessage&>(::protowire::_SubmitTransactionResponseMessage_default_instance_);
}
inline const ::protowire::SubmitTransactionResponseMessage& KaspadMessage::submittransactionresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.submitTransactionResponse)
  return _internal_submittransactionresponse();
}
inline ::protowire::SubmitTransactionResponseMessage* KaspadMessage::unsafe_arena_release_submittransactionresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.submitTransactionResponse)
  if (_internal_has_submittransactionresponse()) {
    clear_has_payload();
    ::protowire::SubmitTransactionResponseMessage* temp = payload_.submittransactionresponse_;
    payload_.submittransactionresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_submittransactionresponse(::protowire::SubmitTransactionResponseMessage* submittransactionresponse) {
  clear_payload();
  if (submittransactionresponse) {
    set_has_submittransactionresponse();
    payload_.submittransactionresponse_ = submittransactionresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.submitTransactionResponse)
}
inline ::protowire::SubmitTransactionResponseMessage* KaspadMessage::_internal_mutable_submittransactionresponse() {
  if (!_internal_has_submittransactionresponse()) {
    clear_payload();
    set_has_submittransactionresponse();
    payload_.submittransactionresponse_ = CreateMaybeMessage< ::protowire::SubmitTransactionResponseMessage >(GetArenaForAllocation());
  }
  return payload_.submittransactionresponse_;
}
inline ::protowire::SubmitTransactionResponseMessage* KaspadMessage::mutable_submittransactionresponse() {
  ::protowire::SubmitTransactionResponseMessage* _msg = _internal_mutable_submittransactionresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.submitTransactionResponse)
  return _msg;
}

// .protowire.NotifyVirtualSelectedParentChainChangedRequestMessage notifyVirtualSelectedParentChainChangedRequest = 1022;
inline bool KaspadMessage::_internal_has_notifyvirtualselectedparentchainchangedrequest() const {
  return payload_case() == kNotifyVirtualSelectedParentChainChangedRequest;
}
inline bool KaspadMessage::has_notifyvirtualselectedparentchainchangedrequest() const {
  return _internal_has_notifyvirtualselectedparentchainchangedrequest();
}
inline void KaspadMessage::set_has_notifyvirtualselectedparentchainchangedrequest() {
  _oneof_case_[0] = kNotifyVirtualSelectedParentChainChangedRequest;
}
inline ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* KaspadMessage::release_notifyvirtualselectedparentchainchangedrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyVirtualSelectedParentChainChangedRequest)
  if (_internal_has_notifyvirtualselectedparentchainchangedrequest()) {
    clear_has_payload();
      ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* temp = payload_.notifyvirtualselectedparentchainchangedrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifyvirtualselectedparentchainchangedrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage& KaspadMessage::_internal_notifyvirtualselectedparentchainchangedrequest() const {
  return _internal_has_notifyvirtualselectedparentchainchangedrequest()
      ? *payload_.notifyvirtualselectedparentchainchangedrequest_
      : reinterpret_cast< ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage&>(::protowire::_NotifyVirtualSelectedParentChainChangedRequestMessage_default_instance_);
}
inline const ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage& KaspadMessage::notifyvirtualselectedparentchainchangedrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyVirtualSelectedParentChainChangedRequest)
  return _internal_notifyvirtualselectedparentchainchangedrequest();
}
inline ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* KaspadMessage::unsafe_arena_release_notifyvirtualselectedparentchainchangedrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyVirtualSelectedParentChainChangedRequest)
  if (_internal_has_notifyvirtualselectedparentchainchangedrequest()) {
    clear_has_payload();
    ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* temp = payload_.notifyvirtualselectedparentchainchangedrequest_;
    payload_.notifyvirtualselectedparentchainchangedrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifyvirtualselectedparentchainchangedrequest(::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* notifyvirtualselectedparentchainchangedrequest) {
  clear_payload();
  if (notifyvirtualselectedparentchainchangedrequest) {
    set_has_notifyvirtualselectedparentchainchangedrequest();
    payload_.notifyvirtualselectedparentchainchangedrequest_ = notifyvirtualselectedparentchainchangedrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyVirtualSelectedParentChainChangedRequest)
}
inline ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* KaspadMessage::_internal_mutable_notifyvirtualselectedparentchainchangedrequest() {
  if (!_internal_has_notifyvirtualselectedparentchainchangedrequest()) {
    clear_payload();
    set_has_notifyvirtualselectedparentchainchangedrequest();
    payload_.notifyvirtualselectedparentchainchangedrequest_ = CreateMaybeMessage< ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage >(GetArenaForAllocation());
  }
  return payload_.notifyvirtualselectedparentchainchangedrequest_;
}
inline ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* KaspadMessage::mutable_notifyvirtualselectedparentchainchangedrequest() {
  ::protowire::NotifyVirtualSelectedParentChainChangedRequestMessage* _msg = _internal_mutable_notifyvirtualselectedparentchainchangedrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyVirtualSelectedParentChainChangedRequest)
  return _msg;
}

// .protowire.NotifyVirtualSelectedParentChainChangedResponseMessage notifyVirtualSelectedParentChainChangedResponse = 1023;
inline bool KaspadMessage::_internal_has_notifyvirtualselectedparentchainchangedresponse() const {
  return payload_case() == kNotifyVirtualSelectedParentChainChangedResponse;
}
inline bool KaspadMessage::has_notifyvirtualselectedparentchainchangedresponse() const {
  return _internal_has_notifyvirtualselectedparentchainchangedresponse();
}
inline void KaspadMessage::set_has_notifyvirtualselectedparentchainchangedresponse() {
  _oneof_case_[0] = kNotifyVirtualSelectedParentChainChangedResponse;
}
inline ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* KaspadMessage::release_notifyvirtualselectedparentchainchangedresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyVirtualSelectedParentChainChangedResponse)
  if (_internal_has_notifyvirtualselectedparentchainchangedresponse()) {
    clear_has_payload();
      ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* temp = payload_.notifyvirtualselectedparentchainchangedresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifyvirtualselectedparentchainchangedresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage& KaspadMessage::_internal_notifyvirtualselectedparentchainchangedresponse() const {
  return _internal_has_notifyvirtualselectedparentchainchangedresponse()
      ? *payload_.notifyvirtualselectedparentchainchangedresponse_
      : reinterpret_cast< ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage&>(::protowire::_NotifyVirtualSelectedParentChainChangedResponseMessage_default_instance_);
}
inline const ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage& KaspadMessage::notifyvirtualselectedparentchainchangedresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyVirtualSelectedParentChainChangedResponse)
  return _internal_notifyvirtualselectedparentchainchangedresponse();
}
inline ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* KaspadMessage::unsafe_arena_release_notifyvirtualselectedparentchainchangedresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyVirtualSelectedParentChainChangedResponse)
  if (_internal_has_notifyvirtualselectedparentchainchangedresponse()) {
    clear_has_payload();
    ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* temp = payload_.notifyvirtualselectedparentchainchangedresponse_;
    payload_.notifyvirtualselectedparentchainchangedresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifyvirtualselectedparentchainchangedresponse(::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* notifyvirtualselectedparentchainchangedresponse) {
  clear_payload();
  if (notifyvirtualselectedparentchainchangedresponse) {
    set_has_notifyvirtualselectedparentchainchangedresponse();
    payload_.notifyvirtualselectedparentchainchangedresponse_ = notifyvirtualselectedparentchainchangedresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyVirtualSelectedParentChainChangedResponse)
}
inline ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* KaspadMessage::_internal_mutable_notifyvirtualselectedparentchainchangedresponse() {
  if (!_internal_has_notifyvirtualselectedparentchainchangedresponse()) {
    clear_payload();
    set_has_notifyvirtualselectedparentchainchangedresponse();
    payload_.notifyvirtualselectedparentchainchangedresponse_ = CreateMaybeMessage< ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage >(GetArenaForAllocation());
  }
  return payload_.notifyvirtualselectedparentchainchangedresponse_;
}
inline ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* KaspadMessage::mutable_notifyvirtualselectedparentchainchangedresponse() {
  ::protowire::NotifyVirtualSelectedParentChainChangedResponseMessage* _msg = _internal_mutable_notifyvirtualselectedparentchainchangedresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyVirtualSelectedParentChainChangedResponse)
  return _msg;
}

// .protowire.VirtualSelectedParentChainChangedNotificationMessage virtualSelectedParentChainChangedNotification = 1024;
inline bool KaspadMessage::_internal_has_virtualselectedparentchainchangednotification() const {
  return payload_case() == kVirtualSelectedParentChainChangedNotification;
}
inline bool KaspadMessage::has_virtualselectedparentchainchangednotification() const {
  return _internal_has_virtualselectedparentchainchangednotification();
}
inline void KaspadMessage::set_has_virtualselectedparentchainchangednotification() {
  _oneof_case_[0] = kVirtualSelectedParentChainChangedNotification;
}
inline ::protowire::VirtualSelectedParentChainChangedNotificationMessage* KaspadMessage::release_virtualselectedparentchainchangednotification() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.virtualSelectedParentChainChangedNotification)
  if (_internal_has_virtualselectedparentchainchangednotification()) {
    clear_has_payload();
      ::protowire::VirtualSelectedParentChainChangedNotificationMessage* temp = payload_.virtualselectedparentchainchangednotification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.virtualselectedparentchainchangednotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::VirtualSelectedParentChainChangedNotificationMessage& KaspadMessage::_internal_virtualselectedparentchainchangednotification() const {
  return _internal_has_virtualselectedparentchainchangednotification()
      ? *payload_.virtualselectedparentchainchangednotification_
      : reinterpret_cast< ::protowire::VirtualSelectedParentChainChangedNotificationMessage&>(::protowire::_VirtualSelectedParentChainChangedNotificationMessage_default_instance_);
}
inline const ::protowire::VirtualSelectedParentChainChangedNotificationMessage& KaspadMessage::virtualselectedparentchainchangednotification() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.virtualSelectedParentChainChangedNotification)
  return _internal_virtualselectedparentchainchangednotification();
}
inline ::protowire::VirtualSelectedParentChainChangedNotificationMessage* KaspadMessage::unsafe_arena_release_virtualselectedparentchainchangednotification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.virtualSelectedParentChainChangedNotification)
  if (_internal_has_virtualselectedparentchainchangednotification()) {
    clear_has_payload();
    ::protowire::VirtualSelectedParentChainChangedNotificationMessage* temp = payload_.virtualselectedparentchainchangednotification_;
    payload_.virtualselectedparentchainchangednotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_virtualselectedparentchainchangednotification(::protowire::VirtualSelectedParentChainChangedNotificationMessage* virtualselectedparentchainchangednotification) {
  clear_payload();
  if (virtualselectedparentchainchangednotification) {
    set_has_virtualselectedparentchainchangednotification();
    payload_.virtualselectedparentchainchangednotification_ = virtualselectedparentchainchangednotification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.virtualSelectedParentChainChangedNotification)
}
inline ::protowire::VirtualSelectedParentChainChangedNotificationMessage* KaspadMessage::_internal_mutable_virtualselectedparentchainchangednotification() {
  if (!_internal_has_virtualselectedparentchainchangednotification()) {
    clear_payload();
    set_has_virtualselectedparentchainchangednotification();
    payload_.virtualselectedparentchainchangednotification_ = CreateMaybeMessage< ::protowire::VirtualSelectedParentChainChangedNotificationMessage >(GetArenaForAllocation());
  }
  return payload_.virtualselectedparentchainchangednotification_;
}
inline ::protowire::VirtualSelectedParentChainChangedNotificationMessage* KaspadMessage::mutable_virtualselectedparentchainchangednotification() {
  ::protowire::VirtualSelectedParentChainChangedNotificationMessage* _msg = _internal_mutable_virtualselectedparentchainchangednotification();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.virtualSelectedParentChainChangedNotification)
  return _msg;
}

// .protowire.GetBlockRequestMessage getBlockRequest = 1025;
inline bool KaspadMessage::_internal_has_getblockrequest() const {
  return payload_case() == kGetBlockRequest;
}
inline bool KaspadMessage::has_getblockrequest() const {
  return _internal_has_getblockrequest();
}
inline void KaspadMessage::set_has_getblockrequest() {
  _oneof_case_[0] = kGetBlockRequest;
}
inline ::protowire::GetBlockRequestMessage* KaspadMessage::release_getblockrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBlockRequest)
  if (_internal_has_getblockrequest()) {
    clear_has_payload();
      ::protowire::GetBlockRequestMessage* temp = payload_.getblockrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getblockrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBlockRequestMessage& KaspadMessage::_internal_getblockrequest() const {
  return _internal_has_getblockrequest()
      ? *payload_.getblockrequest_
      : reinterpret_cast< ::protowire::GetBlockRequestMessage&>(::protowire::_GetBlockRequestMessage_default_instance_);
}
inline const ::protowire::GetBlockRequestMessage& KaspadMessage::getblockrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBlockRequest)
  return _internal_getblockrequest();
}
inline ::protowire::GetBlockRequestMessage* KaspadMessage::unsafe_arena_release_getblockrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBlockRequest)
  if (_internal_has_getblockrequest()) {
    clear_has_payload();
    ::protowire::GetBlockRequestMessage* temp = payload_.getblockrequest_;
    payload_.getblockrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getblockrequest(::protowire::GetBlockRequestMessage* getblockrequest) {
  clear_payload();
  if (getblockrequest) {
    set_has_getblockrequest();
    payload_.getblockrequest_ = getblockrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBlockRequest)
}
inline ::protowire::GetBlockRequestMessage* KaspadMessage::_internal_mutable_getblockrequest() {
  if (!_internal_has_getblockrequest()) {
    clear_payload();
    set_has_getblockrequest();
    payload_.getblockrequest_ = CreateMaybeMessage< ::protowire::GetBlockRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getblockrequest_;
}
inline ::protowire::GetBlockRequestMessage* KaspadMessage::mutable_getblockrequest() {
  ::protowire::GetBlockRequestMessage* _msg = _internal_mutable_getblockrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBlockRequest)
  return _msg;
}

// .protowire.GetBlockResponseMessage getBlockResponse = 1026;
inline bool KaspadMessage::_internal_has_getblockresponse() const {
  return payload_case() == kGetBlockResponse;
}
inline bool KaspadMessage::has_getblockresponse() const {
  return _internal_has_getblockresponse();
}
inline void KaspadMessage::set_has_getblockresponse() {
  _oneof_case_[0] = kGetBlockResponse;
}
inline ::protowire::GetBlockResponseMessage* KaspadMessage::release_getblockresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBlockResponse)
  if (_internal_has_getblockresponse()) {
    clear_has_payload();
      ::protowire::GetBlockResponseMessage* temp = payload_.getblockresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getblockresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBlockResponseMessage& KaspadMessage::_internal_getblockresponse() const {
  return _internal_has_getblockresponse()
      ? *payload_.getblockresponse_
      : reinterpret_cast< ::protowire::GetBlockResponseMessage&>(::protowire::_GetBlockResponseMessage_default_instance_);
}
inline const ::protowire::GetBlockResponseMessage& KaspadMessage::getblockresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBlockResponse)
  return _internal_getblockresponse();
}
inline ::protowire::GetBlockResponseMessage* KaspadMessage::unsafe_arena_release_getblockresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBlockResponse)
  if (_internal_has_getblockresponse()) {
    clear_has_payload();
    ::protowire::GetBlockResponseMessage* temp = payload_.getblockresponse_;
    payload_.getblockresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getblockresponse(::protowire::GetBlockResponseMessage* getblockresponse) {
  clear_payload();
  if (getblockresponse) {
    set_has_getblockresponse();
    payload_.getblockresponse_ = getblockresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBlockResponse)
}
inline ::protowire::GetBlockResponseMessage* KaspadMessage::_internal_mutable_getblockresponse() {
  if (!_internal_has_getblockresponse()) {
    clear_payload();
    set_has_getblockresponse();
    payload_.getblockresponse_ = CreateMaybeMessage< ::protowire::GetBlockResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getblockresponse_;
}
inline ::protowire::GetBlockResponseMessage* KaspadMessage::mutable_getblockresponse() {
  ::protowire::GetBlockResponseMessage* _msg = _internal_mutable_getblockresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBlockResponse)
  return _msg;
}

// .protowire.GetSubnetworkRequestMessage getSubnetworkRequest = 1027;
inline bool KaspadMessage::_internal_has_getsubnetworkrequest() const {
  return payload_case() == kGetSubnetworkRequest;
}
inline bool KaspadMessage::has_getsubnetworkrequest() const {
  return _internal_has_getsubnetworkrequest();
}
inline void KaspadMessage::set_has_getsubnetworkrequest() {
  _oneof_case_[0] = kGetSubnetworkRequest;
}
inline ::protowire::GetSubnetworkRequestMessage* KaspadMessage::release_getsubnetworkrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getSubnetworkRequest)
  if (_internal_has_getsubnetworkrequest()) {
    clear_has_payload();
      ::protowire::GetSubnetworkRequestMessage* temp = payload_.getsubnetworkrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getsubnetworkrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetSubnetworkRequestMessage& KaspadMessage::_internal_getsubnetworkrequest() const {
  return _internal_has_getsubnetworkrequest()
      ? *payload_.getsubnetworkrequest_
      : reinterpret_cast< ::protowire::GetSubnetworkRequestMessage&>(::protowire::_GetSubnetworkRequestMessage_default_instance_);
}
inline const ::protowire::GetSubnetworkRequestMessage& KaspadMessage::getsubnetworkrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getSubnetworkRequest)
  return _internal_getsubnetworkrequest();
}
inline ::protowire::GetSubnetworkRequestMessage* KaspadMessage::unsafe_arena_release_getsubnetworkrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getSubnetworkRequest)
  if (_internal_has_getsubnetworkrequest()) {
    clear_has_payload();
    ::protowire::GetSubnetworkRequestMessage* temp = payload_.getsubnetworkrequest_;
    payload_.getsubnetworkrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getsubnetworkrequest(::protowire::GetSubnetworkRequestMessage* getsubnetworkrequest) {
  clear_payload();
  if (getsubnetworkrequest) {
    set_has_getsubnetworkrequest();
    payload_.getsubnetworkrequest_ = getsubnetworkrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getSubnetworkRequest)
}
inline ::protowire::GetSubnetworkRequestMessage* KaspadMessage::_internal_mutable_getsubnetworkrequest() {
  if (!_internal_has_getsubnetworkrequest()) {
    clear_payload();
    set_has_getsubnetworkrequest();
    payload_.getsubnetworkrequest_ = CreateMaybeMessage< ::protowire::GetSubnetworkRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getsubnetworkrequest_;
}
inline ::protowire::GetSubnetworkRequestMessage* KaspadMessage::mutable_getsubnetworkrequest() {
  ::protowire::GetSubnetworkRequestMessage* _msg = _internal_mutable_getsubnetworkrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getSubnetworkRequest)
  return _msg;
}

// .protowire.GetSubnetworkResponseMessage getSubnetworkResponse = 1028;
inline bool KaspadMessage::_internal_has_getsubnetworkresponse() const {
  return payload_case() == kGetSubnetworkResponse;
}
inline bool KaspadMessage::has_getsubnetworkresponse() const {
  return _internal_has_getsubnetworkresponse();
}
inline void KaspadMessage::set_has_getsubnetworkresponse() {
  _oneof_case_[0] = kGetSubnetworkResponse;
}
inline ::protowire::GetSubnetworkResponseMessage* KaspadMessage::release_getsubnetworkresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getSubnetworkResponse)
  if (_internal_has_getsubnetworkresponse()) {
    clear_has_payload();
      ::protowire::GetSubnetworkResponseMessage* temp = payload_.getsubnetworkresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getsubnetworkresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetSubnetworkResponseMessage& KaspadMessage::_internal_getsubnetworkresponse() const {
  return _internal_has_getsubnetworkresponse()
      ? *payload_.getsubnetworkresponse_
      : reinterpret_cast< ::protowire::GetSubnetworkResponseMessage&>(::protowire::_GetSubnetworkResponseMessage_default_instance_);
}
inline const ::protowire::GetSubnetworkResponseMessage& KaspadMessage::getsubnetworkresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getSubnetworkResponse)
  return _internal_getsubnetworkresponse();
}
inline ::protowire::GetSubnetworkResponseMessage* KaspadMessage::unsafe_arena_release_getsubnetworkresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getSubnetworkResponse)
  if (_internal_has_getsubnetworkresponse()) {
    clear_has_payload();
    ::protowire::GetSubnetworkResponseMessage* temp = payload_.getsubnetworkresponse_;
    payload_.getsubnetworkresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getsubnetworkresponse(::protowire::GetSubnetworkResponseMessage* getsubnetworkresponse) {
  clear_payload();
  if (getsubnetworkresponse) {
    set_has_getsubnetworkresponse();
    payload_.getsubnetworkresponse_ = getsubnetworkresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getSubnetworkResponse)
}
inline ::protowire::GetSubnetworkResponseMessage* KaspadMessage::_internal_mutable_getsubnetworkresponse() {
  if (!_internal_has_getsubnetworkresponse()) {
    clear_payload();
    set_has_getsubnetworkresponse();
    payload_.getsubnetworkresponse_ = CreateMaybeMessage< ::protowire::GetSubnetworkResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getsubnetworkresponse_;
}
inline ::protowire::GetSubnetworkResponseMessage* KaspadMessage::mutable_getsubnetworkresponse() {
  ::protowire::GetSubnetworkResponseMessage* _msg = _internal_mutable_getsubnetworkresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getSubnetworkResponse)
  return _msg;
}

// .protowire.GetVirtualSelectedParentChainFromBlockRequestMessage getVirtualSelectedParentChainFromBlockRequest = 1029;
inline bool KaspadMessage::_internal_has_getvirtualselectedparentchainfromblockrequest() const {
  return payload_case() == kGetVirtualSelectedParentChainFromBlockRequest;
}
inline bool KaspadMessage::has_getvirtualselectedparentchainfromblockrequest() const {
  return _internal_has_getvirtualselectedparentchainfromblockrequest();
}
inline void KaspadMessage::set_has_getvirtualselectedparentchainfromblockrequest() {
  _oneof_case_[0] = kGetVirtualSelectedParentChainFromBlockRequest;
}
inline ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* KaspadMessage::release_getvirtualselectedparentchainfromblockrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getVirtualSelectedParentChainFromBlockRequest)
  if (_internal_has_getvirtualselectedparentchainfromblockrequest()) {
    clear_has_payload();
      ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* temp = payload_.getvirtualselectedparentchainfromblockrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getvirtualselectedparentchainfromblockrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage& KaspadMessage::_internal_getvirtualselectedparentchainfromblockrequest() const {
  return _internal_has_getvirtualselectedparentchainfromblockrequest()
      ? *payload_.getvirtualselectedparentchainfromblockrequest_
      : reinterpret_cast< ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage&>(::protowire::_GetVirtualSelectedParentChainFromBlockRequestMessage_default_instance_);
}
inline const ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage& KaspadMessage::getvirtualselectedparentchainfromblockrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getVirtualSelectedParentChainFromBlockRequest)
  return _internal_getvirtualselectedparentchainfromblockrequest();
}
inline ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* KaspadMessage::unsafe_arena_release_getvirtualselectedparentchainfromblockrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getVirtualSelectedParentChainFromBlockRequest)
  if (_internal_has_getvirtualselectedparentchainfromblockrequest()) {
    clear_has_payload();
    ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* temp = payload_.getvirtualselectedparentchainfromblockrequest_;
    payload_.getvirtualselectedparentchainfromblockrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getvirtualselectedparentchainfromblockrequest(::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* getvirtualselectedparentchainfromblockrequest) {
  clear_payload();
  if (getvirtualselectedparentchainfromblockrequest) {
    set_has_getvirtualselectedparentchainfromblockrequest();
    payload_.getvirtualselectedparentchainfromblockrequest_ = getvirtualselectedparentchainfromblockrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getVirtualSelectedParentChainFromBlockRequest)
}
inline ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* KaspadMessage::_internal_mutable_getvirtualselectedparentchainfromblockrequest() {
  if (!_internal_has_getvirtualselectedparentchainfromblockrequest()) {
    clear_payload();
    set_has_getvirtualselectedparentchainfromblockrequest();
    payload_.getvirtualselectedparentchainfromblockrequest_ = CreateMaybeMessage< ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getvirtualselectedparentchainfromblockrequest_;
}
inline ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* KaspadMessage::mutable_getvirtualselectedparentchainfromblockrequest() {
  ::protowire::GetVirtualSelectedParentChainFromBlockRequestMessage* _msg = _internal_mutable_getvirtualselectedparentchainfromblockrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getVirtualSelectedParentChainFromBlockRequest)
  return _msg;
}

// .protowire.GetVirtualSelectedParentChainFromBlockResponseMessage getVirtualSelectedParentChainFromBlockResponse = 1030;
inline bool KaspadMessage::_internal_has_getvirtualselectedparentchainfromblockresponse() const {
  return payload_case() == kGetVirtualSelectedParentChainFromBlockResponse;
}
inline bool KaspadMessage::has_getvirtualselectedparentchainfromblockresponse() const {
  return _internal_has_getvirtualselectedparentchainfromblockresponse();
}
inline void KaspadMessage::set_has_getvirtualselectedparentchainfromblockresponse() {
  _oneof_case_[0] = kGetVirtualSelectedParentChainFromBlockResponse;
}
inline ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* KaspadMessage::release_getvirtualselectedparentchainfromblockresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getVirtualSelectedParentChainFromBlockResponse)
  if (_internal_has_getvirtualselectedparentchainfromblockresponse()) {
    clear_has_payload();
      ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* temp = payload_.getvirtualselectedparentchainfromblockresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getvirtualselectedparentchainfromblockresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage& KaspadMessage::_internal_getvirtualselectedparentchainfromblockresponse() const {
  return _internal_has_getvirtualselectedparentchainfromblockresponse()
      ? *payload_.getvirtualselectedparentchainfromblockresponse_
      : reinterpret_cast< ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage&>(::protowire::_GetVirtualSelectedParentChainFromBlockResponseMessage_default_instance_);
}
inline const ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage& KaspadMessage::getvirtualselectedparentchainfromblockresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getVirtualSelectedParentChainFromBlockResponse)
  return _internal_getvirtualselectedparentchainfromblockresponse();
}
inline ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* KaspadMessage::unsafe_arena_release_getvirtualselectedparentchainfromblockresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getVirtualSelectedParentChainFromBlockResponse)
  if (_internal_has_getvirtualselectedparentchainfromblockresponse()) {
    clear_has_payload();
    ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* temp = payload_.getvirtualselectedparentchainfromblockresponse_;
    payload_.getvirtualselectedparentchainfromblockresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getvirtualselectedparentchainfromblockresponse(::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* getvirtualselectedparentchainfromblockresponse) {
  clear_payload();
  if (getvirtualselectedparentchainfromblockresponse) {
    set_has_getvirtualselectedparentchainfromblockresponse();
    payload_.getvirtualselectedparentchainfromblockresponse_ = getvirtualselectedparentchainfromblockresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getVirtualSelectedParentChainFromBlockResponse)
}
inline ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* KaspadMessage::_internal_mutable_getvirtualselectedparentchainfromblockresponse() {
  if (!_internal_has_getvirtualselectedparentchainfromblockresponse()) {
    clear_payload();
    set_has_getvirtualselectedparentchainfromblockresponse();
    payload_.getvirtualselectedparentchainfromblockresponse_ = CreateMaybeMessage< ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getvirtualselectedparentchainfromblockresponse_;
}
inline ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* KaspadMessage::mutable_getvirtualselectedparentchainfromblockresponse() {
  ::protowire::GetVirtualSelectedParentChainFromBlockResponseMessage* _msg = _internal_mutable_getvirtualselectedparentchainfromblockresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getVirtualSelectedParentChainFromBlockResponse)
  return _msg;
}

// .protowire.GetBlocksRequestMessage getBlocksRequest = 1031;
inline bool KaspadMessage::_internal_has_getblocksrequest() const {
  return payload_case() == kGetBlocksRequest;
}
inline bool KaspadMessage::has_getblocksrequest() const {
  return _internal_has_getblocksrequest();
}
inline void KaspadMessage::set_has_getblocksrequest() {
  _oneof_case_[0] = kGetBlocksRequest;
}
inline ::protowire::GetBlocksRequestMessage* KaspadMessage::release_getblocksrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBlocksRequest)
  if (_internal_has_getblocksrequest()) {
    clear_has_payload();
      ::protowire::GetBlocksRequestMessage* temp = payload_.getblocksrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getblocksrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBlocksRequestMessage& KaspadMessage::_internal_getblocksrequest() const {
  return _internal_has_getblocksrequest()
      ? *payload_.getblocksrequest_
      : reinterpret_cast< ::protowire::GetBlocksRequestMessage&>(::protowire::_GetBlocksRequestMessage_default_instance_);
}
inline const ::protowire::GetBlocksRequestMessage& KaspadMessage::getblocksrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBlocksRequest)
  return _internal_getblocksrequest();
}
inline ::protowire::GetBlocksRequestMessage* KaspadMessage::unsafe_arena_release_getblocksrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBlocksRequest)
  if (_internal_has_getblocksrequest()) {
    clear_has_payload();
    ::protowire::GetBlocksRequestMessage* temp = payload_.getblocksrequest_;
    payload_.getblocksrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getblocksrequest(::protowire::GetBlocksRequestMessage* getblocksrequest) {
  clear_payload();
  if (getblocksrequest) {
    set_has_getblocksrequest();
    payload_.getblocksrequest_ = getblocksrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBlocksRequest)
}
inline ::protowire::GetBlocksRequestMessage* KaspadMessage::_internal_mutable_getblocksrequest() {
  if (!_internal_has_getblocksrequest()) {
    clear_payload();
    set_has_getblocksrequest();
    payload_.getblocksrequest_ = CreateMaybeMessage< ::protowire::GetBlocksRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getblocksrequest_;
}
inline ::protowire::GetBlocksRequestMessage* KaspadMessage::mutable_getblocksrequest() {
  ::protowire::GetBlocksRequestMessage* _msg = _internal_mutable_getblocksrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBlocksRequest)
  return _msg;
}

// .protowire.GetBlocksResponseMessage getBlocksResponse = 1032;
inline bool KaspadMessage::_internal_has_getblocksresponse() const {
  return payload_case() == kGetBlocksResponse;
}
inline bool KaspadMessage::has_getblocksresponse() const {
  return _internal_has_getblocksresponse();
}
inline void KaspadMessage::set_has_getblocksresponse() {
  _oneof_case_[0] = kGetBlocksResponse;
}
inline ::protowire::GetBlocksResponseMessage* KaspadMessage::release_getblocksresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBlocksResponse)
  if (_internal_has_getblocksresponse()) {
    clear_has_payload();
      ::protowire::GetBlocksResponseMessage* temp = payload_.getblocksresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getblocksresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBlocksResponseMessage& KaspadMessage::_internal_getblocksresponse() const {
  return _internal_has_getblocksresponse()
      ? *payload_.getblocksresponse_
      : reinterpret_cast< ::protowire::GetBlocksResponseMessage&>(::protowire::_GetBlocksResponseMessage_default_instance_);
}
inline const ::protowire::GetBlocksResponseMessage& KaspadMessage::getblocksresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBlocksResponse)
  return _internal_getblocksresponse();
}
inline ::protowire::GetBlocksResponseMessage* KaspadMessage::unsafe_arena_release_getblocksresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBlocksResponse)
  if (_internal_has_getblocksresponse()) {
    clear_has_payload();
    ::protowire::GetBlocksResponseMessage* temp = payload_.getblocksresponse_;
    payload_.getblocksresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getblocksresponse(::protowire::GetBlocksResponseMessage* getblocksresponse) {
  clear_payload();
  if (getblocksresponse) {
    set_has_getblocksresponse();
    payload_.getblocksresponse_ = getblocksresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBlocksResponse)
}
inline ::protowire::GetBlocksResponseMessage* KaspadMessage::_internal_mutable_getblocksresponse() {
  if (!_internal_has_getblocksresponse()) {
    clear_payload();
    set_has_getblocksresponse();
    payload_.getblocksresponse_ = CreateMaybeMessage< ::protowire::GetBlocksResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getblocksresponse_;
}
inline ::protowire::GetBlocksResponseMessage* KaspadMessage::mutable_getblocksresponse() {
  ::protowire::GetBlocksResponseMessage* _msg = _internal_mutable_getblocksresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBlocksResponse)
  return _msg;
}

// .protowire.GetBlockCountRequestMessage getBlockCountRequest = 1033;
inline bool KaspadMessage::_internal_has_getblockcountrequest() const {
  return payload_case() == kGetBlockCountRequest;
}
inline bool KaspadMessage::has_getblockcountrequest() const {
  return _internal_has_getblockcountrequest();
}
inline void KaspadMessage::set_has_getblockcountrequest() {
  _oneof_case_[0] = kGetBlockCountRequest;
}
inline ::protowire::GetBlockCountRequestMessage* KaspadMessage::release_getblockcountrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBlockCountRequest)
  if (_internal_has_getblockcountrequest()) {
    clear_has_payload();
      ::protowire::GetBlockCountRequestMessage* temp = payload_.getblockcountrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getblockcountrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBlockCountRequestMessage& KaspadMessage::_internal_getblockcountrequest() const {
  return _internal_has_getblockcountrequest()
      ? *payload_.getblockcountrequest_
      : reinterpret_cast< ::protowire::GetBlockCountRequestMessage&>(::protowire::_GetBlockCountRequestMessage_default_instance_);
}
inline const ::protowire::GetBlockCountRequestMessage& KaspadMessage::getblockcountrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBlockCountRequest)
  return _internal_getblockcountrequest();
}
inline ::protowire::GetBlockCountRequestMessage* KaspadMessage::unsafe_arena_release_getblockcountrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBlockCountRequest)
  if (_internal_has_getblockcountrequest()) {
    clear_has_payload();
    ::protowire::GetBlockCountRequestMessage* temp = payload_.getblockcountrequest_;
    payload_.getblockcountrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getblockcountrequest(::protowire::GetBlockCountRequestMessage* getblockcountrequest) {
  clear_payload();
  if (getblockcountrequest) {
    set_has_getblockcountrequest();
    payload_.getblockcountrequest_ = getblockcountrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBlockCountRequest)
}
inline ::protowire::GetBlockCountRequestMessage* KaspadMessage::_internal_mutable_getblockcountrequest() {
  if (!_internal_has_getblockcountrequest()) {
    clear_payload();
    set_has_getblockcountrequest();
    payload_.getblockcountrequest_ = CreateMaybeMessage< ::protowire::GetBlockCountRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getblockcountrequest_;
}
inline ::protowire::GetBlockCountRequestMessage* KaspadMessage::mutable_getblockcountrequest() {
  ::protowire::GetBlockCountRequestMessage* _msg = _internal_mutable_getblockcountrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBlockCountRequest)
  return _msg;
}

// .protowire.GetBlockCountResponseMessage getBlockCountResponse = 1034;
inline bool KaspadMessage::_internal_has_getblockcountresponse() const {
  return payload_case() == kGetBlockCountResponse;
}
inline bool KaspadMessage::has_getblockcountresponse() const {
  return _internal_has_getblockcountresponse();
}
inline void KaspadMessage::set_has_getblockcountresponse() {
  _oneof_case_[0] = kGetBlockCountResponse;
}
inline ::protowire::GetBlockCountResponseMessage* KaspadMessage::release_getblockcountresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBlockCountResponse)
  if (_internal_has_getblockcountresponse()) {
    clear_has_payload();
      ::protowire::GetBlockCountResponseMessage* temp = payload_.getblockcountresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getblockcountresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBlockCountResponseMessage& KaspadMessage::_internal_getblockcountresponse() const {
  return _internal_has_getblockcountresponse()
      ? *payload_.getblockcountresponse_
      : reinterpret_cast< ::protowire::GetBlockCountResponseMessage&>(::protowire::_GetBlockCountResponseMessage_default_instance_);
}
inline const ::protowire::GetBlockCountResponseMessage& KaspadMessage::getblockcountresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBlockCountResponse)
  return _internal_getblockcountresponse();
}
inline ::protowire::GetBlockCountResponseMessage* KaspadMessage::unsafe_arena_release_getblockcountresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBlockCountResponse)
  if (_internal_has_getblockcountresponse()) {
    clear_has_payload();
    ::protowire::GetBlockCountResponseMessage* temp = payload_.getblockcountresponse_;
    payload_.getblockcountresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getblockcountresponse(::protowire::GetBlockCountResponseMessage* getblockcountresponse) {
  clear_payload();
  if (getblockcountresponse) {
    set_has_getblockcountresponse();
    payload_.getblockcountresponse_ = getblockcountresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBlockCountResponse)
}
inline ::protowire::GetBlockCountResponseMessage* KaspadMessage::_internal_mutable_getblockcountresponse() {
  if (!_internal_has_getblockcountresponse()) {
    clear_payload();
    set_has_getblockcountresponse();
    payload_.getblockcountresponse_ = CreateMaybeMessage< ::protowire::GetBlockCountResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getblockcountresponse_;
}
inline ::protowire::GetBlockCountResponseMessage* KaspadMessage::mutable_getblockcountresponse() {
  ::protowire::GetBlockCountResponseMessage* _msg = _internal_mutable_getblockcountresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBlockCountResponse)
  return _msg;
}

// .protowire.GetBlockDagInfoRequestMessage getBlockDagInfoRequest = 1035;
inline bool KaspadMessage::_internal_has_getblockdaginforequest() const {
  return payload_case() == kGetBlockDagInfoRequest;
}
inline bool KaspadMessage::has_getblockdaginforequest() const {
  return _internal_has_getblockdaginforequest();
}
inline void KaspadMessage::set_has_getblockdaginforequest() {
  _oneof_case_[0] = kGetBlockDagInfoRequest;
}
inline ::protowire::GetBlockDagInfoRequestMessage* KaspadMessage::release_getblockdaginforequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBlockDagInfoRequest)
  if (_internal_has_getblockdaginforequest()) {
    clear_has_payload();
      ::protowire::GetBlockDagInfoRequestMessage* temp = payload_.getblockdaginforequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getblockdaginforequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBlockDagInfoRequestMessage& KaspadMessage::_internal_getblockdaginforequest() const {
  return _internal_has_getblockdaginforequest()
      ? *payload_.getblockdaginforequest_
      : reinterpret_cast< ::protowire::GetBlockDagInfoRequestMessage&>(::protowire::_GetBlockDagInfoRequestMessage_default_instance_);
}
inline const ::protowire::GetBlockDagInfoRequestMessage& KaspadMessage::getblockdaginforequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBlockDagInfoRequest)
  return _internal_getblockdaginforequest();
}
inline ::protowire::GetBlockDagInfoRequestMessage* KaspadMessage::unsafe_arena_release_getblockdaginforequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBlockDagInfoRequest)
  if (_internal_has_getblockdaginforequest()) {
    clear_has_payload();
    ::protowire::GetBlockDagInfoRequestMessage* temp = payload_.getblockdaginforequest_;
    payload_.getblockdaginforequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getblockdaginforequest(::protowire::GetBlockDagInfoRequestMessage* getblockdaginforequest) {
  clear_payload();
  if (getblockdaginforequest) {
    set_has_getblockdaginforequest();
    payload_.getblockdaginforequest_ = getblockdaginforequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBlockDagInfoRequest)
}
inline ::protowire::GetBlockDagInfoRequestMessage* KaspadMessage::_internal_mutable_getblockdaginforequest() {
  if (!_internal_has_getblockdaginforequest()) {
    clear_payload();
    set_has_getblockdaginforequest();
    payload_.getblockdaginforequest_ = CreateMaybeMessage< ::protowire::GetBlockDagInfoRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getblockdaginforequest_;
}
inline ::protowire::GetBlockDagInfoRequestMessage* KaspadMessage::mutable_getblockdaginforequest() {
  ::protowire::GetBlockDagInfoRequestMessage* _msg = _internal_mutable_getblockdaginforequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBlockDagInfoRequest)
  return _msg;
}

// .protowire.GetBlockDagInfoResponseMessage getBlockDagInfoResponse = 1036;
inline bool KaspadMessage::_internal_has_getblockdaginforesponse() const {
  return payload_case() == kGetBlockDagInfoResponse;
}
inline bool KaspadMessage::has_getblockdaginforesponse() const {
  return _internal_has_getblockdaginforesponse();
}
inline void KaspadMessage::set_has_getblockdaginforesponse() {
  _oneof_case_[0] = kGetBlockDagInfoResponse;
}
inline ::protowire::GetBlockDagInfoResponseMessage* KaspadMessage::release_getblockdaginforesponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBlockDagInfoResponse)
  if (_internal_has_getblockdaginforesponse()) {
    clear_has_payload();
      ::protowire::GetBlockDagInfoResponseMessage* temp = payload_.getblockdaginforesponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getblockdaginforesponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBlockDagInfoResponseMessage& KaspadMessage::_internal_getblockdaginforesponse() const {
  return _internal_has_getblockdaginforesponse()
      ? *payload_.getblockdaginforesponse_
      : reinterpret_cast< ::protowire::GetBlockDagInfoResponseMessage&>(::protowire::_GetBlockDagInfoResponseMessage_default_instance_);
}
inline const ::protowire::GetBlockDagInfoResponseMessage& KaspadMessage::getblockdaginforesponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBlockDagInfoResponse)
  return _internal_getblockdaginforesponse();
}
inline ::protowire::GetBlockDagInfoResponseMessage* KaspadMessage::unsafe_arena_release_getblockdaginforesponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBlockDagInfoResponse)
  if (_internal_has_getblockdaginforesponse()) {
    clear_has_payload();
    ::protowire::GetBlockDagInfoResponseMessage* temp = payload_.getblockdaginforesponse_;
    payload_.getblockdaginforesponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getblockdaginforesponse(::protowire::GetBlockDagInfoResponseMessage* getblockdaginforesponse) {
  clear_payload();
  if (getblockdaginforesponse) {
    set_has_getblockdaginforesponse();
    payload_.getblockdaginforesponse_ = getblockdaginforesponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBlockDagInfoResponse)
}
inline ::protowire::GetBlockDagInfoResponseMessage* KaspadMessage::_internal_mutable_getblockdaginforesponse() {
  if (!_internal_has_getblockdaginforesponse()) {
    clear_payload();
    set_has_getblockdaginforesponse();
    payload_.getblockdaginforesponse_ = CreateMaybeMessage< ::protowire::GetBlockDagInfoResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getblockdaginforesponse_;
}
inline ::protowire::GetBlockDagInfoResponseMessage* KaspadMessage::mutable_getblockdaginforesponse() {
  ::protowire::GetBlockDagInfoResponseMessage* _msg = _internal_mutable_getblockdaginforesponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBlockDagInfoResponse)
  return _msg;
}

// .protowire.ResolveFinalityConflictRequestMessage resolveFinalityConflictRequest = 1037;
inline bool KaspadMessage::_internal_has_resolvefinalityconflictrequest() const {
  return payload_case() == kResolveFinalityConflictRequest;
}
inline bool KaspadMessage::has_resolvefinalityconflictrequest() const {
  return _internal_has_resolvefinalityconflictrequest();
}
inline void KaspadMessage::set_has_resolvefinalityconflictrequest() {
  _oneof_case_[0] = kResolveFinalityConflictRequest;
}
inline ::protowire::ResolveFinalityConflictRequestMessage* KaspadMessage::release_resolvefinalityconflictrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.resolveFinalityConflictRequest)
  if (_internal_has_resolvefinalityconflictrequest()) {
    clear_has_payload();
      ::protowire::ResolveFinalityConflictRequestMessage* temp = payload_.resolvefinalityconflictrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.resolvefinalityconflictrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::ResolveFinalityConflictRequestMessage& KaspadMessage::_internal_resolvefinalityconflictrequest() const {
  return _internal_has_resolvefinalityconflictrequest()
      ? *payload_.resolvefinalityconflictrequest_
      : reinterpret_cast< ::protowire::ResolveFinalityConflictRequestMessage&>(::protowire::_ResolveFinalityConflictRequestMessage_default_instance_);
}
inline const ::protowire::ResolveFinalityConflictRequestMessage& KaspadMessage::resolvefinalityconflictrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.resolveFinalityConflictRequest)
  return _internal_resolvefinalityconflictrequest();
}
inline ::protowire::ResolveFinalityConflictRequestMessage* KaspadMessage::unsafe_arena_release_resolvefinalityconflictrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.resolveFinalityConflictRequest)
  if (_internal_has_resolvefinalityconflictrequest()) {
    clear_has_payload();
    ::protowire::ResolveFinalityConflictRequestMessage* temp = payload_.resolvefinalityconflictrequest_;
    payload_.resolvefinalityconflictrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_resolvefinalityconflictrequest(::protowire::ResolveFinalityConflictRequestMessage* resolvefinalityconflictrequest) {
  clear_payload();
  if (resolvefinalityconflictrequest) {
    set_has_resolvefinalityconflictrequest();
    payload_.resolvefinalityconflictrequest_ = resolvefinalityconflictrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.resolveFinalityConflictRequest)
}
inline ::protowire::ResolveFinalityConflictRequestMessage* KaspadMessage::_internal_mutable_resolvefinalityconflictrequest() {
  if (!_internal_has_resolvefinalityconflictrequest()) {
    clear_payload();
    set_has_resolvefinalityconflictrequest();
    payload_.resolvefinalityconflictrequest_ = CreateMaybeMessage< ::protowire::ResolveFinalityConflictRequestMessage >(GetArenaForAllocation());
  }
  return payload_.resolvefinalityconflictrequest_;
}
inline ::protowire::ResolveFinalityConflictRequestMessage* KaspadMessage::mutable_resolvefinalityconflictrequest() {
  ::protowire::ResolveFinalityConflictRequestMessage* _msg = _internal_mutable_resolvefinalityconflictrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.resolveFinalityConflictRequest)
  return _msg;
}

// .protowire.ResolveFinalityConflictResponseMessage resolveFinalityConflictResponse = 1038;
inline bool KaspadMessage::_internal_has_resolvefinalityconflictresponse() const {
  return payload_case() == kResolveFinalityConflictResponse;
}
inline bool KaspadMessage::has_resolvefinalityconflictresponse() const {
  return _internal_has_resolvefinalityconflictresponse();
}
inline void KaspadMessage::set_has_resolvefinalityconflictresponse() {
  _oneof_case_[0] = kResolveFinalityConflictResponse;
}
inline ::protowire::ResolveFinalityConflictResponseMessage* KaspadMessage::release_resolvefinalityconflictresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.resolveFinalityConflictResponse)
  if (_internal_has_resolvefinalityconflictresponse()) {
    clear_has_payload();
      ::protowire::ResolveFinalityConflictResponseMessage* temp = payload_.resolvefinalityconflictresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.resolvefinalityconflictresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::ResolveFinalityConflictResponseMessage& KaspadMessage::_internal_resolvefinalityconflictresponse() const {
  return _internal_has_resolvefinalityconflictresponse()
      ? *payload_.resolvefinalityconflictresponse_
      : reinterpret_cast< ::protowire::ResolveFinalityConflictResponseMessage&>(::protowire::_ResolveFinalityConflictResponseMessage_default_instance_);
}
inline const ::protowire::ResolveFinalityConflictResponseMessage& KaspadMessage::resolvefinalityconflictresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.resolveFinalityConflictResponse)
  return _internal_resolvefinalityconflictresponse();
}
inline ::protowire::ResolveFinalityConflictResponseMessage* KaspadMessage::unsafe_arena_release_resolvefinalityconflictresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.resolveFinalityConflictResponse)
  if (_internal_has_resolvefinalityconflictresponse()) {
    clear_has_payload();
    ::protowire::ResolveFinalityConflictResponseMessage* temp = payload_.resolvefinalityconflictresponse_;
    payload_.resolvefinalityconflictresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_resolvefinalityconflictresponse(::protowire::ResolveFinalityConflictResponseMessage* resolvefinalityconflictresponse) {
  clear_payload();
  if (resolvefinalityconflictresponse) {
    set_has_resolvefinalityconflictresponse();
    payload_.resolvefinalityconflictresponse_ = resolvefinalityconflictresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.resolveFinalityConflictResponse)
}
inline ::protowire::ResolveFinalityConflictResponseMessage* KaspadMessage::_internal_mutable_resolvefinalityconflictresponse() {
  if (!_internal_has_resolvefinalityconflictresponse()) {
    clear_payload();
    set_has_resolvefinalityconflictresponse();
    payload_.resolvefinalityconflictresponse_ = CreateMaybeMessage< ::protowire::ResolveFinalityConflictResponseMessage >(GetArenaForAllocation());
  }
  return payload_.resolvefinalityconflictresponse_;
}
inline ::protowire::ResolveFinalityConflictResponseMessage* KaspadMessage::mutable_resolvefinalityconflictresponse() {
  ::protowire::ResolveFinalityConflictResponseMessage* _msg = _internal_mutable_resolvefinalityconflictresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.resolveFinalityConflictResponse)
  return _msg;
}

// .protowire.NotifyFinalityConflictsRequestMessage notifyFinalityConflictsRequest = 1039;
inline bool KaspadMessage::_internal_has_notifyfinalityconflictsrequest() const {
  return payload_case() == kNotifyFinalityConflictsRequest;
}
inline bool KaspadMessage::has_notifyfinalityconflictsrequest() const {
  return _internal_has_notifyfinalityconflictsrequest();
}
inline void KaspadMessage::set_has_notifyfinalityconflictsrequest() {
  _oneof_case_[0] = kNotifyFinalityConflictsRequest;
}
inline ::protowire::NotifyFinalityConflictsRequestMessage* KaspadMessage::release_notifyfinalityconflictsrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyFinalityConflictsRequest)
  if (_internal_has_notifyfinalityconflictsrequest()) {
    clear_has_payload();
      ::protowire::NotifyFinalityConflictsRequestMessage* temp = payload_.notifyfinalityconflictsrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifyfinalityconflictsrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyFinalityConflictsRequestMessage& KaspadMessage::_internal_notifyfinalityconflictsrequest() const {
  return _internal_has_notifyfinalityconflictsrequest()
      ? *payload_.notifyfinalityconflictsrequest_
      : reinterpret_cast< ::protowire::NotifyFinalityConflictsRequestMessage&>(::protowire::_NotifyFinalityConflictsRequestMessage_default_instance_);
}
inline const ::protowire::NotifyFinalityConflictsRequestMessage& KaspadMessage::notifyfinalityconflictsrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyFinalityConflictsRequest)
  return _internal_notifyfinalityconflictsrequest();
}
inline ::protowire::NotifyFinalityConflictsRequestMessage* KaspadMessage::unsafe_arena_release_notifyfinalityconflictsrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyFinalityConflictsRequest)
  if (_internal_has_notifyfinalityconflictsrequest()) {
    clear_has_payload();
    ::protowire::NotifyFinalityConflictsRequestMessage* temp = payload_.notifyfinalityconflictsrequest_;
    payload_.notifyfinalityconflictsrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifyfinalityconflictsrequest(::protowire::NotifyFinalityConflictsRequestMessage* notifyfinalityconflictsrequest) {
  clear_payload();
  if (notifyfinalityconflictsrequest) {
    set_has_notifyfinalityconflictsrequest();
    payload_.notifyfinalityconflictsrequest_ = notifyfinalityconflictsrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyFinalityConflictsRequest)
}
inline ::protowire::NotifyFinalityConflictsRequestMessage* KaspadMessage::_internal_mutable_notifyfinalityconflictsrequest() {
  if (!_internal_has_notifyfinalityconflictsrequest()) {
    clear_payload();
    set_has_notifyfinalityconflictsrequest();
    payload_.notifyfinalityconflictsrequest_ = CreateMaybeMessage< ::protowire::NotifyFinalityConflictsRequestMessage >(GetArenaForAllocation());
  }
  return payload_.notifyfinalityconflictsrequest_;
}
inline ::protowire::NotifyFinalityConflictsRequestMessage* KaspadMessage::mutable_notifyfinalityconflictsrequest() {
  ::protowire::NotifyFinalityConflictsRequestMessage* _msg = _internal_mutable_notifyfinalityconflictsrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyFinalityConflictsRequest)
  return _msg;
}

// .protowire.NotifyFinalityConflictsResponseMessage notifyFinalityConflictsResponse = 1040;
inline bool KaspadMessage::_internal_has_notifyfinalityconflictsresponse() const {
  return payload_case() == kNotifyFinalityConflictsResponse;
}
inline bool KaspadMessage::has_notifyfinalityconflictsresponse() const {
  return _internal_has_notifyfinalityconflictsresponse();
}
inline void KaspadMessage::set_has_notifyfinalityconflictsresponse() {
  _oneof_case_[0] = kNotifyFinalityConflictsResponse;
}
inline ::protowire::NotifyFinalityConflictsResponseMessage* KaspadMessage::release_notifyfinalityconflictsresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyFinalityConflictsResponse)
  if (_internal_has_notifyfinalityconflictsresponse()) {
    clear_has_payload();
      ::protowire::NotifyFinalityConflictsResponseMessage* temp = payload_.notifyfinalityconflictsresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifyfinalityconflictsresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyFinalityConflictsResponseMessage& KaspadMessage::_internal_notifyfinalityconflictsresponse() const {
  return _internal_has_notifyfinalityconflictsresponse()
      ? *payload_.notifyfinalityconflictsresponse_
      : reinterpret_cast< ::protowire::NotifyFinalityConflictsResponseMessage&>(::protowire::_NotifyFinalityConflictsResponseMessage_default_instance_);
}
inline const ::protowire::NotifyFinalityConflictsResponseMessage& KaspadMessage::notifyfinalityconflictsresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyFinalityConflictsResponse)
  return _internal_notifyfinalityconflictsresponse();
}
inline ::protowire::NotifyFinalityConflictsResponseMessage* KaspadMessage::unsafe_arena_release_notifyfinalityconflictsresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyFinalityConflictsResponse)
  if (_internal_has_notifyfinalityconflictsresponse()) {
    clear_has_payload();
    ::protowire::NotifyFinalityConflictsResponseMessage* temp = payload_.notifyfinalityconflictsresponse_;
    payload_.notifyfinalityconflictsresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifyfinalityconflictsresponse(::protowire::NotifyFinalityConflictsResponseMessage* notifyfinalityconflictsresponse) {
  clear_payload();
  if (notifyfinalityconflictsresponse) {
    set_has_notifyfinalityconflictsresponse();
    payload_.notifyfinalityconflictsresponse_ = notifyfinalityconflictsresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyFinalityConflictsResponse)
}
inline ::protowire::NotifyFinalityConflictsResponseMessage* KaspadMessage::_internal_mutable_notifyfinalityconflictsresponse() {
  if (!_internal_has_notifyfinalityconflictsresponse()) {
    clear_payload();
    set_has_notifyfinalityconflictsresponse();
    payload_.notifyfinalityconflictsresponse_ = CreateMaybeMessage< ::protowire::NotifyFinalityConflictsResponseMessage >(GetArenaForAllocation());
  }
  return payload_.notifyfinalityconflictsresponse_;
}
inline ::protowire::NotifyFinalityConflictsResponseMessage* KaspadMessage::mutable_notifyfinalityconflictsresponse() {
  ::protowire::NotifyFinalityConflictsResponseMessage* _msg = _internal_mutable_notifyfinalityconflictsresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyFinalityConflictsResponse)
  return _msg;
}

// .protowire.FinalityConflictNotificationMessage finalityConflictNotification = 1041;
inline bool KaspadMessage::_internal_has_finalityconflictnotification() const {
  return payload_case() == kFinalityConflictNotification;
}
inline bool KaspadMessage::has_finalityconflictnotification() const {
  return _internal_has_finalityconflictnotification();
}
inline void KaspadMessage::set_has_finalityconflictnotification() {
  _oneof_case_[0] = kFinalityConflictNotification;
}
inline ::protowire::FinalityConflictNotificationMessage* KaspadMessage::release_finalityconflictnotification() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.finalityConflictNotification)
  if (_internal_has_finalityconflictnotification()) {
    clear_has_payload();
      ::protowire::FinalityConflictNotificationMessage* temp = payload_.finalityconflictnotification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.finalityconflictnotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::FinalityConflictNotificationMessage& KaspadMessage::_internal_finalityconflictnotification() const {
  return _internal_has_finalityconflictnotification()
      ? *payload_.finalityconflictnotification_
      : reinterpret_cast< ::protowire::FinalityConflictNotificationMessage&>(::protowire::_FinalityConflictNotificationMessage_default_instance_);
}
inline const ::protowire::FinalityConflictNotificationMessage& KaspadMessage::finalityconflictnotification() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.finalityConflictNotification)
  return _internal_finalityconflictnotification();
}
inline ::protowire::FinalityConflictNotificationMessage* KaspadMessage::unsafe_arena_release_finalityconflictnotification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.finalityConflictNotification)
  if (_internal_has_finalityconflictnotification()) {
    clear_has_payload();
    ::protowire::FinalityConflictNotificationMessage* temp = payload_.finalityconflictnotification_;
    payload_.finalityconflictnotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_finalityconflictnotification(::protowire::FinalityConflictNotificationMessage* finalityconflictnotification) {
  clear_payload();
  if (finalityconflictnotification) {
    set_has_finalityconflictnotification();
    payload_.finalityconflictnotification_ = finalityconflictnotification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.finalityConflictNotification)
}
inline ::protowire::FinalityConflictNotificationMessage* KaspadMessage::_internal_mutable_finalityconflictnotification() {
  if (!_internal_has_finalityconflictnotification()) {
    clear_payload();
    set_has_finalityconflictnotification();
    payload_.finalityconflictnotification_ = CreateMaybeMessage< ::protowire::FinalityConflictNotificationMessage >(GetArenaForAllocation());
  }
  return payload_.finalityconflictnotification_;
}
inline ::protowire::FinalityConflictNotificationMessage* KaspadMessage::mutable_finalityconflictnotification() {
  ::protowire::FinalityConflictNotificationMessage* _msg = _internal_mutable_finalityconflictnotification();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.finalityConflictNotification)
  return _msg;
}

// .protowire.FinalityConflictResolvedNotificationMessage finalityConflictResolvedNotification = 1042;
inline bool KaspadMessage::_internal_has_finalityconflictresolvednotification() const {
  return payload_case() == kFinalityConflictResolvedNotification;
}
inline bool KaspadMessage::has_finalityconflictresolvednotification() const {
  return _internal_has_finalityconflictresolvednotification();
}
inline void KaspadMessage::set_has_finalityconflictresolvednotification() {
  _oneof_case_[0] = kFinalityConflictResolvedNotification;
}
inline ::protowire::FinalityConflictResolvedNotificationMessage* KaspadMessage::release_finalityconflictresolvednotification() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.finalityConflictResolvedNotification)
  if (_internal_has_finalityconflictresolvednotification()) {
    clear_has_payload();
      ::protowire::FinalityConflictResolvedNotificationMessage* temp = payload_.finalityconflictresolvednotification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.finalityconflictresolvednotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::FinalityConflictResolvedNotificationMessage& KaspadMessage::_internal_finalityconflictresolvednotification() const {
  return _internal_has_finalityconflictresolvednotification()
      ? *payload_.finalityconflictresolvednotification_
      : reinterpret_cast< ::protowire::FinalityConflictResolvedNotificationMessage&>(::protowire::_FinalityConflictResolvedNotificationMessage_default_instance_);
}
inline const ::protowire::FinalityConflictResolvedNotificationMessage& KaspadMessage::finalityconflictresolvednotification() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.finalityConflictResolvedNotification)
  return _internal_finalityconflictresolvednotification();
}
inline ::protowire::FinalityConflictResolvedNotificationMessage* KaspadMessage::unsafe_arena_release_finalityconflictresolvednotification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.finalityConflictResolvedNotification)
  if (_internal_has_finalityconflictresolvednotification()) {
    clear_has_payload();
    ::protowire::FinalityConflictResolvedNotificationMessage* temp = payload_.finalityconflictresolvednotification_;
    payload_.finalityconflictresolvednotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_finalityconflictresolvednotification(::protowire::FinalityConflictResolvedNotificationMessage* finalityconflictresolvednotification) {
  clear_payload();
  if (finalityconflictresolvednotification) {
    set_has_finalityconflictresolvednotification();
    payload_.finalityconflictresolvednotification_ = finalityconflictresolvednotification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.finalityConflictResolvedNotification)
}
inline ::protowire::FinalityConflictResolvedNotificationMessage* KaspadMessage::_internal_mutable_finalityconflictresolvednotification() {
  if (!_internal_has_finalityconflictresolvednotification()) {
    clear_payload();
    set_has_finalityconflictresolvednotification();
    payload_.finalityconflictresolvednotification_ = CreateMaybeMessage< ::protowire::FinalityConflictResolvedNotificationMessage >(GetArenaForAllocation());
  }
  return payload_.finalityconflictresolvednotification_;
}
inline ::protowire::FinalityConflictResolvedNotificationMessage* KaspadMessage::mutable_finalityconflictresolvednotification() {
  ::protowire::FinalityConflictResolvedNotificationMessage* _msg = _internal_mutable_finalityconflictresolvednotification();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.finalityConflictResolvedNotification)
  return _msg;
}

// .protowire.GetMempoolEntriesRequestMessage getMempoolEntriesRequest = 1043;
inline bool KaspadMessage::_internal_has_getmempoolentriesrequest() const {
  return payload_case() == kGetMempoolEntriesRequest;
}
inline bool KaspadMessage::has_getmempoolentriesrequest() const {
  return _internal_has_getmempoolentriesrequest();
}
inline void KaspadMessage::set_has_getmempoolentriesrequest() {
  _oneof_case_[0] = kGetMempoolEntriesRequest;
}
inline ::protowire::GetMempoolEntriesRequestMessage* KaspadMessage::release_getmempoolentriesrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getMempoolEntriesRequest)
  if (_internal_has_getmempoolentriesrequest()) {
    clear_has_payload();
      ::protowire::GetMempoolEntriesRequestMessage* temp = payload_.getmempoolentriesrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getmempoolentriesrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetMempoolEntriesRequestMessage& KaspadMessage::_internal_getmempoolentriesrequest() const {
  return _internal_has_getmempoolentriesrequest()
      ? *payload_.getmempoolentriesrequest_
      : reinterpret_cast< ::protowire::GetMempoolEntriesRequestMessage&>(::protowire::_GetMempoolEntriesRequestMessage_default_instance_);
}
inline const ::protowire::GetMempoolEntriesRequestMessage& KaspadMessage::getmempoolentriesrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getMempoolEntriesRequest)
  return _internal_getmempoolentriesrequest();
}
inline ::protowire::GetMempoolEntriesRequestMessage* KaspadMessage::unsafe_arena_release_getmempoolentriesrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getMempoolEntriesRequest)
  if (_internal_has_getmempoolentriesrequest()) {
    clear_has_payload();
    ::protowire::GetMempoolEntriesRequestMessage* temp = payload_.getmempoolentriesrequest_;
    payload_.getmempoolentriesrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getmempoolentriesrequest(::protowire::GetMempoolEntriesRequestMessage* getmempoolentriesrequest) {
  clear_payload();
  if (getmempoolentriesrequest) {
    set_has_getmempoolentriesrequest();
    payload_.getmempoolentriesrequest_ = getmempoolentriesrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getMempoolEntriesRequest)
}
inline ::protowire::GetMempoolEntriesRequestMessage* KaspadMessage::_internal_mutable_getmempoolentriesrequest() {
  if (!_internal_has_getmempoolentriesrequest()) {
    clear_payload();
    set_has_getmempoolentriesrequest();
    payload_.getmempoolentriesrequest_ = CreateMaybeMessage< ::protowire::GetMempoolEntriesRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getmempoolentriesrequest_;
}
inline ::protowire::GetMempoolEntriesRequestMessage* KaspadMessage::mutable_getmempoolentriesrequest() {
  ::protowire::GetMempoolEntriesRequestMessage* _msg = _internal_mutable_getmempoolentriesrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getMempoolEntriesRequest)
  return _msg;
}

// .protowire.GetMempoolEntriesResponseMessage getMempoolEntriesResponse = 1044;
inline bool KaspadMessage::_internal_has_getmempoolentriesresponse() const {
  return payload_case() == kGetMempoolEntriesResponse;
}
inline bool KaspadMessage::has_getmempoolentriesresponse() const {
  return _internal_has_getmempoolentriesresponse();
}
inline void KaspadMessage::set_has_getmempoolentriesresponse() {
  _oneof_case_[0] = kGetMempoolEntriesResponse;
}
inline ::protowire::GetMempoolEntriesResponseMessage* KaspadMessage::release_getmempoolentriesresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getMempoolEntriesResponse)
  if (_internal_has_getmempoolentriesresponse()) {
    clear_has_payload();
      ::protowire::GetMempoolEntriesResponseMessage* temp = payload_.getmempoolentriesresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getmempoolentriesresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetMempoolEntriesResponseMessage& KaspadMessage::_internal_getmempoolentriesresponse() const {
  return _internal_has_getmempoolentriesresponse()
      ? *payload_.getmempoolentriesresponse_
      : reinterpret_cast< ::protowire::GetMempoolEntriesResponseMessage&>(::protowire::_GetMempoolEntriesResponseMessage_default_instance_);
}
inline const ::protowire::GetMempoolEntriesResponseMessage& KaspadMessage::getmempoolentriesresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getMempoolEntriesResponse)
  return _internal_getmempoolentriesresponse();
}
inline ::protowire::GetMempoolEntriesResponseMessage* KaspadMessage::unsafe_arena_release_getmempoolentriesresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getMempoolEntriesResponse)
  if (_internal_has_getmempoolentriesresponse()) {
    clear_has_payload();
    ::protowire::GetMempoolEntriesResponseMessage* temp = payload_.getmempoolentriesresponse_;
    payload_.getmempoolentriesresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getmempoolentriesresponse(::protowire::GetMempoolEntriesResponseMessage* getmempoolentriesresponse) {
  clear_payload();
  if (getmempoolentriesresponse) {
    set_has_getmempoolentriesresponse();
    payload_.getmempoolentriesresponse_ = getmempoolentriesresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getMempoolEntriesResponse)
}
inline ::protowire::GetMempoolEntriesResponseMessage* KaspadMessage::_internal_mutable_getmempoolentriesresponse() {
  if (!_internal_has_getmempoolentriesresponse()) {
    clear_payload();
    set_has_getmempoolentriesresponse();
    payload_.getmempoolentriesresponse_ = CreateMaybeMessage< ::protowire::GetMempoolEntriesResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getmempoolentriesresponse_;
}
inline ::protowire::GetMempoolEntriesResponseMessage* KaspadMessage::mutable_getmempoolentriesresponse() {
  ::protowire::GetMempoolEntriesResponseMessage* _msg = _internal_mutable_getmempoolentriesresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getMempoolEntriesResponse)
  return _msg;
}

// .protowire.ShutDownRequestMessage shutDownRequest = 1045;
inline bool KaspadMessage::_internal_has_shutdownrequest() const {
  return payload_case() == kShutDownRequest;
}
inline bool KaspadMessage::has_shutdownrequest() const {
  return _internal_has_shutdownrequest();
}
inline void KaspadMessage::set_has_shutdownrequest() {
  _oneof_case_[0] = kShutDownRequest;
}
inline ::protowire::ShutDownRequestMessage* KaspadMessage::release_shutdownrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.shutDownRequest)
  if (_internal_has_shutdownrequest()) {
    clear_has_payload();
      ::protowire::ShutDownRequestMessage* temp = payload_.shutdownrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.shutdownrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::ShutDownRequestMessage& KaspadMessage::_internal_shutdownrequest() const {
  return _internal_has_shutdownrequest()
      ? *payload_.shutdownrequest_
      : reinterpret_cast< ::protowire::ShutDownRequestMessage&>(::protowire::_ShutDownRequestMessage_default_instance_);
}
inline const ::protowire::ShutDownRequestMessage& KaspadMessage::shutdownrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.shutDownRequest)
  return _internal_shutdownrequest();
}
inline ::protowire::ShutDownRequestMessage* KaspadMessage::unsafe_arena_release_shutdownrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.shutDownRequest)
  if (_internal_has_shutdownrequest()) {
    clear_has_payload();
    ::protowire::ShutDownRequestMessage* temp = payload_.shutdownrequest_;
    payload_.shutdownrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_shutdownrequest(::protowire::ShutDownRequestMessage* shutdownrequest) {
  clear_payload();
  if (shutdownrequest) {
    set_has_shutdownrequest();
    payload_.shutdownrequest_ = shutdownrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.shutDownRequest)
}
inline ::protowire::ShutDownRequestMessage* KaspadMessage::_internal_mutable_shutdownrequest() {
  if (!_internal_has_shutdownrequest()) {
    clear_payload();
    set_has_shutdownrequest();
    payload_.shutdownrequest_ = CreateMaybeMessage< ::protowire::ShutDownRequestMessage >(GetArenaForAllocation());
  }
  return payload_.shutdownrequest_;
}
inline ::protowire::ShutDownRequestMessage* KaspadMessage::mutable_shutdownrequest() {
  ::protowire::ShutDownRequestMessage* _msg = _internal_mutable_shutdownrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.shutDownRequest)
  return _msg;
}

// .protowire.ShutDownResponseMessage shutDownResponse = 1046;
inline bool KaspadMessage::_internal_has_shutdownresponse() const {
  return payload_case() == kShutDownResponse;
}
inline bool KaspadMessage::has_shutdownresponse() const {
  return _internal_has_shutdownresponse();
}
inline void KaspadMessage::set_has_shutdownresponse() {
  _oneof_case_[0] = kShutDownResponse;
}
inline ::protowire::ShutDownResponseMessage* KaspadMessage::release_shutdownresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.shutDownResponse)
  if (_internal_has_shutdownresponse()) {
    clear_has_payload();
      ::protowire::ShutDownResponseMessage* temp = payload_.shutdownresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.shutdownresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::ShutDownResponseMessage& KaspadMessage::_internal_shutdownresponse() const {
  return _internal_has_shutdownresponse()
      ? *payload_.shutdownresponse_
      : reinterpret_cast< ::protowire::ShutDownResponseMessage&>(::protowire::_ShutDownResponseMessage_default_instance_);
}
inline const ::protowire::ShutDownResponseMessage& KaspadMessage::shutdownresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.shutDownResponse)
  return _internal_shutdownresponse();
}
inline ::protowire::ShutDownResponseMessage* KaspadMessage::unsafe_arena_release_shutdownresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.shutDownResponse)
  if (_internal_has_shutdownresponse()) {
    clear_has_payload();
    ::protowire::ShutDownResponseMessage* temp = payload_.shutdownresponse_;
    payload_.shutdownresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_shutdownresponse(::protowire::ShutDownResponseMessage* shutdownresponse) {
  clear_payload();
  if (shutdownresponse) {
    set_has_shutdownresponse();
    payload_.shutdownresponse_ = shutdownresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.shutDownResponse)
}
inline ::protowire::ShutDownResponseMessage* KaspadMessage::_internal_mutable_shutdownresponse() {
  if (!_internal_has_shutdownresponse()) {
    clear_payload();
    set_has_shutdownresponse();
    payload_.shutdownresponse_ = CreateMaybeMessage< ::protowire::ShutDownResponseMessage >(GetArenaForAllocation());
  }
  return payload_.shutdownresponse_;
}
inline ::protowire::ShutDownResponseMessage* KaspadMessage::mutable_shutdownresponse() {
  ::protowire::ShutDownResponseMessage* _msg = _internal_mutable_shutdownresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.shutDownResponse)
  return _msg;
}

// .protowire.GetHeadersRequestMessage getHeadersRequest = 1047;
inline bool KaspadMessage::_internal_has_getheadersrequest() const {
  return payload_case() == kGetHeadersRequest;
}
inline bool KaspadMessage::has_getheadersrequest() const {
  return _internal_has_getheadersrequest();
}
inline void KaspadMessage::set_has_getheadersrequest() {
  _oneof_case_[0] = kGetHeadersRequest;
}
inline ::protowire::GetHeadersRequestMessage* KaspadMessage::release_getheadersrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getHeadersRequest)
  if (_internal_has_getheadersrequest()) {
    clear_has_payload();
      ::protowire::GetHeadersRequestMessage* temp = payload_.getheadersrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getheadersrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetHeadersRequestMessage& KaspadMessage::_internal_getheadersrequest() const {
  return _internal_has_getheadersrequest()
      ? *payload_.getheadersrequest_
      : reinterpret_cast< ::protowire::GetHeadersRequestMessage&>(::protowire::_GetHeadersRequestMessage_default_instance_);
}
inline const ::protowire::GetHeadersRequestMessage& KaspadMessage::getheadersrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getHeadersRequest)
  return _internal_getheadersrequest();
}
inline ::protowire::GetHeadersRequestMessage* KaspadMessage::unsafe_arena_release_getheadersrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getHeadersRequest)
  if (_internal_has_getheadersrequest()) {
    clear_has_payload();
    ::protowire::GetHeadersRequestMessage* temp = payload_.getheadersrequest_;
    payload_.getheadersrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getheadersrequest(::protowire::GetHeadersRequestMessage* getheadersrequest) {
  clear_payload();
  if (getheadersrequest) {
    set_has_getheadersrequest();
    payload_.getheadersrequest_ = getheadersrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getHeadersRequest)
}
inline ::protowire::GetHeadersRequestMessage* KaspadMessage::_internal_mutable_getheadersrequest() {
  if (!_internal_has_getheadersrequest()) {
    clear_payload();
    set_has_getheadersrequest();
    payload_.getheadersrequest_ = CreateMaybeMessage< ::protowire::GetHeadersRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getheadersrequest_;
}
inline ::protowire::GetHeadersRequestMessage* KaspadMessage::mutable_getheadersrequest() {
  ::protowire::GetHeadersRequestMessage* _msg = _internal_mutable_getheadersrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getHeadersRequest)
  return _msg;
}

// .protowire.GetHeadersResponseMessage getHeadersResponse = 1048;
inline bool KaspadMessage::_internal_has_getheadersresponse() const {
  return payload_case() == kGetHeadersResponse;
}
inline bool KaspadMessage::has_getheadersresponse() const {
  return _internal_has_getheadersresponse();
}
inline void KaspadMessage::set_has_getheadersresponse() {
  _oneof_case_[0] = kGetHeadersResponse;
}
inline ::protowire::GetHeadersResponseMessage* KaspadMessage::release_getheadersresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getHeadersResponse)
  if (_internal_has_getheadersresponse()) {
    clear_has_payload();
      ::protowire::GetHeadersResponseMessage* temp = payload_.getheadersresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getheadersresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetHeadersResponseMessage& KaspadMessage::_internal_getheadersresponse() const {
  return _internal_has_getheadersresponse()
      ? *payload_.getheadersresponse_
      : reinterpret_cast< ::protowire::GetHeadersResponseMessage&>(::protowire::_GetHeadersResponseMessage_default_instance_);
}
inline const ::protowire::GetHeadersResponseMessage& KaspadMessage::getheadersresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getHeadersResponse)
  return _internal_getheadersresponse();
}
inline ::protowire::GetHeadersResponseMessage* KaspadMessage::unsafe_arena_release_getheadersresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getHeadersResponse)
  if (_internal_has_getheadersresponse()) {
    clear_has_payload();
    ::protowire::GetHeadersResponseMessage* temp = payload_.getheadersresponse_;
    payload_.getheadersresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getheadersresponse(::protowire::GetHeadersResponseMessage* getheadersresponse) {
  clear_payload();
  if (getheadersresponse) {
    set_has_getheadersresponse();
    payload_.getheadersresponse_ = getheadersresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getHeadersResponse)
}
inline ::protowire::GetHeadersResponseMessage* KaspadMessage::_internal_mutable_getheadersresponse() {
  if (!_internal_has_getheadersresponse()) {
    clear_payload();
    set_has_getheadersresponse();
    payload_.getheadersresponse_ = CreateMaybeMessage< ::protowire::GetHeadersResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getheadersresponse_;
}
inline ::protowire::GetHeadersResponseMessage* KaspadMessage::mutable_getheadersresponse() {
  ::protowire::GetHeadersResponseMessage* _msg = _internal_mutable_getheadersresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getHeadersResponse)
  return _msg;
}

// .protowire.NotifyUtxosChangedRequestMessage notifyUtxosChangedRequest = 1049;
inline bool KaspadMessage::_internal_has_notifyutxoschangedrequest() const {
  return payload_case() == kNotifyUtxosChangedRequest;
}
inline bool KaspadMessage::has_notifyutxoschangedrequest() const {
  return _internal_has_notifyutxoschangedrequest();
}
inline void KaspadMessage::set_has_notifyutxoschangedrequest() {
  _oneof_case_[0] = kNotifyUtxosChangedRequest;
}
inline ::protowire::NotifyUtxosChangedRequestMessage* KaspadMessage::release_notifyutxoschangedrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyUtxosChangedRequest)
  if (_internal_has_notifyutxoschangedrequest()) {
    clear_has_payload();
      ::protowire::NotifyUtxosChangedRequestMessage* temp = payload_.notifyutxoschangedrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifyutxoschangedrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyUtxosChangedRequestMessage& KaspadMessage::_internal_notifyutxoschangedrequest() const {
  return _internal_has_notifyutxoschangedrequest()
      ? *payload_.notifyutxoschangedrequest_
      : reinterpret_cast< ::protowire::NotifyUtxosChangedRequestMessage&>(::protowire::_NotifyUtxosChangedRequestMessage_default_instance_);
}
inline const ::protowire::NotifyUtxosChangedRequestMessage& KaspadMessage::notifyutxoschangedrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyUtxosChangedRequest)
  return _internal_notifyutxoschangedrequest();
}
inline ::protowire::NotifyUtxosChangedRequestMessage* KaspadMessage::unsafe_arena_release_notifyutxoschangedrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyUtxosChangedRequest)
  if (_internal_has_notifyutxoschangedrequest()) {
    clear_has_payload();
    ::protowire::NotifyUtxosChangedRequestMessage* temp = payload_.notifyutxoschangedrequest_;
    payload_.notifyutxoschangedrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifyutxoschangedrequest(::protowire::NotifyUtxosChangedRequestMessage* notifyutxoschangedrequest) {
  clear_payload();
  if (notifyutxoschangedrequest) {
    set_has_notifyutxoschangedrequest();
    payload_.notifyutxoschangedrequest_ = notifyutxoschangedrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyUtxosChangedRequest)
}
inline ::protowire::NotifyUtxosChangedRequestMessage* KaspadMessage::_internal_mutable_notifyutxoschangedrequest() {
  if (!_internal_has_notifyutxoschangedrequest()) {
    clear_payload();
    set_has_notifyutxoschangedrequest();
    payload_.notifyutxoschangedrequest_ = CreateMaybeMessage< ::protowire::NotifyUtxosChangedRequestMessage >(GetArenaForAllocation());
  }
  return payload_.notifyutxoschangedrequest_;
}
inline ::protowire::NotifyUtxosChangedRequestMessage* KaspadMessage::mutable_notifyutxoschangedrequest() {
  ::protowire::NotifyUtxosChangedRequestMessage* _msg = _internal_mutable_notifyutxoschangedrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyUtxosChangedRequest)
  return _msg;
}

// .protowire.NotifyUtxosChangedResponseMessage notifyUtxosChangedResponse = 1050;
inline bool KaspadMessage::_internal_has_notifyutxoschangedresponse() const {
  return payload_case() == kNotifyUtxosChangedResponse;
}
inline bool KaspadMessage::has_notifyutxoschangedresponse() const {
  return _internal_has_notifyutxoschangedresponse();
}
inline void KaspadMessage::set_has_notifyutxoschangedresponse() {
  _oneof_case_[0] = kNotifyUtxosChangedResponse;
}
inline ::protowire::NotifyUtxosChangedResponseMessage* KaspadMessage::release_notifyutxoschangedresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyUtxosChangedResponse)
  if (_internal_has_notifyutxoschangedresponse()) {
    clear_has_payload();
      ::protowire::NotifyUtxosChangedResponseMessage* temp = payload_.notifyutxoschangedresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifyutxoschangedresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyUtxosChangedResponseMessage& KaspadMessage::_internal_notifyutxoschangedresponse() const {
  return _internal_has_notifyutxoschangedresponse()
      ? *payload_.notifyutxoschangedresponse_
      : reinterpret_cast< ::protowire::NotifyUtxosChangedResponseMessage&>(::protowire::_NotifyUtxosChangedResponseMessage_default_instance_);
}
inline const ::protowire::NotifyUtxosChangedResponseMessage& KaspadMessage::notifyutxoschangedresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyUtxosChangedResponse)
  return _internal_notifyutxoschangedresponse();
}
inline ::protowire::NotifyUtxosChangedResponseMessage* KaspadMessage::unsafe_arena_release_notifyutxoschangedresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyUtxosChangedResponse)
  if (_internal_has_notifyutxoschangedresponse()) {
    clear_has_payload();
    ::protowire::NotifyUtxosChangedResponseMessage* temp = payload_.notifyutxoschangedresponse_;
    payload_.notifyutxoschangedresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifyutxoschangedresponse(::protowire::NotifyUtxosChangedResponseMessage* notifyutxoschangedresponse) {
  clear_payload();
  if (notifyutxoschangedresponse) {
    set_has_notifyutxoschangedresponse();
    payload_.notifyutxoschangedresponse_ = notifyutxoschangedresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyUtxosChangedResponse)
}
inline ::protowire::NotifyUtxosChangedResponseMessage* KaspadMessage::_internal_mutable_notifyutxoschangedresponse() {
  if (!_internal_has_notifyutxoschangedresponse()) {
    clear_payload();
    set_has_notifyutxoschangedresponse();
    payload_.notifyutxoschangedresponse_ = CreateMaybeMessage< ::protowire::NotifyUtxosChangedResponseMessage >(GetArenaForAllocation());
  }
  return payload_.notifyutxoschangedresponse_;
}
inline ::protowire::NotifyUtxosChangedResponseMessage* KaspadMessage::mutable_notifyutxoschangedresponse() {
  ::protowire::NotifyUtxosChangedResponseMessage* _msg = _internal_mutable_notifyutxoschangedresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyUtxosChangedResponse)
  return _msg;
}

// .protowire.UtxosChangedNotificationMessage utxosChangedNotification = 1051;
inline bool KaspadMessage::_internal_has_utxoschangednotification() const {
  return payload_case() == kUtxosChangedNotification;
}
inline bool KaspadMessage::has_utxoschangednotification() const {
  return _internal_has_utxoschangednotification();
}
inline void KaspadMessage::set_has_utxoschangednotification() {
  _oneof_case_[0] = kUtxosChangedNotification;
}
inline ::protowire::UtxosChangedNotificationMessage* KaspadMessage::release_utxoschangednotification() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.utxosChangedNotification)
  if (_internal_has_utxoschangednotification()) {
    clear_has_payload();
      ::protowire::UtxosChangedNotificationMessage* temp = payload_.utxoschangednotification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.utxoschangednotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::UtxosChangedNotificationMessage& KaspadMessage::_internal_utxoschangednotification() const {
  return _internal_has_utxoschangednotification()
      ? *payload_.utxoschangednotification_
      : reinterpret_cast< ::protowire::UtxosChangedNotificationMessage&>(::protowire::_UtxosChangedNotificationMessage_default_instance_);
}
inline const ::protowire::UtxosChangedNotificationMessage& KaspadMessage::utxoschangednotification() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.utxosChangedNotification)
  return _internal_utxoschangednotification();
}
inline ::protowire::UtxosChangedNotificationMessage* KaspadMessage::unsafe_arena_release_utxoschangednotification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.utxosChangedNotification)
  if (_internal_has_utxoschangednotification()) {
    clear_has_payload();
    ::protowire::UtxosChangedNotificationMessage* temp = payload_.utxoschangednotification_;
    payload_.utxoschangednotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_utxoschangednotification(::protowire::UtxosChangedNotificationMessage* utxoschangednotification) {
  clear_payload();
  if (utxoschangednotification) {
    set_has_utxoschangednotification();
    payload_.utxoschangednotification_ = utxoschangednotification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.utxosChangedNotification)
}
inline ::protowire::UtxosChangedNotificationMessage* KaspadMessage::_internal_mutable_utxoschangednotification() {
  if (!_internal_has_utxoschangednotification()) {
    clear_payload();
    set_has_utxoschangednotification();
    payload_.utxoschangednotification_ = CreateMaybeMessage< ::protowire::UtxosChangedNotificationMessage >(GetArenaForAllocation());
  }
  return payload_.utxoschangednotification_;
}
inline ::protowire::UtxosChangedNotificationMessage* KaspadMessage::mutable_utxoschangednotification() {
  ::protowire::UtxosChangedNotificationMessage* _msg = _internal_mutable_utxoschangednotification();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.utxosChangedNotification)
  return _msg;
}

// .protowire.GetUtxosByAddressesRequestMessage getUtxosByAddressesRequest = 1052;
inline bool KaspadMessage::_internal_has_getutxosbyaddressesrequest() const {
  return payload_case() == kGetUtxosByAddressesRequest;
}
inline bool KaspadMessage::has_getutxosbyaddressesrequest() const {
  return _internal_has_getutxosbyaddressesrequest();
}
inline void KaspadMessage::set_has_getutxosbyaddressesrequest() {
  _oneof_case_[0] = kGetUtxosByAddressesRequest;
}
inline ::protowire::GetUtxosByAddressesRequestMessage* KaspadMessage::release_getutxosbyaddressesrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getUtxosByAddressesRequest)
  if (_internal_has_getutxosbyaddressesrequest()) {
    clear_has_payload();
      ::protowire::GetUtxosByAddressesRequestMessage* temp = payload_.getutxosbyaddressesrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getutxosbyaddressesrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetUtxosByAddressesRequestMessage& KaspadMessage::_internal_getutxosbyaddressesrequest() const {
  return _internal_has_getutxosbyaddressesrequest()
      ? *payload_.getutxosbyaddressesrequest_
      : reinterpret_cast< ::protowire::GetUtxosByAddressesRequestMessage&>(::protowire::_GetUtxosByAddressesRequestMessage_default_instance_);
}
inline const ::protowire::GetUtxosByAddressesRequestMessage& KaspadMessage::getutxosbyaddressesrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getUtxosByAddressesRequest)
  return _internal_getutxosbyaddressesrequest();
}
inline ::protowire::GetUtxosByAddressesRequestMessage* KaspadMessage::unsafe_arena_release_getutxosbyaddressesrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getUtxosByAddressesRequest)
  if (_internal_has_getutxosbyaddressesrequest()) {
    clear_has_payload();
    ::protowire::GetUtxosByAddressesRequestMessage* temp = payload_.getutxosbyaddressesrequest_;
    payload_.getutxosbyaddressesrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getutxosbyaddressesrequest(::protowire::GetUtxosByAddressesRequestMessage* getutxosbyaddressesrequest) {
  clear_payload();
  if (getutxosbyaddressesrequest) {
    set_has_getutxosbyaddressesrequest();
    payload_.getutxosbyaddressesrequest_ = getutxosbyaddressesrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getUtxosByAddressesRequest)
}
inline ::protowire::GetUtxosByAddressesRequestMessage* KaspadMessage::_internal_mutable_getutxosbyaddressesrequest() {
  if (!_internal_has_getutxosbyaddressesrequest()) {
    clear_payload();
    set_has_getutxosbyaddressesrequest();
    payload_.getutxosbyaddressesrequest_ = CreateMaybeMessage< ::protowire::GetUtxosByAddressesRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getutxosbyaddressesrequest_;
}
inline ::protowire::GetUtxosByAddressesRequestMessage* KaspadMessage::mutable_getutxosbyaddressesrequest() {
  ::protowire::GetUtxosByAddressesRequestMessage* _msg = _internal_mutable_getutxosbyaddressesrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getUtxosByAddressesRequest)
  return _msg;
}

// .protowire.GetUtxosByAddressesResponseMessage getUtxosByAddressesResponse = 1053;
inline bool KaspadMessage::_internal_has_getutxosbyaddressesresponse() const {
  return payload_case() == kGetUtxosByAddressesResponse;
}
inline bool KaspadMessage::has_getutxosbyaddressesresponse() const {
  return _internal_has_getutxosbyaddressesresponse();
}
inline void KaspadMessage::set_has_getutxosbyaddressesresponse() {
  _oneof_case_[0] = kGetUtxosByAddressesResponse;
}
inline ::protowire::GetUtxosByAddressesResponseMessage* KaspadMessage::release_getutxosbyaddressesresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getUtxosByAddressesResponse)
  if (_internal_has_getutxosbyaddressesresponse()) {
    clear_has_payload();
      ::protowire::GetUtxosByAddressesResponseMessage* temp = payload_.getutxosbyaddressesresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getutxosbyaddressesresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetUtxosByAddressesResponseMessage& KaspadMessage::_internal_getutxosbyaddressesresponse() const {
  return _internal_has_getutxosbyaddressesresponse()
      ? *payload_.getutxosbyaddressesresponse_
      : reinterpret_cast< ::protowire::GetUtxosByAddressesResponseMessage&>(::protowire::_GetUtxosByAddressesResponseMessage_default_instance_);
}
inline const ::protowire::GetUtxosByAddressesResponseMessage& KaspadMessage::getutxosbyaddressesresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getUtxosByAddressesResponse)
  return _internal_getutxosbyaddressesresponse();
}
inline ::protowire::GetUtxosByAddressesResponseMessage* KaspadMessage::unsafe_arena_release_getutxosbyaddressesresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getUtxosByAddressesResponse)
  if (_internal_has_getutxosbyaddressesresponse()) {
    clear_has_payload();
    ::protowire::GetUtxosByAddressesResponseMessage* temp = payload_.getutxosbyaddressesresponse_;
    payload_.getutxosbyaddressesresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getutxosbyaddressesresponse(::protowire::GetUtxosByAddressesResponseMessage* getutxosbyaddressesresponse) {
  clear_payload();
  if (getutxosbyaddressesresponse) {
    set_has_getutxosbyaddressesresponse();
    payload_.getutxosbyaddressesresponse_ = getutxosbyaddressesresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getUtxosByAddressesResponse)
}
inline ::protowire::GetUtxosByAddressesResponseMessage* KaspadMessage::_internal_mutable_getutxosbyaddressesresponse() {
  if (!_internal_has_getutxosbyaddressesresponse()) {
    clear_payload();
    set_has_getutxosbyaddressesresponse();
    payload_.getutxosbyaddressesresponse_ = CreateMaybeMessage< ::protowire::GetUtxosByAddressesResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getutxosbyaddressesresponse_;
}
inline ::protowire::GetUtxosByAddressesResponseMessage* KaspadMessage::mutable_getutxosbyaddressesresponse() {
  ::protowire::GetUtxosByAddressesResponseMessage* _msg = _internal_mutable_getutxosbyaddressesresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getUtxosByAddressesResponse)
  return _msg;
}

// .protowire.GetVirtualSelectedParentBlueScoreRequestMessage getVirtualSelectedParentBlueScoreRequest = 1054;
inline bool KaspadMessage::_internal_has_getvirtualselectedparentbluescorerequest() const {
  return payload_case() == kGetVirtualSelectedParentBlueScoreRequest;
}
inline bool KaspadMessage::has_getvirtualselectedparentbluescorerequest() const {
  return _internal_has_getvirtualselectedparentbluescorerequest();
}
inline void KaspadMessage::set_has_getvirtualselectedparentbluescorerequest() {
  _oneof_case_[0] = kGetVirtualSelectedParentBlueScoreRequest;
}
inline ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* KaspadMessage::release_getvirtualselectedparentbluescorerequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getVirtualSelectedParentBlueScoreRequest)
  if (_internal_has_getvirtualselectedparentbluescorerequest()) {
    clear_has_payload();
      ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* temp = payload_.getvirtualselectedparentbluescorerequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getvirtualselectedparentbluescorerequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage& KaspadMessage::_internal_getvirtualselectedparentbluescorerequest() const {
  return _internal_has_getvirtualselectedparentbluescorerequest()
      ? *payload_.getvirtualselectedparentbluescorerequest_
      : reinterpret_cast< ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage&>(::protowire::_GetVirtualSelectedParentBlueScoreRequestMessage_default_instance_);
}
inline const ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage& KaspadMessage::getvirtualselectedparentbluescorerequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getVirtualSelectedParentBlueScoreRequest)
  return _internal_getvirtualselectedparentbluescorerequest();
}
inline ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* KaspadMessage::unsafe_arena_release_getvirtualselectedparentbluescorerequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getVirtualSelectedParentBlueScoreRequest)
  if (_internal_has_getvirtualselectedparentbluescorerequest()) {
    clear_has_payload();
    ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* temp = payload_.getvirtualselectedparentbluescorerequest_;
    payload_.getvirtualselectedparentbluescorerequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getvirtualselectedparentbluescorerequest(::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* getvirtualselectedparentbluescorerequest) {
  clear_payload();
  if (getvirtualselectedparentbluescorerequest) {
    set_has_getvirtualselectedparentbluescorerequest();
    payload_.getvirtualselectedparentbluescorerequest_ = getvirtualselectedparentbluescorerequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getVirtualSelectedParentBlueScoreRequest)
}
inline ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* KaspadMessage::_internal_mutable_getvirtualselectedparentbluescorerequest() {
  if (!_internal_has_getvirtualselectedparentbluescorerequest()) {
    clear_payload();
    set_has_getvirtualselectedparentbluescorerequest();
    payload_.getvirtualselectedparentbluescorerequest_ = CreateMaybeMessage< ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getvirtualselectedparentbluescorerequest_;
}
inline ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* KaspadMessage::mutable_getvirtualselectedparentbluescorerequest() {
  ::protowire::GetVirtualSelectedParentBlueScoreRequestMessage* _msg = _internal_mutable_getvirtualselectedparentbluescorerequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getVirtualSelectedParentBlueScoreRequest)
  return _msg;
}

// .protowire.GetVirtualSelectedParentBlueScoreResponseMessage getVirtualSelectedParentBlueScoreResponse = 1055;
inline bool KaspadMessage::_internal_has_getvirtualselectedparentbluescoreresponse() const {
  return payload_case() == kGetVirtualSelectedParentBlueScoreResponse;
}
inline bool KaspadMessage::has_getvirtualselectedparentbluescoreresponse() const {
  return _internal_has_getvirtualselectedparentbluescoreresponse();
}
inline void KaspadMessage::set_has_getvirtualselectedparentbluescoreresponse() {
  _oneof_case_[0] = kGetVirtualSelectedParentBlueScoreResponse;
}
inline ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* KaspadMessage::release_getvirtualselectedparentbluescoreresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getVirtualSelectedParentBlueScoreResponse)
  if (_internal_has_getvirtualselectedparentbluescoreresponse()) {
    clear_has_payload();
      ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* temp = payload_.getvirtualselectedparentbluescoreresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getvirtualselectedparentbluescoreresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage& KaspadMessage::_internal_getvirtualselectedparentbluescoreresponse() const {
  return _internal_has_getvirtualselectedparentbluescoreresponse()
      ? *payload_.getvirtualselectedparentbluescoreresponse_
      : reinterpret_cast< ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage&>(::protowire::_GetVirtualSelectedParentBlueScoreResponseMessage_default_instance_);
}
inline const ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage& KaspadMessage::getvirtualselectedparentbluescoreresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getVirtualSelectedParentBlueScoreResponse)
  return _internal_getvirtualselectedparentbluescoreresponse();
}
inline ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* KaspadMessage::unsafe_arena_release_getvirtualselectedparentbluescoreresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getVirtualSelectedParentBlueScoreResponse)
  if (_internal_has_getvirtualselectedparentbluescoreresponse()) {
    clear_has_payload();
    ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* temp = payload_.getvirtualselectedparentbluescoreresponse_;
    payload_.getvirtualselectedparentbluescoreresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getvirtualselectedparentbluescoreresponse(::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* getvirtualselectedparentbluescoreresponse) {
  clear_payload();
  if (getvirtualselectedparentbluescoreresponse) {
    set_has_getvirtualselectedparentbluescoreresponse();
    payload_.getvirtualselectedparentbluescoreresponse_ = getvirtualselectedparentbluescoreresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getVirtualSelectedParentBlueScoreResponse)
}
inline ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* KaspadMessage::_internal_mutable_getvirtualselectedparentbluescoreresponse() {
  if (!_internal_has_getvirtualselectedparentbluescoreresponse()) {
    clear_payload();
    set_has_getvirtualselectedparentbluescoreresponse();
    payload_.getvirtualselectedparentbluescoreresponse_ = CreateMaybeMessage< ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getvirtualselectedparentbluescoreresponse_;
}
inline ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* KaspadMessage::mutable_getvirtualselectedparentbluescoreresponse() {
  ::protowire::GetVirtualSelectedParentBlueScoreResponseMessage* _msg = _internal_mutable_getvirtualselectedparentbluescoreresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getVirtualSelectedParentBlueScoreResponse)
  return _msg;
}

// .protowire.NotifyVirtualSelectedParentBlueScoreChangedRequestMessage notifyVirtualSelectedParentBlueScoreChangedRequest = 1056;
inline bool KaspadMessage::_internal_has_notifyvirtualselectedparentbluescorechangedrequest() const {
  return payload_case() == kNotifyVirtualSelectedParentBlueScoreChangedRequest;
}
inline bool KaspadMessage::has_notifyvirtualselectedparentbluescorechangedrequest() const {
  return _internal_has_notifyvirtualselectedparentbluescorechangedrequest();
}
inline void KaspadMessage::set_has_notifyvirtualselectedparentbluescorechangedrequest() {
  _oneof_case_[0] = kNotifyVirtualSelectedParentBlueScoreChangedRequest;
}
inline ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* KaspadMessage::release_notifyvirtualselectedparentbluescorechangedrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyVirtualSelectedParentBlueScoreChangedRequest)
  if (_internal_has_notifyvirtualselectedparentbluescorechangedrequest()) {
    clear_has_payload();
      ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* temp = payload_.notifyvirtualselectedparentbluescorechangedrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifyvirtualselectedparentbluescorechangedrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage& KaspadMessage::_internal_notifyvirtualselectedparentbluescorechangedrequest() const {
  return _internal_has_notifyvirtualselectedparentbluescorechangedrequest()
      ? *payload_.notifyvirtualselectedparentbluescorechangedrequest_
      : reinterpret_cast< ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage&>(::protowire::_NotifyVirtualSelectedParentBlueScoreChangedRequestMessage_default_instance_);
}
inline const ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage& KaspadMessage::notifyvirtualselectedparentbluescorechangedrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyVirtualSelectedParentBlueScoreChangedRequest)
  return _internal_notifyvirtualselectedparentbluescorechangedrequest();
}
inline ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* KaspadMessage::unsafe_arena_release_notifyvirtualselectedparentbluescorechangedrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyVirtualSelectedParentBlueScoreChangedRequest)
  if (_internal_has_notifyvirtualselectedparentbluescorechangedrequest()) {
    clear_has_payload();
    ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* temp = payload_.notifyvirtualselectedparentbluescorechangedrequest_;
    payload_.notifyvirtualselectedparentbluescorechangedrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifyvirtualselectedparentbluescorechangedrequest(::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* notifyvirtualselectedparentbluescorechangedrequest) {
  clear_payload();
  if (notifyvirtualselectedparentbluescorechangedrequest) {
    set_has_notifyvirtualselectedparentbluescorechangedrequest();
    payload_.notifyvirtualselectedparentbluescorechangedrequest_ = notifyvirtualselectedparentbluescorechangedrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyVirtualSelectedParentBlueScoreChangedRequest)
}
inline ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* KaspadMessage::_internal_mutable_notifyvirtualselectedparentbluescorechangedrequest() {
  if (!_internal_has_notifyvirtualselectedparentbluescorechangedrequest()) {
    clear_payload();
    set_has_notifyvirtualselectedparentbluescorechangedrequest();
    payload_.notifyvirtualselectedparentbluescorechangedrequest_ = CreateMaybeMessage< ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage >(GetArenaForAllocation());
  }
  return payload_.notifyvirtualselectedparentbluescorechangedrequest_;
}
inline ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* KaspadMessage::mutable_notifyvirtualselectedparentbluescorechangedrequest() {
  ::protowire::NotifyVirtualSelectedParentBlueScoreChangedRequestMessage* _msg = _internal_mutable_notifyvirtualselectedparentbluescorechangedrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyVirtualSelectedParentBlueScoreChangedRequest)
  return _msg;
}

// .protowire.NotifyVirtualSelectedParentBlueScoreChangedResponseMessage notifyVirtualSelectedParentBlueScoreChangedResponse = 1057;
inline bool KaspadMessage::_internal_has_notifyvirtualselectedparentbluescorechangedresponse() const {
  return payload_case() == kNotifyVirtualSelectedParentBlueScoreChangedResponse;
}
inline bool KaspadMessage::has_notifyvirtualselectedparentbluescorechangedresponse() const {
  return _internal_has_notifyvirtualselectedparentbluescorechangedresponse();
}
inline void KaspadMessage::set_has_notifyvirtualselectedparentbluescorechangedresponse() {
  _oneof_case_[0] = kNotifyVirtualSelectedParentBlueScoreChangedResponse;
}
inline ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* KaspadMessage::release_notifyvirtualselectedparentbluescorechangedresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyVirtualSelectedParentBlueScoreChangedResponse)
  if (_internal_has_notifyvirtualselectedparentbluescorechangedresponse()) {
    clear_has_payload();
      ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* temp = payload_.notifyvirtualselectedparentbluescorechangedresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifyvirtualselectedparentbluescorechangedresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage& KaspadMessage::_internal_notifyvirtualselectedparentbluescorechangedresponse() const {
  return _internal_has_notifyvirtualselectedparentbluescorechangedresponse()
      ? *payload_.notifyvirtualselectedparentbluescorechangedresponse_
      : reinterpret_cast< ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage&>(::protowire::_NotifyVirtualSelectedParentBlueScoreChangedResponseMessage_default_instance_);
}
inline const ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage& KaspadMessage::notifyvirtualselectedparentbluescorechangedresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyVirtualSelectedParentBlueScoreChangedResponse)
  return _internal_notifyvirtualselectedparentbluescorechangedresponse();
}
inline ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* KaspadMessage::unsafe_arena_release_notifyvirtualselectedparentbluescorechangedresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyVirtualSelectedParentBlueScoreChangedResponse)
  if (_internal_has_notifyvirtualselectedparentbluescorechangedresponse()) {
    clear_has_payload();
    ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* temp = payload_.notifyvirtualselectedparentbluescorechangedresponse_;
    payload_.notifyvirtualselectedparentbluescorechangedresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifyvirtualselectedparentbluescorechangedresponse(::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* notifyvirtualselectedparentbluescorechangedresponse) {
  clear_payload();
  if (notifyvirtualselectedparentbluescorechangedresponse) {
    set_has_notifyvirtualselectedparentbluescorechangedresponse();
    payload_.notifyvirtualselectedparentbluescorechangedresponse_ = notifyvirtualselectedparentbluescorechangedresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyVirtualSelectedParentBlueScoreChangedResponse)
}
inline ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* KaspadMessage::_internal_mutable_notifyvirtualselectedparentbluescorechangedresponse() {
  if (!_internal_has_notifyvirtualselectedparentbluescorechangedresponse()) {
    clear_payload();
    set_has_notifyvirtualselectedparentbluescorechangedresponse();
    payload_.notifyvirtualselectedparentbluescorechangedresponse_ = CreateMaybeMessage< ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage >(GetArenaForAllocation());
  }
  return payload_.notifyvirtualselectedparentbluescorechangedresponse_;
}
inline ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* KaspadMessage::mutable_notifyvirtualselectedparentbluescorechangedresponse() {
  ::protowire::NotifyVirtualSelectedParentBlueScoreChangedResponseMessage* _msg = _internal_mutable_notifyvirtualselectedparentbluescorechangedresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyVirtualSelectedParentBlueScoreChangedResponse)
  return _msg;
}

// .protowire.VirtualSelectedParentBlueScoreChangedNotificationMessage virtualSelectedParentBlueScoreChangedNotification = 1058;
inline bool KaspadMessage::_internal_has_virtualselectedparentbluescorechangednotification() const {
  return payload_case() == kVirtualSelectedParentBlueScoreChangedNotification;
}
inline bool KaspadMessage::has_virtualselectedparentbluescorechangednotification() const {
  return _internal_has_virtualselectedparentbluescorechangednotification();
}
inline void KaspadMessage::set_has_virtualselectedparentbluescorechangednotification() {
  _oneof_case_[0] = kVirtualSelectedParentBlueScoreChangedNotification;
}
inline ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* KaspadMessage::release_virtualselectedparentbluescorechangednotification() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.virtualSelectedParentBlueScoreChangedNotification)
  if (_internal_has_virtualselectedparentbluescorechangednotification()) {
    clear_has_payload();
      ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* temp = payload_.virtualselectedparentbluescorechangednotification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.virtualselectedparentbluescorechangednotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage& KaspadMessage::_internal_virtualselectedparentbluescorechangednotification() const {
  return _internal_has_virtualselectedparentbluescorechangednotification()
      ? *payload_.virtualselectedparentbluescorechangednotification_
      : reinterpret_cast< ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage&>(::protowire::_VirtualSelectedParentBlueScoreChangedNotificationMessage_default_instance_);
}
inline const ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage& KaspadMessage::virtualselectedparentbluescorechangednotification() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.virtualSelectedParentBlueScoreChangedNotification)
  return _internal_virtualselectedparentbluescorechangednotification();
}
inline ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* KaspadMessage::unsafe_arena_release_virtualselectedparentbluescorechangednotification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.virtualSelectedParentBlueScoreChangedNotification)
  if (_internal_has_virtualselectedparentbluescorechangednotification()) {
    clear_has_payload();
    ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* temp = payload_.virtualselectedparentbluescorechangednotification_;
    payload_.virtualselectedparentbluescorechangednotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_virtualselectedparentbluescorechangednotification(::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* virtualselectedparentbluescorechangednotification) {
  clear_payload();
  if (virtualselectedparentbluescorechangednotification) {
    set_has_virtualselectedparentbluescorechangednotification();
    payload_.virtualselectedparentbluescorechangednotification_ = virtualselectedparentbluescorechangednotification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.virtualSelectedParentBlueScoreChangedNotification)
}
inline ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* KaspadMessage::_internal_mutable_virtualselectedparentbluescorechangednotification() {
  if (!_internal_has_virtualselectedparentbluescorechangednotification()) {
    clear_payload();
    set_has_virtualselectedparentbluescorechangednotification();
    payload_.virtualselectedparentbluescorechangednotification_ = CreateMaybeMessage< ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage >(GetArenaForAllocation());
  }
  return payload_.virtualselectedparentbluescorechangednotification_;
}
inline ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* KaspadMessage::mutable_virtualselectedparentbluescorechangednotification() {
  ::protowire::VirtualSelectedParentBlueScoreChangedNotificationMessage* _msg = _internal_mutable_virtualselectedparentbluescorechangednotification();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.virtualSelectedParentBlueScoreChangedNotification)
  return _msg;
}

// .protowire.BanRequestMessage banRequest = 1059;
inline bool KaspadMessage::_internal_has_banrequest() const {
  return payload_case() == kBanRequest;
}
inline bool KaspadMessage::has_banrequest() const {
  return _internal_has_banrequest();
}
inline void KaspadMessage::set_has_banrequest() {
  _oneof_case_[0] = kBanRequest;
}
inline ::protowire::BanRequestMessage* KaspadMessage::release_banrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.banRequest)
  if (_internal_has_banrequest()) {
    clear_has_payload();
      ::protowire::BanRequestMessage* temp = payload_.banrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.banrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::BanRequestMessage& KaspadMessage::_internal_banrequest() const {
  return _internal_has_banrequest()
      ? *payload_.banrequest_
      : reinterpret_cast< ::protowire::BanRequestMessage&>(::protowire::_BanRequestMessage_default_instance_);
}
inline const ::protowire::BanRequestMessage& KaspadMessage::banrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.banRequest)
  return _internal_banrequest();
}
inline ::protowire::BanRequestMessage* KaspadMessage::unsafe_arena_release_banrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.banRequest)
  if (_internal_has_banrequest()) {
    clear_has_payload();
    ::protowire::BanRequestMessage* temp = payload_.banrequest_;
    payload_.banrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_banrequest(::protowire::BanRequestMessage* banrequest) {
  clear_payload();
  if (banrequest) {
    set_has_banrequest();
    payload_.banrequest_ = banrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.banRequest)
}
inline ::protowire::BanRequestMessage* KaspadMessage::_internal_mutable_banrequest() {
  if (!_internal_has_banrequest()) {
    clear_payload();
    set_has_banrequest();
    payload_.banrequest_ = CreateMaybeMessage< ::protowire::BanRequestMessage >(GetArenaForAllocation());
  }
  return payload_.banrequest_;
}
inline ::protowire::BanRequestMessage* KaspadMessage::mutable_banrequest() {
  ::protowire::BanRequestMessage* _msg = _internal_mutable_banrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.banRequest)
  return _msg;
}

// .protowire.BanResponseMessage banResponse = 1060;
inline bool KaspadMessage::_internal_has_banresponse() const {
  return payload_case() == kBanResponse;
}
inline bool KaspadMessage::has_banresponse() const {
  return _internal_has_banresponse();
}
inline void KaspadMessage::set_has_banresponse() {
  _oneof_case_[0] = kBanResponse;
}
inline ::protowire::BanResponseMessage* KaspadMessage::release_banresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.banResponse)
  if (_internal_has_banresponse()) {
    clear_has_payload();
      ::protowire::BanResponseMessage* temp = payload_.banresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.banresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::BanResponseMessage& KaspadMessage::_internal_banresponse() const {
  return _internal_has_banresponse()
      ? *payload_.banresponse_
      : reinterpret_cast< ::protowire::BanResponseMessage&>(::protowire::_BanResponseMessage_default_instance_);
}
inline const ::protowire::BanResponseMessage& KaspadMessage::banresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.banResponse)
  return _internal_banresponse();
}
inline ::protowire::BanResponseMessage* KaspadMessage::unsafe_arena_release_banresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.banResponse)
  if (_internal_has_banresponse()) {
    clear_has_payload();
    ::protowire::BanResponseMessage* temp = payload_.banresponse_;
    payload_.banresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_banresponse(::protowire::BanResponseMessage* banresponse) {
  clear_payload();
  if (banresponse) {
    set_has_banresponse();
    payload_.banresponse_ = banresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.banResponse)
}
inline ::protowire::BanResponseMessage* KaspadMessage::_internal_mutable_banresponse() {
  if (!_internal_has_banresponse()) {
    clear_payload();
    set_has_banresponse();
    payload_.banresponse_ = CreateMaybeMessage< ::protowire::BanResponseMessage >(GetArenaForAllocation());
  }
  return payload_.banresponse_;
}
inline ::protowire::BanResponseMessage* KaspadMessage::mutable_banresponse() {
  ::protowire::BanResponseMessage* _msg = _internal_mutable_banresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.banResponse)
  return _msg;
}

// .protowire.UnbanRequestMessage unbanRequest = 1061;
inline bool KaspadMessage::_internal_has_unbanrequest() const {
  return payload_case() == kUnbanRequest;
}
inline bool KaspadMessage::has_unbanrequest() const {
  return _internal_has_unbanrequest();
}
inline void KaspadMessage::set_has_unbanrequest() {
  _oneof_case_[0] = kUnbanRequest;
}
inline ::protowire::UnbanRequestMessage* KaspadMessage::release_unbanrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.unbanRequest)
  if (_internal_has_unbanrequest()) {
    clear_has_payload();
      ::protowire::UnbanRequestMessage* temp = payload_.unbanrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.unbanrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::UnbanRequestMessage& KaspadMessage::_internal_unbanrequest() const {
  return _internal_has_unbanrequest()
      ? *payload_.unbanrequest_
      : reinterpret_cast< ::protowire::UnbanRequestMessage&>(::protowire::_UnbanRequestMessage_default_instance_);
}
inline const ::protowire::UnbanRequestMessage& KaspadMessage::unbanrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.unbanRequest)
  return _internal_unbanrequest();
}
inline ::protowire::UnbanRequestMessage* KaspadMessage::unsafe_arena_release_unbanrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.unbanRequest)
  if (_internal_has_unbanrequest()) {
    clear_has_payload();
    ::protowire::UnbanRequestMessage* temp = payload_.unbanrequest_;
    payload_.unbanrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_unbanrequest(::protowire::UnbanRequestMessage* unbanrequest) {
  clear_payload();
  if (unbanrequest) {
    set_has_unbanrequest();
    payload_.unbanrequest_ = unbanrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.unbanRequest)
}
inline ::protowire::UnbanRequestMessage* KaspadMessage::_internal_mutable_unbanrequest() {
  if (!_internal_has_unbanrequest()) {
    clear_payload();
    set_has_unbanrequest();
    payload_.unbanrequest_ = CreateMaybeMessage< ::protowire::UnbanRequestMessage >(GetArenaForAllocation());
  }
  return payload_.unbanrequest_;
}
inline ::protowire::UnbanRequestMessage* KaspadMessage::mutable_unbanrequest() {
  ::protowire::UnbanRequestMessage* _msg = _internal_mutable_unbanrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.unbanRequest)
  return _msg;
}

// .protowire.UnbanResponseMessage unbanResponse = 1062;
inline bool KaspadMessage::_internal_has_unbanresponse() const {
  return payload_case() == kUnbanResponse;
}
inline bool KaspadMessage::has_unbanresponse() const {
  return _internal_has_unbanresponse();
}
inline void KaspadMessage::set_has_unbanresponse() {
  _oneof_case_[0] = kUnbanResponse;
}
inline ::protowire::UnbanResponseMessage* KaspadMessage::release_unbanresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.unbanResponse)
  if (_internal_has_unbanresponse()) {
    clear_has_payload();
      ::protowire::UnbanResponseMessage* temp = payload_.unbanresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.unbanresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::UnbanResponseMessage& KaspadMessage::_internal_unbanresponse() const {
  return _internal_has_unbanresponse()
      ? *payload_.unbanresponse_
      : reinterpret_cast< ::protowire::UnbanResponseMessage&>(::protowire::_UnbanResponseMessage_default_instance_);
}
inline const ::protowire::UnbanResponseMessage& KaspadMessage::unbanresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.unbanResponse)
  return _internal_unbanresponse();
}
inline ::protowire::UnbanResponseMessage* KaspadMessage::unsafe_arena_release_unbanresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.unbanResponse)
  if (_internal_has_unbanresponse()) {
    clear_has_payload();
    ::protowire::UnbanResponseMessage* temp = payload_.unbanresponse_;
    payload_.unbanresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_unbanresponse(::protowire::UnbanResponseMessage* unbanresponse) {
  clear_payload();
  if (unbanresponse) {
    set_has_unbanresponse();
    payload_.unbanresponse_ = unbanresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.unbanResponse)
}
inline ::protowire::UnbanResponseMessage* KaspadMessage::_internal_mutable_unbanresponse() {
  if (!_internal_has_unbanresponse()) {
    clear_payload();
    set_has_unbanresponse();
    payload_.unbanresponse_ = CreateMaybeMessage< ::protowire::UnbanResponseMessage >(GetArenaForAllocation());
  }
  return payload_.unbanresponse_;
}
inline ::protowire::UnbanResponseMessage* KaspadMessage::mutable_unbanresponse() {
  ::protowire::UnbanResponseMessage* _msg = _internal_mutable_unbanresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.unbanResponse)
  return _msg;
}

// .protowire.GetInfoRequestMessage getInfoRequest = 1063;
inline bool KaspadMessage::_internal_has_getinforequest() const {
  return payload_case() == kGetInfoRequest;
}
inline bool KaspadMessage::has_getinforequest() const {
  return _internal_has_getinforequest();
}
inline void KaspadMessage::set_has_getinforequest() {
  _oneof_case_[0] = kGetInfoRequest;
}
inline ::protowire::GetInfoRequestMessage* KaspadMessage::release_getinforequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getInfoRequest)
  if (_internal_has_getinforequest()) {
    clear_has_payload();
      ::protowire::GetInfoRequestMessage* temp = payload_.getinforequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getinforequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetInfoRequestMessage& KaspadMessage::_internal_getinforequest() const {
  return _internal_has_getinforequest()
      ? *payload_.getinforequest_
      : reinterpret_cast< ::protowire::GetInfoRequestMessage&>(::protowire::_GetInfoRequestMessage_default_instance_);
}
inline const ::protowire::GetInfoRequestMessage& KaspadMessage::getinforequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getInfoRequest)
  return _internal_getinforequest();
}
inline ::protowire::GetInfoRequestMessage* KaspadMessage::unsafe_arena_release_getinforequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getInfoRequest)
  if (_internal_has_getinforequest()) {
    clear_has_payload();
    ::protowire::GetInfoRequestMessage* temp = payload_.getinforequest_;
    payload_.getinforequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getinforequest(::protowire::GetInfoRequestMessage* getinforequest) {
  clear_payload();
  if (getinforequest) {
    set_has_getinforequest();
    payload_.getinforequest_ = getinforequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getInfoRequest)
}
inline ::protowire::GetInfoRequestMessage* KaspadMessage::_internal_mutable_getinforequest() {
  if (!_internal_has_getinforequest()) {
    clear_payload();
    set_has_getinforequest();
    payload_.getinforequest_ = CreateMaybeMessage< ::protowire::GetInfoRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getinforequest_;
}
inline ::protowire::GetInfoRequestMessage* KaspadMessage::mutable_getinforequest() {
  ::protowire::GetInfoRequestMessage* _msg = _internal_mutable_getinforequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getInfoRequest)
  return _msg;
}

// .protowire.GetInfoResponseMessage getInfoResponse = 1064;
inline bool KaspadMessage::_internal_has_getinforesponse() const {
  return payload_case() == kGetInfoResponse;
}
inline bool KaspadMessage::has_getinforesponse() const {
  return _internal_has_getinforesponse();
}
inline void KaspadMessage::set_has_getinforesponse() {
  _oneof_case_[0] = kGetInfoResponse;
}
inline ::protowire::GetInfoResponseMessage* KaspadMessage::release_getinforesponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getInfoResponse)
  if (_internal_has_getinforesponse()) {
    clear_has_payload();
      ::protowire::GetInfoResponseMessage* temp = payload_.getinforesponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getinforesponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetInfoResponseMessage& KaspadMessage::_internal_getinforesponse() const {
  return _internal_has_getinforesponse()
      ? *payload_.getinforesponse_
      : reinterpret_cast< ::protowire::GetInfoResponseMessage&>(::protowire::_GetInfoResponseMessage_default_instance_);
}
inline const ::protowire::GetInfoResponseMessage& KaspadMessage::getinforesponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getInfoResponse)
  return _internal_getinforesponse();
}
inline ::protowire::GetInfoResponseMessage* KaspadMessage::unsafe_arena_release_getinforesponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getInfoResponse)
  if (_internal_has_getinforesponse()) {
    clear_has_payload();
    ::protowire::GetInfoResponseMessage* temp = payload_.getinforesponse_;
    payload_.getinforesponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getinforesponse(::protowire::GetInfoResponseMessage* getinforesponse) {
  clear_payload();
  if (getinforesponse) {
    set_has_getinforesponse();
    payload_.getinforesponse_ = getinforesponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getInfoResponse)
}
inline ::protowire::GetInfoResponseMessage* KaspadMessage::_internal_mutable_getinforesponse() {
  if (!_internal_has_getinforesponse()) {
    clear_payload();
    set_has_getinforesponse();
    payload_.getinforesponse_ = CreateMaybeMessage< ::protowire::GetInfoResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getinforesponse_;
}
inline ::protowire::GetInfoResponseMessage* KaspadMessage::mutable_getinforesponse() {
  ::protowire::GetInfoResponseMessage* _msg = _internal_mutable_getinforesponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getInfoResponse)
  return _msg;
}

// .protowire.StopNotifyingUtxosChangedRequestMessage stopNotifyingUtxosChangedRequest = 1065;
inline bool KaspadMessage::_internal_has_stopnotifyingutxoschangedrequest() const {
  return payload_case() == kStopNotifyingUtxosChangedRequest;
}
inline bool KaspadMessage::has_stopnotifyingutxoschangedrequest() const {
  return _internal_has_stopnotifyingutxoschangedrequest();
}
inline void KaspadMessage::set_has_stopnotifyingutxoschangedrequest() {
  _oneof_case_[0] = kStopNotifyingUtxosChangedRequest;
}
inline ::protowire::StopNotifyingUtxosChangedRequestMessage* KaspadMessage::release_stopnotifyingutxoschangedrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.stopNotifyingUtxosChangedRequest)
  if (_internal_has_stopnotifyingutxoschangedrequest()) {
    clear_has_payload();
      ::protowire::StopNotifyingUtxosChangedRequestMessage* temp = payload_.stopnotifyingutxoschangedrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.stopnotifyingutxoschangedrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::StopNotifyingUtxosChangedRequestMessage& KaspadMessage::_internal_stopnotifyingutxoschangedrequest() const {
  return _internal_has_stopnotifyingutxoschangedrequest()
      ? *payload_.stopnotifyingutxoschangedrequest_
      : reinterpret_cast< ::protowire::StopNotifyingUtxosChangedRequestMessage&>(::protowire::_StopNotifyingUtxosChangedRequestMessage_default_instance_);
}
inline const ::protowire::StopNotifyingUtxosChangedRequestMessage& KaspadMessage::stopnotifyingutxoschangedrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.stopNotifyingUtxosChangedRequest)
  return _internal_stopnotifyingutxoschangedrequest();
}
inline ::protowire::StopNotifyingUtxosChangedRequestMessage* KaspadMessage::unsafe_arena_release_stopnotifyingutxoschangedrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.stopNotifyingUtxosChangedRequest)
  if (_internal_has_stopnotifyingutxoschangedrequest()) {
    clear_has_payload();
    ::protowire::StopNotifyingUtxosChangedRequestMessage* temp = payload_.stopnotifyingutxoschangedrequest_;
    payload_.stopnotifyingutxoschangedrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_stopnotifyingutxoschangedrequest(::protowire::StopNotifyingUtxosChangedRequestMessage* stopnotifyingutxoschangedrequest) {
  clear_payload();
  if (stopnotifyingutxoschangedrequest) {
    set_has_stopnotifyingutxoschangedrequest();
    payload_.stopnotifyingutxoschangedrequest_ = stopnotifyingutxoschangedrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.stopNotifyingUtxosChangedRequest)
}
inline ::protowire::StopNotifyingUtxosChangedRequestMessage* KaspadMessage::_internal_mutable_stopnotifyingutxoschangedrequest() {
  if (!_internal_has_stopnotifyingutxoschangedrequest()) {
    clear_payload();
    set_has_stopnotifyingutxoschangedrequest();
    payload_.stopnotifyingutxoschangedrequest_ = CreateMaybeMessage< ::protowire::StopNotifyingUtxosChangedRequestMessage >(GetArenaForAllocation());
  }
  return payload_.stopnotifyingutxoschangedrequest_;
}
inline ::protowire::StopNotifyingUtxosChangedRequestMessage* KaspadMessage::mutable_stopnotifyingutxoschangedrequest() {
  ::protowire::StopNotifyingUtxosChangedRequestMessage* _msg = _internal_mutable_stopnotifyingutxoschangedrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.stopNotifyingUtxosChangedRequest)
  return _msg;
}

// .protowire.StopNotifyingUtxosChangedResponseMessage stopNotifyingUtxosChangedResponse = 1066;
inline bool KaspadMessage::_internal_has_stopnotifyingutxoschangedresponse() const {
  return payload_case() == kStopNotifyingUtxosChangedResponse;
}
inline bool KaspadMessage::has_stopnotifyingutxoschangedresponse() const {
  return _internal_has_stopnotifyingutxoschangedresponse();
}
inline void KaspadMessage::set_has_stopnotifyingutxoschangedresponse() {
  _oneof_case_[0] = kStopNotifyingUtxosChangedResponse;
}
inline ::protowire::StopNotifyingUtxosChangedResponseMessage* KaspadMessage::release_stopnotifyingutxoschangedresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.stopNotifyingUtxosChangedResponse)
  if (_internal_has_stopnotifyingutxoschangedresponse()) {
    clear_has_payload();
      ::protowire::StopNotifyingUtxosChangedResponseMessage* temp = payload_.stopnotifyingutxoschangedresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.stopnotifyingutxoschangedresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::StopNotifyingUtxosChangedResponseMessage& KaspadMessage::_internal_stopnotifyingutxoschangedresponse() const {
  return _internal_has_stopnotifyingutxoschangedresponse()
      ? *payload_.stopnotifyingutxoschangedresponse_
      : reinterpret_cast< ::protowire::StopNotifyingUtxosChangedResponseMessage&>(::protowire::_StopNotifyingUtxosChangedResponseMessage_default_instance_);
}
inline const ::protowire::StopNotifyingUtxosChangedResponseMessage& KaspadMessage::stopnotifyingutxoschangedresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.stopNotifyingUtxosChangedResponse)
  return _internal_stopnotifyingutxoschangedresponse();
}
inline ::protowire::StopNotifyingUtxosChangedResponseMessage* KaspadMessage::unsafe_arena_release_stopnotifyingutxoschangedresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.stopNotifyingUtxosChangedResponse)
  if (_internal_has_stopnotifyingutxoschangedresponse()) {
    clear_has_payload();
    ::protowire::StopNotifyingUtxosChangedResponseMessage* temp = payload_.stopnotifyingutxoschangedresponse_;
    payload_.stopnotifyingutxoschangedresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_stopnotifyingutxoschangedresponse(::protowire::StopNotifyingUtxosChangedResponseMessage* stopnotifyingutxoschangedresponse) {
  clear_payload();
  if (stopnotifyingutxoschangedresponse) {
    set_has_stopnotifyingutxoschangedresponse();
    payload_.stopnotifyingutxoschangedresponse_ = stopnotifyingutxoschangedresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.stopNotifyingUtxosChangedResponse)
}
inline ::protowire::StopNotifyingUtxosChangedResponseMessage* KaspadMessage::_internal_mutable_stopnotifyingutxoschangedresponse() {
  if (!_internal_has_stopnotifyingutxoschangedresponse()) {
    clear_payload();
    set_has_stopnotifyingutxoschangedresponse();
    payload_.stopnotifyingutxoschangedresponse_ = CreateMaybeMessage< ::protowire::StopNotifyingUtxosChangedResponseMessage >(GetArenaForAllocation());
  }
  return payload_.stopnotifyingutxoschangedresponse_;
}
inline ::protowire::StopNotifyingUtxosChangedResponseMessage* KaspadMessage::mutable_stopnotifyingutxoschangedresponse() {
  ::protowire::StopNotifyingUtxosChangedResponseMessage* _msg = _internal_mutable_stopnotifyingutxoschangedresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.stopNotifyingUtxosChangedResponse)
  return _msg;
}

// .protowire.NotifyPruningPointUTXOSetOverrideRequestMessage notifyPruningPointUTXOSetOverrideRequest = 1067;
inline bool KaspadMessage::_internal_has_notifypruningpointutxosetoverriderequest() const {
  return payload_case() == kNotifyPruningPointUTXOSetOverrideRequest;
}
inline bool KaspadMessage::has_notifypruningpointutxosetoverriderequest() const {
  return _internal_has_notifypruningpointutxosetoverriderequest();
}
inline void KaspadMessage::set_has_notifypruningpointutxosetoverriderequest() {
  _oneof_case_[0] = kNotifyPruningPointUTXOSetOverrideRequest;
}
inline ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* KaspadMessage::release_notifypruningpointutxosetoverriderequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyPruningPointUTXOSetOverrideRequest)
  if (_internal_has_notifypruningpointutxosetoverriderequest()) {
    clear_has_payload();
      ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* temp = payload_.notifypruningpointutxosetoverriderequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifypruningpointutxosetoverriderequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage& KaspadMessage::_internal_notifypruningpointutxosetoverriderequest() const {
  return _internal_has_notifypruningpointutxosetoverriderequest()
      ? *payload_.notifypruningpointutxosetoverriderequest_
      : reinterpret_cast< ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage&>(::protowire::_NotifyPruningPointUTXOSetOverrideRequestMessage_default_instance_);
}
inline const ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage& KaspadMessage::notifypruningpointutxosetoverriderequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyPruningPointUTXOSetOverrideRequest)
  return _internal_notifypruningpointutxosetoverriderequest();
}
inline ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* KaspadMessage::unsafe_arena_release_notifypruningpointutxosetoverriderequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyPruningPointUTXOSetOverrideRequest)
  if (_internal_has_notifypruningpointutxosetoverriderequest()) {
    clear_has_payload();
    ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* temp = payload_.notifypruningpointutxosetoverriderequest_;
    payload_.notifypruningpointutxosetoverriderequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifypruningpointutxosetoverriderequest(::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* notifypruningpointutxosetoverriderequest) {
  clear_payload();
  if (notifypruningpointutxosetoverriderequest) {
    set_has_notifypruningpointutxosetoverriderequest();
    payload_.notifypruningpointutxosetoverriderequest_ = notifypruningpointutxosetoverriderequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyPruningPointUTXOSetOverrideRequest)
}
inline ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* KaspadMessage::_internal_mutable_notifypruningpointutxosetoverriderequest() {
  if (!_internal_has_notifypruningpointutxosetoverriderequest()) {
    clear_payload();
    set_has_notifypruningpointutxosetoverriderequest();
    payload_.notifypruningpointutxosetoverriderequest_ = CreateMaybeMessage< ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage >(GetArenaForAllocation());
  }
  return payload_.notifypruningpointutxosetoverriderequest_;
}
inline ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* KaspadMessage::mutable_notifypruningpointutxosetoverriderequest() {
  ::protowire::NotifyPruningPointUTXOSetOverrideRequestMessage* _msg = _internal_mutable_notifypruningpointutxosetoverriderequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyPruningPointUTXOSetOverrideRequest)
  return _msg;
}

// .protowire.NotifyPruningPointUTXOSetOverrideResponseMessage notifyPruningPointUTXOSetOverrideResponse = 1068;
inline bool KaspadMessage::_internal_has_notifypruningpointutxosetoverrideresponse() const {
  return payload_case() == kNotifyPruningPointUTXOSetOverrideResponse;
}
inline bool KaspadMessage::has_notifypruningpointutxosetoverrideresponse() const {
  return _internal_has_notifypruningpointutxosetoverrideresponse();
}
inline void KaspadMessage::set_has_notifypruningpointutxosetoverrideresponse() {
  _oneof_case_[0] = kNotifyPruningPointUTXOSetOverrideResponse;
}
inline ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* KaspadMessage::release_notifypruningpointutxosetoverrideresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyPruningPointUTXOSetOverrideResponse)
  if (_internal_has_notifypruningpointutxosetoverrideresponse()) {
    clear_has_payload();
      ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* temp = payload_.notifypruningpointutxosetoverrideresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifypruningpointutxosetoverrideresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage& KaspadMessage::_internal_notifypruningpointutxosetoverrideresponse() const {
  return _internal_has_notifypruningpointutxosetoverrideresponse()
      ? *payload_.notifypruningpointutxosetoverrideresponse_
      : reinterpret_cast< ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage&>(::protowire::_NotifyPruningPointUTXOSetOverrideResponseMessage_default_instance_);
}
inline const ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage& KaspadMessage::notifypruningpointutxosetoverrideresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyPruningPointUTXOSetOverrideResponse)
  return _internal_notifypruningpointutxosetoverrideresponse();
}
inline ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* KaspadMessage::unsafe_arena_release_notifypruningpointutxosetoverrideresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyPruningPointUTXOSetOverrideResponse)
  if (_internal_has_notifypruningpointutxosetoverrideresponse()) {
    clear_has_payload();
    ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* temp = payload_.notifypruningpointutxosetoverrideresponse_;
    payload_.notifypruningpointutxosetoverrideresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifypruningpointutxosetoverrideresponse(::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* notifypruningpointutxosetoverrideresponse) {
  clear_payload();
  if (notifypruningpointutxosetoverrideresponse) {
    set_has_notifypruningpointutxosetoverrideresponse();
    payload_.notifypruningpointutxosetoverrideresponse_ = notifypruningpointutxosetoverrideresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyPruningPointUTXOSetOverrideResponse)
}
inline ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* KaspadMessage::_internal_mutable_notifypruningpointutxosetoverrideresponse() {
  if (!_internal_has_notifypruningpointutxosetoverrideresponse()) {
    clear_payload();
    set_has_notifypruningpointutxosetoverrideresponse();
    payload_.notifypruningpointutxosetoverrideresponse_ = CreateMaybeMessage< ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage >(GetArenaForAllocation());
  }
  return payload_.notifypruningpointutxosetoverrideresponse_;
}
inline ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* KaspadMessage::mutable_notifypruningpointutxosetoverrideresponse() {
  ::protowire::NotifyPruningPointUTXOSetOverrideResponseMessage* _msg = _internal_mutable_notifypruningpointutxosetoverrideresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyPruningPointUTXOSetOverrideResponse)
  return _msg;
}

// .protowire.PruningPointUTXOSetOverrideNotificationMessage pruningPointUTXOSetOverrideNotification = 1069;
inline bool KaspadMessage::_internal_has_pruningpointutxosetoverridenotification() const {
  return payload_case() == kPruningPointUTXOSetOverrideNotification;
}
inline bool KaspadMessage::has_pruningpointutxosetoverridenotification() const {
  return _internal_has_pruningpointutxosetoverridenotification();
}
inline void KaspadMessage::set_has_pruningpointutxosetoverridenotification() {
  _oneof_case_[0] = kPruningPointUTXOSetOverrideNotification;
}
inline ::protowire::PruningPointUTXOSetOverrideNotificationMessage* KaspadMessage::release_pruningpointutxosetoverridenotification() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.pruningPointUTXOSetOverrideNotification)
  if (_internal_has_pruningpointutxosetoverridenotification()) {
    clear_has_payload();
      ::protowire::PruningPointUTXOSetOverrideNotificationMessage* temp = payload_.pruningpointutxosetoverridenotification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.pruningpointutxosetoverridenotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::PruningPointUTXOSetOverrideNotificationMessage& KaspadMessage::_internal_pruningpointutxosetoverridenotification() const {
  return _internal_has_pruningpointutxosetoverridenotification()
      ? *payload_.pruningpointutxosetoverridenotification_
      : reinterpret_cast< ::protowire::PruningPointUTXOSetOverrideNotificationMessage&>(::protowire::_PruningPointUTXOSetOverrideNotificationMessage_default_instance_);
}
inline const ::protowire::PruningPointUTXOSetOverrideNotificationMessage& KaspadMessage::pruningpointutxosetoverridenotification() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.pruningPointUTXOSetOverrideNotification)
  return _internal_pruningpointutxosetoverridenotification();
}
inline ::protowire::PruningPointUTXOSetOverrideNotificationMessage* KaspadMessage::unsafe_arena_release_pruningpointutxosetoverridenotification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.pruningPointUTXOSetOverrideNotification)
  if (_internal_has_pruningpointutxosetoverridenotification()) {
    clear_has_payload();
    ::protowire::PruningPointUTXOSetOverrideNotificationMessage* temp = payload_.pruningpointutxosetoverridenotification_;
    payload_.pruningpointutxosetoverridenotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_pruningpointutxosetoverridenotification(::protowire::PruningPointUTXOSetOverrideNotificationMessage* pruningpointutxosetoverridenotification) {
  clear_payload();
  if (pruningpointutxosetoverridenotification) {
    set_has_pruningpointutxosetoverridenotification();
    payload_.pruningpointutxosetoverridenotification_ = pruningpointutxosetoverridenotification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.pruningPointUTXOSetOverrideNotification)
}
inline ::protowire::PruningPointUTXOSetOverrideNotificationMessage* KaspadMessage::_internal_mutable_pruningpointutxosetoverridenotification() {
  if (!_internal_has_pruningpointutxosetoverridenotification()) {
    clear_payload();
    set_has_pruningpointutxosetoverridenotification();
    payload_.pruningpointutxosetoverridenotification_ = CreateMaybeMessage< ::protowire::PruningPointUTXOSetOverrideNotificationMessage >(GetArenaForAllocation());
  }
  return payload_.pruningpointutxosetoverridenotification_;
}
inline ::protowire::PruningPointUTXOSetOverrideNotificationMessage* KaspadMessage::mutable_pruningpointutxosetoverridenotification() {
  ::protowire::PruningPointUTXOSetOverrideNotificationMessage* _msg = _internal_mutable_pruningpointutxosetoverridenotification();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.pruningPointUTXOSetOverrideNotification)
  return _msg;
}

// .protowire.StopNotifyingPruningPointUTXOSetOverrideRequestMessage stopNotifyingPruningPointUTXOSetOverrideRequest = 1070;
inline bool KaspadMessage::_internal_has_stopnotifyingpruningpointutxosetoverriderequest() const {
  return payload_case() == kStopNotifyingPruningPointUTXOSetOverrideRequest;
}
inline bool KaspadMessage::has_stopnotifyingpruningpointutxosetoverriderequest() const {
  return _internal_has_stopnotifyingpruningpointutxosetoverriderequest();
}
inline void KaspadMessage::set_has_stopnotifyingpruningpointutxosetoverriderequest() {
  _oneof_case_[0] = kStopNotifyingPruningPointUTXOSetOverrideRequest;
}
inline ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* KaspadMessage::release_stopnotifyingpruningpointutxosetoverriderequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.stopNotifyingPruningPointUTXOSetOverrideRequest)
  if (_internal_has_stopnotifyingpruningpointutxosetoverriderequest()) {
    clear_has_payload();
      ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* temp = payload_.stopnotifyingpruningpointutxosetoverriderequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.stopnotifyingpruningpointutxosetoverriderequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage& KaspadMessage::_internal_stopnotifyingpruningpointutxosetoverriderequest() const {
  return _internal_has_stopnotifyingpruningpointutxosetoverriderequest()
      ? *payload_.stopnotifyingpruningpointutxosetoverriderequest_
      : reinterpret_cast< ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage&>(::protowire::_StopNotifyingPruningPointUTXOSetOverrideRequestMessage_default_instance_);
}
inline const ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage& KaspadMessage::stopnotifyingpruningpointutxosetoverriderequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.stopNotifyingPruningPointUTXOSetOverrideRequest)
  return _internal_stopnotifyingpruningpointutxosetoverriderequest();
}
inline ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* KaspadMessage::unsafe_arena_release_stopnotifyingpruningpointutxosetoverriderequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.stopNotifyingPruningPointUTXOSetOverrideRequest)
  if (_internal_has_stopnotifyingpruningpointutxosetoverriderequest()) {
    clear_has_payload();
    ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* temp = payload_.stopnotifyingpruningpointutxosetoverriderequest_;
    payload_.stopnotifyingpruningpointutxosetoverriderequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_stopnotifyingpruningpointutxosetoverriderequest(::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* stopnotifyingpruningpointutxosetoverriderequest) {
  clear_payload();
  if (stopnotifyingpruningpointutxosetoverriderequest) {
    set_has_stopnotifyingpruningpointutxosetoverriderequest();
    payload_.stopnotifyingpruningpointutxosetoverriderequest_ = stopnotifyingpruningpointutxosetoverriderequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.stopNotifyingPruningPointUTXOSetOverrideRequest)
}
inline ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* KaspadMessage::_internal_mutable_stopnotifyingpruningpointutxosetoverriderequest() {
  if (!_internal_has_stopnotifyingpruningpointutxosetoverriderequest()) {
    clear_payload();
    set_has_stopnotifyingpruningpointutxosetoverriderequest();
    payload_.stopnotifyingpruningpointutxosetoverriderequest_ = CreateMaybeMessage< ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage >(GetArenaForAllocation());
  }
  return payload_.stopnotifyingpruningpointutxosetoverriderequest_;
}
inline ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* KaspadMessage::mutable_stopnotifyingpruningpointutxosetoverriderequest() {
  ::protowire::StopNotifyingPruningPointUTXOSetOverrideRequestMessage* _msg = _internal_mutable_stopnotifyingpruningpointutxosetoverriderequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.stopNotifyingPruningPointUTXOSetOverrideRequest)
  return _msg;
}

// .protowire.StopNotifyingPruningPointUTXOSetOverrideResponseMessage stopNotifyingPruningPointUTXOSetOverrideResponse = 1071;
inline bool KaspadMessage::_internal_has_stopnotifyingpruningpointutxosetoverrideresponse() const {
  return payload_case() == kStopNotifyingPruningPointUTXOSetOverrideResponse;
}
inline bool KaspadMessage::has_stopnotifyingpruningpointutxosetoverrideresponse() const {
  return _internal_has_stopnotifyingpruningpointutxosetoverrideresponse();
}
inline void KaspadMessage::set_has_stopnotifyingpruningpointutxosetoverrideresponse() {
  _oneof_case_[0] = kStopNotifyingPruningPointUTXOSetOverrideResponse;
}
inline ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* KaspadMessage::release_stopnotifyingpruningpointutxosetoverrideresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.stopNotifyingPruningPointUTXOSetOverrideResponse)
  if (_internal_has_stopnotifyingpruningpointutxosetoverrideresponse()) {
    clear_has_payload();
      ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* temp = payload_.stopnotifyingpruningpointutxosetoverrideresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.stopnotifyingpruningpointutxosetoverrideresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage& KaspadMessage::_internal_stopnotifyingpruningpointutxosetoverrideresponse() const {
  return _internal_has_stopnotifyingpruningpointutxosetoverrideresponse()
      ? *payload_.stopnotifyingpruningpointutxosetoverrideresponse_
      : reinterpret_cast< ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage&>(::protowire::_StopNotifyingPruningPointUTXOSetOverrideResponseMessage_default_instance_);
}
inline const ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage& KaspadMessage::stopnotifyingpruningpointutxosetoverrideresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.stopNotifyingPruningPointUTXOSetOverrideResponse)
  return _internal_stopnotifyingpruningpointutxosetoverrideresponse();
}
inline ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* KaspadMessage::unsafe_arena_release_stopnotifyingpruningpointutxosetoverrideresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.stopNotifyingPruningPointUTXOSetOverrideResponse)
  if (_internal_has_stopnotifyingpruningpointutxosetoverrideresponse()) {
    clear_has_payload();
    ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* temp = payload_.stopnotifyingpruningpointutxosetoverrideresponse_;
    payload_.stopnotifyingpruningpointutxosetoverrideresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_stopnotifyingpruningpointutxosetoverrideresponse(::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* stopnotifyingpruningpointutxosetoverrideresponse) {
  clear_payload();
  if (stopnotifyingpruningpointutxosetoverrideresponse) {
    set_has_stopnotifyingpruningpointutxosetoverrideresponse();
    payload_.stopnotifyingpruningpointutxosetoverrideresponse_ = stopnotifyingpruningpointutxosetoverrideresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.stopNotifyingPruningPointUTXOSetOverrideResponse)
}
inline ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* KaspadMessage::_internal_mutable_stopnotifyingpruningpointutxosetoverrideresponse() {
  if (!_internal_has_stopnotifyingpruningpointutxosetoverrideresponse()) {
    clear_payload();
    set_has_stopnotifyingpruningpointutxosetoverrideresponse();
    payload_.stopnotifyingpruningpointutxosetoverrideresponse_ = CreateMaybeMessage< ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage >(GetArenaForAllocation());
  }
  return payload_.stopnotifyingpruningpointutxosetoverrideresponse_;
}
inline ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* KaspadMessage::mutable_stopnotifyingpruningpointutxosetoverrideresponse() {
  ::protowire::StopNotifyingPruningPointUTXOSetOverrideResponseMessage* _msg = _internal_mutable_stopnotifyingpruningpointutxosetoverrideresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.stopNotifyingPruningPointUTXOSetOverrideResponse)
  return _msg;
}

// .protowire.EstimateNetworkHashesPerSecondRequestMessage estimateNetworkHashesPerSecondRequest = 1072;
inline bool KaspadMessage::_internal_has_estimatenetworkhashespersecondrequest() const {
  return payload_case() == kEstimateNetworkHashesPerSecondRequest;
}
inline bool KaspadMessage::has_estimatenetworkhashespersecondrequest() const {
  return _internal_has_estimatenetworkhashespersecondrequest();
}
inline void KaspadMessage::set_has_estimatenetworkhashespersecondrequest() {
  _oneof_case_[0] = kEstimateNetworkHashesPerSecondRequest;
}
inline ::protowire::EstimateNetworkHashesPerSecondRequestMessage* KaspadMessage::release_estimatenetworkhashespersecondrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.estimateNetworkHashesPerSecondRequest)
  if (_internal_has_estimatenetworkhashespersecondrequest()) {
    clear_has_payload();
      ::protowire::EstimateNetworkHashesPerSecondRequestMessage* temp = payload_.estimatenetworkhashespersecondrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.estimatenetworkhashespersecondrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::EstimateNetworkHashesPerSecondRequestMessage& KaspadMessage::_internal_estimatenetworkhashespersecondrequest() const {
  return _internal_has_estimatenetworkhashespersecondrequest()
      ? *payload_.estimatenetworkhashespersecondrequest_
      : reinterpret_cast< ::protowire::EstimateNetworkHashesPerSecondRequestMessage&>(::protowire::_EstimateNetworkHashesPerSecondRequestMessage_default_instance_);
}
inline const ::protowire::EstimateNetworkHashesPerSecondRequestMessage& KaspadMessage::estimatenetworkhashespersecondrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.estimateNetworkHashesPerSecondRequest)
  return _internal_estimatenetworkhashespersecondrequest();
}
inline ::protowire::EstimateNetworkHashesPerSecondRequestMessage* KaspadMessage::unsafe_arena_release_estimatenetworkhashespersecondrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.estimateNetworkHashesPerSecondRequest)
  if (_internal_has_estimatenetworkhashespersecondrequest()) {
    clear_has_payload();
    ::protowire::EstimateNetworkHashesPerSecondRequestMessage* temp = payload_.estimatenetworkhashespersecondrequest_;
    payload_.estimatenetworkhashespersecondrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_estimatenetworkhashespersecondrequest(::protowire::EstimateNetworkHashesPerSecondRequestMessage* estimatenetworkhashespersecondrequest) {
  clear_payload();
  if (estimatenetworkhashespersecondrequest) {
    set_has_estimatenetworkhashespersecondrequest();
    payload_.estimatenetworkhashespersecondrequest_ = estimatenetworkhashespersecondrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.estimateNetworkHashesPerSecondRequest)
}
inline ::protowire::EstimateNetworkHashesPerSecondRequestMessage* KaspadMessage::_internal_mutable_estimatenetworkhashespersecondrequest() {
  if (!_internal_has_estimatenetworkhashespersecondrequest()) {
    clear_payload();
    set_has_estimatenetworkhashespersecondrequest();
    payload_.estimatenetworkhashespersecondrequest_ = CreateMaybeMessage< ::protowire::EstimateNetworkHashesPerSecondRequestMessage >(GetArenaForAllocation());
  }
  return payload_.estimatenetworkhashespersecondrequest_;
}
inline ::protowire::EstimateNetworkHashesPerSecondRequestMessage* KaspadMessage::mutable_estimatenetworkhashespersecondrequest() {
  ::protowire::EstimateNetworkHashesPerSecondRequestMessage* _msg = _internal_mutable_estimatenetworkhashespersecondrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.estimateNetworkHashesPerSecondRequest)
  return _msg;
}

// .protowire.EstimateNetworkHashesPerSecondResponseMessage estimateNetworkHashesPerSecondResponse = 1073;
inline bool KaspadMessage::_internal_has_estimatenetworkhashespersecondresponse() const {
  return payload_case() == kEstimateNetworkHashesPerSecondResponse;
}
inline bool KaspadMessage::has_estimatenetworkhashespersecondresponse() const {
  return _internal_has_estimatenetworkhashespersecondresponse();
}
inline void KaspadMessage::set_has_estimatenetworkhashespersecondresponse() {
  _oneof_case_[0] = kEstimateNetworkHashesPerSecondResponse;
}
inline ::protowire::EstimateNetworkHashesPerSecondResponseMessage* KaspadMessage::release_estimatenetworkhashespersecondresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.estimateNetworkHashesPerSecondResponse)
  if (_internal_has_estimatenetworkhashespersecondresponse()) {
    clear_has_payload();
      ::protowire::EstimateNetworkHashesPerSecondResponseMessage* temp = payload_.estimatenetworkhashespersecondresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.estimatenetworkhashespersecondresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::EstimateNetworkHashesPerSecondResponseMessage& KaspadMessage::_internal_estimatenetworkhashespersecondresponse() const {
  return _internal_has_estimatenetworkhashespersecondresponse()
      ? *payload_.estimatenetworkhashespersecondresponse_
      : reinterpret_cast< ::protowire::EstimateNetworkHashesPerSecondResponseMessage&>(::protowire::_EstimateNetworkHashesPerSecondResponseMessage_default_instance_);
}
inline const ::protowire::EstimateNetworkHashesPerSecondResponseMessage& KaspadMessage::estimatenetworkhashespersecondresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.estimateNetworkHashesPerSecondResponse)
  return _internal_estimatenetworkhashespersecondresponse();
}
inline ::protowire::EstimateNetworkHashesPerSecondResponseMessage* KaspadMessage::unsafe_arena_release_estimatenetworkhashespersecondresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.estimateNetworkHashesPerSecondResponse)
  if (_internal_has_estimatenetworkhashespersecondresponse()) {
    clear_has_payload();
    ::protowire::EstimateNetworkHashesPerSecondResponseMessage* temp = payload_.estimatenetworkhashespersecondresponse_;
    payload_.estimatenetworkhashespersecondresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_estimatenetworkhashespersecondresponse(::protowire::EstimateNetworkHashesPerSecondResponseMessage* estimatenetworkhashespersecondresponse) {
  clear_payload();
  if (estimatenetworkhashespersecondresponse) {
    set_has_estimatenetworkhashespersecondresponse();
    payload_.estimatenetworkhashespersecondresponse_ = estimatenetworkhashespersecondresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.estimateNetworkHashesPerSecondResponse)
}
inline ::protowire::EstimateNetworkHashesPerSecondResponseMessage* KaspadMessage::_internal_mutable_estimatenetworkhashespersecondresponse() {
  if (!_internal_has_estimatenetworkhashespersecondresponse()) {
    clear_payload();
    set_has_estimatenetworkhashespersecondresponse();
    payload_.estimatenetworkhashespersecondresponse_ = CreateMaybeMessage< ::protowire::EstimateNetworkHashesPerSecondResponseMessage >(GetArenaForAllocation());
  }
  return payload_.estimatenetworkhashespersecondresponse_;
}
inline ::protowire::EstimateNetworkHashesPerSecondResponseMessage* KaspadMessage::mutable_estimatenetworkhashespersecondresponse() {
  ::protowire::EstimateNetworkHashesPerSecondResponseMessage* _msg = _internal_mutable_estimatenetworkhashespersecondresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.estimateNetworkHashesPerSecondResponse)
  return _msg;
}

// .protowire.NotifyVirtualDaaScoreChangedRequestMessage notifyVirtualDaaScoreChangedRequest = 1074;
inline bool KaspadMessage::_internal_has_notifyvirtualdaascorechangedrequest() const {
  return payload_case() == kNotifyVirtualDaaScoreChangedRequest;
}
inline bool KaspadMessage::has_notifyvirtualdaascorechangedrequest() const {
  return _internal_has_notifyvirtualdaascorechangedrequest();
}
inline void KaspadMessage::set_has_notifyvirtualdaascorechangedrequest() {
  _oneof_case_[0] = kNotifyVirtualDaaScoreChangedRequest;
}
inline ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* KaspadMessage::release_notifyvirtualdaascorechangedrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyVirtualDaaScoreChangedRequest)
  if (_internal_has_notifyvirtualdaascorechangedrequest()) {
    clear_has_payload();
      ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* temp = payload_.notifyvirtualdaascorechangedrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifyvirtualdaascorechangedrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyVirtualDaaScoreChangedRequestMessage& KaspadMessage::_internal_notifyvirtualdaascorechangedrequest() const {
  return _internal_has_notifyvirtualdaascorechangedrequest()
      ? *payload_.notifyvirtualdaascorechangedrequest_
      : reinterpret_cast< ::protowire::NotifyVirtualDaaScoreChangedRequestMessage&>(::protowire::_NotifyVirtualDaaScoreChangedRequestMessage_default_instance_);
}
inline const ::protowire::NotifyVirtualDaaScoreChangedRequestMessage& KaspadMessage::notifyvirtualdaascorechangedrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyVirtualDaaScoreChangedRequest)
  return _internal_notifyvirtualdaascorechangedrequest();
}
inline ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* KaspadMessage::unsafe_arena_release_notifyvirtualdaascorechangedrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyVirtualDaaScoreChangedRequest)
  if (_internal_has_notifyvirtualdaascorechangedrequest()) {
    clear_has_payload();
    ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* temp = payload_.notifyvirtualdaascorechangedrequest_;
    payload_.notifyvirtualdaascorechangedrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifyvirtualdaascorechangedrequest(::protowire::NotifyVirtualDaaScoreChangedRequestMessage* notifyvirtualdaascorechangedrequest) {
  clear_payload();
  if (notifyvirtualdaascorechangedrequest) {
    set_has_notifyvirtualdaascorechangedrequest();
    payload_.notifyvirtualdaascorechangedrequest_ = notifyvirtualdaascorechangedrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyVirtualDaaScoreChangedRequest)
}
inline ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* KaspadMessage::_internal_mutable_notifyvirtualdaascorechangedrequest() {
  if (!_internal_has_notifyvirtualdaascorechangedrequest()) {
    clear_payload();
    set_has_notifyvirtualdaascorechangedrequest();
    payload_.notifyvirtualdaascorechangedrequest_ = CreateMaybeMessage< ::protowire::NotifyVirtualDaaScoreChangedRequestMessage >(GetArenaForAllocation());
  }
  return payload_.notifyvirtualdaascorechangedrequest_;
}
inline ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* KaspadMessage::mutable_notifyvirtualdaascorechangedrequest() {
  ::protowire::NotifyVirtualDaaScoreChangedRequestMessage* _msg = _internal_mutable_notifyvirtualdaascorechangedrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyVirtualDaaScoreChangedRequest)
  return _msg;
}

// .protowire.NotifyVirtualDaaScoreChangedResponseMessage notifyVirtualDaaScoreChangedResponse = 1075;
inline bool KaspadMessage::_internal_has_notifyvirtualdaascorechangedresponse() const {
  return payload_case() == kNotifyVirtualDaaScoreChangedResponse;
}
inline bool KaspadMessage::has_notifyvirtualdaascorechangedresponse() const {
  return _internal_has_notifyvirtualdaascorechangedresponse();
}
inline void KaspadMessage::set_has_notifyvirtualdaascorechangedresponse() {
  _oneof_case_[0] = kNotifyVirtualDaaScoreChangedResponse;
}
inline ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* KaspadMessage::release_notifyvirtualdaascorechangedresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyVirtualDaaScoreChangedResponse)
  if (_internal_has_notifyvirtualdaascorechangedresponse()) {
    clear_has_payload();
      ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* temp = payload_.notifyvirtualdaascorechangedresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifyvirtualdaascorechangedresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyVirtualDaaScoreChangedResponseMessage& KaspadMessage::_internal_notifyvirtualdaascorechangedresponse() const {
  return _internal_has_notifyvirtualdaascorechangedresponse()
      ? *payload_.notifyvirtualdaascorechangedresponse_
      : reinterpret_cast< ::protowire::NotifyVirtualDaaScoreChangedResponseMessage&>(::protowire::_NotifyVirtualDaaScoreChangedResponseMessage_default_instance_);
}
inline const ::protowire::NotifyVirtualDaaScoreChangedResponseMessage& KaspadMessage::notifyvirtualdaascorechangedresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyVirtualDaaScoreChangedResponse)
  return _internal_notifyvirtualdaascorechangedresponse();
}
inline ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* KaspadMessage::unsafe_arena_release_notifyvirtualdaascorechangedresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyVirtualDaaScoreChangedResponse)
  if (_internal_has_notifyvirtualdaascorechangedresponse()) {
    clear_has_payload();
    ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* temp = payload_.notifyvirtualdaascorechangedresponse_;
    payload_.notifyvirtualdaascorechangedresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifyvirtualdaascorechangedresponse(::protowire::NotifyVirtualDaaScoreChangedResponseMessage* notifyvirtualdaascorechangedresponse) {
  clear_payload();
  if (notifyvirtualdaascorechangedresponse) {
    set_has_notifyvirtualdaascorechangedresponse();
    payload_.notifyvirtualdaascorechangedresponse_ = notifyvirtualdaascorechangedresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyVirtualDaaScoreChangedResponse)
}
inline ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* KaspadMessage::_internal_mutable_notifyvirtualdaascorechangedresponse() {
  if (!_internal_has_notifyvirtualdaascorechangedresponse()) {
    clear_payload();
    set_has_notifyvirtualdaascorechangedresponse();
    payload_.notifyvirtualdaascorechangedresponse_ = CreateMaybeMessage< ::protowire::NotifyVirtualDaaScoreChangedResponseMessage >(GetArenaForAllocation());
  }
  return payload_.notifyvirtualdaascorechangedresponse_;
}
inline ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* KaspadMessage::mutable_notifyvirtualdaascorechangedresponse() {
  ::protowire::NotifyVirtualDaaScoreChangedResponseMessage* _msg = _internal_mutable_notifyvirtualdaascorechangedresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyVirtualDaaScoreChangedResponse)
  return _msg;
}

// .protowire.VirtualDaaScoreChangedNotificationMessage virtualDaaScoreChangedNotification = 1076;
inline bool KaspadMessage::_internal_has_virtualdaascorechangednotification() const {
  return payload_case() == kVirtualDaaScoreChangedNotification;
}
inline bool KaspadMessage::has_virtualdaascorechangednotification() const {
  return _internal_has_virtualdaascorechangednotification();
}
inline void KaspadMessage::set_has_virtualdaascorechangednotification() {
  _oneof_case_[0] = kVirtualDaaScoreChangedNotification;
}
inline ::protowire::VirtualDaaScoreChangedNotificationMessage* KaspadMessage::release_virtualdaascorechangednotification() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.virtualDaaScoreChangedNotification)
  if (_internal_has_virtualdaascorechangednotification()) {
    clear_has_payload();
      ::protowire::VirtualDaaScoreChangedNotificationMessage* temp = payload_.virtualdaascorechangednotification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.virtualdaascorechangednotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::VirtualDaaScoreChangedNotificationMessage& KaspadMessage::_internal_virtualdaascorechangednotification() const {
  return _internal_has_virtualdaascorechangednotification()
      ? *payload_.virtualdaascorechangednotification_
      : reinterpret_cast< ::protowire::VirtualDaaScoreChangedNotificationMessage&>(::protowire::_VirtualDaaScoreChangedNotificationMessage_default_instance_);
}
inline const ::protowire::VirtualDaaScoreChangedNotificationMessage& KaspadMessage::virtualdaascorechangednotification() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.virtualDaaScoreChangedNotification)
  return _internal_virtualdaascorechangednotification();
}
inline ::protowire::VirtualDaaScoreChangedNotificationMessage* KaspadMessage::unsafe_arena_release_virtualdaascorechangednotification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.virtualDaaScoreChangedNotification)
  if (_internal_has_virtualdaascorechangednotification()) {
    clear_has_payload();
    ::protowire::VirtualDaaScoreChangedNotificationMessage* temp = payload_.virtualdaascorechangednotification_;
    payload_.virtualdaascorechangednotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_virtualdaascorechangednotification(::protowire::VirtualDaaScoreChangedNotificationMessage* virtualdaascorechangednotification) {
  clear_payload();
  if (virtualdaascorechangednotification) {
    set_has_virtualdaascorechangednotification();
    payload_.virtualdaascorechangednotification_ = virtualdaascorechangednotification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.virtualDaaScoreChangedNotification)
}
inline ::protowire::VirtualDaaScoreChangedNotificationMessage* KaspadMessage::_internal_mutable_virtualdaascorechangednotification() {
  if (!_internal_has_virtualdaascorechangednotification()) {
    clear_payload();
    set_has_virtualdaascorechangednotification();
    payload_.virtualdaascorechangednotification_ = CreateMaybeMessage< ::protowire::VirtualDaaScoreChangedNotificationMessage >(GetArenaForAllocation());
  }
  return payload_.virtualdaascorechangednotification_;
}
inline ::protowire::VirtualDaaScoreChangedNotificationMessage* KaspadMessage::mutable_virtualdaascorechangednotification() {
  ::protowire::VirtualDaaScoreChangedNotificationMessage* _msg = _internal_mutable_virtualdaascorechangednotification();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.virtualDaaScoreChangedNotification)
  return _msg;
}

// .protowire.GetBalanceByAddressRequestMessage getBalanceByAddressRequest = 1077;
inline bool KaspadMessage::_internal_has_getbalancebyaddressrequest() const {
  return payload_case() == kGetBalanceByAddressRequest;
}
inline bool KaspadMessage::has_getbalancebyaddressrequest() const {
  return _internal_has_getbalancebyaddressrequest();
}
inline void KaspadMessage::set_has_getbalancebyaddressrequest() {
  _oneof_case_[0] = kGetBalanceByAddressRequest;
}
inline ::protowire::GetBalanceByAddressRequestMessage* KaspadMessage::release_getbalancebyaddressrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBalanceByAddressRequest)
  if (_internal_has_getbalancebyaddressrequest()) {
    clear_has_payload();
      ::protowire::GetBalanceByAddressRequestMessage* temp = payload_.getbalancebyaddressrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getbalancebyaddressrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBalanceByAddressRequestMessage& KaspadMessage::_internal_getbalancebyaddressrequest() const {
  return _internal_has_getbalancebyaddressrequest()
      ? *payload_.getbalancebyaddressrequest_
      : reinterpret_cast< ::protowire::GetBalanceByAddressRequestMessage&>(::protowire::_GetBalanceByAddressRequestMessage_default_instance_);
}
inline const ::protowire::GetBalanceByAddressRequestMessage& KaspadMessage::getbalancebyaddressrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBalanceByAddressRequest)
  return _internal_getbalancebyaddressrequest();
}
inline ::protowire::GetBalanceByAddressRequestMessage* KaspadMessage::unsafe_arena_release_getbalancebyaddressrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBalanceByAddressRequest)
  if (_internal_has_getbalancebyaddressrequest()) {
    clear_has_payload();
    ::protowire::GetBalanceByAddressRequestMessage* temp = payload_.getbalancebyaddressrequest_;
    payload_.getbalancebyaddressrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getbalancebyaddressrequest(::protowire::GetBalanceByAddressRequestMessage* getbalancebyaddressrequest) {
  clear_payload();
  if (getbalancebyaddressrequest) {
    set_has_getbalancebyaddressrequest();
    payload_.getbalancebyaddressrequest_ = getbalancebyaddressrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBalanceByAddressRequest)
}
inline ::protowire::GetBalanceByAddressRequestMessage* KaspadMessage::_internal_mutable_getbalancebyaddressrequest() {
  if (!_internal_has_getbalancebyaddressrequest()) {
    clear_payload();
    set_has_getbalancebyaddressrequest();
    payload_.getbalancebyaddressrequest_ = CreateMaybeMessage< ::protowire::GetBalanceByAddressRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getbalancebyaddressrequest_;
}
inline ::protowire::GetBalanceByAddressRequestMessage* KaspadMessage::mutable_getbalancebyaddressrequest() {
  ::protowire::GetBalanceByAddressRequestMessage* _msg = _internal_mutable_getbalancebyaddressrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBalanceByAddressRequest)
  return _msg;
}

// .protowire.GetBalanceByAddressResponseMessage getBalanceByAddressResponse = 1078;
inline bool KaspadMessage::_internal_has_getbalancebyaddressresponse() const {
  return payload_case() == kGetBalanceByAddressResponse;
}
inline bool KaspadMessage::has_getbalancebyaddressresponse() const {
  return _internal_has_getbalancebyaddressresponse();
}
inline void KaspadMessage::set_has_getbalancebyaddressresponse() {
  _oneof_case_[0] = kGetBalanceByAddressResponse;
}
inline ::protowire::GetBalanceByAddressResponseMessage* KaspadMessage::release_getbalancebyaddressresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBalanceByAddressResponse)
  if (_internal_has_getbalancebyaddressresponse()) {
    clear_has_payload();
      ::protowire::GetBalanceByAddressResponseMessage* temp = payload_.getbalancebyaddressresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getbalancebyaddressresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBalanceByAddressResponseMessage& KaspadMessage::_internal_getbalancebyaddressresponse() const {
  return _internal_has_getbalancebyaddressresponse()
      ? *payload_.getbalancebyaddressresponse_
      : reinterpret_cast< ::protowire::GetBalanceByAddressResponseMessage&>(::protowire::_GetBalanceByAddressResponseMessage_default_instance_);
}
inline const ::protowire::GetBalanceByAddressResponseMessage& KaspadMessage::getbalancebyaddressresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBalanceByAddressResponse)
  return _internal_getbalancebyaddressresponse();
}
inline ::protowire::GetBalanceByAddressResponseMessage* KaspadMessage::unsafe_arena_release_getbalancebyaddressresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBalanceByAddressResponse)
  if (_internal_has_getbalancebyaddressresponse()) {
    clear_has_payload();
    ::protowire::GetBalanceByAddressResponseMessage* temp = payload_.getbalancebyaddressresponse_;
    payload_.getbalancebyaddressresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getbalancebyaddressresponse(::protowire::GetBalanceByAddressResponseMessage* getbalancebyaddressresponse) {
  clear_payload();
  if (getbalancebyaddressresponse) {
    set_has_getbalancebyaddressresponse();
    payload_.getbalancebyaddressresponse_ = getbalancebyaddressresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBalanceByAddressResponse)
}
inline ::protowire::GetBalanceByAddressResponseMessage* KaspadMessage::_internal_mutable_getbalancebyaddressresponse() {
  if (!_internal_has_getbalancebyaddressresponse()) {
    clear_payload();
    set_has_getbalancebyaddressresponse();
    payload_.getbalancebyaddressresponse_ = CreateMaybeMessage< ::protowire::GetBalanceByAddressResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getbalancebyaddressresponse_;
}
inline ::protowire::GetBalanceByAddressResponseMessage* KaspadMessage::mutable_getbalancebyaddressresponse() {
  ::protowire::GetBalanceByAddressResponseMessage* _msg = _internal_mutable_getbalancebyaddressresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBalanceByAddressResponse)
  return _msg;
}

// .protowire.GetBalancesByAddressesRequestMessage getBalancesByAddressesRequest = 1079;
inline bool KaspadMessage::_internal_has_getbalancesbyaddressesrequest() const {
  return payload_case() == kGetBalancesByAddressesRequest;
}
inline bool KaspadMessage::has_getbalancesbyaddressesrequest() const {
  return _internal_has_getbalancesbyaddressesrequest();
}
inline void KaspadMessage::set_has_getbalancesbyaddressesrequest() {
  _oneof_case_[0] = kGetBalancesByAddressesRequest;
}
inline ::protowire::GetBalancesByAddressesRequestMessage* KaspadMessage::release_getbalancesbyaddressesrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBalancesByAddressesRequest)
  if (_internal_has_getbalancesbyaddressesrequest()) {
    clear_has_payload();
      ::protowire::GetBalancesByAddressesRequestMessage* temp = payload_.getbalancesbyaddressesrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getbalancesbyaddressesrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBalancesByAddressesRequestMessage& KaspadMessage::_internal_getbalancesbyaddressesrequest() const {
  return _internal_has_getbalancesbyaddressesrequest()
      ? *payload_.getbalancesbyaddressesrequest_
      : reinterpret_cast< ::protowire::GetBalancesByAddressesRequestMessage&>(::protowire::_GetBalancesByAddressesRequestMessage_default_instance_);
}
inline const ::protowire::GetBalancesByAddressesRequestMessage& KaspadMessage::getbalancesbyaddressesrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBalancesByAddressesRequest)
  return _internal_getbalancesbyaddressesrequest();
}
inline ::protowire::GetBalancesByAddressesRequestMessage* KaspadMessage::unsafe_arena_release_getbalancesbyaddressesrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBalancesByAddressesRequest)
  if (_internal_has_getbalancesbyaddressesrequest()) {
    clear_has_payload();
    ::protowire::GetBalancesByAddressesRequestMessage* temp = payload_.getbalancesbyaddressesrequest_;
    payload_.getbalancesbyaddressesrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getbalancesbyaddressesrequest(::protowire::GetBalancesByAddressesRequestMessage* getbalancesbyaddressesrequest) {
  clear_payload();
  if (getbalancesbyaddressesrequest) {
    set_has_getbalancesbyaddressesrequest();
    payload_.getbalancesbyaddressesrequest_ = getbalancesbyaddressesrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBalancesByAddressesRequest)
}
inline ::protowire::GetBalancesByAddressesRequestMessage* KaspadMessage::_internal_mutable_getbalancesbyaddressesrequest() {
  if (!_internal_has_getbalancesbyaddressesrequest()) {
    clear_payload();
    set_has_getbalancesbyaddressesrequest();
    payload_.getbalancesbyaddressesrequest_ = CreateMaybeMessage< ::protowire::GetBalancesByAddressesRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getbalancesbyaddressesrequest_;
}
inline ::protowire::GetBalancesByAddressesRequestMessage* KaspadMessage::mutable_getbalancesbyaddressesrequest() {
  ::protowire::GetBalancesByAddressesRequestMessage* _msg = _internal_mutable_getbalancesbyaddressesrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBalancesByAddressesRequest)
  return _msg;
}

// .protowire.GetBalancesByAddressesResponseMessage getBalancesByAddressesResponse = 1080;
inline bool KaspadMessage::_internal_has_getbalancesbyaddressesresponse() const {
  return payload_case() == kGetBalancesByAddressesResponse;
}
inline bool KaspadMessage::has_getbalancesbyaddressesresponse() const {
  return _internal_has_getbalancesbyaddressesresponse();
}
inline void KaspadMessage::set_has_getbalancesbyaddressesresponse() {
  _oneof_case_[0] = kGetBalancesByAddressesResponse;
}
inline ::protowire::GetBalancesByAddressesResponseMessage* KaspadMessage::release_getbalancesbyaddressesresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getBalancesByAddressesResponse)
  if (_internal_has_getbalancesbyaddressesresponse()) {
    clear_has_payload();
      ::protowire::GetBalancesByAddressesResponseMessage* temp = payload_.getbalancesbyaddressesresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getbalancesbyaddressesresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetBalancesByAddressesResponseMessage& KaspadMessage::_internal_getbalancesbyaddressesresponse() const {
  return _internal_has_getbalancesbyaddressesresponse()
      ? *payload_.getbalancesbyaddressesresponse_
      : reinterpret_cast< ::protowire::GetBalancesByAddressesResponseMessage&>(::protowire::_GetBalancesByAddressesResponseMessage_default_instance_);
}
inline const ::protowire::GetBalancesByAddressesResponseMessage& KaspadMessage::getbalancesbyaddressesresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getBalancesByAddressesResponse)
  return _internal_getbalancesbyaddressesresponse();
}
inline ::protowire::GetBalancesByAddressesResponseMessage* KaspadMessage::unsafe_arena_release_getbalancesbyaddressesresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getBalancesByAddressesResponse)
  if (_internal_has_getbalancesbyaddressesresponse()) {
    clear_has_payload();
    ::protowire::GetBalancesByAddressesResponseMessage* temp = payload_.getbalancesbyaddressesresponse_;
    payload_.getbalancesbyaddressesresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getbalancesbyaddressesresponse(::protowire::GetBalancesByAddressesResponseMessage* getbalancesbyaddressesresponse) {
  clear_payload();
  if (getbalancesbyaddressesresponse) {
    set_has_getbalancesbyaddressesresponse();
    payload_.getbalancesbyaddressesresponse_ = getbalancesbyaddressesresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getBalancesByAddressesResponse)
}
inline ::protowire::GetBalancesByAddressesResponseMessage* KaspadMessage::_internal_mutable_getbalancesbyaddressesresponse() {
  if (!_internal_has_getbalancesbyaddressesresponse()) {
    clear_payload();
    set_has_getbalancesbyaddressesresponse();
    payload_.getbalancesbyaddressesresponse_ = CreateMaybeMessage< ::protowire::GetBalancesByAddressesResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getbalancesbyaddressesresponse_;
}
inline ::protowire::GetBalancesByAddressesResponseMessage* KaspadMessage::mutable_getbalancesbyaddressesresponse() {
  ::protowire::GetBalancesByAddressesResponseMessage* _msg = _internal_mutable_getbalancesbyaddressesresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getBalancesByAddressesResponse)
  return _msg;
}

// .protowire.NotifyNewBlockTemplateRequestMessage notifyNewBlockTemplateRequest = 1081;
inline bool KaspadMessage::_internal_has_notifynewblocktemplaterequest() const {
  return payload_case() == kNotifyNewBlockTemplateRequest;
}
inline bool KaspadMessage::has_notifynewblocktemplaterequest() const {
  return _internal_has_notifynewblocktemplaterequest();
}
inline void KaspadMessage::set_has_notifynewblocktemplaterequest() {
  _oneof_case_[0] = kNotifyNewBlockTemplateRequest;
}
inline ::protowire::NotifyNewBlockTemplateRequestMessage* KaspadMessage::release_notifynewblocktemplaterequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyNewBlockTemplateRequest)
  if (_internal_has_notifynewblocktemplaterequest()) {
    clear_has_payload();
      ::protowire::NotifyNewBlockTemplateRequestMessage* temp = payload_.notifynewblocktemplaterequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifynewblocktemplaterequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyNewBlockTemplateRequestMessage& KaspadMessage::_internal_notifynewblocktemplaterequest() const {
  return _internal_has_notifynewblocktemplaterequest()
      ? *payload_.notifynewblocktemplaterequest_
      : reinterpret_cast< ::protowire::NotifyNewBlockTemplateRequestMessage&>(::protowire::_NotifyNewBlockTemplateRequestMessage_default_instance_);
}
inline const ::protowire::NotifyNewBlockTemplateRequestMessage& KaspadMessage::notifynewblocktemplaterequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyNewBlockTemplateRequest)
  return _internal_notifynewblocktemplaterequest();
}
inline ::protowire::NotifyNewBlockTemplateRequestMessage* KaspadMessage::unsafe_arena_release_notifynewblocktemplaterequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyNewBlockTemplateRequest)
  if (_internal_has_notifynewblocktemplaterequest()) {
    clear_has_payload();
    ::protowire::NotifyNewBlockTemplateRequestMessage* temp = payload_.notifynewblocktemplaterequest_;
    payload_.notifynewblocktemplaterequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifynewblocktemplaterequest(::protowire::NotifyNewBlockTemplateRequestMessage* notifynewblocktemplaterequest) {
  clear_payload();
  if (notifynewblocktemplaterequest) {
    set_has_notifynewblocktemplaterequest();
    payload_.notifynewblocktemplaterequest_ = notifynewblocktemplaterequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyNewBlockTemplateRequest)
}
inline ::protowire::NotifyNewBlockTemplateRequestMessage* KaspadMessage::_internal_mutable_notifynewblocktemplaterequest() {
  if (!_internal_has_notifynewblocktemplaterequest()) {
    clear_payload();
    set_has_notifynewblocktemplaterequest();
    payload_.notifynewblocktemplaterequest_ = CreateMaybeMessage< ::protowire::NotifyNewBlockTemplateRequestMessage >(GetArenaForAllocation());
  }
  return payload_.notifynewblocktemplaterequest_;
}
inline ::protowire::NotifyNewBlockTemplateRequestMessage* KaspadMessage::mutable_notifynewblocktemplaterequest() {
  ::protowire::NotifyNewBlockTemplateRequestMessage* _msg = _internal_mutable_notifynewblocktemplaterequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyNewBlockTemplateRequest)
  return _msg;
}

// .protowire.NotifyNewBlockTemplateResponseMessage notifyNewBlockTemplateResponse = 1082;
inline bool KaspadMessage::_internal_has_notifynewblocktemplateresponse() const {
  return payload_case() == kNotifyNewBlockTemplateResponse;
}
inline bool KaspadMessage::has_notifynewblocktemplateresponse() const {
  return _internal_has_notifynewblocktemplateresponse();
}
inline void KaspadMessage::set_has_notifynewblocktemplateresponse() {
  _oneof_case_[0] = kNotifyNewBlockTemplateResponse;
}
inline ::protowire::NotifyNewBlockTemplateResponseMessage* KaspadMessage::release_notifynewblocktemplateresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.notifyNewBlockTemplateResponse)
  if (_internal_has_notifynewblocktemplateresponse()) {
    clear_has_payload();
      ::protowire::NotifyNewBlockTemplateResponseMessage* temp = payload_.notifynewblocktemplateresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifynewblocktemplateresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NotifyNewBlockTemplateResponseMessage& KaspadMessage::_internal_notifynewblocktemplateresponse() const {
  return _internal_has_notifynewblocktemplateresponse()
      ? *payload_.notifynewblocktemplateresponse_
      : reinterpret_cast< ::protowire::NotifyNewBlockTemplateResponseMessage&>(::protowire::_NotifyNewBlockTemplateResponseMessage_default_instance_);
}
inline const ::protowire::NotifyNewBlockTemplateResponseMessage& KaspadMessage::notifynewblocktemplateresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.notifyNewBlockTemplateResponse)
  return _internal_notifynewblocktemplateresponse();
}
inline ::protowire::NotifyNewBlockTemplateResponseMessage* KaspadMessage::unsafe_arena_release_notifynewblocktemplateresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.notifyNewBlockTemplateResponse)
  if (_internal_has_notifynewblocktemplateresponse()) {
    clear_has_payload();
    ::protowire::NotifyNewBlockTemplateResponseMessage* temp = payload_.notifynewblocktemplateresponse_;
    payload_.notifynewblocktemplateresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_notifynewblocktemplateresponse(::protowire::NotifyNewBlockTemplateResponseMessage* notifynewblocktemplateresponse) {
  clear_payload();
  if (notifynewblocktemplateresponse) {
    set_has_notifynewblocktemplateresponse();
    payload_.notifynewblocktemplateresponse_ = notifynewblocktemplateresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.notifyNewBlockTemplateResponse)
}
inline ::protowire::NotifyNewBlockTemplateResponseMessage* KaspadMessage::_internal_mutable_notifynewblocktemplateresponse() {
  if (!_internal_has_notifynewblocktemplateresponse()) {
    clear_payload();
    set_has_notifynewblocktemplateresponse();
    payload_.notifynewblocktemplateresponse_ = CreateMaybeMessage< ::protowire::NotifyNewBlockTemplateResponseMessage >(GetArenaForAllocation());
  }
  return payload_.notifynewblocktemplateresponse_;
}
inline ::protowire::NotifyNewBlockTemplateResponseMessage* KaspadMessage::mutable_notifynewblocktemplateresponse() {
  ::protowire::NotifyNewBlockTemplateResponseMessage* _msg = _internal_mutable_notifynewblocktemplateresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.notifyNewBlockTemplateResponse)
  return _msg;
}

// .protowire.NewBlockTemplateNotificationMessage newBlockTemplateNotification = 1083;
inline bool KaspadMessage::_internal_has_newblocktemplatenotification() const {
  return payload_case() == kNewBlockTemplateNotification;
}
inline bool KaspadMessage::has_newblocktemplatenotification() const {
  return _internal_has_newblocktemplatenotification();
}
inline void KaspadMessage::set_has_newblocktemplatenotification() {
  _oneof_case_[0] = kNewBlockTemplateNotification;
}
inline ::protowire::NewBlockTemplateNotificationMessage* KaspadMessage::release_newblocktemplatenotification() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.newBlockTemplateNotification)
  if (_internal_has_newblocktemplatenotification()) {
    clear_has_payload();
      ::protowire::NewBlockTemplateNotificationMessage* temp = payload_.newblocktemplatenotification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.newblocktemplatenotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::NewBlockTemplateNotificationMessage& KaspadMessage::_internal_newblocktemplatenotification() const {
  return _internal_has_newblocktemplatenotification()
      ? *payload_.newblocktemplatenotification_
      : reinterpret_cast< ::protowire::NewBlockTemplateNotificationMessage&>(::protowire::_NewBlockTemplateNotificationMessage_default_instance_);
}
inline const ::protowire::NewBlockTemplateNotificationMessage& KaspadMessage::newblocktemplatenotification() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.newBlockTemplateNotification)
  return _internal_newblocktemplatenotification();
}
inline ::protowire::NewBlockTemplateNotificationMessage* KaspadMessage::unsafe_arena_release_newblocktemplatenotification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.newBlockTemplateNotification)
  if (_internal_has_newblocktemplatenotification()) {
    clear_has_payload();
    ::protowire::NewBlockTemplateNotificationMessage* temp = payload_.newblocktemplatenotification_;
    payload_.newblocktemplatenotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_newblocktemplatenotification(::protowire::NewBlockTemplateNotificationMessage* newblocktemplatenotification) {
  clear_payload();
  if (newblocktemplatenotification) {
    set_has_newblocktemplatenotification();
    payload_.newblocktemplatenotification_ = newblocktemplatenotification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.newBlockTemplateNotification)
}
inline ::protowire::NewBlockTemplateNotificationMessage* KaspadMessage::_internal_mutable_newblocktemplatenotification() {
  if (!_internal_has_newblocktemplatenotification()) {
    clear_payload();
    set_has_newblocktemplatenotification();
    payload_.newblocktemplatenotification_ = CreateMaybeMessage< ::protowire::NewBlockTemplateNotificationMessage >(GetArenaForAllocation());
  }
  return payload_.newblocktemplatenotification_;
}
inline ::protowire::NewBlockTemplateNotificationMessage* KaspadMessage::mutable_newblocktemplatenotification() {
  ::protowire::NewBlockTemplateNotificationMessage* _msg = _internal_mutable_newblocktemplatenotification();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.newBlockTemplateNotification)
  return _msg;
}

// .protowire.GetMempoolEntriesByAddressesRequestMessage getMempoolEntriesByAddressesRequest = 1084;
inline bool KaspadMessage::_internal_has_getmempoolentriesbyaddressesrequest() const {
  return payload_case() == kGetMempoolEntriesByAddressesRequest;
}
inline bool KaspadMessage::has_getmempoolentriesbyaddressesrequest() const {
  return _internal_has_getmempoolentriesbyaddressesrequest();
}
inline void KaspadMessage::set_has_getmempoolentriesbyaddressesrequest() {
  _oneof_case_[0] = kGetMempoolEntriesByAddressesRequest;
}
inline ::protowire::GetMempoolEntriesByAddressesRequestMessage* KaspadMessage::release_getmempoolentriesbyaddressesrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getMempoolEntriesByAddressesRequest)
  if (_internal_has_getmempoolentriesbyaddressesrequest()) {
    clear_has_payload();
      ::protowire::GetMempoolEntriesByAddressesRequestMessage* temp = payload_.getmempoolentriesbyaddressesrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getmempoolentriesbyaddressesrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetMempoolEntriesByAddressesRequestMessage& KaspadMessage::_internal_getmempoolentriesbyaddressesrequest() const {
  return _internal_has_getmempoolentriesbyaddressesrequest()
      ? *payload_.getmempoolentriesbyaddressesrequest_
      : reinterpret_cast< ::protowire::GetMempoolEntriesByAddressesRequestMessage&>(::protowire::_GetMempoolEntriesByAddressesRequestMessage_default_instance_);
}
inline const ::protowire::GetMempoolEntriesByAddressesRequestMessage& KaspadMessage::getmempoolentriesbyaddressesrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getMempoolEntriesByAddressesRequest)
  return _internal_getmempoolentriesbyaddressesrequest();
}
inline ::protowire::GetMempoolEntriesByAddressesRequestMessage* KaspadMessage::unsafe_arena_release_getmempoolentriesbyaddressesrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getMempoolEntriesByAddressesRequest)
  if (_internal_has_getmempoolentriesbyaddressesrequest()) {
    clear_has_payload();
    ::protowire::GetMempoolEntriesByAddressesRequestMessage* temp = payload_.getmempoolentriesbyaddressesrequest_;
    payload_.getmempoolentriesbyaddressesrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getmempoolentriesbyaddressesrequest(::protowire::GetMempoolEntriesByAddressesRequestMessage* getmempoolentriesbyaddressesrequest) {
  clear_payload();
  if (getmempoolentriesbyaddressesrequest) {
    set_has_getmempoolentriesbyaddressesrequest();
    payload_.getmempoolentriesbyaddressesrequest_ = getmempoolentriesbyaddressesrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getMempoolEntriesByAddressesRequest)
}
inline ::protowire::GetMempoolEntriesByAddressesRequestMessage* KaspadMessage::_internal_mutable_getmempoolentriesbyaddressesrequest() {
  if (!_internal_has_getmempoolentriesbyaddressesrequest()) {
    clear_payload();
    set_has_getmempoolentriesbyaddressesrequest();
    payload_.getmempoolentriesbyaddressesrequest_ = CreateMaybeMessage< ::protowire::GetMempoolEntriesByAddressesRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getmempoolentriesbyaddressesrequest_;
}
inline ::protowire::GetMempoolEntriesByAddressesRequestMessage* KaspadMessage::mutable_getmempoolentriesbyaddressesrequest() {
  ::protowire::GetMempoolEntriesByAddressesRequestMessage* _msg = _internal_mutable_getmempoolentriesbyaddressesrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getMempoolEntriesByAddressesRequest)
  return _msg;
}

// .protowire.GetMempoolEntriesByAddressesResponseMessage getMempoolEntriesByAddressesResponse = 1085;
inline bool KaspadMessage::_internal_has_getmempoolentriesbyaddressesresponse() const {
  return payload_case() == kGetMempoolEntriesByAddressesResponse;
}
inline bool KaspadMessage::has_getmempoolentriesbyaddressesresponse() const {
  return _internal_has_getmempoolentriesbyaddressesresponse();
}
inline void KaspadMessage::set_has_getmempoolentriesbyaddressesresponse() {
  _oneof_case_[0] = kGetMempoolEntriesByAddressesResponse;
}
inline ::protowire::GetMempoolEntriesByAddressesResponseMessage* KaspadMessage::release_getmempoolentriesbyaddressesresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getMempoolEntriesByAddressesResponse)
  if (_internal_has_getmempoolentriesbyaddressesresponse()) {
    clear_has_payload();
      ::protowire::GetMempoolEntriesByAddressesResponseMessage* temp = payload_.getmempoolentriesbyaddressesresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getmempoolentriesbyaddressesresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetMempoolEntriesByAddressesResponseMessage& KaspadMessage::_internal_getmempoolentriesbyaddressesresponse() const {
  return _internal_has_getmempoolentriesbyaddressesresponse()
      ? *payload_.getmempoolentriesbyaddressesresponse_
      : reinterpret_cast< ::protowire::GetMempoolEntriesByAddressesResponseMessage&>(::protowire::_GetMempoolEntriesByAddressesResponseMessage_default_instance_);
}
inline const ::protowire::GetMempoolEntriesByAddressesResponseMessage& KaspadMessage::getmempoolentriesbyaddressesresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getMempoolEntriesByAddressesResponse)
  return _internal_getmempoolentriesbyaddressesresponse();
}
inline ::protowire::GetMempoolEntriesByAddressesResponseMessage* KaspadMessage::unsafe_arena_release_getmempoolentriesbyaddressesresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getMempoolEntriesByAddressesResponse)
  if (_internal_has_getmempoolentriesbyaddressesresponse()) {
    clear_has_payload();
    ::protowire::GetMempoolEntriesByAddressesResponseMessage* temp = payload_.getmempoolentriesbyaddressesresponse_;
    payload_.getmempoolentriesbyaddressesresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getmempoolentriesbyaddressesresponse(::protowire::GetMempoolEntriesByAddressesResponseMessage* getmempoolentriesbyaddressesresponse) {
  clear_payload();
  if (getmempoolentriesbyaddressesresponse) {
    set_has_getmempoolentriesbyaddressesresponse();
    payload_.getmempoolentriesbyaddressesresponse_ = getmempoolentriesbyaddressesresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getMempoolEntriesByAddressesResponse)
}
inline ::protowire::GetMempoolEntriesByAddressesResponseMessage* KaspadMessage::_internal_mutable_getmempoolentriesbyaddressesresponse() {
  if (!_internal_has_getmempoolentriesbyaddressesresponse()) {
    clear_payload();
    set_has_getmempoolentriesbyaddressesresponse();
    payload_.getmempoolentriesbyaddressesresponse_ = CreateMaybeMessage< ::protowire::GetMempoolEntriesByAddressesResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getmempoolentriesbyaddressesresponse_;
}
inline ::protowire::GetMempoolEntriesByAddressesResponseMessage* KaspadMessage::mutable_getmempoolentriesbyaddressesresponse() {
  ::protowire::GetMempoolEntriesByAddressesResponseMessage* _msg = _internal_mutable_getmempoolentriesbyaddressesresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getMempoolEntriesByAddressesResponse)
  return _msg;
}

// .protowire.GetCoinSupplyRequestMessage getCoinSupplyRequest = 1086;
inline bool KaspadMessage::_internal_has_getcoinsupplyrequest() const {
  return payload_case() == kGetCoinSupplyRequest;
}
inline bool KaspadMessage::has_getcoinsupplyrequest() const {
  return _internal_has_getcoinsupplyrequest();
}
inline void KaspadMessage::set_has_getcoinsupplyrequest() {
  _oneof_case_[0] = kGetCoinSupplyRequest;
}
inline ::protowire::GetCoinSupplyRequestMessage* KaspadMessage::release_getcoinsupplyrequest() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getCoinSupplyRequest)
  if (_internal_has_getcoinsupplyrequest()) {
    clear_has_payload();
      ::protowire::GetCoinSupplyRequestMessage* temp = payload_.getcoinsupplyrequest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getcoinsupplyrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetCoinSupplyRequestMessage& KaspadMessage::_internal_getcoinsupplyrequest() const {
  return _internal_has_getcoinsupplyrequest()
      ? *payload_.getcoinsupplyrequest_
      : reinterpret_cast< ::protowire::GetCoinSupplyRequestMessage&>(::protowire::_GetCoinSupplyRequestMessage_default_instance_);
}
inline const ::protowire::GetCoinSupplyRequestMessage& KaspadMessage::getcoinsupplyrequest() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getCoinSupplyRequest)
  return _internal_getcoinsupplyrequest();
}
inline ::protowire::GetCoinSupplyRequestMessage* KaspadMessage::unsafe_arena_release_getcoinsupplyrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getCoinSupplyRequest)
  if (_internal_has_getcoinsupplyrequest()) {
    clear_has_payload();
    ::protowire::GetCoinSupplyRequestMessage* temp = payload_.getcoinsupplyrequest_;
    payload_.getcoinsupplyrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getcoinsupplyrequest(::protowire::GetCoinSupplyRequestMessage* getcoinsupplyrequest) {
  clear_payload();
  if (getcoinsupplyrequest) {
    set_has_getcoinsupplyrequest();
    payload_.getcoinsupplyrequest_ = getcoinsupplyrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getCoinSupplyRequest)
}
inline ::protowire::GetCoinSupplyRequestMessage* KaspadMessage::_internal_mutable_getcoinsupplyrequest() {
  if (!_internal_has_getcoinsupplyrequest()) {
    clear_payload();
    set_has_getcoinsupplyrequest();
    payload_.getcoinsupplyrequest_ = CreateMaybeMessage< ::protowire::GetCoinSupplyRequestMessage >(GetArenaForAllocation());
  }
  return payload_.getcoinsupplyrequest_;
}
inline ::protowire::GetCoinSupplyRequestMessage* KaspadMessage::mutable_getcoinsupplyrequest() {
  ::protowire::GetCoinSupplyRequestMessage* _msg = _internal_mutable_getcoinsupplyrequest();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getCoinSupplyRequest)
  return _msg;
}

// .protowire.GetCoinSupplyResponseMessage getCoinSupplyResponse = 1087;
inline bool KaspadMessage::_internal_has_getcoinsupplyresponse() const {
  return payload_case() == kGetCoinSupplyResponse;
}
inline bool KaspadMessage::has_getcoinsupplyresponse() const {
  return _internal_has_getcoinsupplyresponse();
}
inline void KaspadMessage::set_has_getcoinsupplyresponse() {
  _oneof_case_[0] = kGetCoinSupplyResponse;
}
inline ::protowire::GetCoinSupplyResponseMessage* KaspadMessage::release_getcoinsupplyresponse() {
  // @@protoc_insertion_point(field_release:protowire.KaspadMessage.getCoinSupplyResponse)
  if (_internal_has_getcoinsupplyresponse()) {
    clear_has_payload();
      ::protowire::GetCoinSupplyResponseMessage* temp = payload_.getcoinsupplyresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.getcoinsupplyresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protowire::GetCoinSupplyResponseMessage& KaspadMessage::_internal_getcoinsupplyresponse() const {
  return _internal_has_getcoinsupplyresponse()
      ? *payload_.getcoinsupplyresponse_
      : reinterpret_cast< ::protowire::GetCoinSupplyResponseMessage&>(::protowire::_GetCoinSupplyResponseMessage_default_instance_);
}
inline const ::protowire::GetCoinSupplyResponseMessage& KaspadMessage::getcoinsupplyresponse() const {
  // @@protoc_insertion_point(field_get:protowire.KaspadMessage.getCoinSupplyResponse)
  return _internal_getcoinsupplyresponse();
}
inline ::protowire::GetCoinSupplyResponseMessage* KaspadMessage::unsafe_arena_release_getcoinsupplyresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protowire.KaspadMessage.getCoinSupplyResponse)
  if (_internal_has_getcoinsupplyresponse()) {
    clear_has_payload();
    ::protowire::GetCoinSupplyResponseMessage* temp = payload_.getcoinsupplyresponse_;
    payload_.getcoinsupplyresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KaspadMessage::unsafe_arena_set_allocated_getcoinsupplyresponse(::protowire::GetCoinSupplyResponseMessage* getcoinsupplyresponse) {
  clear_payload();
  if (getcoinsupplyresponse) {
    set_has_getcoinsupplyresponse();
    payload_.getcoinsupplyresponse_ = getcoinsupplyresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protowire.KaspadMessage.getCoinSupplyResponse)
}
inline ::protowire::GetCoinSupplyResponseMessage* KaspadMessage::_internal_mutable_getcoinsupplyresponse() {
  if (!_internal_has_getcoinsupplyresponse()) {
    clear_payload();
    set_has_getcoinsupplyresponse();
    payload_.getcoinsupplyresponse_ = CreateMaybeMessage< ::protowire::GetCoinSupplyResponseMessage >(GetArenaForAllocation());
  }
  return payload_.getcoinsupplyresponse_;
}
inline ::protowire::GetCoinSupplyResponseMessage* KaspadMessage::mutable_getcoinsupplyresponse() {
  ::protowire::GetCoinSupplyResponseMessage* _msg = _internal_mutable_getcoinsupplyresponse();
  // @@protoc_insertion_point(field_mutable:protowire.KaspadMessage.getCoinSupplyResponse)
  return _msg;
}

inline bool KaspadMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void KaspadMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline KaspadMessage::PayloadCase KaspadMessage::payload_case() const {
  return KaspadMessage::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protowire

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
