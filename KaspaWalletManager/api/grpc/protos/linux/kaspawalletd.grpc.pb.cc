// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kaspawalletd.proto

#include "kaspawalletd.pb.h"
#include "kaspawalletd.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace kaspawalletd {

static const char* kaspawalletd_method_names[] = {
  "/kaspawalletd.kaspawalletd/GetBalance",
  "/kaspawalletd.kaspawalletd/GetExternalSpendableUTXOs",
  "/kaspawalletd.kaspawalletd/CreateUnsignedTransactions",
  "/kaspawalletd.kaspawalletd/ShowAddresses",
  "/kaspawalletd.kaspawalletd/NewAddress",
  "/kaspawalletd.kaspawalletd/Shutdown",
  "/kaspawalletd.kaspawalletd/Broadcast",
  "/kaspawalletd.kaspawalletd/Send",
  "/kaspawalletd.kaspawalletd/Sign",
  "/kaspawalletd.kaspawalletd/CheckIfAddressesAreValid",
  "/kaspawalletd.kaspawalletd/CheckIfAddressIsValid",
};

std::unique_ptr< kaspawalletd::Stub> kaspawalletd::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< kaspawalletd::Stub> stub(new kaspawalletd::Stub(channel, options));
  return stub;
}

kaspawalletd::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetBalance_(kaspawalletd_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExternalSpendableUTXOs_(kaspawalletd_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateUnsignedTransactions_(kaspawalletd_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowAddresses_(kaspawalletd_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewAddress_(kaspawalletd_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Shutdown_(kaspawalletd_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Broadcast_(kaspawalletd_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Send_(kaspawalletd_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Sign_(kaspawalletd_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckIfAddressesAreValid_(kaspawalletd_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckIfAddressIsValid_(kaspawalletd_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status kaspawalletd::Stub::GetBalance(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest& request, ::kaspawalletd::GetBalanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kaspawalletd::GetBalanceRequest, ::kaspawalletd::GetBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBalance_, context, request, response);
}

void kaspawalletd::Stub::async::GetBalance(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest* request, ::kaspawalletd::GetBalanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kaspawalletd::GetBalanceRequest, ::kaspawalletd::GetBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBalance_, context, request, response, std::move(f));
}

void kaspawalletd::Stub::async::GetBalance(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest* request, ::kaspawalletd::GetBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBalance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetBalanceResponse>* kaspawalletd::Stub::PrepareAsyncGetBalanceRaw(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kaspawalletd::GetBalanceResponse, ::kaspawalletd::GetBalanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBalance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetBalanceResponse>* kaspawalletd::Stub::AsyncGetBalanceRaw(::grpc::ClientContext* context, const ::kaspawalletd::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBalanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status kaspawalletd::Stub::GetExternalSpendableUTXOs(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest& request, ::kaspawalletd::GetExternalSpendableUTXOsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kaspawalletd::GetExternalSpendableUTXOsRequest, ::kaspawalletd::GetExternalSpendableUTXOsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExternalSpendableUTXOs_, context, request, response);
}

void kaspawalletd::Stub::async::GetExternalSpendableUTXOs(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* request, ::kaspawalletd::GetExternalSpendableUTXOsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kaspawalletd::GetExternalSpendableUTXOsRequest, ::kaspawalletd::GetExternalSpendableUTXOsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExternalSpendableUTXOs_, context, request, response, std::move(f));
}

void kaspawalletd::Stub::async::GetExternalSpendableUTXOs(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* request, ::kaspawalletd::GetExternalSpendableUTXOsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExternalSpendableUTXOs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetExternalSpendableUTXOsResponse>* kaspawalletd::Stub::PrepareAsyncGetExternalSpendableUTXOsRaw(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kaspawalletd::GetExternalSpendableUTXOsResponse, ::kaspawalletd::GetExternalSpendableUTXOsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExternalSpendableUTXOs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::GetExternalSpendableUTXOsResponse>* kaspawalletd::Stub::AsyncGetExternalSpendableUTXOsRaw(::grpc::ClientContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExternalSpendableUTXOsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status kaspawalletd::Stub::CreateUnsignedTransactions(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest& request, ::kaspawalletd::CreateUnsignedTransactionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kaspawalletd::CreateUnsignedTransactionsRequest, ::kaspawalletd::CreateUnsignedTransactionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateUnsignedTransactions_, context, request, response);
}

void kaspawalletd::Stub::async::CreateUnsignedTransactions(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest* request, ::kaspawalletd::CreateUnsignedTransactionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kaspawalletd::CreateUnsignedTransactionsRequest, ::kaspawalletd::CreateUnsignedTransactionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUnsignedTransactions_, context, request, response, std::move(f));
}

void kaspawalletd::Stub::async::CreateUnsignedTransactions(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest* request, ::kaspawalletd::CreateUnsignedTransactionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUnsignedTransactions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::CreateUnsignedTransactionsResponse>* kaspawalletd::Stub::PrepareAsyncCreateUnsignedTransactionsRaw(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kaspawalletd::CreateUnsignedTransactionsResponse, ::kaspawalletd::CreateUnsignedTransactionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateUnsignedTransactions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::CreateUnsignedTransactionsResponse>* kaspawalletd::Stub::AsyncCreateUnsignedTransactionsRaw(::grpc::ClientContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateUnsignedTransactionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status kaspawalletd::Stub::ShowAddresses(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest& request, ::kaspawalletd::ShowAddressesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kaspawalletd::ShowAddressesRequest, ::kaspawalletd::ShowAddressesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShowAddresses_, context, request, response);
}

void kaspawalletd::Stub::async::ShowAddresses(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest* request, ::kaspawalletd::ShowAddressesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kaspawalletd::ShowAddressesRequest, ::kaspawalletd::ShowAddressesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShowAddresses_, context, request, response, std::move(f));
}

void kaspawalletd::Stub::async::ShowAddresses(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest* request, ::kaspawalletd::ShowAddressesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShowAddresses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShowAddressesResponse>* kaspawalletd::Stub::PrepareAsyncShowAddressesRaw(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kaspawalletd::ShowAddressesResponse, ::kaspawalletd::ShowAddressesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShowAddresses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShowAddressesResponse>* kaspawalletd::Stub::AsyncShowAddressesRaw(::grpc::ClientContext* context, const ::kaspawalletd::ShowAddressesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShowAddressesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status kaspawalletd::Stub::NewAddress(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest& request, ::kaspawalletd::NewAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kaspawalletd::NewAddressRequest, ::kaspawalletd::NewAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewAddress_, context, request, response);
}

void kaspawalletd::Stub::async::NewAddress(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest* request, ::kaspawalletd::NewAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kaspawalletd::NewAddressRequest, ::kaspawalletd::NewAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewAddress_, context, request, response, std::move(f));
}

void kaspawalletd::Stub::async::NewAddress(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest* request, ::kaspawalletd::NewAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::NewAddressResponse>* kaspawalletd::Stub::PrepareAsyncNewAddressRaw(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kaspawalletd::NewAddressResponse, ::kaspawalletd::NewAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::NewAddressResponse>* kaspawalletd::Stub::AsyncNewAddressRaw(::grpc::ClientContext* context, const ::kaspawalletd::NewAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status kaspawalletd::Stub::Shutdown(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest& request, ::kaspawalletd::ShutdownResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kaspawalletd::ShutdownRequest, ::kaspawalletd::ShutdownResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Shutdown_, context, request, response);
}

void kaspawalletd::Stub::async::Shutdown(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest* request, ::kaspawalletd::ShutdownResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kaspawalletd::ShutdownRequest, ::kaspawalletd::ShutdownResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

void kaspawalletd::Stub::async::Shutdown(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest* request, ::kaspawalletd::ShutdownResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShutdownResponse>* kaspawalletd::Stub::PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kaspawalletd::ShutdownResponse, ::kaspawalletd::ShutdownRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Shutdown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::ShutdownResponse>* kaspawalletd::Stub::AsyncShutdownRaw(::grpc::ClientContext* context, const ::kaspawalletd::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutdownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status kaspawalletd::Stub::Broadcast(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest& request, ::kaspawalletd::BroadcastResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kaspawalletd::BroadcastRequest, ::kaspawalletd::BroadcastResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Broadcast_, context, request, response);
}

void kaspawalletd::Stub::async::Broadcast(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest* request, ::kaspawalletd::BroadcastResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kaspawalletd::BroadcastRequest, ::kaspawalletd::BroadcastResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Broadcast_, context, request, response, std::move(f));
}

void kaspawalletd::Stub::async::Broadcast(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest* request, ::kaspawalletd::BroadcastResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Broadcast_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::BroadcastResponse>* kaspawalletd::Stub::PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kaspawalletd::BroadcastResponse, ::kaspawalletd::BroadcastRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Broadcast_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::BroadcastResponse>* kaspawalletd::Stub::AsyncBroadcastRaw(::grpc::ClientContext* context, const ::kaspawalletd::BroadcastRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBroadcastRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status kaspawalletd::Stub::Send(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest& request, ::kaspawalletd::SendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kaspawalletd::SendRequest, ::kaspawalletd::SendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Send_, context, request, response);
}

void kaspawalletd::Stub::async::Send(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest* request, ::kaspawalletd::SendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kaspawalletd::SendRequest, ::kaspawalletd::SendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_, context, request, response, std::move(f));
}

void kaspawalletd::Stub::async::Send(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest* request, ::kaspawalletd::SendResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::SendResponse>* kaspawalletd::Stub::PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kaspawalletd::SendResponse, ::kaspawalletd::SendRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Send_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::SendResponse>* kaspawalletd::Stub::AsyncSendRaw(::grpc::ClientContext* context, const ::kaspawalletd::SendRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status kaspawalletd::Stub::Sign(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest& request, ::kaspawalletd::SignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kaspawalletd::SignRequest, ::kaspawalletd::SignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Sign_, context, request, response);
}

void kaspawalletd::Stub::async::Sign(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest* request, ::kaspawalletd::SignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kaspawalletd::SignRequest, ::kaspawalletd::SignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sign_, context, request, response, std::move(f));
}

void kaspawalletd::Stub::async::Sign(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest* request, ::kaspawalletd::SignResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sign_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::SignResponse>* kaspawalletd::Stub::PrepareAsyncSignRaw(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kaspawalletd::SignResponse, ::kaspawalletd::SignRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Sign_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::SignResponse>* kaspawalletd::Stub::AsyncSignRaw(::grpc::ClientContext* context, const ::kaspawalletd::SignRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status kaspawalletd::Stub::CheckIfAddressesAreValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest& request, ::kaspawalletd::CheckIfAddressesAreValidResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kaspawalletd::CheckIfAddressesAreValidRequest, ::kaspawalletd::CheckIfAddressesAreValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckIfAddressesAreValid_, context, request, response);
}

void kaspawalletd::Stub::async::CheckIfAddressesAreValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest* request, ::kaspawalletd::CheckIfAddressesAreValidResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kaspawalletd::CheckIfAddressesAreValidRequest, ::kaspawalletd::CheckIfAddressesAreValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckIfAddressesAreValid_, context, request, response, std::move(f));
}

void kaspawalletd::Stub::async::CheckIfAddressesAreValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest* request, ::kaspawalletd::CheckIfAddressesAreValidResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckIfAddressesAreValid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressesAreValidResponse>* kaspawalletd::Stub::PrepareAsyncCheckIfAddressesAreValidRaw(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kaspawalletd::CheckIfAddressesAreValidResponse, ::kaspawalletd::CheckIfAddressesAreValidRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckIfAddressesAreValid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressesAreValidResponse>* kaspawalletd::Stub::AsyncCheckIfAddressesAreValidRaw(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckIfAddressesAreValidRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status kaspawalletd::Stub::CheckIfAddressIsValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest& request, ::kaspawalletd::CheckIfAddressIsValidResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kaspawalletd::CheckIfAddressIsValidRequest, ::kaspawalletd::CheckIfAddressIsValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckIfAddressIsValid_, context, request, response);
}

void kaspawalletd::Stub::async::CheckIfAddressIsValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest* request, ::kaspawalletd::CheckIfAddressIsValidResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kaspawalletd::CheckIfAddressIsValidRequest, ::kaspawalletd::CheckIfAddressIsValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckIfAddressIsValid_, context, request, response, std::move(f));
}

void kaspawalletd::Stub::async::CheckIfAddressIsValid(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest* request, ::kaspawalletd::CheckIfAddressIsValidResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckIfAddressIsValid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressIsValidResponse>* kaspawalletd::Stub::PrepareAsyncCheckIfAddressIsValidRaw(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kaspawalletd::CheckIfAddressIsValidResponse, ::kaspawalletd::CheckIfAddressIsValidRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckIfAddressIsValid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kaspawalletd::CheckIfAddressIsValidResponse>* kaspawalletd::Stub::AsyncCheckIfAddressIsValidRaw(::grpc::ClientContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckIfAddressIsValidRaw(context, request, cq);
  result->StartCall();
  return result;
}

kaspawalletd::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      kaspawalletd_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< kaspawalletd::Service, ::kaspawalletd::GetBalanceRequest, ::kaspawalletd::GetBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](kaspawalletd::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaspawalletd::GetBalanceRequest* req,
             ::kaspawalletd::GetBalanceResponse* resp) {
               return service->GetBalance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      kaspawalletd_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< kaspawalletd::Service, ::kaspawalletd::GetExternalSpendableUTXOsRequest, ::kaspawalletd::GetExternalSpendableUTXOsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](kaspawalletd::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaspawalletd::GetExternalSpendableUTXOsRequest* req,
             ::kaspawalletd::GetExternalSpendableUTXOsResponse* resp) {
               return service->GetExternalSpendableUTXOs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      kaspawalletd_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< kaspawalletd::Service, ::kaspawalletd::CreateUnsignedTransactionsRequest, ::kaspawalletd::CreateUnsignedTransactionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](kaspawalletd::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaspawalletd::CreateUnsignedTransactionsRequest* req,
             ::kaspawalletd::CreateUnsignedTransactionsResponse* resp) {
               return service->CreateUnsignedTransactions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      kaspawalletd_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< kaspawalletd::Service, ::kaspawalletd::ShowAddressesRequest, ::kaspawalletd::ShowAddressesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](kaspawalletd::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaspawalletd::ShowAddressesRequest* req,
             ::kaspawalletd::ShowAddressesResponse* resp) {
               return service->ShowAddresses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      kaspawalletd_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< kaspawalletd::Service, ::kaspawalletd::NewAddressRequest, ::kaspawalletd::NewAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](kaspawalletd::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaspawalletd::NewAddressRequest* req,
             ::kaspawalletd::NewAddressResponse* resp) {
               return service->NewAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      kaspawalletd_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< kaspawalletd::Service, ::kaspawalletd::ShutdownRequest, ::kaspawalletd::ShutdownResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](kaspawalletd::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaspawalletd::ShutdownRequest* req,
             ::kaspawalletd::ShutdownResponse* resp) {
               return service->Shutdown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      kaspawalletd_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< kaspawalletd::Service, ::kaspawalletd::BroadcastRequest, ::kaspawalletd::BroadcastResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](kaspawalletd::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaspawalletd::BroadcastRequest* req,
             ::kaspawalletd::BroadcastResponse* resp) {
               return service->Broadcast(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      kaspawalletd_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< kaspawalletd::Service, ::kaspawalletd::SendRequest, ::kaspawalletd::SendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](kaspawalletd::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaspawalletd::SendRequest* req,
             ::kaspawalletd::SendResponse* resp) {
               return service->Send(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      kaspawalletd_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< kaspawalletd::Service, ::kaspawalletd::SignRequest, ::kaspawalletd::SignResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](kaspawalletd::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaspawalletd::SignRequest* req,
             ::kaspawalletd::SignResponse* resp) {
               return service->Sign(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      kaspawalletd_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< kaspawalletd::Service, ::kaspawalletd::CheckIfAddressesAreValidRequest, ::kaspawalletd::CheckIfAddressesAreValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](kaspawalletd::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaspawalletd::CheckIfAddressesAreValidRequest* req,
             ::kaspawalletd::CheckIfAddressesAreValidResponse* resp) {
               return service->CheckIfAddressesAreValid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      kaspawalletd_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< kaspawalletd::Service, ::kaspawalletd::CheckIfAddressIsValidRequest, ::kaspawalletd::CheckIfAddressIsValidResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](kaspawalletd::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaspawalletd::CheckIfAddressIsValidRequest* req,
             ::kaspawalletd::CheckIfAddressIsValidResponse* resp) {
               return service->CheckIfAddressIsValid(ctx, req, resp);
             }, this)));
}

kaspawalletd::Service::~Service() {
}

::grpc::Status kaspawalletd::Service::GetBalance(::grpc::ServerContext* context, const ::kaspawalletd::GetBalanceRequest* request, ::kaspawalletd::GetBalanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status kaspawalletd::Service::GetExternalSpendableUTXOs(::grpc::ServerContext* context, const ::kaspawalletd::GetExternalSpendableUTXOsRequest* request, ::kaspawalletd::GetExternalSpendableUTXOsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status kaspawalletd::Service::CreateUnsignedTransactions(::grpc::ServerContext* context, const ::kaspawalletd::CreateUnsignedTransactionsRequest* request, ::kaspawalletd::CreateUnsignedTransactionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status kaspawalletd::Service::ShowAddresses(::grpc::ServerContext* context, const ::kaspawalletd::ShowAddressesRequest* request, ::kaspawalletd::ShowAddressesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status kaspawalletd::Service::NewAddress(::grpc::ServerContext* context, const ::kaspawalletd::NewAddressRequest* request, ::kaspawalletd::NewAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status kaspawalletd::Service::Shutdown(::grpc::ServerContext* context, const ::kaspawalletd::ShutdownRequest* request, ::kaspawalletd::ShutdownResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status kaspawalletd::Service::Broadcast(::grpc::ServerContext* context, const ::kaspawalletd::BroadcastRequest* request, ::kaspawalletd::BroadcastResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status kaspawalletd::Service::Send(::grpc::ServerContext* context, const ::kaspawalletd::SendRequest* request, ::kaspawalletd::SendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status kaspawalletd::Service::Sign(::grpc::ServerContext* context, const ::kaspawalletd::SignRequest* request, ::kaspawalletd::SignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status kaspawalletd::Service::CheckIfAddressesAreValid(::grpc::ServerContext* context, const ::kaspawalletd::CheckIfAddressesAreValidRequest* request, ::kaspawalletd::CheckIfAddressesAreValidResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status kaspawalletd::Service::CheckIfAddressIsValid(::grpc::ServerContext* context, const ::kaspawalletd::CheckIfAddressIsValidRequest* request, ::kaspawalletd::CheckIfAddressIsValidResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kaspawalletd

