// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kaspawalletd.proto

#include "kaspawalletd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kaspawalletd {
constexpr GetBalanceRequest::GetBalanceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetBalanceRequestDefaultTypeInternal {
  constexpr GetBalanceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBalanceRequestDefaultTypeInternal() {}
  union {
    GetBalanceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBalanceRequestDefaultTypeInternal _GetBalanceRequest_default_instance_;
constexpr GetBalanceResponse::GetBalanceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addressbalances_()
  , available_(uint64_t{0u})
  , pending_(uint64_t{0u}){}
struct GetBalanceResponseDefaultTypeInternal {
  constexpr GetBalanceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBalanceResponseDefaultTypeInternal() {}
  union {
    GetBalanceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBalanceResponseDefaultTypeInternal _GetBalanceResponse_default_instance_;
constexpr AddressBalances::AddressBalances(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , available_(uint64_t{0u})
  , pending_(uint64_t{0u}){}
struct AddressBalancesDefaultTypeInternal {
  constexpr AddressBalancesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressBalancesDefaultTypeInternal() {}
  union {
    AddressBalances _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressBalancesDefaultTypeInternal _AddressBalances_default_instance_;
constexpr CreateUnsignedTransactionsRequest::CreateUnsignedTransactionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_()
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(uint64_t{0u}){}
struct CreateUnsignedTransactionsRequestDefaultTypeInternal {
  constexpr CreateUnsignedTransactionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateUnsignedTransactionsRequestDefaultTypeInternal() {}
  union {
    CreateUnsignedTransactionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateUnsignedTransactionsRequestDefaultTypeInternal _CreateUnsignedTransactionsRequest_default_instance_;
constexpr CreateUnsignedTransactionsResponse::CreateUnsignedTransactionsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unsignedtransactions_(){}
struct CreateUnsignedTransactionsResponseDefaultTypeInternal {
  constexpr CreateUnsignedTransactionsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateUnsignedTransactionsResponseDefaultTypeInternal() {}
  union {
    CreateUnsignedTransactionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateUnsignedTransactionsResponseDefaultTypeInternal _CreateUnsignedTransactionsResponse_default_instance_;
constexpr ShowAddressesRequest::ShowAddressesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ShowAddressesRequestDefaultTypeInternal {
  constexpr ShowAddressesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShowAddressesRequestDefaultTypeInternal() {}
  union {
    ShowAddressesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShowAddressesRequestDefaultTypeInternal _ShowAddressesRequest_default_instance_;
constexpr ShowAddressesResponse::ShowAddressesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(){}
struct ShowAddressesResponseDefaultTypeInternal {
  constexpr ShowAddressesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShowAddressesResponseDefaultTypeInternal() {}
  union {
    ShowAddressesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShowAddressesResponseDefaultTypeInternal _ShowAddressesResponse_default_instance_;
constexpr NewAddressRequest::NewAddressRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NewAddressRequestDefaultTypeInternal {
  constexpr NewAddressRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewAddressRequestDefaultTypeInternal() {}
  union {
    NewAddressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewAddressRequestDefaultTypeInternal _NewAddressRequest_default_instance_;
constexpr NewAddressResponse::NewAddressResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NewAddressResponseDefaultTypeInternal {
  constexpr NewAddressResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewAddressResponseDefaultTypeInternal() {}
  union {
    NewAddressResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewAddressResponseDefaultTypeInternal _NewAddressResponse_default_instance_;
constexpr BroadcastRequest::BroadcastRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_()
  , isdomain_(false){}
struct BroadcastRequestDefaultTypeInternal {
  constexpr BroadcastRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BroadcastRequestDefaultTypeInternal() {}
  union {
    BroadcastRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BroadcastRequestDefaultTypeInternal _BroadcastRequest_default_instance_;
constexpr BroadcastResponse::BroadcastResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txids_(){}
struct BroadcastResponseDefaultTypeInternal {
  constexpr BroadcastResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BroadcastResponseDefaultTypeInternal() {}
  union {
    BroadcastResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BroadcastResponseDefaultTypeInternal _BroadcastResponse_default_instance_;
constexpr ShutdownRequest::ShutdownRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ShutdownRequestDefaultTypeInternal {
  constexpr ShutdownRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShutdownRequestDefaultTypeInternal() {}
  union {
    ShutdownRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShutdownRequestDefaultTypeInternal _ShutdownRequest_default_instance_;
constexpr ShutdownResponse::ShutdownResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ShutdownResponseDefaultTypeInternal {
  constexpr ShutdownResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShutdownResponseDefaultTypeInternal() {}
  union {
    ShutdownResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShutdownResponseDefaultTypeInternal _ShutdownResponse_default_instance_;
constexpr Outpoint::Outpoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0u){}
struct OutpointDefaultTypeInternal {
  constexpr OutpointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutpointDefaultTypeInternal() {}
  union {
    Outpoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutpointDefaultTypeInternal _Outpoint_default_instance_;
constexpr UtxosByAddressesEntry::UtxosByAddressesEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , outpoint_(nullptr)
  , utxoentry_(nullptr){}
struct UtxosByAddressesEntryDefaultTypeInternal {
  constexpr UtxosByAddressesEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtxosByAddressesEntryDefaultTypeInternal() {}
  union {
    UtxosByAddressesEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtxosByAddressesEntryDefaultTypeInternal _UtxosByAddressesEntry_default_instance_;
constexpr ScriptPublicKey::ScriptPublicKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scriptpublickey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0u){}
struct ScriptPublicKeyDefaultTypeInternal {
  constexpr ScriptPublicKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScriptPublicKeyDefaultTypeInternal() {}
  union {
    ScriptPublicKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScriptPublicKeyDefaultTypeInternal _ScriptPublicKey_default_instance_;
constexpr UtxoEntry::UtxoEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scriptpublickey_(nullptr)
  , amount_(uint64_t{0u})
  , blockdaascore_(uint64_t{0u})
  , iscoinbase_(false){}
struct UtxoEntryDefaultTypeInternal {
  constexpr UtxoEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtxoEntryDefaultTypeInternal() {}
  union {
    UtxoEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtxoEntryDefaultTypeInternal _UtxoEntry_default_instance_;
constexpr GetExternalSpendableUTXOsRequest::GetExternalSpendableUTXOsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetExternalSpendableUTXOsRequestDefaultTypeInternal {
  constexpr GetExternalSpendableUTXOsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExternalSpendableUTXOsRequestDefaultTypeInternal() {}
  union {
    GetExternalSpendableUTXOsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExternalSpendableUTXOsRequestDefaultTypeInternal _GetExternalSpendableUTXOsRequest_default_instance_;
constexpr GetExternalSpendableUTXOsResponse::GetExternalSpendableUTXOsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct GetExternalSpendableUTXOsResponseDefaultTypeInternal {
  constexpr GetExternalSpendableUTXOsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExternalSpendableUTXOsResponseDefaultTypeInternal() {}
  union {
    GetExternalSpendableUTXOsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExternalSpendableUTXOsResponseDefaultTypeInternal _GetExternalSpendableUTXOsResponse_default_instance_;
constexpr SendRequest::SendRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_()
  , toaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(uint64_t{0u}){}
struct SendRequestDefaultTypeInternal {
  constexpr SendRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendRequestDefaultTypeInternal() {}
  union {
    SendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendRequestDefaultTypeInternal _SendRequest_default_instance_;
constexpr SendResponse::SendResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txids_(){}
struct SendResponseDefaultTypeInternal {
  constexpr SendResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendResponseDefaultTypeInternal() {}
  union {
    SendResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendResponseDefaultTypeInternal _SendResponse_default_instance_;
constexpr SignRequest::SignRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unsignedtransactions_()
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SignRequestDefaultTypeInternal {
  constexpr SignRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignRequestDefaultTypeInternal() {}
  union {
    SignRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignRequestDefaultTypeInternal _SignRequest_default_instance_;
constexpr SignResponse::SignResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signedtransactions_(){}
struct SignResponseDefaultTypeInternal {
  constexpr SignResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignResponseDefaultTypeInternal() {}
  union {
    SignResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignResponseDefaultTypeInternal _SignResponse_default_instance_;
constexpr IsValidAddress::IsValidAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , isvalid_(false){}
struct IsValidAddressDefaultTypeInternal {
  constexpr IsValidAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IsValidAddressDefaultTypeInternal() {}
  union {
    IsValidAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IsValidAddressDefaultTypeInternal _IsValidAddress_default_instance_;
constexpr CheckIfAddressesAreValidRequest::CheckIfAddressesAreValidRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addresses_(){}
struct CheckIfAddressesAreValidRequestDefaultTypeInternal {
  constexpr CheckIfAddressesAreValidRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckIfAddressesAreValidRequestDefaultTypeInternal() {}
  union {
    CheckIfAddressesAreValidRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckIfAddressesAreValidRequestDefaultTypeInternal _CheckIfAddressesAreValidRequest_default_instance_;
constexpr CheckIfAddressesAreValidResponse::CheckIfAddressesAreValidResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arevalidaddresses_(){}
struct CheckIfAddressesAreValidResponseDefaultTypeInternal {
  constexpr CheckIfAddressesAreValidResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckIfAddressesAreValidResponseDefaultTypeInternal() {}
  union {
    CheckIfAddressesAreValidResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckIfAddressesAreValidResponseDefaultTypeInternal _CheckIfAddressesAreValidResponse_default_instance_;
constexpr CheckIfAddressIsValidRequest::CheckIfAddressIsValidRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CheckIfAddressIsValidRequestDefaultTypeInternal {
  constexpr CheckIfAddressIsValidRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckIfAddressIsValidRequestDefaultTypeInternal() {}
  union {
    CheckIfAddressIsValidRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckIfAddressIsValidRequestDefaultTypeInternal _CheckIfAddressIsValidRequest_default_instance_;
constexpr CheckIfAddressIsValidResponse::CheckIfAddressIsValidResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , isvalid_(false){}
struct CheckIfAddressIsValidResponseDefaultTypeInternal {
  constexpr CheckIfAddressIsValidResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckIfAddressIsValidResponseDefaultTypeInternal() {}
  union {
    CheckIfAddressIsValidResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckIfAddressIsValidResponseDefaultTypeInternal _CheckIfAddressIsValidResponse_default_instance_;
}  // namespace kaspawalletd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kaspawalletd_2eproto[28];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kaspawalletd_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kaspawalletd_2eproto = nullptr;

const uint32_t TableStruct_kaspawalletd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetBalanceResponse, available_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetBalanceResponse, pending_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetBalanceResponse, addressbalances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::AddressBalances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::AddressBalances, address_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::AddressBalances, available_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::AddressBalances, pending_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CreateUnsignedTransactionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CreateUnsignedTransactionsRequest, address_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CreateUnsignedTransactionsRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CreateUnsignedTransactionsRequest, from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CreateUnsignedTransactionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CreateUnsignedTransactionsResponse, unsignedtransactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ShowAddressesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ShowAddressesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ShowAddressesResponse, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::NewAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::NewAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::NewAddressResponse, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::BroadcastRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::BroadcastRequest, isdomain_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::BroadcastRequest, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::BroadcastResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::BroadcastResponse, txids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ShutdownRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ShutdownResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::Outpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::Outpoint, transactionid_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::Outpoint, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxosByAddressesEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxosByAddressesEntry, address_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxosByAddressesEntry, outpoint_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxosByAddressesEntry, utxoentry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ScriptPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ScriptPublicKey, version_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::ScriptPublicKey, scriptpublickey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxoEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxoEntry, amount_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxoEntry, scriptpublickey_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxoEntry, blockdaascore_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::UtxoEntry, iscoinbase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetExternalSpendableUTXOsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetExternalSpendableUTXOsRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetExternalSpendableUTXOsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::GetExternalSpendableUTXOsResponse, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendRequest, toaddress_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendRequest, password_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendRequest, from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SendResponse, txids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SignRequest, unsignedtransactions_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SignRequest, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::SignResponse, signedtransactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::IsValidAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::IsValidAddress, address_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::IsValidAddress, isvalid_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::IsValidAddress, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressesAreValidRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressesAreValidRequest, addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressesAreValidResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressesAreValidResponse, arevalidaddresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressIsValidRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressIsValidRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressIsValidResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressIsValidResponse, address_),
  PROTOBUF_FIELD_OFFSET(::kaspawalletd::CheckIfAddressIsValidResponse, isvalid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kaspawalletd::GetBalanceRequest)},
  { 6, -1, -1, sizeof(::kaspawalletd::GetBalanceResponse)},
  { 15, -1, -1, sizeof(::kaspawalletd::AddressBalances)},
  { 24, -1, -1, sizeof(::kaspawalletd::CreateUnsignedTransactionsRequest)},
  { 33, -1, -1, sizeof(::kaspawalletd::CreateUnsignedTransactionsResponse)},
  { 40, -1, -1, sizeof(::kaspawalletd::ShowAddressesRequest)},
  { 46, -1, -1, sizeof(::kaspawalletd::ShowAddressesResponse)},
  { 53, -1, -1, sizeof(::kaspawalletd::NewAddressRequest)},
  { 59, -1, -1, sizeof(::kaspawalletd::NewAddressResponse)},
  { 66, -1, -1, sizeof(::kaspawalletd::BroadcastRequest)},
  { 74, -1, -1, sizeof(::kaspawalletd::BroadcastResponse)},
  { 81, -1, -1, sizeof(::kaspawalletd::ShutdownRequest)},
  { 87, -1, -1, sizeof(::kaspawalletd::ShutdownResponse)},
  { 93, -1, -1, sizeof(::kaspawalletd::Outpoint)},
  { 101, -1, -1, sizeof(::kaspawalletd::UtxosByAddressesEntry)},
  { 110, -1, -1, sizeof(::kaspawalletd::ScriptPublicKey)},
  { 118, -1, -1, sizeof(::kaspawalletd::UtxoEntry)},
  { 128, -1, -1, sizeof(::kaspawalletd::GetExternalSpendableUTXOsRequest)},
  { 135, -1, -1, sizeof(::kaspawalletd::GetExternalSpendableUTXOsResponse)},
  { 142, -1, -1, sizeof(::kaspawalletd::SendRequest)},
  { 152, -1, -1, sizeof(::kaspawalletd::SendResponse)},
  { 159, -1, -1, sizeof(::kaspawalletd::SignRequest)},
  { 167, -1, -1, sizeof(::kaspawalletd::SignResponse)},
  { 174, -1, -1, sizeof(::kaspawalletd::IsValidAddress)},
  { 183, -1, -1, sizeof(::kaspawalletd::CheckIfAddressesAreValidRequest)},
  { 190, -1, -1, sizeof(::kaspawalletd::CheckIfAddressesAreValidResponse)},
  { 197, -1, -1, sizeof(::kaspawalletd::CheckIfAddressIsValidRequest)},
  { 204, -1, -1, sizeof(::kaspawalletd::CheckIfAddressIsValidResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_GetBalanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_GetBalanceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_AddressBalances_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_CreateUnsignedTransactionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_CreateUnsignedTransactionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_ShowAddressesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_ShowAddressesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_NewAddressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_NewAddressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_BroadcastRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_BroadcastResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_ShutdownRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_ShutdownResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_Outpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_UtxosByAddressesEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_ScriptPublicKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_UtxoEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_GetExternalSpendableUTXOsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_GetExternalSpendableUTXOsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_SendRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_SendResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_SignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_SignResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_IsValidAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_CheckIfAddressesAreValidRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_CheckIfAddressesAreValidResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_CheckIfAddressIsValidRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaspawalletd::_CheckIfAddressIsValidResponse_default_instance_),
};

const char descriptor_table_protodef_kaspawalletd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022kaspawalletd.proto\022\014kaspawalletd\"\023\n\021Ge"
  "tBalanceRequest\"p\n\022GetBalanceResponse\022\021\n"
  "\tavailable\030\001 \001(\004\022\017\n\007pending\030\002 \001(\004\0226\n\017add"
  "ressBalances\030\003 \003(\0132\035.kaspawalletd.Addres"
  "sBalances\"F\n\017AddressBalances\022\017\n\007address\030"
  "\001 \001(\t\022\021\n\tavailable\030\002 \001(\004\022\017\n\007pending\030\003 \001("
  "\004\"R\n!CreateUnsignedTransactionsRequest\022\017"
  "\n\007address\030\001 \001(\t\022\016\n\006amount\030\002 \001(\004\022\014\n\004from\030"
  "\003 \003(\t\"B\n\"CreateUnsignedTransactionsRespo"
  "nse\022\034\n\024unsignedTransactions\030\001 \003(\014\"\026\n\024Sho"
  "wAddressesRequest\"(\n\025ShowAddressesRespon"
  "se\022\017\n\007address\030\001 \003(\t\"\023\n\021NewAddressRequest"
  "\"%\n\022NewAddressResponse\022\017\n\007address\030\001 \001(\t\""
  ":\n\020BroadcastRequest\022\020\n\010isDomain\030\001 \001(\010\022\024\n"
  "\014transactions\030\002 \003(\014\"\"\n\021BroadcastResponse"
  "\022\r\n\005txIDs\030\001 \003(\t\"\021\n\017ShutdownRequest\"\022\n\020Sh"
  "utdownResponse\"0\n\010Outpoint\022\025\n\rtransactio"
  "nId\030\001 \001(\t\022\r\n\005index\030\002 \001(\r\"~\n\025UtxosByAddre"
  "ssesEntry\022\017\n\007address\030\001 \001(\t\022(\n\010outpoint\030\002"
  " \001(\0132\026.kaspawalletd.Outpoint\022*\n\tutxoEntr"
  "y\030\003 \001(\0132\027.kaspawalletd.UtxoEntry\";\n\017Scri"
  "ptPublicKey\022\017\n\007version\030\001 \001(\r\022\027\n\017scriptPu"
  "blicKey\030\002 \001(\t\"~\n\tUtxoEntry\022\016\n\006amount\030\001 \001"
  "(\004\0226\n\017scriptPublicKey\030\002 \001(\0132\035.kaspawalle"
  "td.ScriptPublicKey\022\025\n\rblockDaaScore\030\003 \001("
  "\004\022\022\n\nisCoinbase\030\004 \001(\010\"3\n GetExternalSpen"
  "dableUTXOsRequest\022\017\n\007address\030\001 \001(\t\"Y\n!Ge"
  "tExternalSpendableUTXOsResponse\0224\n\007Entri"
  "es\030\001 \003(\0132#.kaspawalletd.UtxosByAddresses"
  "Entry\"P\n\013SendRequest\022\021\n\ttoAddress\030\001 \001(\t\022"
  "\016\n\006amount\030\002 \001(\004\022\020\n\010password\030\003 \001(\t\022\014\n\004fro"
  "m\030\004 \003(\t\"\035\n\014SendResponse\022\r\n\005txIDs\030\001 \003(\t\"="
  "\n\013SignRequest\022\034\n\024unsignedTransactions\030\001 "
  "\003(\014\022\020\n\010password\030\002 \001(\t\"*\n\014SignResponse\022\032\n"
  "\022signedTransactions\030\001 \003(\014\"A\n\016IsValidAddr"
  "ess\022\017\n\007address\030\001 \001(\t\022\017\n\007isValid\030\002 \001(\010\022\r\n"
  "\005error\030\003 \001(\t\"4\n\037CheckIfAddressesAreValid"
  "Request\022\021\n\taddresses\030\001 \003(\t\"[\n CheckIfAdd"
  "ressesAreValidResponse\0227\n\021areValidAddres"
  "ses\030\001 \003(\0132\034.kaspawalletd.IsValidAddress\""
  "/\n\034CheckIfAddressIsValidRequest\022\017\n\007addre"
  "ss\030\001 \001(\t\"A\n\035CheckIfAddressIsValidRespons"
  "e\022\017\n\007address\030\001 \001(\t\022\017\n\007isValid\030\002 \001(\0102\244\010\n\014"
  "kaspawalletd\022Q\n\nGetBalance\022\037.kaspawallet"
  "d.GetBalanceRequest\032 .kaspawalletd.GetBa"
  "lanceResponse\"\000\022~\n\031GetExternalSpendableU"
  "TXOs\022..kaspawalletd.GetExternalSpendable"
  "UTXOsRequest\032/.kaspawalletd.GetExternalS"
  "pendableUTXOsResponse\"\000\022\201\001\n\032CreateUnsign"
  "edTransactions\022/.kaspawalletd.CreateUnsi"
  "gnedTransactionsRequest\0320.kaspawalletd.C"
  "reateUnsignedTransactionsResponse\"\000\022Z\n\rS"
  "howAddresses\022\".kaspawalletd.ShowAddresse"
  "sRequest\032#.kaspawalletd.ShowAddressesRes"
  "ponse\"\000\022Q\n\nNewAddress\022\037.kaspawalletd.New"
  "AddressRequest\032 .kaspawalletd.NewAddress"
  "Response\"\000\022K\n\010Shutdown\022\035.kaspawalletd.Sh"
  "utdownRequest\032\036.kaspawalletd.ShutdownRes"
  "ponse\"\000\022N\n\tBroadcast\022\036.kaspawalletd.Broa"
  "dcastRequest\032\037.kaspawalletd.BroadcastRes"
  "ponse\"\000\022\?\n\004Send\022\031.kaspawalletd.SendReque"
  "st\032\032.kaspawalletd.SendResponse\"\000\022\?\n\004Sign"
  "\022\031.kaspawalletd.SignRequest\032\032.kaspawalle"
  "td.SignResponse\"\000\022{\n\030CheckIfAddressesAre"
  "Valid\022-.kaspawalletd.CheckIfAddressesAre"
  "ValidRequest\032..kaspawalletd.CheckIfAddre"
  "ssesAreValidResponse\"\000\022r\n\025CheckIfAddress"
  "IsValid\022*.kaspawalletd.CheckIfAddressIsV"
  "alidRequest\032+.kaspawalletd.CheckIfAddres"
  "sIsValidResponse\"\000B&Z$github.com/kaspane"
  "t/kaspad/protowireb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kaspawalletd_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kaspawalletd_2eproto = {
  false, false, 2826, descriptor_table_protodef_kaspawalletd_2eproto, "kaspawalletd.proto", 
  &descriptor_table_kaspawalletd_2eproto_once, nullptr, 0, 28,
  schemas, file_default_instances, TableStruct_kaspawalletd_2eproto::offsets,
  file_level_metadata_kaspawalletd_2eproto, file_level_enum_descriptors_kaspawalletd_2eproto, file_level_service_descriptors_kaspawalletd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_kaspawalletd_2eproto_getter() {
  return &descriptor_table_kaspawalletd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_kaspawalletd_2eproto(&descriptor_table_kaspawalletd_2eproto);
namespace kaspawalletd {

// ===================================================================

class GetBalanceRequest::_Internal {
 public:
};

GetBalanceRequest::GetBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.GetBalanceRequest)
}
GetBalanceRequest::GetBalanceRequest(const GetBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.GetBalanceRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBalanceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBalanceRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetBalanceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[0]);
}

// ===================================================================

class GetBalanceResponse::_Internal {
 public:
};

GetBalanceResponse::GetBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  addressbalances_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.GetBalanceResponse)
}
GetBalanceResponse::GetBalanceResponse(const GetBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addressbalances_(from.addressbalances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&available_, &from.available_,
    static_cast<size_t>(reinterpret_cast<char*>(&pending_) -
    reinterpret_cast<char*>(&available_)) + sizeof(pending_));
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.GetBalanceResponse)
}

inline void GetBalanceResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&available_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pending_) -
    reinterpret_cast<char*>(&available_)) + sizeof(pending_));
}

GetBalanceResponse::~GetBalanceResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.GetBalanceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBalanceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBalanceResponse::ArenaDtor(void* object) {
  GetBalanceResponse* _this = reinterpret_cast< GetBalanceResponse* >(object);
  (void)_this;
}
void GetBalanceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBalanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.GetBalanceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addressbalances_.Clear();
  ::memset(&available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_) -
      reinterpret_cast<char*>(&available_)) + sizeof(pending_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBalanceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kaspawalletd.AddressBalances addressBalances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addressbalances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBalanceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.GetBalanceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 available = 1;
  if (this->_internal_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_available(), target);
  }

  // uint64 pending = 2;
  if (this->_internal_pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pending(), target);
  }

  // repeated .kaspawalletd.AddressBalances addressBalances = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addressbalances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_addressbalances(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.GetBalanceResponse)
  return target;
}

size_t GetBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.GetBalanceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaspawalletd.AddressBalances addressBalances = 3;
  total_size += 1UL * this->_internal_addressbalances_size();
  for (const auto& msg : this->addressbalances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 available = 1;
  if (this->_internal_available() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_available());
  }

  // uint64 pending = 2;
  if (this->_internal_pending() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pending());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBalanceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBalanceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBalanceResponse::GetClassData() const { return &_class_data_; }

void GetBalanceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBalanceResponse *>(to)->MergeFrom(
      static_cast<const GetBalanceResponse &>(from));
}


void GetBalanceResponse::MergeFrom(const GetBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.GetBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  addressbalances_.MergeFrom(from.addressbalances_);
  if (from._internal_available() != 0) {
    _internal_set_available(from._internal_available());
  }
  if (from._internal_pending() != 0) {
    _internal_set_pending(from._internal_pending());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBalanceResponse::CopyFrom(const GetBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.GetBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalanceResponse::IsInitialized() const {
  return true;
}

void GetBalanceResponse::InternalSwap(GetBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  addressbalances_.InternalSwap(&other->addressbalances_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBalanceResponse, pending_)
      + sizeof(GetBalanceResponse::pending_)
      - PROTOBUF_FIELD_OFFSET(GetBalanceResponse, available_)>(
          reinterpret_cast<char*>(&available_),
          reinterpret_cast<char*>(&other->available_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBalanceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[1]);
}

// ===================================================================

class AddressBalances::_Internal {
 public:
};

AddressBalances::AddressBalances(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.AddressBalances)
}
AddressBalances::AddressBalances(const AddressBalances& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&available_, &from.available_,
    static_cast<size_t>(reinterpret_cast<char*>(&pending_) -
    reinterpret_cast<char*>(&available_)) + sizeof(pending_));
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.AddressBalances)
}

inline void AddressBalances::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&available_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pending_) -
    reinterpret_cast<char*>(&available_)) + sizeof(pending_));
}

AddressBalances::~AddressBalances() {
  // @@protoc_insertion_point(destructor:kaspawalletd.AddressBalances)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressBalances::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddressBalances::ArenaDtor(void* object) {
  AddressBalances* _this = reinterpret_cast< AddressBalances* >(object);
  (void)_this;
}
void AddressBalances::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressBalances::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressBalances::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.AddressBalances)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  ::memset(&available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_) -
      reinterpret_cast<char*>(&available_)) + sizeof(pending_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressBalances::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.AddressBalances.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 available = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddressBalances::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.AddressBalances)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.AddressBalances.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 available = 2;
  if (this->_internal_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_available(), target);
  }

  // uint64 pending = 3;
  if (this->_internal_pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pending(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.AddressBalances)
  return target;
}

size_t AddressBalances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.AddressBalances)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint64 available = 2;
  if (this->_internal_available() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_available());
  }

  // uint64 pending = 3;
  if (this->_internal_pending() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pending());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressBalances::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressBalances::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressBalances::GetClassData() const { return &_class_data_; }

void AddressBalances::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddressBalances *>(to)->MergeFrom(
      static_cast<const AddressBalances &>(from));
}


void AddressBalances::MergeFrom(const AddressBalances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.AddressBalances)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_available() != 0) {
    _internal_set_available(from._internal_available());
  }
  if (from._internal_pending() != 0) {
    _internal_set_pending(from._internal_pending());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressBalances::CopyFrom(const AddressBalances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.AddressBalances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressBalances::IsInitialized() const {
  return true;
}

void AddressBalances::InternalSwap(AddressBalances* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddressBalances, pending_)
      + sizeof(AddressBalances::pending_)
      - PROTOBUF_FIELD_OFFSET(AddressBalances, available_)>(
          reinterpret_cast<char*>(&available_),
          reinterpret_cast<char*>(&other->available_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressBalances::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[2]);
}

// ===================================================================

class CreateUnsignedTransactionsRequest::_Internal {
 public:
};

CreateUnsignedTransactionsRequest::CreateUnsignedTransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  from_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.CreateUnsignedTransactionsRequest)
}
CreateUnsignedTransactionsRequest::CreateUnsignedTransactionsRequest(const CreateUnsignedTransactionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      from_(from.from_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.CreateUnsignedTransactionsRequest)
}

inline void CreateUnsignedTransactionsRequest::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_ = uint64_t{0u};
}

CreateUnsignedTransactionsRequest::~CreateUnsignedTransactionsRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.CreateUnsignedTransactionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateUnsignedTransactionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateUnsignedTransactionsRequest::ArenaDtor(void* object) {
  CreateUnsignedTransactionsRequest* _this = reinterpret_cast< CreateUnsignedTransactionsRequest* >(object);
  (void)_this;
}
void CreateUnsignedTransactionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUnsignedTransactionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateUnsignedTransactionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.CreateUnsignedTransactionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.Clear();
  address_.ClearToEmpty();
  amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUnsignedTransactionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.CreateUnsignedTransactionsRequest.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_from();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.CreateUnsignedTransactionsRequest.from"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateUnsignedTransactionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.CreateUnsignedTransactionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.CreateUnsignedTransactionsRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  // repeated string from = 3;
  for (int i = 0, n = this->_internal_from_size(); i < n; i++) {
    const auto& s = this->_internal_from(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.CreateUnsignedTransactionsRequest.from");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.CreateUnsignedTransactionsRequest)
  return target;
}

size_t CreateUnsignedTransactionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.CreateUnsignedTransactionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string from = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(from_.size());
  for (int i = 0, n = from_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      from_.Get(i));
  }

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateUnsignedTransactionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateUnsignedTransactionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateUnsignedTransactionsRequest::GetClassData() const { return &_class_data_; }

void CreateUnsignedTransactionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateUnsignedTransactionsRequest *>(to)->MergeFrom(
      static_cast<const CreateUnsignedTransactionsRequest &>(from));
}


void CreateUnsignedTransactionsRequest::MergeFrom(const CreateUnsignedTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.CreateUnsignedTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  from_.MergeFrom(from.from_);
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateUnsignedTransactionsRequest::CopyFrom(const CreateUnsignedTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.CreateUnsignedTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUnsignedTransactionsRequest::IsInitialized() const {
  return true;
}

void CreateUnsignedTransactionsRequest::InternalSwap(CreateUnsignedTransactionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  from_.InternalSwap(&other->from_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUnsignedTransactionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[3]);
}

// ===================================================================

class CreateUnsignedTransactionsResponse::_Internal {
 public:
};

CreateUnsignedTransactionsResponse::CreateUnsignedTransactionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unsignedtransactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.CreateUnsignedTransactionsResponse)
}
CreateUnsignedTransactionsResponse::CreateUnsignedTransactionsResponse(const CreateUnsignedTransactionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unsignedtransactions_(from.unsignedtransactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.CreateUnsignedTransactionsResponse)
}

inline void CreateUnsignedTransactionsResponse::SharedCtor() {
}

CreateUnsignedTransactionsResponse::~CreateUnsignedTransactionsResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.CreateUnsignedTransactionsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateUnsignedTransactionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateUnsignedTransactionsResponse::ArenaDtor(void* object) {
  CreateUnsignedTransactionsResponse* _this = reinterpret_cast< CreateUnsignedTransactionsResponse* >(object);
  (void)_this;
}
void CreateUnsignedTransactionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUnsignedTransactionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateUnsignedTransactionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.CreateUnsignedTransactionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unsignedtransactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUnsignedTransactionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes unsignedTransactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unsignedtransactions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateUnsignedTransactionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.CreateUnsignedTransactionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes unsignedTransactions = 1;
  for (int i = 0, n = this->_internal_unsignedtransactions_size(); i < n; i++) {
    const auto& s = this->_internal_unsignedtransactions(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.CreateUnsignedTransactionsResponse)
  return target;
}

size_t CreateUnsignedTransactionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.CreateUnsignedTransactionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes unsignedTransactions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(unsignedtransactions_.size());
  for (int i = 0, n = unsignedtransactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      unsignedtransactions_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateUnsignedTransactionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateUnsignedTransactionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateUnsignedTransactionsResponse::GetClassData() const { return &_class_data_; }

void CreateUnsignedTransactionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateUnsignedTransactionsResponse *>(to)->MergeFrom(
      static_cast<const CreateUnsignedTransactionsResponse &>(from));
}


void CreateUnsignedTransactionsResponse::MergeFrom(const CreateUnsignedTransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.CreateUnsignedTransactionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  unsignedtransactions_.MergeFrom(from.unsignedtransactions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateUnsignedTransactionsResponse::CopyFrom(const CreateUnsignedTransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.CreateUnsignedTransactionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUnsignedTransactionsResponse::IsInitialized() const {
  return true;
}

void CreateUnsignedTransactionsResponse::InternalSwap(CreateUnsignedTransactionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  unsignedtransactions_.InternalSwap(&other->unsignedtransactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUnsignedTransactionsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[4]);
}

// ===================================================================

class ShowAddressesRequest::_Internal {
 public:
};

ShowAddressesRequest::ShowAddressesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.ShowAddressesRequest)
}
ShowAddressesRequest::ShowAddressesRequest(const ShowAddressesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.ShowAddressesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowAddressesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowAddressesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ShowAddressesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[5]);
}

// ===================================================================

class ShowAddressesResponse::_Internal {
 public:
};

ShowAddressesResponse::ShowAddressesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  address_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.ShowAddressesResponse)
}
ShowAddressesResponse::ShowAddressesResponse(const ShowAddressesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      address_(from.address_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.ShowAddressesResponse)
}

inline void ShowAddressesResponse::SharedCtor() {
}

ShowAddressesResponse::~ShowAddressesResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.ShowAddressesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShowAddressesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShowAddressesResponse::ArenaDtor(void* object) {
  ShowAddressesResponse* _this = reinterpret_cast< ShowAddressesResponse* >(object);
  (void)_this;
}
void ShowAddressesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShowAddressesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShowAddressesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.ShowAddressesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowAddressesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_address();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.ShowAddressesResponse.address"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShowAddressesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.ShowAddressesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string address = 1;
  for (int i = 0, n = this->_internal_address_size(); i < n; i++) {
    const auto& s = this->_internal_address(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.ShowAddressesResponse.address");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.ShowAddressesResponse)
  return target;
}

size_t ShowAddressesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.ShowAddressesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string address = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(address_.size());
  for (int i = 0, n = address_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      address_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowAddressesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShowAddressesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowAddressesResponse::GetClassData() const { return &_class_data_; }

void ShowAddressesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShowAddressesResponse *>(to)->MergeFrom(
      static_cast<const ShowAddressesResponse &>(from));
}


void ShowAddressesResponse::MergeFrom(const ShowAddressesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.ShowAddressesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShowAddressesResponse::CopyFrom(const ShowAddressesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.ShowAddressesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowAddressesResponse::IsInitialized() const {
  return true;
}

void ShowAddressesResponse::InternalSwap(ShowAddressesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowAddressesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[6]);
}

// ===================================================================

class NewAddressRequest::_Internal {
 public:
};

NewAddressRequest::NewAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.NewAddressRequest)
}
NewAddressRequest::NewAddressRequest(const NewAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.NewAddressRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewAddressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewAddressRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NewAddressRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[7]);
}

// ===================================================================

class NewAddressResponse::_Internal {
 public:
};

NewAddressResponse::NewAddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.NewAddressResponse)
}
NewAddressResponse::NewAddressResponse(const NewAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.NewAddressResponse)
}

inline void NewAddressResponse::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewAddressResponse::~NewAddressResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.NewAddressResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NewAddressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewAddressResponse::ArenaDtor(void* object) {
  NewAddressResponse* _this = reinterpret_cast< NewAddressResponse* >(object);
  (void)_this;
}
void NewAddressResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewAddressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.NewAddressResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewAddressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.NewAddressResponse.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewAddressResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.NewAddressResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.NewAddressResponse.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.NewAddressResponse)
  return target;
}

size_t NewAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.NewAddressResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewAddressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewAddressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewAddressResponse::GetClassData() const { return &_class_data_; }

void NewAddressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewAddressResponse *>(to)->MergeFrom(
      static_cast<const NewAddressResponse &>(from));
}


void NewAddressResponse::MergeFrom(const NewAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.NewAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewAddressResponse::CopyFrom(const NewAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.NewAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewAddressResponse::IsInitialized() const {
  return true;
}

void NewAddressResponse::InternalSwap(NewAddressResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NewAddressResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[8]);
}

// ===================================================================

class BroadcastRequest::_Internal {
 public:
};

BroadcastRequest::BroadcastRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.BroadcastRequest)
}
BroadcastRequest::BroadcastRequest(const BroadcastRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isdomain_ = from.isdomain_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.BroadcastRequest)
}

inline void BroadcastRequest::SharedCtor() {
isdomain_ = false;
}

BroadcastRequest::~BroadcastRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.BroadcastRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BroadcastRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BroadcastRequest::ArenaDtor(void* object) {
  BroadcastRequest* _this = reinterpret_cast< BroadcastRequest* >(object);
  (void)_this;
}
void BroadcastRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BroadcastRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BroadcastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.BroadcastRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  isdomain_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isDomain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          isdomain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes transactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.BroadcastRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isDomain = 1;
  if (this->_internal_isdomain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isdomain(), target);
  }

  // repeated bytes transactions = 2;
  for (int i = 0, n = this->_internal_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_transactions(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.BroadcastRequest)
  return target;
}

size_t BroadcastRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.BroadcastRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transactions = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(transactions_.size());
  for (int i = 0, n = transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      transactions_.Get(i));
  }

  // bool isDomain = 1;
  if (this->_internal_isdomain() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BroadcastRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastRequest::GetClassData() const { return &_class_data_; }

void BroadcastRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BroadcastRequest *>(to)->MergeFrom(
      static_cast<const BroadcastRequest &>(from));
}


void BroadcastRequest::MergeFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.BroadcastRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (from._internal_isdomain() != 0) {
    _internal_set_isdomain(from._internal_isdomain());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastRequest::CopyFrom(const BroadcastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.BroadcastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRequest::IsInitialized() const {
  return true;
}

void BroadcastRequest::InternalSwap(BroadcastRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  swap(isdomain_, other->isdomain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[9]);
}

// ===================================================================

class BroadcastResponse::_Internal {
 public:
};

BroadcastResponse::BroadcastResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  txids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.BroadcastResponse)
}
BroadcastResponse::BroadcastResponse(const BroadcastResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      txids_(from.txids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.BroadcastResponse)
}

inline void BroadcastResponse::SharedCtor() {
}

BroadcastResponse::~BroadcastResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.BroadcastResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BroadcastResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BroadcastResponse::ArenaDtor(void* object) {
  BroadcastResponse* _this = reinterpret_cast< BroadcastResponse* >(object);
  (void)_this;
}
void BroadcastResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BroadcastResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BroadcastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.BroadcastResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string txIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.BroadcastResponse.txIDs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.BroadcastResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string txIDs = 1;
  for (int i = 0, n = this->_internal_txids_size(); i < n; i++) {
    const auto& s = this->_internal_txids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.BroadcastResponse.txIDs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.BroadcastResponse)
  return target;
}

size_t BroadcastResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.BroadcastResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string txIDs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(txids_.size());
  for (int i = 0, n = txids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      txids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BroadcastResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastResponse::GetClassData() const { return &_class_data_; }

void BroadcastResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BroadcastResponse *>(to)->MergeFrom(
      static_cast<const BroadcastResponse &>(from));
}


void BroadcastResponse::MergeFrom(const BroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.BroadcastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  txids_.MergeFrom(from.txids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastResponse::CopyFrom(const BroadcastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.BroadcastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastResponse::IsInitialized() const {
  return true;
}

void BroadcastResponse::InternalSwap(BroadcastResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  txids_.InternalSwap(&other->txids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[10]);
}

// ===================================================================

class ShutdownRequest::_Internal {
 public:
};

ShutdownRequest::ShutdownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.ShutdownRequest)
}
ShutdownRequest::ShutdownRequest(const ShutdownRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.ShutdownRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShutdownRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShutdownRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ShutdownRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[11]);
}

// ===================================================================

class ShutdownResponse::_Internal {
 public:
};

ShutdownResponse::ShutdownResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.ShutdownResponse)
}
ShutdownResponse::ShutdownResponse(const ShutdownResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.ShutdownResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShutdownResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShutdownResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ShutdownResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[12]);
}

// ===================================================================

class Outpoint::_Internal {
 public:
};

Outpoint::Outpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.Outpoint)
}
Outpoint::Outpoint(const Outpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transactionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transactionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transactionid().empty()) {
    transactionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transactionid(), 
      GetArenaForAllocation());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.Outpoint)
}

inline void Outpoint::SharedCtor() {
transactionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transactionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_ = 0u;
}

Outpoint::~Outpoint() {
  // @@protoc_insertion_point(destructor:kaspawalletd.Outpoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Outpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transactionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Outpoint::ArenaDtor(void* object) {
  Outpoint* _this = reinterpret_cast< Outpoint* >(object);
  (void)_this;
}
void Outpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Outpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Outpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.Outpoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactionid_.ClearToEmpty();
  index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Outpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string transactionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transactionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.Outpoint.transactionId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Outpoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.Outpoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string transactionId = 1;
  if (!this->_internal_transactionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transactionid().data(), static_cast<int>(this->_internal_transactionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.Outpoint.transactionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transactionid(), target);
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.Outpoint)
  return target;
}

size_t Outpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.Outpoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transactionId = 1;
  if (!this->_internal_transactionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transactionid());
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Outpoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Outpoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Outpoint::GetClassData() const { return &_class_data_; }

void Outpoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Outpoint *>(to)->MergeFrom(
      static_cast<const Outpoint &>(from));
}


void Outpoint::MergeFrom(const Outpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.Outpoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transactionid().empty()) {
    _internal_set_transactionid(from._internal_transactionid());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Outpoint::CopyFrom(const Outpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.Outpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Outpoint::IsInitialized() const {
  return true;
}

void Outpoint::InternalSwap(Outpoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transactionid_, lhs_arena,
      &other->transactionid_, rhs_arena
  );
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Outpoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[13]);
}

// ===================================================================

class UtxosByAddressesEntry::_Internal {
 public:
  static const ::kaspawalletd::Outpoint& outpoint(const UtxosByAddressesEntry* msg);
  static const ::kaspawalletd::UtxoEntry& utxoentry(const UtxosByAddressesEntry* msg);
};

const ::kaspawalletd::Outpoint&
UtxosByAddressesEntry::_Internal::outpoint(const UtxosByAddressesEntry* msg) {
  return *msg->outpoint_;
}
const ::kaspawalletd::UtxoEntry&
UtxosByAddressesEntry::_Internal::utxoentry(const UtxosByAddressesEntry* msg) {
  return *msg->utxoentry_;
}
UtxosByAddressesEntry::UtxosByAddressesEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.UtxosByAddressesEntry)
}
UtxosByAddressesEntry::UtxosByAddressesEntry(const UtxosByAddressesEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_outpoint()) {
    outpoint_ = new ::kaspawalletd::Outpoint(*from.outpoint_);
  } else {
    outpoint_ = nullptr;
  }
  if (from._internal_has_utxoentry()) {
    utxoentry_ = new ::kaspawalletd::UtxoEntry(*from.utxoentry_);
  } else {
    utxoentry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.UtxosByAddressesEntry)
}

inline void UtxosByAddressesEntry::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&outpoint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&utxoentry_) -
    reinterpret_cast<char*>(&outpoint_)) + sizeof(utxoentry_));
}

UtxosByAddressesEntry::~UtxosByAddressesEntry() {
  // @@protoc_insertion_point(destructor:kaspawalletd.UtxosByAddressesEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UtxosByAddressesEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete outpoint_;
  if (this != internal_default_instance()) delete utxoentry_;
}

void UtxosByAddressesEntry::ArenaDtor(void* object) {
  UtxosByAddressesEntry* _this = reinterpret_cast< UtxosByAddressesEntry* >(object);
  (void)_this;
}
void UtxosByAddressesEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UtxosByAddressesEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UtxosByAddressesEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.UtxosByAddressesEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && utxoentry_ != nullptr) {
    delete utxoentry_;
  }
  utxoentry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtxosByAddressesEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.UtxosByAddressesEntry.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaspawalletd.Outpoint outpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_outpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaspawalletd.UtxoEntry utxoEntry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_utxoentry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UtxosByAddressesEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.UtxosByAddressesEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.UtxosByAddressesEntry.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // .kaspawalletd.Outpoint outpoint = 2;
  if (this->_internal_has_outpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::outpoint(this), target, stream);
  }

  // .kaspawalletd.UtxoEntry utxoEntry = 3;
  if (this->_internal_has_utxoentry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::utxoentry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.UtxosByAddressesEntry)
  return target;
}

size_t UtxosByAddressesEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.UtxosByAddressesEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .kaspawalletd.Outpoint outpoint = 2;
  if (this->_internal_has_outpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outpoint_);
  }

  // .kaspawalletd.UtxoEntry utxoEntry = 3;
  if (this->_internal_has_utxoentry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *utxoentry_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UtxosByAddressesEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UtxosByAddressesEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UtxosByAddressesEntry::GetClassData() const { return &_class_data_; }

void UtxosByAddressesEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UtxosByAddressesEntry *>(to)->MergeFrom(
      static_cast<const UtxosByAddressesEntry &>(from));
}


void UtxosByAddressesEntry::MergeFrom(const UtxosByAddressesEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.UtxosByAddressesEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_has_outpoint()) {
    _internal_mutable_outpoint()->::kaspawalletd::Outpoint::MergeFrom(from._internal_outpoint());
  }
  if (from._internal_has_utxoentry()) {
    _internal_mutable_utxoentry()->::kaspawalletd::UtxoEntry::MergeFrom(from._internal_utxoentry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UtxosByAddressesEntry::CopyFrom(const UtxosByAddressesEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.UtxosByAddressesEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtxosByAddressesEntry::IsInitialized() const {
  return true;
}

void UtxosByAddressesEntry::InternalSwap(UtxosByAddressesEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UtxosByAddressesEntry, utxoentry_)
      + sizeof(UtxosByAddressesEntry::utxoentry_)
      - PROTOBUF_FIELD_OFFSET(UtxosByAddressesEntry, outpoint_)>(
          reinterpret_cast<char*>(&outpoint_),
          reinterpret_cast<char*>(&other->outpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UtxosByAddressesEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[14]);
}

// ===================================================================

class ScriptPublicKey::_Internal {
 public:
};

ScriptPublicKey::ScriptPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.ScriptPublicKey)
}
ScriptPublicKey::ScriptPublicKey(const ScriptPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scriptpublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    scriptpublickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scriptpublickey().empty()) {
    scriptpublickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scriptpublickey(), 
      GetArenaForAllocation());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.ScriptPublicKey)
}

inline void ScriptPublicKey::SharedCtor() {
scriptpublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  scriptpublickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_ = 0u;
}

ScriptPublicKey::~ScriptPublicKey() {
  // @@protoc_insertion_point(destructor:kaspawalletd.ScriptPublicKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScriptPublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  scriptpublickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScriptPublicKey::ArenaDtor(void* object) {
  ScriptPublicKey* _this = reinterpret_cast< ScriptPublicKey* >(object);
  (void)_this;
}
void ScriptPublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScriptPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScriptPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.ScriptPublicKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scriptpublickey_.ClearToEmpty();
  version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScriptPublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string scriptPublicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_scriptpublickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.ScriptPublicKey.scriptPublicKey"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScriptPublicKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.ScriptPublicKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // string scriptPublicKey = 2;
  if (!this->_internal_scriptpublickey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scriptpublickey().data(), static_cast<int>(this->_internal_scriptpublickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.ScriptPublicKey.scriptPublicKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_scriptpublickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.ScriptPublicKey)
  return target;
}

size_t ScriptPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.ScriptPublicKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string scriptPublicKey = 2;
  if (!this->_internal_scriptpublickey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scriptpublickey());
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScriptPublicKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScriptPublicKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScriptPublicKey::GetClassData() const { return &_class_data_; }

void ScriptPublicKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScriptPublicKey *>(to)->MergeFrom(
      static_cast<const ScriptPublicKey &>(from));
}


void ScriptPublicKey::MergeFrom(const ScriptPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.ScriptPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_scriptpublickey().empty()) {
    _internal_set_scriptpublickey(from._internal_scriptpublickey());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScriptPublicKey::CopyFrom(const ScriptPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.ScriptPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScriptPublicKey::IsInitialized() const {
  return true;
}

void ScriptPublicKey::InternalSwap(ScriptPublicKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scriptpublickey_, lhs_arena,
      &other->scriptpublickey_, rhs_arena
  );
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScriptPublicKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[15]);
}

// ===================================================================

class UtxoEntry::_Internal {
 public:
  static const ::kaspawalletd::ScriptPublicKey& scriptpublickey(const UtxoEntry* msg);
};

const ::kaspawalletd::ScriptPublicKey&
UtxoEntry::_Internal::scriptpublickey(const UtxoEntry* msg) {
  return *msg->scriptpublickey_;
}
UtxoEntry::UtxoEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.UtxoEntry)
}
UtxoEntry::UtxoEntry(const UtxoEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scriptpublickey()) {
    scriptpublickey_ = new ::kaspawalletd::ScriptPublicKey(*from.scriptpublickey_);
  } else {
    scriptpublickey_ = nullptr;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&iscoinbase_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(iscoinbase_));
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.UtxoEntry)
}

inline void UtxoEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scriptpublickey_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iscoinbase_) -
    reinterpret_cast<char*>(&scriptpublickey_)) + sizeof(iscoinbase_));
}

UtxoEntry::~UtxoEntry() {
  // @@protoc_insertion_point(destructor:kaspawalletd.UtxoEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UtxoEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete scriptpublickey_;
}

void UtxoEntry::ArenaDtor(void* object) {
  UtxoEntry* _this = reinterpret_cast< UtxoEntry* >(object);
  (void)_this;
}
void UtxoEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UtxoEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UtxoEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.UtxoEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && scriptpublickey_ != nullptr) {
    delete scriptpublickey_;
  }
  scriptpublickey_ = nullptr;
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iscoinbase_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(iscoinbase_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtxoEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaspawalletd.ScriptPublicKey scriptPublicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scriptpublickey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 blockDaaScore = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          blockdaascore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isCoinbase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          iscoinbase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UtxoEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.UtxoEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  // .kaspawalletd.ScriptPublicKey scriptPublicKey = 2;
  if (this->_internal_has_scriptpublickey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scriptpublickey(this), target, stream);
  }

  // uint64 blockDaaScore = 3;
  if (this->_internal_blockdaascore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_blockdaascore(), target);
  }

  // bool isCoinbase = 4;
  if (this->_internal_iscoinbase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_iscoinbase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.UtxoEntry)
  return target;
}

size_t UtxoEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.UtxoEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kaspawalletd.ScriptPublicKey scriptPublicKey = 2;
  if (this->_internal_has_scriptpublickey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scriptpublickey_);
  }

  // uint64 amount = 1;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  // uint64 blockDaaScore = 3;
  if (this->_internal_blockdaascore() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_blockdaascore());
  }

  // bool isCoinbase = 4;
  if (this->_internal_iscoinbase() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UtxoEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UtxoEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UtxoEntry::GetClassData() const { return &_class_data_; }

void UtxoEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UtxoEntry *>(to)->MergeFrom(
      static_cast<const UtxoEntry &>(from));
}


void UtxoEntry::MergeFrom(const UtxoEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.UtxoEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_scriptpublickey()) {
    _internal_mutable_scriptpublickey()->::kaspawalletd::ScriptPublicKey::MergeFrom(from._internal_scriptpublickey());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_blockdaascore() != 0) {
    _internal_set_blockdaascore(from._internal_blockdaascore());
  }
  if (from._internal_iscoinbase() != 0) {
    _internal_set_iscoinbase(from._internal_iscoinbase());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UtxoEntry::CopyFrom(const UtxoEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.UtxoEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtxoEntry::IsInitialized() const {
  return true;
}

void UtxoEntry::InternalSwap(UtxoEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UtxoEntry, iscoinbase_)
      + sizeof(UtxoEntry::iscoinbase_)
      - PROTOBUF_FIELD_OFFSET(UtxoEntry, scriptpublickey_)>(
          reinterpret_cast<char*>(&scriptpublickey_),
          reinterpret_cast<char*>(&other->scriptpublickey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UtxoEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[16]);
}

// ===================================================================

class GetExternalSpendableUTXOsRequest::_Internal {
 public:
};

GetExternalSpendableUTXOsRequest::GetExternalSpendableUTXOsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.GetExternalSpendableUTXOsRequest)
}
GetExternalSpendableUTXOsRequest::GetExternalSpendableUTXOsRequest(const GetExternalSpendableUTXOsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.GetExternalSpendableUTXOsRequest)
}

inline void GetExternalSpendableUTXOsRequest::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetExternalSpendableUTXOsRequest::~GetExternalSpendableUTXOsRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.GetExternalSpendableUTXOsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExternalSpendableUTXOsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetExternalSpendableUTXOsRequest::ArenaDtor(void* object) {
  GetExternalSpendableUTXOsRequest* _this = reinterpret_cast< GetExternalSpendableUTXOsRequest* >(object);
  (void)_this;
}
void GetExternalSpendableUTXOsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExternalSpendableUTXOsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExternalSpendableUTXOsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.GetExternalSpendableUTXOsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExternalSpendableUTXOsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.GetExternalSpendableUTXOsRequest.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetExternalSpendableUTXOsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.GetExternalSpendableUTXOsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.GetExternalSpendableUTXOsRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.GetExternalSpendableUTXOsRequest)
  return target;
}

size_t GetExternalSpendableUTXOsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.GetExternalSpendableUTXOsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExternalSpendableUTXOsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExternalSpendableUTXOsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExternalSpendableUTXOsRequest::GetClassData() const { return &_class_data_; }

void GetExternalSpendableUTXOsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExternalSpendableUTXOsRequest *>(to)->MergeFrom(
      static_cast<const GetExternalSpendableUTXOsRequest &>(from));
}


void GetExternalSpendableUTXOsRequest::MergeFrom(const GetExternalSpendableUTXOsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.GetExternalSpendableUTXOsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExternalSpendableUTXOsRequest::CopyFrom(const GetExternalSpendableUTXOsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.GetExternalSpendableUTXOsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExternalSpendableUTXOsRequest::IsInitialized() const {
  return true;
}

void GetExternalSpendableUTXOsRequest::InternalSwap(GetExternalSpendableUTXOsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExternalSpendableUTXOsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[17]);
}

// ===================================================================

class GetExternalSpendableUTXOsResponse::_Internal {
 public:
};

GetExternalSpendableUTXOsResponse::GetExternalSpendableUTXOsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.GetExternalSpendableUTXOsResponse)
}
GetExternalSpendableUTXOsResponse::GetExternalSpendableUTXOsResponse(const GetExternalSpendableUTXOsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.GetExternalSpendableUTXOsResponse)
}

inline void GetExternalSpendableUTXOsResponse::SharedCtor() {
}

GetExternalSpendableUTXOsResponse::~GetExternalSpendableUTXOsResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.GetExternalSpendableUTXOsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExternalSpendableUTXOsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetExternalSpendableUTXOsResponse::ArenaDtor(void* object) {
  GetExternalSpendableUTXOsResponse* _this = reinterpret_cast< GetExternalSpendableUTXOsResponse* >(object);
  (void)_this;
}
void GetExternalSpendableUTXOsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExternalSpendableUTXOsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExternalSpendableUTXOsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.GetExternalSpendableUTXOsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExternalSpendableUTXOsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kaspawalletd.UtxosByAddressesEntry Entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetExternalSpendableUTXOsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.GetExternalSpendableUTXOsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kaspawalletd.UtxosByAddressesEntry Entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.GetExternalSpendableUTXOsResponse)
  return target;
}

size_t GetExternalSpendableUTXOsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.GetExternalSpendableUTXOsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaspawalletd.UtxosByAddressesEntry Entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExternalSpendableUTXOsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExternalSpendableUTXOsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExternalSpendableUTXOsResponse::GetClassData() const { return &_class_data_; }

void GetExternalSpendableUTXOsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExternalSpendableUTXOsResponse *>(to)->MergeFrom(
      static_cast<const GetExternalSpendableUTXOsResponse &>(from));
}


void GetExternalSpendableUTXOsResponse::MergeFrom(const GetExternalSpendableUTXOsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.GetExternalSpendableUTXOsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExternalSpendableUTXOsResponse::CopyFrom(const GetExternalSpendableUTXOsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.GetExternalSpendableUTXOsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExternalSpendableUTXOsResponse::IsInitialized() const {
  return true;
}

void GetExternalSpendableUTXOsResponse::InternalSwap(GetExternalSpendableUTXOsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExternalSpendableUTXOsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[18]);
}

// ===================================================================

class SendRequest::_Internal {
 public:
};

SendRequest::SendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  from_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.SendRequest)
}
SendRequest::SendRequest(const SendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      from_(from.from_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  toaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    toaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_toaddress().empty()) {
    toaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_toaddress(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.SendRequest)
}

inline void SendRequest::SharedCtor() {
toaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  toaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
amount_ = uint64_t{0u};
}

SendRequest::~SendRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.SendRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  toaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendRequest::ArenaDtor(void* object) {
  SendRequest* _this = reinterpret_cast< SendRequest* >(object);
  (void)_this;
}
void SendRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.SendRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.Clear();
  toaddress_.ClearToEmpty();
  password_.ClearToEmpty();
  amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string toAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_toaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.SendRequest.toAddress"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.SendRequest.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string from = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_from();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.SendRequest.from"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.SendRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string toAddress = 1;
  if (!this->_internal_toaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_toaddress().data(), static_cast<int>(this->_internal_toaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.SendRequest.toAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_toaddress(), target);
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.SendRequest.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // repeated string from = 4;
  for (int i = 0, n = this->_internal_from_size(); i < n; i++) {
    const auto& s = this->_internal_from(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.SendRequest.from");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.SendRequest)
  return target;
}

size_t SendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.SendRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string from = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(from_.size());
  for (int i = 0, n = from_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      from_.Get(i));
  }

  // string toAddress = 1;
  if (!this->_internal_toaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_toaddress());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // uint64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendRequest::GetClassData() const { return &_class_data_; }

void SendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendRequest *>(to)->MergeFrom(
      static_cast<const SendRequest &>(from));
}


void SendRequest::MergeFrom(const SendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.SendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  from_.MergeFrom(from.from_);
  if (!from._internal_toaddress().empty()) {
    _internal_set_toaddress(from._internal_toaddress());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendRequest::CopyFrom(const SendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.SendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRequest::IsInitialized() const {
  return true;
}

void SendRequest::InternalSwap(SendRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  from_.InternalSwap(&other->from_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &toaddress_, lhs_arena,
      &other->toaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[19]);
}

// ===================================================================

class SendResponse::_Internal {
 public:
};

SendResponse::SendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  txids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.SendResponse)
}
SendResponse::SendResponse(const SendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      txids_(from.txids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.SendResponse)
}

inline void SendResponse::SharedCtor() {
}

SendResponse::~SendResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.SendResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendResponse::ArenaDtor(void* object) {
  SendResponse* _this = reinterpret_cast< SendResponse* >(object);
  (void)_this;
}
void SendResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.SendResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string txIDs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.SendResponse.txIDs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.SendResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string txIDs = 1;
  for (int i = 0, n = this->_internal_txids_size(); i < n; i++) {
    const auto& s = this->_internal_txids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.SendResponse.txIDs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.SendResponse)
  return target;
}

size_t SendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.SendResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string txIDs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(txids_.size());
  for (int i = 0, n = txids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      txids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendResponse::GetClassData() const { return &_class_data_; }

void SendResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendResponse *>(to)->MergeFrom(
      static_cast<const SendResponse &>(from));
}


void SendResponse::MergeFrom(const SendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.SendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  txids_.MergeFrom(from.txids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendResponse::CopyFrom(const SendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.SendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendResponse::IsInitialized() const {
  return true;
}

void SendResponse::InternalSwap(SendResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  txids_.InternalSwap(&other->txids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[20]);
}

// ===================================================================

class SignRequest::_Internal {
 public:
};

SignRequest::SignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unsignedtransactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.SignRequest)
}
SignRequest::SignRequest(const SignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unsignedtransactions_(from.unsignedtransactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.SignRequest)
}

inline void SignRequest::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignRequest::~SignRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.SignRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignRequest::ArenaDtor(void* object) {
  SignRequest* _this = reinterpret_cast< SignRequest* >(object);
  (void)_this;
}
void SignRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.SignRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unsignedtransactions_.Clear();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes unsignedTransactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unsignedtransactions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.SignRequest.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.SignRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes unsignedTransactions = 1;
  for (int i = 0, n = this->_internal_unsignedtransactions_size(); i < n; i++) {
    const auto& s = this->_internal_unsignedtransactions(i);
    target = stream->WriteBytes(1, s, target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.SignRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.SignRequest)
  return target;
}

size_t SignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.SignRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes unsignedTransactions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(unsignedtransactions_.size());
  for (int i = 0, n = unsignedtransactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      unsignedtransactions_.Get(i));
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignRequest::GetClassData() const { return &_class_data_; }

void SignRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignRequest *>(to)->MergeFrom(
      static_cast<const SignRequest &>(from));
}


void SignRequest::MergeFrom(const SignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.SignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  unsignedtransactions_.MergeFrom(from.unsignedtransactions_);
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignRequest::CopyFrom(const SignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.SignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignRequest::IsInitialized() const {
  return true;
}

void SignRequest::InternalSwap(SignRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  unsignedtransactions_.InternalSwap(&other->unsignedtransactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SignRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[21]);
}

// ===================================================================

class SignResponse::_Internal {
 public:
};

SignResponse::SignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  signedtransactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.SignResponse)
}
SignResponse::SignResponse(const SignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signedtransactions_(from.signedtransactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.SignResponse)
}

inline void SignResponse::SharedCtor() {
}

SignResponse::~SignResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.SignResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SignResponse::ArenaDtor(void* object) {
  SignResponse* _this = reinterpret_cast< SignResponse* >(object);
  (void)_this;
}
void SignResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.SignResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signedtransactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes signedTransactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signedtransactions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.SignResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes signedTransactions = 1;
  for (int i = 0, n = this->_internal_signedtransactions_size(); i < n; i++) {
    const auto& s = this->_internal_signedtransactions(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.SignResponse)
  return target;
}

size_t SignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.SignResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signedTransactions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signedtransactions_.size());
  for (int i = 0, n = signedtransactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signedtransactions_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignResponse::GetClassData() const { return &_class_data_; }

void SignResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignResponse *>(to)->MergeFrom(
      static_cast<const SignResponse &>(from));
}


void SignResponse::MergeFrom(const SignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.SignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  signedtransactions_.MergeFrom(from.signedtransactions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignResponse::CopyFrom(const SignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.SignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignResponse::IsInitialized() const {
  return true;
}

void SignResponse::InternalSwap(SignResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  signedtransactions_.InternalSwap(&other->signedtransactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[22]);
}

// ===================================================================

class IsValidAddress::_Internal {
 public:
};

IsValidAddress::IsValidAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.IsValidAddress)
}
IsValidAddress::IsValidAddress(const IsValidAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  isvalid_ = from.isvalid_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.IsValidAddress)
}

inline void IsValidAddress::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
isvalid_ = false;
}

IsValidAddress::~IsValidAddress() {
  // @@protoc_insertion_point(destructor:kaspawalletd.IsValidAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IsValidAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IsValidAddress::ArenaDtor(void* object) {
  IsValidAddress* _this = reinterpret_cast< IsValidAddress* >(object);
  (void)_this;
}
void IsValidAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsValidAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IsValidAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.IsValidAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  error_.ClearToEmpty();
  isvalid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsValidAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.IsValidAddress.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isValid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.IsValidAddress.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsValidAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.IsValidAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.IsValidAddress.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bool isValid = 2;
  if (this->_internal_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isvalid(), target);
  }

  // string error = 3;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.IsValidAddress.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.IsValidAddress)
  return target;
}

size_t IsValidAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.IsValidAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string error = 3;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool isValid = 2;
  if (this->_internal_isvalid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsValidAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IsValidAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsValidAddress::GetClassData() const { return &_class_data_; }

void IsValidAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IsValidAddress *>(to)->MergeFrom(
      static_cast<const IsValidAddress &>(from));
}


void IsValidAddress::MergeFrom(const IsValidAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.IsValidAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_isvalid() != 0) {
    _internal_set_isvalid(from._internal_isvalid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsValidAddress::CopyFrom(const IsValidAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.IsValidAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsValidAddress::IsInitialized() const {
  return true;
}

void IsValidAddress::InternalSwap(IsValidAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  swap(isvalid_, other->isvalid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsValidAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[23]);
}

// ===================================================================

class CheckIfAddressesAreValidRequest::_Internal {
 public:
};

CheckIfAddressesAreValidRequest::CheckIfAddressesAreValidRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  addresses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.CheckIfAddressesAreValidRequest)
}
CheckIfAddressesAreValidRequest::CheckIfAddressesAreValidRequest(const CheckIfAddressesAreValidRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.CheckIfAddressesAreValidRequest)
}

inline void CheckIfAddressesAreValidRequest::SharedCtor() {
}

CheckIfAddressesAreValidRequest::~CheckIfAddressesAreValidRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.CheckIfAddressesAreValidRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CheckIfAddressesAreValidRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CheckIfAddressesAreValidRequest::ArenaDtor(void* object) {
  CheckIfAddressesAreValidRequest* _this = reinterpret_cast< CheckIfAddressesAreValidRequest* >(object);
  (void)_this;
}
void CheckIfAddressesAreValidRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckIfAddressesAreValidRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckIfAddressesAreValidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.CheckIfAddressesAreValidRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckIfAddressesAreValidRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string addresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.CheckIfAddressesAreValidRequest.addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckIfAddressesAreValidRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.CheckIfAddressesAreValidRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string addresses = 1;
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.CheckIfAddressesAreValidRequest.addresses");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.CheckIfAddressesAreValidRequest)
  return target;
}

size_t CheckIfAddressesAreValidRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.CheckIfAddressesAreValidRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckIfAddressesAreValidRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CheckIfAddressesAreValidRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckIfAddressesAreValidRequest::GetClassData() const { return &_class_data_; }

void CheckIfAddressesAreValidRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CheckIfAddressesAreValidRequest *>(to)->MergeFrom(
      static_cast<const CheckIfAddressesAreValidRequest &>(from));
}


void CheckIfAddressesAreValidRequest::MergeFrom(const CheckIfAddressesAreValidRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.CheckIfAddressesAreValidRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckIfAddressesAreValidRequest::CopyFrom(const CheckIfAddressesAreValidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.CheckIfAddressesAreValidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIfAddressesAreValidRequest::IsInitialized() const {
  return true;
}

void CheckIfAddressesAreValidRequest::InternalSwap(CheckIfAddressesAreValidRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckIfAddressesAreValidRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[24]);
}

// ===================================================================

class CheckIfAddressesAreValidResponse::_Internal {
 public:
};

CheckIfAddressesAreValidResponse::CheckIfAddressesAreValidResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arevalidaddresses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.CheckIfAddressesAreValidResponse)
}
CheckIfAddressesAreValidResponse::CheckIfAddressesAreValidResponse(const CheckIfAddressesAreValidResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arevalidaddresses_(from.arevalidaddresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.CheckIfAddressesAreValidResponse)
}

inline void CheckIfAddressesAreValidResponse::SharedCtor() {
}

CheckIfAddressesAreValidResponse::~CheckIfAddressesAreValidResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.CheckIfAddressesAreValidResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CheckIfAddressesAreValidResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CheckIfAddressesAreValidResponse::ArenaDtor(void* object) {
  CheckIfAddressesAreValidResponse* _this = reinterpret_cast< CheckIfAddressesAreValidResponse* >(object);
  (void)_this;
}
void CheckIfAddressesAreValidResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckIfAddressesAreValidResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckIfAddressesAreValidResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.CheckIfAddressesAreValidResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arevalidaddresses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckIfAddressesAreValidResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kaspawalletd.IsValidAddress areValidAddresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arevalidaddresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckIfAddressesAreValidResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.CheckIfAddressesAreValidResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kaspawalletd.IsValidAddress areValidAddresses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arevalidaddresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_arevalidaddresses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.CheckIfAddressesAreValidResponse)
  return target;
}

size_t CheckIfAddressesAreValidResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.CheckIfAddressesAreValidResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaspawalletd.IsValidAddress areValidAddresses = 1;
  total_size += 1UL * this->_internal_arevalidaddresses_size();
  for (const auto& msg : this->arevalidaddresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckIfAddressesAreValidResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CheckIfAddressesAreValidResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckIfAddressesAreValidResponse::GetClassData() const { return &_class_data_; }

void CheckIfAddressesAreValidResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CheckIfAddressesAreValidResponse *>(to)->MergeFrom(
      static_cast<const CheckIfAddressesAreValidResponse &>(from));
}


void CheckIfAddressesAreValidResponse::MergeFrom(const CheckIfAddressesAreValidResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.CheckIfAddressesAreValidResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  arevalidaddresses_.MergeFrom(from.arevalidaddresses_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckIfAddressesAreValidResponse::CopyFrom(const CheckIfAddressesAreValidResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.CheckIfAddressesAreValidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIfAddressesAreValidResponse::IsInitialized() const {
  return true;
}

void CheckIfAddressesAreValidResponse::InternalSwap(CheckIfAddressesAreValidResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arevalidaddresses_.InternalSwap(&other->arevalidaddresses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckIfAddressesAreValidResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[25]);
}

// ===================================================================

class CheckIfAddressIsValidRequest::_Internal {
 public:
};

CheckIfAddressIsValidRequest::CheckIfAddressIsValidRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.CheckIfAddressIsValidRequest)
}
CheckIfAddressIsValidRequest::CheckIfAddressIsValidRequest(const CheckIfAddressIsValidRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.CheckIfAddressIsValidRequest)
}

inline void CheckIfAddressIsValidRequest::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CheckIfAddressIsValidRequest::~CheckIfAddressIsValidRequest() {
  // @@protoc_insertion_point(destructor:kaspawalletd.CheckIfAddressIsValidRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CheckIfAddressIsValidRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckIfAddressIsValidRequest::ArenaDtor(void* object) {
  CheckIfAddressIsValidRequest* _this = reinterpret_cast< CheckIfAddressIsValidRequest* >(object);
  (void)_this;
}
void CheckIfAddressIsValidRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckIfAddressIsValidRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckIfAddressIsValidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.CheckIfAddressIsValidRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckIfAddressIsValidRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.CheckIfAddressIsValidRequest.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckIfAddressIsValidRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.CheckIfAddressIsValidRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.CheckIfAddressIsValidRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.CheckIfAddressIsValidRequest)
  return target;
}

size_t CheckIfAddressIsValidRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.CheckIfAddressIsValidRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckIfAddressIsValidRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CheckIfAddressIsValidRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckIfAddressIsValidRequest::GetClassData() const { return &_class_data_; }

void CheckIfAddressIsValidRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CheckIfAddressIsValidRequest *>(to)->MergeFrom(
      static_cast<const CheckIfAddressIsValidRequest &>(from));
}


void CheckIfAddressIsValidRequest::MergeFrom(const CheckIfAddressIsValidRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.CheckIfAddressIsValidRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckIfAddressIsValidRequest::CopyFrom(const CheckIfAddressIsValidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.CheckIfAddressIsValidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIfAddressIsValidRequest::IsInitialized() const {
  return true;
}

void CheckIfAddressIsValidRequest::InternalSwap(CheckIfAddressIsValidRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckIfAddressIsValidRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[26]);
}

// ===================================================================

class CheckIfAddressIsValidResponse::_Internal {
 public:
};

CheckIfAddressIsValidResponse::CheckIfAddressIsValidResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaspawalletd.CheckIfAddressIsValidResponse)
}
CheckIfAddressIsValidResponse::CheckIfAddressIsValidResponse(const CheckIfAddressIsValidResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  isvalid_ = from.isvalid_;
  // @@protoc_insertion_point(copy_constructor:kaspawalletd.CheckIfAddressIsValidResponse)
}

inline void CheckIfAddressIsValidResponse::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
isvalid_ = false;
}

CheckIfAddressIsValidResponse::~CheckIfAddressIsValidResponse() {
  // @@protoc_insertion_point(destructor:kaspawalletd.CheckIfAddressIsValidResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CheckIfAddressIsValidResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckIfAddressIsValidResponse::ArenaDtor(void* object) {
  CheckIfAddressIsValidResponse* _this = reinterpret_cast< CheckIfAddressIsValidResponse* >(object);
  (void)_this;
}
void CheckIfAddressIsValidResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckIfAddressIsValidResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckIfAddressIsValidResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kaspawalletd.CheckIfAddressIsValidResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  isvalid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckIfAddressIsValidResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaspawalletd.CheckIfAddressIsValidResponse.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isValid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckIfAddressIsValidResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaspawalletd.CheckIfAddressIsValidResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaspawalletd.CheckIfAddressIsValidResponse.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bool isValid = 2;
  if (this->_internal_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isvalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaspawalletd.CheckIfAddressIsValidResponse)
  return target;
}

size_t CheckIfAddressIsValidResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaspawalletd.CheckIfAddressIsValidResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool isValid = 2;
  if (this->_internal_isvalid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckIfAddressIsValidResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CheckIfAddressIsValidResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckIfAddressIsValidResponse::GetClassData() const { return &_class_data_; }

void CheckIfAddressIsValidResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CheckIfAddressIsValidResponse *>(to)->MergeFrom(
      static_cast<const CheckIfAddressIsValidResponse &>(from));
}


void CheckIfAddressIsValidResponse::MergeFrom(const CheckIfAddressIsValidResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaspawalletd.CheckIfAddressIsValidResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_isvalid() != 0) {
    _internal_set_isvalid(from._internal_isvalid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckIfAddressIsValidResponse::CopyFrom(const CheckIfAddressIsValidResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaspawalletd.CheckIfAddressIsValidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIfAddressIsValidResponse::IsInitialized() const {
  return true;
}

void CheckIfAddressIsValidResponse::InternalSwap(CheckIfAddressIsValidResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  swap(isvalid_, other->isvalid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckIfAddressIsValidResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kaspawalletd_2eproto_getter, &descriptor_table_kaspawalletd_2eproto_once,
      file_level_metadata_kaspawalletd_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kaspawalletd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kaspawalletd::GetBalanceRequest* Arena::CreateMaybeMessage< ::kaspawalletd::GetBalanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::GetBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::GetBalanceResponse* Arena::CreateMaybeMessage< ::kaspawalletd::GetBalanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::GetBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::AddressBalances* Arena::CreateMaybeMessage< ::kaspawalletd::AddressBalances >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::AddressBalances >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::CreateUnsignedTransactionsRequest* Arena::CreateMaybeMessage< ::kaspawalletd::CreateUnsignedTransactionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::CreateUnsignedTransactionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::CreateUnsignedTransactionsResponse* Arena::CreateMaybeMessage< ::kaspawalletd::CreateUnsignedTransactionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::CreateUnsignedTransactionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::ShowAddressesRequest* Arena::CreateMaybeMessage< ::kaspawalletd::ShowAddressesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::ShowAddressesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::ShowAddressesResponse* Arena::CreateMaybeMessage< ::kaspawalletd::ShowAddressesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::ShowAddressesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::NewAddressRequest* Arena::CreateMaybeMessage< ::kaspawalletd::NewAddressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::NewAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::NewAddressResponse* Arena::CreateMaybeMessage< ::kaspawalletd::NewAddressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::NewAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::BroadcastRequest* Arena::CreateMaybeMessage< ::kaspawalletd::BroadcastRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::BroadcastRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::BroadcastResponse* Arena::CreateMaybeMessage< ::kaspawalletd::BroadcastResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::BroadcastResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::ShutdownRequest* Arena::CreateMaybeMessage< ::kaspawalletd::ShutdownRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::ShutdownRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::ShutdownResponse* Arena::CreateMaybeMessage< ::kaspawalletd::ShutdownResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::ShutdownResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::Outpoint* Arena::CreateMaybeMessage< ::kaspawalletd::Outpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::Outpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::UtxosByAddressesEntry* Arena::CreateMaybeMessage< ::kaspawalletd::UtxosByAddressesEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::UtxosByAddressesEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::ScriptPublicKey* Arena::CreateMaybeMessage< ::kaspawalletd::ScriptPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::ScriptPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::UtxoEntry* Arena::CreateMaybeMessage< ::kaspawalletd::UtxoEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::UtxoEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::GetExternalSpendableUTXOsRequest* Arena::CreateMaybeMessage< ::kaspawalletd::GetExternalSpendableUTXOsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::GetExternalSpendableUTXOsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::GetExternalSpendableUTXOsResponse* Arena::CreateMaybeMessage< ::kaspawalletd::GetExternalSpendableUTXOsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::GetExternalSpendableUTXOsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::SendRequest* Arena::CreateMaybeMessage< ::kaspawalletd::SendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::SendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::SendResponse* Arena::CreateMaybeMessage< ::kaspawalletd::SendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::SendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::SignRequest* Arena::CreateMaybeMessage< ::kaspawalletd::SignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::SignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::SignResponse* Arena::CreateMaybeMessage< ::kaspawalletd::SignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::SignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::IsValidAddress* Arena::CreateMaybeMessage< ::kaspawalletd::IsValidAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::IsValidAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::CheckIfAddressesAreValidRequest* Arena::CreateMaybeMessage< ::kaspawalletd::CheckIfAddressesAreValidRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::CheckIfAddressesAreValidRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::CheckIfAddressesAreValidResponse* Arena::CreateMaybeMessage< ::kaspawalletd::CheckIfAddressesAreValidResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::CheckIfAddressesAreValidResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::CheckIfAddressIsValidRequest* Arena::CreateMaybeMessage< ::kaspawalletd::CheckIfAddressIsValidRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::CheckIfAddressIsValidRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kaspawalletd::CheckIfAddressIsValidResponse* Arena::CreateMaybeMessage< ::kaspawalletd::CheckIfAddressIsValidResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaspawalletd::CheckIfAddressIsValidResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
