// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2p.proto

#include "p2p.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protowire {
constexpr RequestAddressesMessage::RequestAddressesMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subnetworkid_(nullptr)
  , includeallsubnetworks_(false){}
struct RequestAddressesMessageDefaultTypeInternal {
  constexpr RequestAddressesMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestAddressesMessageDefaultTypeInternal() {}
  union {
    RequestAddressesMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestAddressesMessageDefaultTypeInternal _RequestAddressesMessage_default_instance_;
constexpr AddressesMessage::AddressesMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addresslist_(){}
struct AddressesMessageDefaultTypeInternal {
  constexpr AddressesMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressesMessageDefaultTypeInternal() {}
  union {
    AddressesMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressesMessageDefaultTypeInternal _AddressesMessage_default_instance_;
constexpr NetAddress::NetAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(int64_t{0})
  , port_(0u){}
struct NetAddressDefaultTypeInternal {
  constexpr NetAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetAddressDefaultTypeInternal() {}
  union {
    NetAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetAddressDefaultTypeInternal _NetAddress_default_instance_;
constexpr SubnetworkId::SubnetworkId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SubnetworkIdDefaultTypeInternal {
  constexpr SubnetworkIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubnetworkIdDefaultTypeInternal() {}
  union {
    SubnetworkId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubnetworkIdDefaultTypeInternal _SubnetworkId_default_instance_;
constexpr TransactionMessage::TransactionMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , outputs_()
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subnetworkid_(nullptr)
  , locktime_(uint64_t{0u})
  , gas_(uint64_t{0u})
  , version_(0u){}
struct TransactionMessageDefaultTypeInternal {
  constexpr TransactionMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionMessageDefaultTypeInternal() {}
  union {
    TransactionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionMessageDefaultTypeInternal _TransactionMessage_default_instance_;
constexpr TransactionInput::TransactionInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signaturescript_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previousoutpoint_(nullptr)
  , sequence_(uint64_t{0u})
  , sigopcount_(0u){}
struct TransactionInputDefaultTypeInternal {
  constexpr TransactionInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionInputDefaultTypeInternal() {}
  union {
    TransactionInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionInputDefaultTypeInternal _TransactionInput_default_instance_;
constexpr Outpoint::Outpoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactionid_(nullptr)
  , index_(0u){}
struct OutpointDefaultTypeInternal {
  constexpr OutpointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutpointDefaultTypeInternal() {}
  union {
    Outpoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutpointDefaultTypeInternal _Outpoint_default_instance_;
constexpr TransactionId::TransactionId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TransactionIdDefaultTypeInternal {
  constexpr TransactionIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionIdDefaultTypeInternal() {}
  union {
    TransactionId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionIdDefaultTypeInternal _TransactionId_default_instance_;
constexpr ScriptPublicKey::ScriptPublicKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : script_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0u){}
struct ScriptPublicKeyDefaultTypeInternal {
  constexpr ScriptPublicKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScriptPublicKeyDefaultTypeInternal() {}
  union {
    ScriptPublicKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScriptPublicKeyDefaultTypeInternal _ScriptPublicKey_default_instance_;
constexpr TransactionOutput::TransactionOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scriptpublickey_(nullptr)
  , value_(uint64_t{0u}){}
struct TransactionOutputDefaultTypeInternal {
  constexpr TransactionOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionOutputDefaultTypeInternal() {}
  union {
    TransactionOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionOutputDefaultTypeInternal _TransactionOutput_default_instance_;
constexpr BlockMessage::BlockMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_()
  , header_(nullptr){}
struct BlockMessageDefaultTypeInternal {
  constexpr BlockMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockMessageDefaultTypeInternal() {}
  union {
    BlockMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockMessageDefaultTypeInternal _BlockMessage_default_instance_;
constexpr BlockHeader::BlockHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parents_()
  , bluework_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hashmerkleroot_(nullptr)
  , acceptedidmerkleroot_(nullptr)
  , utxocommitment_(nullptr)
  , pruningpoint_(nullptr)
  , version_(0u)
  , bits_(0u)
  , timestamp_(int64_t{0})
  , nonce_(uint64_t{0u})
  , daascore_(uint64_t{0u})
  , bluescore_(uint64_t{0u}){}
struct BlockHeaderDefaultTypeInternal {
  constexpr BlockHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockHeaderDefaultTypeInternal() {}
  union {
    BlockHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
constexpr BlockLevelParents::BlockLevelParents(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parenthashes_(){}
struct BlockLevelParentsDefaultTypeInternal {
  constexpr BlockLevelParentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockLevelParentsDefaultTypeInternal() {}
  union {
    BlockLevelParents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockLevelParentsDefaultTypeInternal _BlockLevelParents_default_instance_;
constexpr Hash::Hash(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HashDefaultTypeInternal {
  constexpr HashDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HashDefaultTypeInternal() {}
  union {
    Hash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HashDefaultTypeInternal _Hash_default_instance_;
constexpr RequestBlockLocatorMessage::RequestBlockLocatorMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : highhash_(nullptr)
  , limit_(0u){}
struct RequestBlockLocatorMessageDefaultTypeInternal {
  constexpr RequestBlockLocatorMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestBlockLocatorMessageDefaultTypeInternal() {}
  union {
    RequestBlockLocatorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestBlockLocatorMessageDefaultTypeInternal _RequestBlockLocatorMessage_default_instance_;
constexpr BlockLocatorMessage::BlockLocatorMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hashes_(){}
struct BlockLocatorMessageDefaultTypeInternal {
  constexpr BlockLocatorMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockLocatorMessageDefaultTypeInternal() {}
  union {
    BlockLocatorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockLocatorMessageDefaultTypeInternal _BlockLocatorMessage_default_instance_;
constexpr RequestHeadersMessage::RequestHeadersMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lowhash_(nullptr)
  , highhash_(nullptr){}
struct RequestHeadersMessageDefaultTypeInternal {
  constexpr RequestHeadersMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestHeadersMessageDefaultTypeInternal() {}
  union {
    RequestHeadersMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestHeadersMessageDefaultTypeInternal _RequestHeadersMessage_default_instance_;
constexpr RequestNextHeadersMessage::RequestNextHeadersMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RequestNextHeadersMessageDefaultTypeInternal {
  constexpr RequestNextHeadersMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestNextHeadersMessageDefaultTypeInternal() {}
  union {
    RequestNextHeadersMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestNextHeadersMessageDefaultTypeInternal _RequestNextHeadersMessage_default_instance_;
constexpr DoneHeadersMessage::DoneHeadersMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DoneHeadersMessageDefaultTypeInternal {
  constexpr DoneHeadersMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoneHeadersMessageDefaultTypeInternal() {}
  union {
    DoneHeadersMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoneHeadersMessageDefaultTypeInternal _DoneHeadersMessage_default_instance_;
constexpr RequestRelayBlocksMessage::RequestRelayBlocksMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hashes_(){}
struct RequestRelayBlocksMessageDefaultTypeInternal {
  constexpr RequestRelayBlocksMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestRelayBlocksMessageDefaultTypeInternal() {}
  union {
    RequestRelayBlocksMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestRelayBlocksMessageDefaultTypeInternal _RequestRelayBlocksMessage_default_instance_;
constexpr RequestTransactionsMessage::RequestTransactionsMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_(){}
struct RequestTransactionsMessageDefaultTypeInternal {
  constexpr RequestTransactionsMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestTransactionsMessageDefaultTypeInternal() {}
  union {
    RequestTransactionsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestTransactionsMessageDefaultTypeInternal _RequestTransactionsMessage_default_instance_;
constexpr TransactionNotFoundMessage::TransactionNotFoundMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr){}
struct TransactionNotFoundMessageDefaultTypeInternal {
  constexpr TransactionNotFoundMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionNotFoundMessageDefaultTypeInternal() {}
  union {
    TransactionNotFoundMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionNotFoundMessageDefaultTypeInternal _TransactionNotFoundMessage_default_instance_;
constexpr InvRelayBlockMessage::InvRelayBlockMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(nullptr){}
struct InvRelayBlockMessageDefaultTypeInternal {
  constexpr InvRelayBlockMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvRelayBlockMessageDefaultTypeInternal() {}
  union {
    InvRelayBlockMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvRelayBlockMessageDefaultTypeInternal _InvRelayBlockMessage_default_instance_;
constexpr InvTransactionsMessage::InvTransactionsMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_(){}
struct InvTransactionsMessageDefaultTypeInternal {
  constexpr InvTransactionsMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InvTransactionsMessageDefaultTypeInternal() {}
  union {
    InvTransactionsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InvTransactionsMessageDefaultTypeInternal _InvTransactionsMessage_default_instance_;
constexpr PingMessage::PingMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nonce_(uint64_t{0u}){}
struct PingMessageDefaultTypeInternal {
  constexpr PingMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingMessageDefaultTypeInternal() {}
  union {
    PingMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingMessageDefaultTypeInternal _PingMessage_default_instance_;
constexpr PongMessage::PongMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nonce_(uint64_t{0u}){}
struct PongMessageDefaultTypeInternal {
  constexpr PongMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PongMessageDefaultTypeInternal() {}
  union {
    PongMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PongMessageDefaultTypeInternal _PongMessage_default_instance_;
constexpr VerackMessage::VerackMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VerackMessageDefaultTypeInternal {
  constexpr VerackMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VerackMessageDefaultTypeInternal() {}
  union {
    VerackMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VerackMessageDefaultTypeInternal _VerackMessage_default_instance_;
constexpr VersionMessage::VersionMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , useragent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , network_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(nullptr)
  , subnetworkid_(nullptr)
  , services_(uint64_t{0u})
  , timestamp_(int64_t{0})
  , protocolversion_(0u)
  , disablerelaytx_(false){}
struct VersionMessageDefaultTypeInternal {
  constexpr VersionMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersionMessageDefaultTypeInternal() {}
  union {
    VersionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersionMessageDefaultTypeInternal _VersionMessage_default_instance_;
constexpr RejectMessage::RejectMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RejectMessageDefaultTypeInternal {
  constexpr RejectMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RejectMessageDefaultTypeInternal() {}
  union {
    RejectMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RejectMessageDefaultTypeInternal _RejectMessage_default_instance_;
constexpr RequestPruningPointUTXOSetMessage::RequestPruningPointUTXOSetMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pruningpointhash_(nullptr){}
struct RequestPruningPointUTXOSetMessageDefaultTypeInternal {
  constexpr RequestPruningPointUTXOSetMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestPruningPointUTXOSetMessageDefaultTypeInternal() {}
  union {
    RequestPruningPointUTXOSetMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPruningPointUTXOSetMessageDefaultTypeInternal _RequestPruningPointUTXOSetMessage_default_instance_;
constexpr PruningPointUtxoSetChunkMessage::PruningPointUtxoSetChunkMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outpointandutxoentrypairs_(){}
struct PruningPointUtxoSetChunkMessageDefaultTypeInternal {
  constexpr PruningPointUtxoSetChunkMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PruningPointUtxoSetChunkMessageDefaultTypeInternal() {}
  union {
    PruningPointUtxoSetChunkMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PruningPointUtxoSetChunkMessageDefaultTypeInternal _PruningPointUtxoSetChunkMessage_default_instance_;
constexpr OutpointAndUtxoEntryPair::OutpointAndUtxoEntryPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outpoint_(nullptr)
  , utxoentry_(nullptr){}
struct OutpointAndUtxoEntryPairDefaultTypeInternal {
  constexpr OutpointAndUtxoEntryPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutpointAndUtxoEntryPairDefaultTypeInternal() {}
  union {
    OutpointAndUtxoEntryPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutpointAndUtxoEntryPairDefaultTypeInternal _OutpointAndUtxoEntryPair_default_instance_;
constexpr UtxoEntry::UtxoEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scriptpublickey_(nullptr)
  , amount_(uint64_t{0u})
  , blockdaascore_(uint64_t{0u})
  , iscoinbase_(false){}
struct UtxoEntryDefaultTypeInternal {
  constexpr UtxoEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtxoEntryDefaultTypeInternal() {}
  union {
    UtxoEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtxoEntryDefaultTypeInternal _UtxoEntry_default_instance_;
constexpr RequestNextPruningPointUtxoSetChunkMessage::RequestNextPruningPointUtxoSetChunkMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RequestNextPruningPointUtxoSetChunkMessageDefaultTypeInternal {
  constexpr RequestNextPruningPointUtxoSetChunkMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestNextPruningPointUtxoSetChunkMessageDefaultTypeInternal() {}
  union {
    RequestNextPruningPointUtxoSetChunkMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestNextPruningPointUtxoSetChunkMessageDefaultTypeInternal _RequestNextPruningPointUtxoSetChunkMessage_default_instance_;
constexpr DonePruningPointUtxoSetChunksMessage::DonePruningPointUtxoSetChunksMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DonePruningPointUtxoSetChunksMessageDefaultTypeInternal {
  constexpr DonePruningPointUtxoSetChunksMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DonePruningPointUtxoSetChunksMessageDefaultTypeInternal() {}
  union {
    DonePruningPointUtxoSetChunksMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DonePruningPointUtxoSetChunksMessageDefaultTypeInternal _DonePruningPointUtxoSetChunksMessage_default_instance_;
constexpr RequestIBDBlocksMessage::RequestIBDBlocksMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hashes_(){}
struct RequestIBDBlocksMessageDefaultTypeInternal {
  constexpr RequestIBDBlocksMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestIBDBlocksMessageDefaultTypeInternal() {}
  union {
    RequestIBDBlocksMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestIBDBlocksMessageDefaultTypeInternal _RequestIBDBlocksMessage_default_instance_;
constexpr UnexpectedPruningPointMessage::UnexpectedPruningPointMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UnexpectedPruningPointMessageDefaultTypeInternal {
  constexpr UnexpectedPruningPointMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnexpectedPruningPointMessageDefaultTypeInternal() {}
  union {
    UnexpectedPruningPointMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnexpectedPruningPointMessageDefaultTypeInternal _UnexpectedPruningPointMessage_default_instance_;
constexpr IbdBlockLocatorMessage::IbdBlockLocatorMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blocklocatorhashes_()
  , targethash_(nullptr){}
struct IbdBlockLocatorMessageDefaultTypeInternal {
  constexpr IbdBlockLocatorMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IbdBlockLocatorMessageDefaultTypeInternal() {}
  union {
    IbdBlockLocatorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IbdBlockLocatorMessageDefaultTypeInternal _IbdBlockLocatorMessage_default_instance_;
constexpr RequestIBDChainBlockLocatorMessage::RequestIBDChainBlockLocatorMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lowhash_(nullptr)
  , highhash_(nullptr){}
struct RequestIBDChainBlockLocatorMessageDefaultTypeInternal {
  constexpr RequestIBDChainBlockLocatorMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestIBDChainBlockLocatorMessageDefaultTypeInternal() {}
  union {
    RequestIBDChainBlockLocatorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestIBDChainBlockLocatorMessageDefaultTypeInternal _RequestIBDChainBlockLocatorMessage_default_instance_;
constexpr IbdChainBlockLocatorMessage::IbdChainBlockLocatorMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blocklocatorhashes_(){}
struct IbdChainBlockLocatorMessageDefaultTypeInternal {
  constexpr IbdChainBlockLocatorMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IbdChainBlockLocatorMessageDefaultTypeInternal() {}
  union {
    IbdChainBlockLocatorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IbdChainBlockLocatorMessageDefaultTypeInternal _IbdChainBlockLocatorMessage_default_instance_;
constexpr RequestAnticoneMessage::RequestAnticoneMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blockhash_(nullptr)
  , contexthash_(nullptr){}
struct RequestAnticoneMessageDefaultTypeInternal {
  constexpr RequestAnticoneMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestAnticoneMessageDefaultTypeInternal() {}
  union {
    RequestAnticoneMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestAnticoneMessageDefaultTypeInternal _RequestAnticoneMessage_default_instance_;
constexpr IbdBlockLocatorHighestHashMessage::IbdBlockLocatorHighestHashMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : highesthash_(nullptr){}
struct IbdBlockLocatorHighestHashMessageDefaultTypeInternal {
  constexpr IbdBlockLocatorHighestHashMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IbdBlockLocatorHighestHashMessageDefaultTypeInternal() {}
  union {
    IbdBlockLocatorHighestHashMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IbdBlockLocatorHighestHashMessageDefaultTypeInternal _IbdBlockLocatorHighestHashMessage_default_instance_;
constexpr IbdBlockLocatorHighestHashNotFoundMessage::IbdBlockLocatorHighestHashNotFoundMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct IbdBlockLocatorHighestHashNotFoundMessageDefaultTypeInternal {
  constexpr IbdBlockLocatorHighestHashNotFoundMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IbdBlockLocatorHighestHashNotFoundMessageDefaultTypeInternal() {}
  union {
    IbdBlockLocatorHighestHashNotFoundMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IbdBlockLocatorHighestHashNotFoundMessageDefaultTypeInternal _IbdBlockLocatorHighestHashNotFoundMessage_default_instance_;
constexpr BlockHeadersMessage::BlockHeadersMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blockheaders_(){}
struct BlockHeadersMessageDefaultTypeInternal {
  constexpr BlockHeadersMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockHeadersMessageDefaultTypeInternal() {}
  union {
    BlockHeadersMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockHeadersMessageDefaultTypeInternal _BlockHeadersMessage_default_instance_;
constexpr RequestPruningPointAndItsAnticoneMessage::RequestPruningPointAndItsAnticoneMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RequestPruningPointAndItsAnticoneMessageDefaultTypeInternal {
  constexpr RequestPruningPointAndItsAnticoneMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestPruningPointAndItsAnticoneMessageDefaultTypeInternal() {}
  union {
    RequestPruningPointAndItsAnticoneMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPruningPointAndItsAnticoneMessageDefaultTypeInternal _RequestPruningPointAndItsAnticoneMessage_default_instance_;
constexpr RequestNextPruningPointAndItsAnticoneBlocksMessage::RequestNextPruningPointAndItsAnticoneBlocksMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RequestNextPruningPointAndItsAnticoneBlocksMessageDefaultTypeInternal {
  constexpr RequestNextPruningPointAndItsAnticoneBlocksMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestNextPruningPointAndItsAnticoneBlocksMessageDefaultTypeInternal() {}
  union {
    RequestNextPruningPointAndItsAnticoneBlocksMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestNextPruningPointAndItsAnticoneBlocksMessageDefaultTypeInternal _RequestNextPruningPointAndItsAnticoneBlocksMessage_default_instance_;
constexpr BlockWithTrustedDataMessage::BlockWithTrustedDataMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : daawindow_()
  , ghostdagdata_()
  , block_(nullptr)
  , daascore_(uint64_t{0u}){}
struct BlockWithTrustedDataMessageDefaultTypeInternal {
  constexpr BlockWithTrustedDataMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockWithTrustedDataMessageDefaultTypeInternal() {}
  union {
    BlockWithTrustedDataMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockWithTrustedDataMessageDefaultTypeInternal _BlockWithTrustedDataMessage_default_instance_;
constexpr DaaBlock::DaaBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ghostdagdata_(nullptr)
  , block_(nullptr){}
struct DaaBlockDefaultTypeInternal {
  constexpr DaaBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DaaBlockDefaultTypeInternal() {}
  union {
    DaaBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DaaBlockDefaultTypeInternal _DaaBlock_default_instance_;
constexpr DaaBlockV4::DaaBlockV4(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , ghostdagdata_(nullptr){}
struct DaaBlockV4DefaultTypeInternal {
  constexpr DaaBlockV4DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DaaBlockV4DefaultTypeInternal() {}
  union {
    DaaBlockV4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DaaBlockV4DefaultTypeInternal _DaaBlockV4_default_instance_;
constexpr BlockGhostdagDataHashPair::BlockGhostdagDataHashPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(nullptr)
  , ghostdagdata_(nullptr){}
struct BlockGhostdagDataHashPairDefaultTypeInternal {
  constexpr BlockGhostdagDataHashPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockGhostdagDataHashPairDefaultTypeInternal() {}
  union {
    BlockGhostdagDataHashPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockGhostdagDataHashPairDefaultTypeInternal _BlockGhostdagDataHashPair_default_instance_;
constexpr GhostdagData::GhostdagData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mergesetblues_()
  , mergesetreds_()
  , bluesanticonesizes_()
  , bluework_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , selectedparent_(nullptr)
  , bluescore_(uint64_t{0u}){}
struct GhostdagDataDefaultTypeInternal {
  constexpr GhostdagDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GhostdagDataDefaultTypeInternal() {}
  union {
    GhostdagData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GhostdagDataDefaultTypeInternal _GhostdagData_default_instance_;
constexpr BluesAnticoneSizes::BluesAnticoneSizes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bluehash_(nullptr)
  , anticonesize_(0u){}
struct BluesAnticoneSizesDefaultTypeInternal {
  constexpr BluesAnticoneSizesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BluesAnticoneSizesDefaultTypeInternal() {}
  union {
    BluesAnticoneSizes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BluesAnticoneSizesDefaultTypeInternal _BluesAnticoneSizes_default_instance_;
constexpr DoneBlocksWithTrustedDataMessage::DoneBlocksWithTrustedDataMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DoneBlocksWithTrustedDataMessageDefaultTypeInternal {
  constexpr DoneBlocksWithTrustedDataMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoneBlocksWithTrustedDataMessageDefaultTypeInternal() {}
  union {
    DoneBlocksWithTrustedDataMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoneBlocksWithTrustedDataMessageDefaultTypeInternal _DoneBlocksWithTrustedDataMessage_default_instance_;
constexpr PruningPointsMessage::PruningPointsMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_(){}
struct PruningPointsMessageDefaultTypeInternal {
  constexpr PruningPointsMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PruningPointsMessageDefaultTypeInternal() {}
  union {
    PruningPointsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PruningPointsMessageDefaultTypeInternal _PruningPointsMessage_default_instance_;
constexpr RequestPruningPointProofMessage::RequestPruningPointProofMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RequestPruningPointProofMessageDefaultTypeInternal {
  constexpr RequestPruningPointProofMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestPruningPointProofMessageDefaultTypeInternal() {}
  union {
    RequestPruningPointProofMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPruningPointProofMessageDefaultTypeInternal _RequestPruningPointProofMessage_default_instance_;
constexpr PruningPointProofMessage::PruningPointProofMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_(){}
struct PruningPointProofMessageDefaultTypeInternal {
  constexpr PruningPointProofMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PruningPointProofMessageDefaultTypeInternal() {}
  union {
    PruningPointProofMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PruningPointProofMessageDefaultTypeInternal _PruningPointProofMessage_default_instance_;
constexpr PruningPointProofHeaderArray::PruningPointProofHeaderArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_(){}
struct PruningPointProofHeaderArrayDefaultTypeInternal {
  constexpr PruningPointProofHeaderArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PruningPointProofHeaderArrayDefaultTypeInternal() {}
  union {
    PruningPointProofHeaderArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PruningPointProofHeaderArrayDefaultTypeInternal _PruningPointProofHeaderArray_default_instance_;
constexpr ReadyMessage::ReadyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ReadyMessageDefaultTypeInternal {
  constexpr ReadyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadyMessageDefaultTypeInternal() {}
  union {
    ReadyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadyMessageDefaultTypeInternal _ReadyMessage_default_instance_;
constexpr BlockWithTrustedDataV4Message::BlockWithTrustedDataV4Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : daawindowindices_()
  , _daawindowindices_cached_byte_size_(0)
  , ghostdagdataindices_()
  , _ghostdagdataindices_cached_byte_size_(0)
  , block_(nullptr){}
struct BlockWithTrustedDataV4MessageDefaultTypeInternal {
  constexpr BlockWithTrustedDataV4MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockWithTrustedDataV4MessageDefaultTypeInternal() {}
  union {
    BlockWithTrustedDataV4Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockWithTrustedDataV4MessageDefaultTypeInternal _BlockWithTrustedDataV4Message_default_instance_;
constexpr TrustedDataMessage::TrustedDataMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : daawindow_()
  , ghostdagdata_(){}
struct TrustedDataMessageDefaultTypeInternal {
  constexpr TrustedDataMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrustedDataMessageDefaultTypeInternal() {}
  union {
    TrustedDataMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrustedDataMessageDefaultTypeInternal _TrustedDataMessage_default_instance_;
}  // namespace protowire
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_p2p_2eproto[60];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_p2p_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_p2p_2eproto = nullptr;

const uint32_t TableStruct_p2p_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestAddressesMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestAddressesMessage, includeallsubnetworks_),
  PROTOBUF_FIELD_OFFSET(::protowire::RequestAddressesMessage, subnetworkid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::AddressesMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::AddressesMessage, addresslist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::NetAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::NetAddress, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protowire::NetAddress, ip_),
  PROTOBUF_FIELD_OFFSET(::protowire::NetAddress, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::SubnetworkId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::SubnetworkId, bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionMessage, version_),
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionMessage, inputs_),
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionMessage, outputs_),
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionMessage, locktime_),
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionMessage, subnetworkid_),
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionMessage, gas_),
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionMessage, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionInput, previousoutpoint_),
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionInput, signaturescript_),
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionInput, sequence_),
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionInput, sigopcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::Outpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::Outpoint, transactionid_),
  PROTOBUF_FIELD_OFFSET(::protowire::Outpoint, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionId, bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::ScriptPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::ScriptPublicKey, script_),
  PROTOBUF_FIELD_OFFSET(::protowire::ScriptPublicKey, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionOutput, value_),
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionOutput, scriptpublickey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockMessage, header_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockMessage, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeader, version_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeader, parents_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeader, hashmerkleroot_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeader, acceptedidmerkleroot_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeader, utxocommitment_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeader, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeader, bits_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeader, nonce_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeader, daascore_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeader, bluework_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeader, pruningpoint_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeader, bluescore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockLevelParents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockLevelParents, parenthashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::Hash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::Hash, bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestBlockLocatorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestBlockLocatorMessage, highhash_),
  PROTOBUF_FIELD_OFFSET(::protowire::RequestBlockLocatorMessage, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockLocatorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockLocatorMessage, hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestHeadersMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestHeadersMessage, lowhash_),
  PROTOBUF_FIELD_OFFSET(::protowire::RequestHeadersMessage, highhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestNextHeadersMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::DoneHeadersMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestRelayBlocksMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestRelayBlocksMessage, hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestTransactionsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestTransactionsMessage, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionNotFoundMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::TransactionNotFoundMessage, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::InvRelayBlockMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::InvRelayBlockMessage, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::InvTransactionsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::InvTransactionsMessage, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::PingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::PingMessage, nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::PongMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::PongMessage, nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::VerackMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::VersionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::VersionMessage, protocolversion_),
  PROTOBUF_FIELD_OFFSET(::protowire::VersionMessage, services_),
  PROTOBUF_FIELD_OFFSET(::protowire::VersionMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protowire::VersionMessage, address_),
  PROTOBUF_FIELD_OFFSET(::protowire::VersionMessage, id_),
  PROTOBUF_FIELD_OFFSET(::protowire::VersionMessage, useragent_),
  PROTOBUF_FIELD_OFFSET(::protowire::VersionMessage, disablerelaytx_),
  PROTOBUF_FIELD_OFFSET(::protowire::VersionMessage, subnetworkid_),
  PROTOBUF_FIELD_OFFSET(::protowire::VersionMessage, network_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RejectMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::RejectMessage, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestPruningPointUTXOSetMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestPruningPointUTXOSetMessage, pruningpointhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::PruningPointUtxoSetChunkMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::PruningPointUtxoSetChunkMessage, outpointandutxoentrypairs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::OutpointAndUtxoEntryPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::OutpointAndUtxoEntryPair, outpoint_),
  PROTOBUF_FIELD_OFFSET(::protowire::OutpointAndUtxoEntryPair, utxoentry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::UtxoEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::UtxoEntry, amount_),
  PROTOBUF_FIELD_OFFSET(::protowire::UtxoEntry, scriptpublickey_),
  PROTOBUF_FIELD_OFFSET(::protowire::UtxoEntry, blockdaascore_),
  PROTOBUF_FIELD_OFFSET(::protowire::UtxoEntry, iscoinbase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestNextPruningPointUtxoSetChunkMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::DonePruningPointUtxoSetChunksMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestIBDBlocksMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestIBDBlocksMessage, hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::UnexpectedPruningPointMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::IbdBlockLocatorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::IbdBlockLocatorMessage, targethash_),
  PROTOBUF_FIELD_OFFSET(::protowire::IbdBlockLocatorMessage, blocklocatorhashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestIBDChainBlockLocatorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestIBDChainBlockLocatorMessage, lowhash_),
  PROTOBUF_FIELD_OFFSET(::protowire::RequestIBDChainBlockLocatorMessage, highhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::IbdChainBlockLocatorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::IbdChainBlockLocatorMessage, blocklocatorhashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestAnticoneMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestAnticoneMessage, blockhash_),
  PROTOBUF_FIELD_OFFSET(::protowire::RequestAnticoneMessage, contexthash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::IbdBlockLocatorHighestHashMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::IbdBlockLocatorHighestHashMessage, highesthash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::IbdBlockLocatorHighestHashNotFoundMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeadersMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockHeadersMessage, blockheaders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestPruningPointAndItsAnticoneMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockWithTrustedDataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockWithTrustedDataMessage, block_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockWithTrustedDataMessage, daascore_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockWithTrustedDataMessage, daawindow_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockWithTrustedDataMessage, ghostdagdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::DaaBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::DaaBlock, block_),
  PROTOBUF_FIELD_OFFSET(::protowire::DaaBlock, ghostdagdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::DaaBlockV4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::DaaBlockV4, header_),
  PROTOBUF_FIELD_OFFSET(::protowire::DaaBlockV4, ghostdagdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockGhostdagDataHashPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockGhostdagDataHashPair, hash_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockGhostdagDataHashPair, ghostdagdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::GhostdagData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::GhostdagData, bluescore_),
  PROTOBUF_FIELD_OFFSET(::protowire::GhostdagData, bluework_),
  PROTOBUF_FIELD_OFFSET(::protowire::GhostdagData, selectedparent_),
  PROTOBUF_FIELD_OFFSET(::protowire::GhostdagData, mergesetblues_),
  PROTOBUF_FIELD_OFFSET(::protowire::GhostdagData, mergesetreds_),
  PROTOBUF_FIELD_OFFSET(::protowire::GhostdagData, bluesanticonesizes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::BluesAnticoneSizes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::BluesAnticoneSizes, bluehash_),
  PROTOBUF_FIELD_OFFSET(::protowire::BluesAnticoneSizes, anticonesize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::DoneBlocksWithTrustedDataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::PruningPointsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::PruningPointsMessage, headers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::RequestPruningPointProofMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::PruningPointProofMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::PruningPointProofMessage, headers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::PruningPointProofHeaderArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::PruningPointProofHeaderArray, headers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::ReadyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockWithTrustedDataV4Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::BlockWithTrustedDataV4Message, block_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockWithTrustedDataV4Message, daawindowindices_),
  PROTOBUF_FIELD_OFFSET(::protowire::BlockWithTrustedDataV4Message, ghostdagdataindices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protowire::TrustedDataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protowire::TrustedDataMessage, daawindow_),
  PROTOBUF_FIELD_OFFSET(::protowire::TrustedDataMessage, ghostdagdata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protowire::RequestAddressesMessage)},
  { 8, -1, -1, sizeof(::protowire::AddressesMessage)},
  { 15, -1, -1, sizeof(::protowire::NetAddress)},
  { 24, -1, -1, sizeof(::protowire::SubnetworkId)},
  { 31, -1, -1, sizeof(::protowire::TransactionMessage)},
  { 44, -1, -1, sizeof(::protowire::TransactionInput)},
  { 54, -1, -1, sizeof(::protowire::Outpoint)},
  { 62, -1, -1, sizeof(::protowire::TransactionId)},
  { 69, -1, -1, sizeof(::protowire::ScriptPublicKey)},
  { 77, -1, -1, sizeof(::protowire::TransactionOutput)},
  { 85, -1, -1, sizeof(::protowire::BlockMessage)},
  { 93, -1, -1, sizeof(::protowire::BlockHeader)},
  { 111, -1, -1, sizeof(::protowire::BlockLevelParents)},
  { 118, -1, -1, sizeof(::protowire::Hash)},
  { 125, -1, -1, sizeof(::protowire::RequestBlockLocatorMessage)},
  { 133, -1, -1, sizeof(::protowire::BlockLocatorMessage)},
  { 140, -1, -1, sizeof(::protowire::RequestHeadersMessage)},
  { 148, -1, -1, sizeof(::protowire::RequestNextHeadersMessage)},
  { 154, -1, -1, sizeof(::protowire::DoneHeadersMessage)},
  { 160, -1, -1, sizeof(::protowire::RequestRelayBlocksMessage)},
  { 167, -1, -1, sizeof(::protowire::RequestTransactionsMessage)},
  { 174, -1, -1, sizeof(::protowire::TransactionNotFoundMessage)},
  { 181, -1, -1, sizeof(::protowire::InvRelayBlockMessage)},
  { 188, -1, -1, sizeof(::protowire::InvTransactionsMessage)},
  { 195, -1, -1, sizeof(::protowire::PingMessage)},
  { 202, -1, -1, sizeof(::protowire::PongMessage)},
  { 209, -1, -1, sizeof(::protowire::VerackMessage)},
  { 215, -1, -1, sizeof(::protowire::VersionMessage)},
  { 230, -1, -1, sizeof(::protowire::RejectMessage)},
  { 237, -1, -1, sizeof(::protowire::RequestPruningPointUTXOSetMessage)},
  { 244, -1, -1, sizeof(::protowire::PruningPointUtxoSetChunkMessage)},
  { 251, -1, -1, sizeof(::protowire::OutpointAndUtxoEntryPair)},
  { 259, -1, -1, sizeof(::protowire::UtxoEntry)},
  { 269, -1, -1, sizeof(::protowire::RequestNextPruningPointUtxoSetChunkMessage)},
  { 275, -1, -1, sizeof(::protowire::DonePruningPointUtxoSetChunksMessage)},
  { 281, -1, -1, sizeof(::protowire::RequestIBDBlocksMessage)},
  { 288, -1, -1, sizeof(::protowire::UnexpectedPruningPointMessage)},
  { 294, -1, -1, sizeof(::protowire::IbdBlockLocatorMessage)},
  { 302, -1, -1, sizeof(::protowire::RequestIBDChainBlockLocatorMessage)},
  { 310, -1, -1, sizeof(::protowire::IbdChainBlockLocatorMessage)},
  { 317, -1, -1, sizeof(::protowire::RequestAnticoneMessage)},
  { 325, -1, -1, sizeof(::protowire::IbdBlockLocatorHighestHashMessage)},
  { 332, -1, -1, sizeof(::protowire::IbdBlockLocatorHighestHashNotFoundMessage)},
  { 338, -1, -1, sizeof(::protowire::BlockHeadersMessage)},
  { 345, -1, -1, sizeof(::protowire::RequestPruningPointAndItsAnticoneMessage)},
  { 351, -1, -1, sizeof(::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage)},
  { 357, -1, -1, sizeof(::protowire::BlockWithTrustedDataMessage)},
  { 367, -1, -1, sizeof(::protowire::DaaBlock)},
  { 375, -1, -1, sizeof(::protowire::DaaBlockV4)},
  { 383, -1, -1, sizeof(::protowire::BlockGhostdagDataHashPair)},
  { 391, -1, -1, sizeof(::protowire::GhostdagData)},
  { 403, -1, -1, sizeof(::protowire::BluesAnticoneSizes)},
  { 411, -1, -1, sizeof(::protowire::DoneBlocksWithTrustedDataMessage)},
  { 417, -1, -1, sizeof(::protowire::PruningPointsMessage)},
  { 424, -1, -1, sizeof(::protowire::RequestPruningPointProofMessage)},
  { 430, -1, -1, sizeof(::protowire::PruningPointProofMessage)},
  { 437, -1, -1, sizeof(::protowire::PruningPointProofHeaderArray)},
  { 444, -1, -1, sizeof(::protowire::ReadyMessage)},
  { 450, -1, -1, sizeof(::protowire::BlockWithTrustedDataV4Message)},
  { 459, -1, -1, sizeof(::protowire::TrustedDataMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestAddressesMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_AddressesMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_NetAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_SubnetworkId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_TransactionMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_TransactionInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_Outpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_TransactionId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_ScriptPublicKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_TransactionOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_BlockMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_BlockHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_BlockLevelParents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_Hash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestBlockLocatorMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_BlockLocatorMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestHeadersMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestNextHeadersMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_DoneHeadersMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestRelayBlocksMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestTransactionsMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_TransactionNotFoundMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_InvRelayBlockMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_InvTransactionsMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_PingMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_PongMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_VerackMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_VersionMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RejectMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestPruningPointUTXOSetMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_PruningPointUtxoSetChunkMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_OutpointAndUtxoEntryPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_UtxoEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestNextPruningPointUtxoSetChunkMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_DonePruningPointUtxoSetChunksMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestIBDBlocksMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_UnexpectedPruningPointMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_IbdBlockLocatorMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestIBDChainBlockLocatorMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_IbdChainBlockLocatorMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestAnticoneMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_IbdBlockLocatorHighestHashMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_IbdBlockLocatorHighestHashNotFoundMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_BlockHeadersMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestPruningPointAndItsAnticoneMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestNextPruningPointAndItsAnticoneBlocksMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_BlockWithTrustedDataMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_DaaBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_DaaBlockV4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_BlockGhostdagDataHashPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_GhostdagData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_BluesAnticoneSizes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_DoneBlocksWithTrustedDataMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_PruningPointsMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_RequestPruningPointProofMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_PruningPointProofMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_PruningPointProofHeaderArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_ReadyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_BlockWithTrustedDataV4Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protowire::_TrustedDataMessage_default_instance_),
};

const char descriptor_table_protodef_p2p_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tp2p.proto\022\tprotowire\"g\n\027RequestAddress"
  "esMessage\022\035\n\025includeAllSubnetworks\030\001 \001(\010"
  "\022-\n\014subnetworkId\030\002 \001(\0132\027.protowire.Subne"
  "tworkId\">\n\020AddressesMessage\022*\n\013addressLi"
  "st\030\001 \003(\0132\025.protowire.NetAddress\"9\n\nNetAd"
  "dress\022\021\n\ttimestamp\030\001 \001(\003\022\n\n\002ip\030\003 \001(\014\022\014\n\004"
  "port\030\004 \001(\r\"\035\n\014SubnetworkId\022\r\n\005bytes\030\001 \001("
  "\014\"\340\001\n\022TransactionMessage\022\017\n\007version\030\001 \001("
  "\r\022+\n\006inputs\030\002 \003(\0132\033.protowire.Transactio"
  "nInput\022-\n\007outputs\030\003 \003(\0132\034.protowire.Tran"
  "sactionOutput\022\020\n\010lockTime\030\004 \001(\004\022-\n\014subne"
  "tworkId\030\005 \001(\0132\027.protowire.SubnetworkId\022\013"
  "\n\003gas\030\006 \001(\004\022\017\n\007payload\030\010 \001(\014\"\200\001\n\020Transac"
  "tionInput\022-\n\020previousOutpoint\030\001 \001(\0132\023.pr"
  "otowire.Outpoint\022\027\n\017signatureScript\030\002 \001("
  "\014\022\020\n\010sequence\030\003 \001(\004\022\022\n\nsigOpCount\030\004 \001(\r\""
  "J\n\010Outpoint\022/\n\rtransactionId\030\001 \001(\0132\030.pro"
  "towire.TransactionId\022\r\n\005index\030\002 \001(\r\"\036\n\rT"
  "ransactionId\022\r\n\005bytes\030\001 \001(\014\"2\n\017ScriptPub"
  "licKey\022\016\n\006script\030\001 \001(\014\022\017\n\007version\030\002 \001(\r\""
  "W\n\021TransactionOutput\022\r\n\005value\030\001 \001(\004\0223\n\017s"
  "criptPublicKey\030\002 \001(\0132\032.protowire.ScriptP"
  "ublicKey\"k\n\014BlockMessage\022&\n\006header\030\001 \001(\013"
  "2\026.protowire.BlockHeader\0223\n\014transactions"
  "\030\002 \003(\0132\035.protowire.TransactionMessage\"\334\002"
  "\n\013BlockHeader\022\017\n\007version\030\001 \001(\r\022-\n\007parent"
  "s\030\014 \003(\0132\034.protowire.BlockLevelParents\022\'\n"
  "\016hashMerkleRoot\030\003 \001(\0132\017.protowire.Hash\022-"
  "\n\024acceptedIdMerkleRoot\030\004 \001(\0132\017.protowire"
  ".Hash\022\'\n\016utxoCommitment\030\005 \001(\0132\017.protowir"
  "e.Hash\022\021\n\ttimestamp\030\006 \001(\003\022\014\n\004bits\030\007 \001(\r\022"
  "\r\n\005nonce\030\010 \001(\004\022\020\n\010daaScore\030\t \001(\004\022\020\n\010blue"
  "Work\030\n \001(\014\022%\n\014pruningPoint\030\016 \001(\0132\017.proto"
  "wire.Hash\022\021\n\tblueScore\030\r \001(\004\":\n\021BlockLev"
  "elParents\022%\n\014parentHashes\030\001 \003(\0132\017.protow"
  "ire.Hash\"\025\n\004Hash\022\r\n\005bytes\030\001 \001(\014\"N\n\032Reque"
  "stBlockLocatorMessage\022!\n\010highHash\030\001 \001(\0132"
  "\017.protowire.Hash\022\r\n\005limit\030\002 \001(\r\"6\n\023Block"
  "LocatorMessage\022\037\n\006hashes\030\001 \003(\0132\017.protowi"
  "re.Hash\"\\\n\025RequestHeadersMessage\022 \n\007lowH"
  "ash\030\001 \001(\0132\017.protowire.Hash\022!\n\010highHash\030\002"
  " \001(\0132\017.protowire.Hash\"\033\n\031RequestNextHead"
  "ersMessage\"\024\n\022DoneHeadersMessage\"<\n\031Requ"
  "estRelayBlocksMessage\022\037\n\006hashes\030\001 \003(\0132\017."
  "protowire.Hash\"C\n\032RequestTransactionsMes"
  "sage\022%\n\003ids\030\001 \003(\0132\030.protowire.Transactio"
  "nId\"B\n\032TransactionNotFoundMessage\022$\n\002id\030"
  "\001 \001(\0132\030.protowire.TransactionId\"5\n\024InvRe"
  "layBlockMessage\022\035\n\004hash\030\001 \001(\0132\017.protowir"
  "e.Hash\"\?\n\026InvTransactionsMessage\022%\n\003ids\030"
  "\001 \003(\0132\030.protowire.TransactionId\"\034\n\013PingM"
  "essage\022\r\n\005nonce\030\001 \001(\004\"\034\n\013PongMessage\022\r\n\005"
  "nonce\030\001 \001(\004\"\017\n\rVerackMessage\"\355\001\n\016Version"
  "Message\022\027\n\017protocolVersion\030\001 \001(\r\022\020\n\010serv"
  "ices\030\002 \001(\004\022\021\n\ttimestamp\030\003 \001(\003\022&\n\007address"
  "\030\004 \001(\0132\025.protowire.NetAddress\022\n\n\002id\030\005 \001("
  "\014\022\021\n\tuserAgent\030\006 \001(\t\022\026\n\016disableRelayTx\030\010"
  " \001(\010\022-\n\014subnetworkId\030\t \001(\0132\027.protowire.S"
  "ubnetworkId\022\017\n\007network\030\n \001(\t\"\037\n\rRejectMe"
  "ssage\022\016\n\006reason\030\001 \001(\t\"N\n!RequestPruningP"
  "ointUTXOSetMessage\022)\n\020pruningPointHash\030\001"
  " \001(\0132\017.protowire.Hash\"i\n\037PruningPointUtx"
  "oSetChunkMessage\022F\n\031outpointAndUtxoEntry"
  "Pairs\030\001 \003(\0132#.protowire.OutpointAndUtxoE"
  "ntryPair\"j\n\030OutpointAndUtxoEntryPair\022%\n\010"
  "outpoint\030\001 \001(\0132\023.protowire.Outpoint\022\'\n\tu"
  "txoEntry\030\002 \001(\0132\024.protowire.UtxoEntry\"{\n\t"
  "UtxoEntry\022\016\n\006amount\030\001 \001(\004\0223\n\017scriptPubli"
  "cKey\030\002 \001(\0132\032.protowire.ScriptPublicKey\022\025"
  "\n\rblockDaaScore\030\003 \001(\004\022\022\n\nisCoinbase\030\004 \001("
  "\010\",\n*RequestNextPruningPointUtxoSetChunk"
  "Message\"&\n$DonePruningPointUtxoSetChunks"
  "Message\":\n\027RequestIBDBlocksMessage\022\037\n\006ha"
  "shes\030\001 \003(\0132\017.protowire.Hash\"\037\n\035Unexpecte"
  "dPruningPointMessage\"j\n\026IbdBlockLocatorM"
  "essage\022#\n\ntargetHash\030\001 \001(\0132\017.protowire.H"
  "ash\022+\n\022blockLocatorHashes\030\002 \003(\0132\017.protow"
  "ire.Hash\"i\n\"RequestIBDChainBlockLocatorM"
  "essage\022 \n\007lowHash\030\001 \001(\0132\017.protowire.Hash"
  "\022!\n\010highHash\030\002 \001(\0132\017.protowire.Hash\"J\n\033I"
  "bdChainBlockLocatorMessage\022+\n\022blockLocat"
  "orHashes\030\001 \003(\0132\017.protowire.Hash\"b\n\026Reque"
  "stAnticoneMessage\022\"\n\tblockHash\030\001 \001(\0132\017.p"
  "rotowire.Hash\022$\n\013contextHash\030\002 \001(\0132\017.pro"
  "towire.Hash\"I\n!IbdBlockLocatorHighestHas"
  "hMessage\022$\n\013highestHash\030\001 \001(\0132\017.protowir"
  "e.Hash\"+\n)IbdBlockLocatorHighestHashNotF"
  "oundMessage\"C\n\023BlockHeadersMessage\022,\n\014bl"
  "ockHeaders\030\001 \003(\0132\026.protowire.BlockHeader"
  "\"*\n(RequestPruningPointAndItsAnticoneMes"
  "sage\"4\n2RequestNextPruningPointAndItsAnt"
  "iconeBlocksMessage\"\273\001\n\033BlockWithTrustedD"
  "ataMessage\022&\n\005block\030\001 \001(\0132\027.protowire.Bl"
  "ockMessage\022\020\n\010daaScore\030\002 \001(\004\022&\n\tdaaWindo"
  "w\030\003 \003(\0132\023.protowire.DaaBlock\022:\n\014ghostdag"
  "Data\030\004 \003(\0132$.protowire.BlockGhostdagData"
  "HashPair\"a\n\010DaaBlock\022&\n\005block\030\003 \001(\0132\027.pr"
  "otowire.BlockMessage\022-\n\014ghostdagData\030\002 \001"
  "(\0132\027.protowire.GhostdagData\"c\n\nDaaBlockV"
  "4\022&\n\006header\030\001 \001(\0132\026.protowire.BlockHeade"
  "r\022-\n\014ghostdagData\030\002 \001(\0132\027.protowire.Ghos"
  "tdagData\"i\n\031BlockGhostdagDataHashPair\022\035\n"
  "\004hash\030\001 \001(\0132\017.protowire.Hash\022-\n\014ghostdag"
  "Data\030\002 \001(\0132\027.protowire.GhostdagData\"\346\001\n\014"
  "GhostdagData\022\021\n\tblueScore\030\001 \001(\004\022\020\n\010blueW"
  "ork\030\002 \001(\014\022\'\n\016selectedParent\030\003 \001(\0132\017.prot"
  "owire.Hash\022&\n\rmergeSetBlues\030\004 \003(\0132\017.prot"
  "owire.Hash\022%\n\014mergeSetReds\030\005 \003(\0132\017.proto"
  "wire.Hash\0229\n\022bluesAnticoneSizes\030\006 \003(\0132\035."
  "protowire.BluesAnticoneSizes\"M\n\022BluesAnt"
  "iconeSizes\022!\n\010blueHash\030\001 \001(\0132\017.protowire"
  ".Hash\022\024\n\014anticoneSize\030\002 \001(\r\"\"\n DoneBlock"
  "sWithTrustedDataMessage\"\?\n\024PruningPoints"
  "Message\022\'\n\007headers\030\001 \003(\0132\026.protowire.Blo"
  "ckHeader\"!\n\037RequestPruningPointProofMess"
  "age\"T\n\030PruningPointProofMessage\0228\n\007heade"
  "rs\030\001 \003(\0132\'.protowire.PruningPointProofHe"
  "aderArray\"G\n\034PruningPointProofHeaderArra"
  "y\022\'\n\007headers\030\001 \003(\0132\026.protowire.BlockHead"
  "er\"\016\n\014ReadyMessage\"~\n\035BlockWithTrustedDa"
  "taV4Message\022&\n\005block\030\001 \001(\0132\027.protowire.B"
  "lockMessage\022\030\n\020daaWindowIndices\030\002 \003(\004\022\033\n"
  "\023ghostdagDataIndices\030\003 \003(\004\"z\n\022TrustedDat"
  "aMessage\022(\n\tdaaWindow\030\001 \003(\0132\025.protowire."
  "DaaBlockV4\022:\n\014ghostdagData\030\002 \003(\0132$.proto"
  "wire.BlockGhostdagDataHashPairB&Z$github"
  ".com/kaspanet/kaspad/protowireb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_p2p_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p2p_2eproto = {
  false, false, 5078, descriptor_table_protodef_p2p_2eproto, "p2p.proto", 
  &descriptor_table_p2p_2eproto_once, nullptr, 0, 60,
  schemas, file_default_instances, TableStruct_p2p_2eproto::offsets,
  file_level_metadata_p2p_2eproto, file_level_enum_descriptors_p2p_2eproto, file_level_service_descriptors_p2p_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_p2p_2eproto_getter() {
  return &descriptor_table_p2p_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_p2p_2eproto(&descriptor_table_p2p_2eproto);
namespace protowire {

// ===================================================================

class RequestAddressesMessage::_Internal {
 public:
  static const ::protowire::SubnetworkId& subnetworkid(const RequestAddressesMessage* msg);
};

const ::protowire::SubnetworkId&
RequestAddressesMessage::_Internal::subnetworkid(const RequestAddressesMessage* msg) {
  return *msg->subnetworkid_;
}
RequestAddressesMessage::RequestAddressesMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.RequestAddressesMessage)
}
RequestAddressesMessage::RequestAddressesMessage(const RequestAddressesMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subnetworkid()) {
    subnetworkid_ = new ::protowire::SubnetworkId(*from.subnetworkid_);
  } else {
    subnetworkid_ = nullptr;
  }
  includeallsubnetworks_ = from.includeallsubnetworks_;
  // @@protoc_insertion_point(copy_constructor:protowire.RequestAddressesMessage)
}

inline void RequestAddressesMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subnetworkid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&includeallsubnetworks_) -
    reinterpret_cast<char*>(&subnetworkid_)) + sizeof(includeallsubnetworks_));
}

RequestAddressesMessage::~RequestAddressesMessage() {
  // @@protoc_insertion_point(destructor:protowire.RequestAddressesMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestAddressesMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete subnetworkid_;
}

void RequestAddressesMessage::ArenaDtor(void* object) {
  RequestAddressesMessage* _this = reinterpret_cast< RequestAddressesMessage* >(object);
  (void)_this;
}
void RequestAddressesMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestAddressesMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestAddressesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.RequestAddressesMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && subnetworkid_ != nullptr) {
    delete subnetworkid_;
  }
  subnetworkid_ = nullptr;
  includeallsubnetworks_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestAddressesMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool includeAllSubnetworks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          includeallsubnetworks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.SubnetworkId subnetworkId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subnetworkid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestAddressesMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.RequestAddressesMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool includeAllSubnetworks = 1;
  if (this->_internal_includeallsubnetworks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_includeallsubnetworks(), target);
  }

  // .protowire.SubnetworkId subnetworkId = 2;
  if (this->_internal_has_subnetworkid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::subnetworkid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.RequestAddressesMessage)
  return target;
}

size_t RequestAddressesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.RequestAddressesMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.SubnetworkId subnetworkId = 2;
  if (this->_internal_has_subnetworkid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subnetworkid_);
  }

  // bool includeAllSubnetworks = 1;
  if (this->_internal_includeallsubnetworks() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestAddressesMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestAddressesMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestAddressesMessage::GetClassData() const { return &_class_data_; }

void RequestAddressesMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestAddressesMessage *>(to)->MergeFrom(
      static_cast<const RequestAddressesMessage &>(from));
}


void RequestAddressesMessage::MergeFrom(const RequestAddressesMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.RequestAddressesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subnetworkid()) {
    _internal_mutable_subnetworkid()->::protowire::SubnetworkId::MergeFrom(from._internal_subnetworkid());
  }
  if (from._internal_includeallsubnetworks() != 0) {
    _internal_set_includeallsubnetworks(from._internal_includeallsubnetworks());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestAddressesMessage::CopyFrom(const RequestAddressesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.RequestAddressesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAddressesMessage::IsInitialized() const {
  return true;
}

void RequestAddressesMessage::InternalSwap(RequestAddressesMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestAddressesMessage, includeallsubnetworks_)
      + sizeof(RequestAddressesMessage::includeallsubnetworks_)
      - PROTOBUF_FIELD_OFFSET(RequestAddressesMessage, subnetworkid_)>(
          reinterpret_cast<char*>(&subnetworkid_),
          reinterpret_cast<char*>(&other->subnetworkid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestAddressesMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[0]);
}

// ===================================================================

class AddressesMessage::_Internal {
 public:
};

AddressesMessage::AddressesMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  addresslist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.AddressesMessage)
}
AddressesMessage::AddressesMessage(const AddressesMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addresslist_(from.addresslist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.AddressesMessage)
}

inline void AddressesMessage::SharedCtor() {
}

AddressesMessage::~AddressesMessage() {
  // @@protoc_insertion_point(destructor:protowire.AddressesMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressesMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddressesMessage::ArenaDtor(void* object) {
  AddressesMessage* _this = reinterpret_cast< AddressesMessage* >(object);
  (void)_this;
}
void AddressesMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressesMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.AddressesMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresslist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressesMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.NetAddress addressList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addresslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddressesMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.AddressesMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.NetAddress addressList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addresslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_addresslist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.AddressesMessage)
  return target;
}

size_t AddressesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.AddressesMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.NetAddress addressList = 1;
  total_size += 1UL * this->_internal_addresslist_size();
  for (const auto& msg : this->addresslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressesMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressesMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressesMessage::GetClassData() const { return &_class_data_; }

void AddressesMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddressesMessage *>(to)->MergeFrom(
      static_cast<const AddressesMessage &>(from));
}


void AddressesMessage::MergeFrom(const AddressesMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.AddressesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  addresslist_.MergeFrom(from.addresslist_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressesMessage::CopyFrom(const AddressesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.AddressesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressesMessage::IsInitialized() const {
  return true;
}

void AddressesMessage::InternalSwap(AddressesMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  addresslist_.InternalSwap(&other->addresslist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressesMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[1]);
}

// ===================================================================

class NetAddress::_Internal {
 public:
};

NetAddress::NetAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.NetAddress)
}
NetAddress::NetAddress(const NetAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:protowire.NetAddress)
}

inline void NetAddress::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(port_));
}

NetAddress::~NetAddress() {
  // @@protoc_insertion_point(destructor:protowire.NetAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetAddress::ArenaDtor(void* object) {
  NetAddress* _this = reinterpret_cast< NetAddress* >(object);
  (void)_this;
}
void NetAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.NetAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.NetAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // bytes ip = 3;
  if (!this->_internal_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.NetAddress)
  return target;
}

size_t NetAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.NetAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetAddress::GetClassData() const { return &_class_data_; }

void NetAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetAddress *>(to)->MergeFrom(
      static_cast<const NetAddress &>(from));
}


void NetAddress::MergeFrom(const NetAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.NetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetAddress::CopyFrom(const NetAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.NetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetAddress::IsInitialized() const {
  return true;
}

void NetAddress::InternalSwap(NetAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetAddress, port_)
      + sizeof(NetAddress::port_)
      - PROTOBUF_FIELD_OFFSET(NetAddress, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[2]);
}

// ===================================================================

class SubnetworkId::_Internal {
 public:
};

SubnetworkId::SubnetworkId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.SubnetworkId)
}
SubnetworkId::SubnetworkId(const SubnetworkId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bytes().empty()) {
    bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bytes(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protowire.SubnetworkId)
}

inline void SubnetworkId::SharedCtor() {
bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubnetworkId::~SubnetworkId() {
  // @@protoc_insertion_point(destructor:protowire.SubnetworkId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubnetworkId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubnetworkId::ArenaDtor(void* object) {
  SubnetworkId* _this = reinterpret_cast< SubnetworkId* >(object);
  (void)_this;
}
void SubnetworkId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubnetworkId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubnetworkId::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.SubnetworkId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bytes_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubnetworkId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubnetworkId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.SubnetworkId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes bytes = 1;
  if (!this->_internal_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.SubnetworkId)
  return target;
}

size_t SubnetworkId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.SubnetworkId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bytes = 1;
  if (!this->_internal_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubnetworkId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubnetworkId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubnetworkId::GetClassData() const { return &_class_data_; }

void SubnetworkId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubnetworkId *>(to)->MergeFrom(
      static_cast<const SubnetworkId &>(from));
}


void SubnetworkId::MergeFrom(const SubnetworkId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.SubnetworkId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bytes().empty()) {
    _internal_set_bytes(from._internal_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubnetworkId::CopyFrom(const SubnetworkId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.SubnetworkId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubnetworkId::IsInitialized() const {
  return true;
}

void SubnetworkId::InternalSwap(SubnetworkId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bytes_, lhs_arena,
      &other->bytes_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubnetworkId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[3]);
}

// ===================================================================

class TransactionMessage::_Internal {
 public:
  static const ::protowire::SubnetworkId& subnetworkid(const TransactionMessage* msg);
};

const ::protowire::SubnetworkId&
TransactionMessage::_Internal::subnetworkid(const TransactionMessage* msg) {
  return *msg->subnetworkid_;
}
TransactionMessage::TransactionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inputs_(arena),
  outputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.TransactionMessage)
}
TransactionMessage::TransactionMessage(const TransactionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_subnetworkid()) {
    subnetworkid_ = new ::protowire::SubnetworkId(*from.subnetworkid_);
  } else {
    subnetworkid_ = nullptr;
  }
  ::memcpy(&locktime_, &from.locktime_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&locktime_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:protowire.TransactionMessage)
}

inline void TransactionMessage::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subnetworkid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&subnetworkid_)) + sizeof(version_));
}

TransactionMessage::~TransactionMessage() {
  // @@protoc_insertion_point(destructor:protowire.TransactionMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete subnetworkid_;
}

void TransactionMessage::ArenaDtor(void* object) {
  TransactionMessage* _this = reinterpret_cast< TransactionMessage* >(object);
  (void)_this;
}
void TransactionMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.TransactionMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  payload_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && subnetworkid_ != nullptr) {
    delete subnetworkid_;
  }
  subnetworkid_ = nullptr;
  ::memset(&locktime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&locktime_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protowire.TransactionInput inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protowire.TransactionOutput outputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 lockTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          locktime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.SubnetworkId subnetworkId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subnetworkid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.TransactionMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated .protowire.TransactionInput inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // repeated .protowire.TransactionOutput outputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_outputs(i), target, stream);
  }

  // uint64 lockTime = 4;
  if (this->_internal_locktime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_locktime(), target);
  }

  // .protowire.SubnetworkId subnetworkId = 5;
  if (this->_internal_has_subnetworkid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::subnetworkid(this), target, stream);
  }

  // uint64 gas = 6;
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gas(), target);
  }

  // bytes payload = 8;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.TransactionMessage)
  return target;
}

size_t TransactionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.TransactionMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.TransactionInput inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protowire.TransactionOutput outputs = 3;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes payload = 8;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // .protowire.SubnetworkId subnetworkId = 5;
  if (this->_internal_has_subnetworkid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subnetworkid_);
  }

  // uint64 lockTime = 4;
  if (this->_internal_locktime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_locktime());
  }

  // uint64 gas = 6;
  if (this->_internal_gas() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gas());
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionMessage::GetClassData() const { return &_class_data_; }

void TransactionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionMessage *>(to)->MergeFrom(
      static_cast<const TransactionMessage &>(from));
}


void TransactionMessage::MergeFrom(const TransactionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.TransactionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  if (from._internal_has_subnetworkid()) {
    _internal_mutable_subnetworkid()->::protowire::SubnetworkId::MergeFrom(from._internal_subnetworkid());
  }
  if (from._internal_locktime() != 0) {
    _internal_set_locktime(from._internal_locktime());
  }
  if (from._internal_gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionMessage::CopyFrom(const TransactionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.TransactionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionMessage::IsInitialized() const {
  return true;
}

void TransactionMessage::InternalSwap(TransactionMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionMessage, version_)
      + sizeof(TransactionMessage::version_)
      - PROTOBUF_FIELD_OFFSET(TransactionMessage, subnetworkid_)>(
          reinterpret_cast<char*>(&subnetworkid_),
          reinterpret_cast<char*>(&other->subnetworkid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[4]);
}

// ===================================================================

class TransactionInput::_Internal {
 public:
  static const ::protowire::Outpoint& previousoutpoint(const TransactionInput* msg);
};

const ::protowire::Outpoint&
TransactionInput::_Internal::previousoutpoint(const TransactionInput* msg) {
  return *msg->previousoutpoint_;
}
TransactionInput::TransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.TransactionInput)
}
TransactionInput::TransactionInput(const TransactionInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signaturescript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signaturescript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signaturescript().empty()) {
    signaturescript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signaturescript(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_previousoutpoint()) {
    previousoutpoint_ = new ::protowire::Outpoint(*from.previousoutpoint_);
  } else {
    previousoutpoint_ = nullptr;
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigopcount_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(sigopcount_));
  // @@protoc_insertion_point(copy_constructor:protowire.TransactionInput)
}

inline void TransactionInput::SharedCtor() {
signaturescript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signaturescript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&previousoutpoint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sigopcount_) -
    reinterpret_cast<char*>(&previousoutpoint_)) + sizeof(sigopcount_));
}

TransactionInput::~TransactionInput() {
  // @@protoc_insertion_point(destructor:protowire.TransactionInput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signaturescript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete previousoutpoint_;
}

void TransactionInput::ArenaDtor(void* object) {
  TransactionInput* _this = reinterpret_cast< TransactionInput* >(object);
  (void)_this;
}
void TransactionInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionInput::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.TransactionInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signaturescript_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && previousoutpoint_ != nullptr) {
    delete previousoutpoint_;
  }
  previousoutpoint_ = nullptr;
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigopcount_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(sigopcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.Outpoint previousOutpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_previousoutpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes signatureScript = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signaturescript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sigOpCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sigopcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.TransactionInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.Outpoint previousOutpoint = 1;
  if (this->_internal_has_previousoutpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::previousoutpoint(this), target, stream);
  }

  // bytes signatureScript = 2;
  if (!this->_internal_signaturescript().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signaturescript(), target);
  }

  // uint64 sequence = 3;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sequence(), target);
  }

  // uint32 sigOpCount = 4;
  if (this->_internal_sigopcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sigopcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.TransactionInput)
  return target;
}

size_t TransactionInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.TransactionInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signatureScript = 2;
  if (!this->_internal_signaturescript().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signaturescript());
  }

  // .protowire.Outpoint previousOutpoint = 1;
  if (this->_internal_has_previousoutpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previousoutpoint_);
  }

  // uint64 sequence = 3;
  if (this->_internal_sequence() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sequence());
  }

  // uint32 sigOpCount = 4;
  if (this->_internal_sigopcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sigopcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionInput::GetClassData() const { return &_class_data_; }

void TransactionInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionInput *>(to)->MergeFrom(
      static_cast<const TransactionInput &>(from));
}


void TransactionInput::MergeFrom(const TransactionInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.TransactionInput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signaturescript().empty()) {
    _internal_set_signaturescript(from._internal_signaturescript());
  }
  if (from._internal_has_previousoutpoint()) {
    _internal_mutable_previousoutpoint()->::protowire::Outpoint::MergeFrom(from._internal_previousoutpoint());
  }
  if (from._internal_sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_sigopcount() != 0) {
    _internal_set_sigopcount(from._internal_sigopcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionInput::CopyFrom(const TransactionInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.TransactionInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInput::IsInitialized() const {
  return true;
}

void TransactionInput::InternalSwap(TransactionInput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signaturescript_, lhs_arena,
      &other->signaturescript_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionInput, sigopcount_)
      + sizeof(TransactionInput::sigopcount_)
      - PROTOBUF_FIELD_OFFSET(TransactionInput, previousoutpoint_)>(
          reinterpret_cast<char*>(&previousoutpoint_),
          reinterpret_cast<char*>(&other->previousoutpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionInput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[5]);
}

// ===================================================================

class Outpoint::_Internal {
 public:
  static const ::protowire::TransactionId& transactionid(const Outpoint* msg);
};

const ::protowire::TransactionId&
Outpoint::_Internal::transactionid(const Outpoint* msg) {
  return *msg->transactionid_;
}
Outpoint::Outpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.Outpoint)
}
Outpoint::Outpoint(const Outpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transactionid()) {
    transactionid_ = new ::protowire::TransactionId(*from.transactionid_);
  } else {
    transactionid_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:protowire.Outpoint)
}

inline void Outpoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transactionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&transactionid_)) + sizeof(index_));
}

Outpoint::~Outpoint() {
  // @@protoc_insertion_point(destructor:protowire.Outpoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Outpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transactionid_;
}

void Outpoint::ArenaDtor(void* object) {
  Outpoint* _this = reinterpret_cast< Outpoint* >(object);
  (void)_this;
}
void Outpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Outpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Outpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.Outpoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transactionid_ != nullptr) {
    delete transactionid_;
  }
  transactionid_ = nullptr;
  index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Outpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.TransactionId transactionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transactionid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Outpoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.Outpoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.TransactionId transactionId = 1;
  if (this->_internal_has_transactionid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transactionid(this), target, stream);
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.Outpoint)
  return target;
}

size_t Outpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.Outpoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.TransactionId transactionId = 1;
  if (this->_internal_has_transactionid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transactionid_);
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Outpoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Outpoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Outpoint::GetClassData() const { return &_class_data_; }

void Outpoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Outpoint *>(to)->MergeFrom(
      static_cast<const Outpoint &>(from));
}


void Outpoint::MergeFrom(const Outpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.Outpoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transactionid()) {
    _internal_mutable_transactionid()->::protowire::TransactionId::MergeFrom(from._internal_transactionid());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Outpoint::CopyFrom(const Outpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.Outpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Outpoint::IsInitialized() const {
  return true;
}

void Outpoint::InternalSwap(Outpoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Outpoint, index_)
      + sizeof(Outpoint::index_)
      - PROTOBUF_FIELD_OFFSET(Outpoint, transactionid_)>(
          reinterpret_cast<char*>(&transactionid_),
          reinterpret_cast<char*>(&other->transactionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Outpoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[6]);
}

// ===================================================================

class TransactionId::_Internal {
 public:
};

TransactionId::TransactionId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.TransactionId)
}
TransactionId::TransactionId(const TransactionId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bytes().empty()) {
    bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bytes(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protowire.TransactionId)
}

inline void TransactionId::SharedCtor() {
bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionId::~TransactionId() {
  // @@protoc_insertion_point(destructor:protowire.TransactionId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionId::ArenaDtor(void* object) {
  TransactionId* _this = reinterpret_cast< TransactionId* >(object);
  (void)_this;
}
void TransactionId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionId::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.TransactionId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bytes_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.TransactionId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes bytes = 1;
  if (!this->_internal_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.TransactionId)
  return target;
}

size_t TransactionId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.TransactionId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bytes = 1;
  if (!this->_internal_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionId::GetClassData() const { return &_class_data_; }

void TransactionId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionId *>(to)->MergeFrom(
      static_cast<const TransactionId &>(from));
}


void TransactionId::MergeFrom(const TransactionId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.TransactionId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bytes().empty()) {
    _internal_set_bytes(from._internal_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionId::CopyFrom(const TransactionId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.TransactionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionId::IsInitialized() const {
  return true;
}

void TransactionId::InternalSwap(TransactionId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bytes_, lhs_arena,
      &other->bytes_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[7]);
}

// ===================================================================

class ScriptPublicKey::_Internal {
 public:
};

ScriptPublicKey::ScriptPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.ScriptPublicKey)
}
ScriptPublicKey::ScriptPublicKey(const ScriptPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_script().empty()) {
    script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_script(), 
      GetArenaForAllocation());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:protowire.ScriptPublicKey)
}

inline void ScriptPublicKey::SharedCtor() {
script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  script_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_ = 0u;
}

ScriptPublicKey::~ScriptPublicKey() {
  // @@protoc_insertion_point(destructor:protowire.ScriptPublicKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScriptPublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScriptPublicKey::ArenaDtor(void* object) {
  ScriptPublicKey* _this = reinterpret_cast< ScriptPublicKey* >(object);
  (void)_this;
}
void ScriptPublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScriptPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScriptPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.ScriptPublicKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  script_.ClearToEmpty();
  version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScriptPublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes script = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScriptPublicKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.ScriptPublicKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes script = 1;
  if (!this->_internal_script().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_script(), target);
  }

  // uint32 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.ScriptPublicKey)
  return target;
}

size_t ScriptPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.ScriptPublicKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes script = 1;
  if (!this->_internal_script().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  // uint32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScriptPublicKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScriptPublicKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScriptPublicKey::GetClassData() const { return &_class_data_; }

void ScriptPublicKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScriptPublicKey *>(to)->MergeFrom(
      static_cast<const ScriptPublicKey &>(from));
}


void ScriptPublicKey::MergeFrom(const ScriptPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.ScriptPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_script().empty()) {
    _internal_set_script(from._internal_script());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScriptPublicKey::CopyFrom(const ScriptPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.ScriptPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScriptPublicKey::IsInitialized() const {
  return true;
}

void ScriptPublicKey::InternalSwap(ScriptPublicKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &script_, lhs_arena,
      &other->script_, rhs_arena
  );
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScriptPublicKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[8]);
}

// ===================================================================

class TransactionOutput::_Internal {
 public:
  static const ::protowire::ScriptPublicKey& scriptpublickey(const TransactionOutput* msg);
};

const ::protowire::ScriptPublicKey&
TransactionOutput::_Internal::scriptpublickey(const TransactionOutput* msg) {
  return *msg->scriptpublickey_;
}
TransactionOutput::TransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.TransactionOutput)
}
TransactionOutput::TransactionOutput(const TransactionOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scriptpublickey()) {
    scriptpublickey_ = new ::protowire::ScriptPublicKey(*from.scriptpublickey_);
  } else {
    scriptpublickey_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:protowire.TransactionOutput)
}

inline void TransactionOutput::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scriptpublickey_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&scriptpublickey_)) + sizeof(value_));
}

TransactionOutput::~TransactionOutput() {
  // @@protoc_insertion_point(destructor:protowire.TransactionOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete scriptpublickey_;
}

void TransactionOutput::ArenaDtor(void* object) {
  TransactionOutput* _this = reinterpret_cast< TransactionOutput* >(object);
  (void)_this;
}
void TransactionOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.TransactionOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && scriptpublickey_ != nullptr) {
    delete scriptpublickey_;
  }
  scriptpublickey_ = nullptr;
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.ScriptPublicKey scriptPublicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scriptpublickey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.TransactionOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  // .protowire.ScriptPublicKey scriptPublicKey = 2;
  if (this->_internal_has_scriptpublickey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scriptpublickey(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.TransactionOutput)
  return target;
}

size_t TransactionOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.TransactionOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.ScriptPublicKey scriptPublicKey = 2;
  if (this->_internal_has_scriptpublickey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scriptpublickey_);
  }

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionOutput::GetClassData() const { return &_class_data_; }

void TransactionOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionOutput *>(to)->MergeFrom(
      static_cast<const TransactionOutput &>(from));
}


void TransactionOutput::MergeFrom(const TransactionOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.TransactionOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_scriptpublickey()) {
    _internal_mutable_scriptpublickey()->::protowire::ScriptPublicKey::MergeFrom(from._internal_scriptpublickey());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionOutput::CopyFrom(const TransactionOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.TransactionOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOutput::IsInitialized() const {
  return true;
}

void TransactionOutput::InternalSwap(TransactionOutput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionOutput, value_)
      + sizeof(TransactionOutput::value_)
      - PROTOBUF_FIELD_OFFSET(TransactionOutput, scriptpublickey_)>(
          reinterpret_cast<char*>(&scriptpublickey_),
          reinterpret_cast<char*>(&other->scriptpublickey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[9]);
}

// ===================================================================

class BlockMessage::_Internal {
 public:
  static const ::protowire::BlockHeader& header(const BlockMessage* msg);
};

const ::protowire::BlockHeader&
BlockMessage::_Internal::header(const BlockMessage* msg) {
  return *msg->header_;
}
BlockMessage::BlockMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.BlockMessage)
}
BlockMessage::BlockMessage(const BlockMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protowire::BlockHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.BlockMessage)
}

inline void BlockMessage::SharedCtor() {
header_ = nullptr;
}

BlockMessage::~BlockMessage() {
  // @@protoc_insertion_point(destructor:protowire.BlockMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void BlockMessage::ArenaDtor(void* object) {
  BlockMessage* _this = reinterpret_cast< BlockMessage* >(object);
  (void)_this;
}
void BlockMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.BlockMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.BlockHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protowire.TransactionMessage transactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.BlockMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.BlockHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .protowire.TransactionMessage transactions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.BlockMessage)
  return target;
}

size_t BlockMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.BlockMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.TransactionMessage transactions = 2;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protowire.BlockHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockMessage::GetClassData() const { return &_class_data_; }

void BlockMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockMessage *>(to)->MergeFrom(
      static_cast<const BlockMessage &>(from));
}


void BlockMessage::MergeFrom(const BlockMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.BlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::protowire::BlockHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockMessage::CopyFrom(const BlockMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.BlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMessage::IsInitialized() const {
  return true;
}

void BlockMessage::InternalSwap(BlockMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[10]);
}

// ===================================================================

class BlockHeader::_Internal {
 public:
  static const ::protowire::Hash& hashmerkleroot(const BlockHeader* msg);
  static const ::protowire::Hash& acceptedidmerkleroot(const BlockHeader* msg);
  static const ::protowire::Hash& utxocommitment(const BlockHeader* msg);
  static const ::protowire::Hash& pruningpoint(const BlockHeader* msg);
};

const ::protowire::Hash&
BlockHeader::_Internal::hashmerkleroot(const BlockHeader* msg) {
  return *msg->hashmerkleroot_;
}
const ::protowire::Hash&
BlockHeader::_Internal::acceptedidmerkleroot(const BlockHeader* msg) {
  return *msg->acceptedidmerkleroot_;
}
const ::protowire::Hash&
BlockHeader::_Internal::utxocommitment(const BlockHeader* msg) {
  return *msg->utxocommitment_;
}
const ::protowire::Hash&
BlockHeader::_Internal::pruningpoint(const BlockHeader* msg) {
  return *msg->pruningpoint_;
}
BlockHeader::BlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  parents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.BlockHeader)
}
BlockHeader::BlockHeader(const BlockHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parents_(from.parents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bluework_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bluework_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bluework().empty()) {
    bluework_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bluework(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_hashmerkleroot()) {
    hashmerkleroot_ = new ::protowire::Hash(*from.hashmerkleroot_);
  } else {
    hashmerkleroot_ = nullptr;
  }
  if (from._internal_has_acceptedidmerkleroot()) {
    acceptedidmerkleroot_ = new ::protowire::Hash(*from.acceptedidmerkleroot_);
  } else {
    acceptedidmerkleroot_ = nullptr;
  }
  if (from._internal_has_utxocommitment()) {
    utxocommitment_ = new ::protowire::Hash(*from.utxocommitment_);
  } else {
    utxocommitment_ = nullptr;
  }
  if (from._internal_has_pruningpoint()) {
    pruningpoint_ = new ::protowire::Hash(*from.pruningpoint_);
  } else {
    pruningpoint_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&bluescore_) -
    reinterpret_cast<char*>(&version_)) + sizeof(bluescore_));
  // @@protoc_insertion_point(copy_constructor:protowire.BlockHeader)
}

inline void BlockHeader::SharedCtor() {
bluework_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bluework_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hashmerkleroot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bluescore_) -
    reinterpret_cast<char*>(&hashmerkleroot_)) + sizeof(bluescore_));
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:protowire.BlockHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bluework_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hashmerkleroot_;
  if (this != internal_default_instance()) delete acceptedidmerkleroot_;
  if (this != internal_default_instance()) delete utxocommitment_;
  if (this != internal_default_instance()) delete pruningpoint_;
}

void BlockHeader::ArenaDtor(void* object) {
  BlockHeader* _this = reinterpret_cast< BlockHeader* >(object);
  (void)_this;
}
void BlockHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.BlockHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parents_.Clear();
  bluework_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && hashmerkleroot_ != nullptr) {
    delete hashmerkleroot_;
  }
  hashmerkleroot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && acceptedidmerkleroot_ != nullptr) {
    delete acceptedidmerkleroot_;
  }
  acceptedidmerkleroot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && utxocommitment_ != nullptr) {
    delete utxocommitment_;
  }
  utxocommitment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pruningpoint_ != nullptr) {
    delete pruningpoint_;
  }
  pruningpoint_ = nullptr;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bluescore_) -
      reinterpret_cast<char*>(&version_)) + sizeof(bluescore_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.Hash hashMerkleRoot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hashmerkleroot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.Hash acceptedIdMerkleRoot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceptedidmerkleroot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.Hash utxoCommitment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_utxocommitment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 daaScore = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          daascore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes blueWork = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_bluework();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protowire.BlockLevelParents parents = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 blueScore = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          bluescore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.Hash pruningPoint = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_pruningpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.BlockHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // .protowire.Hash hashMerkleRoot = 3;
  if (this->_internal_has_hashmerkleroot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hashmerkleroot(this), target, stream);
  }

  // .protowire.Hash acceptedIdMerkleRoot = 4;
  if (this->_internal_has_acceptedidmerkleroot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::acceptedidmerkleroot(this), target, stream);
  }

  // .protowire.Hash utxoCommitment = 5;
  if (this->_internal_has_utxocommitment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::utxocommitment(this), target, stream);
  }

  // int64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp(), target);
  }

  // uint32 bits = 7;
  if (this->_internal_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bits(), target);
  }

  // uint64 nonce = 8;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_nonce(), target);
  }

  // uint64 daaScore = 9;
  if (this->_internal_daascore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_daascore(), target);
  }

  // bytes blueWork = 10;
  if (!this->_internal_bluework().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_bluework(), target);
  }

  // repeated .protowire.BlockLevelParents parents = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_parents(i), target, stream);
  }

  // uint64 blueScore = 13;
  if (this->_internal_bluescore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_bluescore(), target);
  }

  // .protowire.Hash pruningPoint = 14;
  if (this->_internal_has_pruningpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::pruningpoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.BlockHeader)
  return target;
}

size_t BlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.BlockHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.BlockLevelParents parents = 12;
  total_size += 1UL * this->_internal_parents_size();
  for (const auto& msg : this->parents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes blueWork = 10;
  if (!this->_internal_bluework().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bluework());
  }

  // .protowire.Hash hashMerkleRoot = 3;
  if (this->_internal_has_hashmerkleroot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hashmerkleroot_);
  }

  // .protowire.Hash acceptedIdMerkleRoot = 4;
  if (this->_internal_has_acceptedidmerkleroot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceptedidmerkleroot_);
  }

  // .protowire.Hash utxoCommitment = 5;
  if (this->_internal_has_utxocommitment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *utxocommitment_);
  }

  // .protowire.Hash pruningPoint = 14;
  if (this->_internal_has_pruningpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pruningpoint_);
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // uint32 bits = 7;
  if (this->_internal_bits() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bits());
  }

  // int64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // uint64 nonce = 8;
  if (this->_internal_nonce() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  // uint64 daaScore = 9;
  if (this->_internal_daascore() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_daascore());
  }

  // uint64 blueScore = 13;
  if (this->_internal_bluescore() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bluescore());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockHeader::GetClassData() const { return &_class_data_; }

void BlockHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockHeader *>(to)->MergeFrom(
      static_cast<const BlockHeader &>(from));
}


void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  parents_.MergeFrom(from.parents_);
  if (!from._internal_bluework().empty()) {
    _internal_set_bluework(from._internal_bluework());
  }
  if (from._internal_has_hashmerkleroot()) {
    _internal_mutable_hashmerkleroot()->::protowire::Hash::MergeFrom(from._internal_hashmerkleroot());
  }
  if (from._internal_has_acceptedidmerkleroot()) {
    _internal_mutable_acceptedidmerkleroot()->::protowire::Hash::MergeFrom(from._internal_acceptedidmerkleroot());
  }
  if (from._internal_has_utxocommitment()) {
    _internal_mutable_utxocommitment()->::protowire::Hash::MergeFrom(from._internal_utxocommitment());
  }
  if (from._internal_has_pruningpoint()) {
    _internal_mutable_pruningpoint()->::protowire::Hash::MergeFrom(from._internal_pruningpoint());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_bits() != 0) {
    _internal_set_bits(from._internal_bits());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_daascore() != 0) {
    _internal_set_daascore(from._internal_daascore());
  }
  if (from._internal_bluescore() != 0) {
    _internal_set_bluescore(from._internal_bluescore());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {
  return true;
}

void BlockHeader::InternalSwap(BlockHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parents_.InternalSwap(&other->parents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bluework_, lhs_arena,
      &other->bluework_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockHeader, bluescore_)
      + sizeof(BlockHeader::bluescore_)
      - PROTOBUF_FIELD_OFFSET(BlockHeader, hashmerkleroot_)>(
          reinterpret_cast<char*>(&hashmerkleroot_),
          reinterpret_cast<char*>(&other->hashmerkleroot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[11]);
}

// ===================================================================

class BlockLevelParents::_Internal {
 public:
};

BlockLevelParents::BlockLevelParents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  parenthashes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.BlockLevelParents)
}
BlockLevelParents::BlockLevelParents(const BlockLevelParents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parenthashes_(from.parenthashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.BlockLevelParents)
}

inline void BlockLevelParents::SharedCtor() {
}

BlockLevelParents::~BlockLevelParents() {
  // @@protoc_insertion_point(destructor:protowire.BlockLevelParents)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockLevelParents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockLevelParents::ArenaDtor(void* object) {
  BlockLevelParents* _this = reinterpret_cast< BlockLevelParents* >(object);
  (void)_this;
}
void BlockLevelParents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockLevelParents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockLevelParents::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.BlockLevelParents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parenthashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockLevelParents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.Hash parentHashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parenthashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockLevelParents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.BlockLevelParents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.Hash parentHashes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parenthashes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_parenthashes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.BlockLevelParents)
  return target;
}

size_t BlockLevelParents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.BlockLevelParents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.Hash parentHashes = 1;
  total_size += 1UL * this->_internal_parenthashes_size();
  for (const auto& msg : this->parenthashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockLevelParents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockLevelParents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockLevelParents::GetClassData() const { return &_class_data_; }

void BlockLevelParents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockLevelParents *>(to)->MergeFrom(
      static_cast<const BlockLevelParents &>(from));
}


void BlockLevelParents::MergeFrom(const BlockLevelParents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.BlockLevelParents)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  parenthashes_.MergeFrom(from.parenthashes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockLevelParents::CopyFrom(const BlockLevelParents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.BlockLevelParents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockLevelParents::IsInitialized() const {
  return true;
}

void BlockLevelParents::InternalSwap(BlockLevelParents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parenthashes_.InternalSwap(&other->parenthashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockLevelParents::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[12]);
}

// ===================================================================

class Hash::_Internal {
 public:
};

Hash::Hash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.Hash)
}
Hash::Hash(const Hash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bytes().empty()) {
    bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bytes(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protowire.Hash)
}

inline void Hash::SharedCtor() {
bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Hash::~Hash() {
  // @@protoc_insertion_point(destructor:protowire.Hash)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Hash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Hash::ArenaDtor(void* object) {
  Hash* _this = reinterpret_cast< Hash* >(object);
  (void)_this;
}
void Hash::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Hash::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.Hash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bytes_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Hash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.Hash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes bytes = 1;
  if (!this->_internal_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.Hash)
  return target;
}

size_t Hash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.Hash)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bytes = 1;
  if (!this->_internal_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Hash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hash::GetClassData() const { return &_class_data_; }

void Hash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Hash *>(to)->MergeFrom(
      static_cast<const Hash &>(from));
}


void Hash::MergeFrom(const Hash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.Hash)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bytes().empty()) {
    _internal_set_bytes(from._internal_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hash::CopyFrom(const Hash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.Hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hash::IsInitialized() const {
  return true;
}

void Hash::InternalSwap(Hash* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bytes_, lhs_arena,
      &other->bytes_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Hash::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[13]);
}

// ===================================================================

class RequestBlockLocatorMessage::_Internal {
 public:
  static const ::protowire::Hash& highhash(const RequestBlockLocatorMessage* msg);
};

const ::protowire::Hash&
RequestBlockLocatorMessage::_Internal::highhash(const RequestBlockLocatorMessage* msg) {
  return *msg->highhash_;
}
RequestBlockLocatorMessage::RequestBlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.RequestBlockLocatorMessage)
}
RequestBlockLocatorMessage::RequestBlockLocatorMessage(const RequestBlockLocatorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_highhash()) {
    highhash_ = new ::protowire::Hash(*from.highhash_);
  } else {
    highhash_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:protowire.RequestBlockLocatorMessage)
}

inline void RequestBlockLocatorMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&highhash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&highhash_)) + sizeof(limit_));
}

RequestBlockLocatorMessage::~RequestBlockLocatorMessage() {
  // @@protoc_insertion_point(destructor:protowire.RequestBlockLocatorMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestBlockLocatorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete highhash_;
}

void RequestBlockLocatorMessage::ArenaDtor(void* object) {
  RequestBlockLocatorMessage* _this = reinterpret_cast< RequestBlockLocatorMessage* >(object);
  (void)_this;
}
void RequestBlockLocatorMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestBlockLocatorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestBlockLocatorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.RequestBlockLocatorMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && highhash_ != nullptr) {
    delete highhash_;
  }
  highhash_ = nullptr;
  limit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBlockLocatorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.Hash highHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_highhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestBlockLocatorMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.RequestBlockLocatorMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.Hash highHash = 1;
  if (this->_internal_has_highhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::highhash(this), target, stream);
  }

  // uint32 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.RequestBlockLocatorMessage)
  return target;
}

size_t RequestBlockLocatorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.RequestBlockLocatorMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.Hash highHash = 1;
  if (this->_internal_has_highhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *highhash_);
  }

  // uint32 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestBlockLocatorMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestBlockLocatorMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestBlockLocatorMessage::GetClassData() const { return &_class_data_; }

void RequestBlockLocatorMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestBlockLocatorMessage *>(to)->MergeFrom(
      static_cast<const RequestBlockLocatorMessage &>(from));
}


void RequestBlockLocatorMessage::MergeFrom(const RequestBlockLocatorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.RequestBlockLocatorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_highhash()) {
    _internal_mutable_highhash()->::protowire::Hash::MergeFrom(from._internal_highhash());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestBlockLocatorMessage::CopyFrom(const RequestBlockLocatorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.RequestBlockLocatorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBlockLocatorMessage::IsInitialized() const {
  return true;
}

void RequestBlockLocatorMessage::InternalSwap(RequestBlockLocatorMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestBlockLocatorMessage, limit_)
      + sizeof(RequestBlockLocatorMessage::limit_)
      - PROTOBUF_FIELD_OFFSET(RequestBlockLocatorMessage, highhash_)>(
          reinterpret_cast<char*>(&highhash_),
          reinterpret_cast<char*>(&other->highhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBlockLocatorMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[14]);
}

// ===================================================================

class BlockLocatorMessage::_Internal {
 public:
};

BlockLocatorMessage::BlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hashes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.BlockLocatorMessage)
}
BlockLocatorMessage::BlockLocatorMessage(const BlockLocatorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hashes_(from.hashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.BlockLocatorMessage)
}

inline void BlockLocatorMessage::SharedCtor() {
}

BlockLocatorMessage::~BlockLocatorMessage() {
  // @@protoc_insertion_point(destructor:protowire.BlockLocatorMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockLocatorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockLocatorMessage::ArenaDtor(void* object) {
  BlockLocatorMessage* _this = reinterpret_cast< BlockLocatorMessage* >(object);
  (void)_this;
}
void BlockLocatorMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockLocatorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockLocatorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.BlockLocatorMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockLocatorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.Hash hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockLocatorMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.BlockLocatorMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.Hash hashes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hashes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hashes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.BlockLocatorMessage)
  return target;
}

size_t BlockLocatorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.BlockLocatorMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.Hash hashes = 1;
  total_size += 1UL * this->_internal_hashes_size();
  for (const auto& msg : this->hashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockLocatorMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockLocatorMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockLocatorMessage::GetClassData() const { return &_class_data_; }

void BlockLocatorMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockLocatorMessage *>(to)->MergeFrom(
      static_cast<const BlockLocatorMessage &>(from));
}


void BlockLocatorMessage::MergeFrom(const BlockLocatorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.BlockLocatorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockLocatorMessage::CopyFrom(const BlockLocatorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.BlockLocatorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockLocatorMessage::IsInitialized() const {
  return true;
}

void BlockLocatorMessage::InternalSwap(BlockLocatorMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hashes_.InternalSwap(&other->hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockLocatorMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[15]);
}

// ===================================================================

class RequestHeadersMessage::_Internal {
 public:
  static const ::protowire::Hash& lowhash(const RequestHeadersMessage* msg);
  static const ::protowire::Hash& highhash(const RequestHeadersMessage* msg);
};

const ::protowire::Hash&
RequestHeadersMessage::_Internal::lowhash(const RequestHeadersMessage* msg) {
  return *msg->lowhash_;
}
const ::protowire::Hash&
RequestHeadersMessage::_Internal::highhash(const RequestHeadersMessage* msg) {
  return *msg->highhash_;
}
RequestHeadersMessage::RequestHeadersMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.RequestHeadersMessage)
}
RequestHeadersMessage::RequestHeadersMessage(const RequestHeadersMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lowhash()) {
    lowhash_ = new ::protowire::Hash(*from.lowhash_);
  } else {
    lowhash_ = nullptr;
  }
  if (from._internal_has_highhash()) {
    highhash_ = new ::protowire::Hash(*from.highhash_);
  } else {
    highhash_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.RequestHeadersMessage)
}

inline void RequestHeadersMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lowhash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&highhash_) -
    reinterpret_cast<char*>(&lowhash_)) + sizeof(highhash_));
}

RequestHeadersMessage::~RequestHeadersMessage() {
  // @@protoc_insertion_point(destructor:protowire.RequestHeadersMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestHeadersMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lowhash_;
  if (this != internal_default_instance()) delete highhash_;
}

void RequestHeadersMessage::ArenaDtor(void* object) {
  RequestHeadersMessage* _this = reinterpret_cast< RequestHeadersMessage* >(object);
  (void)_this;
}
void RequestHeadersMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestHeadersMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestHeadersMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.RequestHeadersMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lowhash_ != nullptr) {
    delete lowhash_;
  }
  lowhash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && highhash_ != nullptr) {
    delete highhash_;
  }
  highhash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestHeadersMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.Hash lowHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lowhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.Hash highHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_highhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestHeadersMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.RequestHeadersMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.Hash lowHash = 1;
  if (this->_internal_has_lowhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lowhash(this), target, stream);
  }

  // .protowire.Hash highHash = 2;
  if (this->_internal_has_highhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::highhash(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.RequestHeadersMessage)
  return target;
}

size_t RequestHeadersMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.RequestHeadersMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.Hash lowHash = 1;
  if (this->_internal_has_lowhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lowhash_);
  }

  // .protowire.Hash highHash = 2;
  if (this->_internal_has_highhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *highhash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestHeadersMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestHeadersMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestHeadersMessage::GetClassData() const { return &_class_data_; }

void RequestHeadersMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestHeadersMessage *>(to)->MergeFrom(
      static_cast<const RequestHeadersMessage &>(from));
}


void RequestHeadersMessage::MergeFrom(const RequestHeadersMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.RequestHeadersMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lowhash()) {
    _internal_mutable_lowhash()->::protowire::Hash::MergeFrom(from._internal_lowhash());
  }
  if (from._internal_has_highhash()) {
    _internal_mutable_highhash()->::protowire::Hash::MergeFrom(from._internal_highhash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestHeadersMessage::CopyFrom(const RequestHeadersMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.RequestHeadersMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeadersMessage::IsInitialized() const {
  return true;
}

void RequestHeadersMessage::InternalSwap(RequestHeadersMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestHeadersMessage, highhash_)
      + sizeof(RequestHeadersMessage::highhash_)
      - PROTOBUF_FIELD_OFFSET(RequestHeadersMessage, lowhash_)>(
          reinterpret_cast<char*>(&lowhash_),
          reinterpret_cast<char*>(&other->lowhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeadersMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[16]);
}

// ===================================================================

class RequestNextHeadersMessage::_Internal {
 public:
};

RequestNextHeadersMessage::RequestNextHeadersMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protowire.RequestNextHeadersMessage)
}
RequestNextHeadersMessage::RequestNextHeadersMessage(const RequestNextHeadersMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.RequestNextHeadersMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestNextHeadersMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestNextHeadersMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestNextHeadersMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[17]);
}

// ===================================================================

class DoneHeadersMessage::_Internal {
 public:
};

DoneHeadersMessage::DoneHeadersMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protowire.DoneHeadersMessage)
}
DoneHeadersMessage::DoneHeadersMessage(const DoneHeadersMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.DoneHeadersMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoneHeadersMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoneHeadersMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DoneHeadersMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[18]);
}

// ===================================================================

class RequestRelayBlocksMessage::_Internal {
 public:
};

RequestRelayBlocksMessage::RequestRelayBlocksMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hashes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.RequestRelayBlocksMessage)
}
RequestRelayBlocksMessage::RequestRelayBlocksMessage(const RequestRelayBlocksMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hashes_(from.hashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.RequestRelayBlocksMessage)
}

inline void RequestRelayBlocksMessage::SharedCtor() {
}

RequestRelayBlocksMessage::~RequestRelayBlocksMessage() {
  // @@protoc_insertion_point(destructor:protowire.RequestRelayBlocksMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestRelayBlocksMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestRelayBlocksMessage::ArenaDtor(void* object) {
  RequestRelayBlocksMessage* _this = reinterpret_cast< RequestRelayBlocksMessage* >(object);
  (void)_this;
}
void RequestRelayBlocksMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestRelayBlocksMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestRelayBlocksMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.RequestRelayBlocksMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestRelayBlocksMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.Hash hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestRelayBlocksMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.RequestRelayBlocksMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.Hash hashes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hashes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hashes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.RequestRelayBlocksMessage)
  return target;
}

size_t RequestRelayBlocksMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.RequestRelayBlocksMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.Hash hashes = 1;
  total_size += 1UL * this->_internal_hashes_size();
  for (const auto& msg : this->hashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestRelayBlocksMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestRelayBlocksMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestRelayBlocksMessage::GetClassData() const { return &_class_data_; }

void RequestRelayBlocksMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestRelayBlocksMessage *>(to)->MergeFrom(
      static_cast<const RequestRelayBlocksMessage &>(from));
}


void RequestRelayBlocksMessage::MergeFrom(const RequestRelayBlocksMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.RequestRelayBlocksMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestRelayBlocksMessage::CopyFrom(const RequestRelayBlocksMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.RequestRelayBlocksMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRelayBlocksMessage::IsInitialized() const {
  return true;
}

void RequestRelayBlocksMessage::InternalSwap(RequestRelayBlocksMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hashes_.InternalSwap(&other->hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestRelayBlocksMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[19]);
}

// ===================================================================

class RequestTransactionsMessage::_Internal {
 public:
};

RequestTransactionsMessage::RequestTransactionsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.RequestTransactionsMessage)
}
RequestTransactionsMessage::RequestTransactionsMessage(const RequestTransactionsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.RequestTransactionsMessage)
}

inline void RequestTransactionsMessage::SharedCtor() {
}

RequestTransactionsMessage::~RequestTransactionsMessage() {
  // @@protoc_insertion_point(destructor:protowire.RequestTransactionsMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestTransactionsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestTransactionsMessage::ArenaDtor(void* object) {
  RequestTransactionsMessage* _this = reinterpret_cast< RequestTransactionsMessage* >(object);
  (void)_this;
}
void RequestTransactionsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestTransactionsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestTransactionsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.RequestTransactionsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestTransactionsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.TransactionId ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestTransactionsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.RequestTransactionsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.TransactionId ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.RequestTransactionsMessage)
  return target;
}

size_t RequestTransactionsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.RequestTransactionsMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.TransactionId ids = 1;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestTransactionsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestTransactionsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestTransactionsMessage::GetClassData() const { return &_class_data_; }

void RequestTransactionsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestTransactionsMessage *>(to)->MergeFrom(
      static_cast<const RequestTransactionsMessage &>(from));
}


void RequestTransactionsMessage::MergeFrom(const RequestTransactionsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.RequestTransactionsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestTransactionsMessage::CopyFrom(const RequestTransactionsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.RequestTransactionsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTransactionsMessage::IsInitialized() const {
  return true;
}

void RequestTransactionsMessage::InternalSwap(RequestTransactionsMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestTransactionsMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[20]);
}

// ===================================================================

class TransactionNotFoundMessage::_Internal {
 public:
  static const ::protowire::TransactionId& id(const TransactionNotFoundMessage* msg);
};

const ::protowire::TransactionId&
TransactionNotFoundMessage::_Internal::id(const TransactionNotFoundMessage* msg) {
  return *msg->id_;
}
TransactionNotFoundMessage::TransactionNotFoundMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.TransactionNotFoundMessage)
}
TransactionNotFoundMessage::TransactionNotFoundMessage(const TransactionNotFoundMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::protowire::TransactionId(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.TransactionNotFoundMessage)
}

inline void TransactionNotFoundMessage::SharedCtor() {
id_ = nullptr;
}

TransactionNotFoundMessage::~TransactionNotFoundMessage() {
  // @@protoc_insertion_point(destructor:protowire.TransactionNotFoundMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionNotFoundMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void TransactionNotFoundMessage::ArenaDtor(void* object) {
  TransactionNotFoundMessage* _this = reinterpret_cast< TransactionNotFoundMessage* >(object);
  (void)_this;
}
void TransactionNotFoundMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionNotFoundMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionNotFoundMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.TransactionNotFoundMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionNotFoundMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.TransactionId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionNotFoundMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.TransactionNotFoundMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.TransactionId id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.TransactionNotFoundMessage)
  return target;
}

size_t TransactionNotFoundMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.TransactionNotFoundMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.TransactionId id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionNotFoundMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionNotFoundMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionNotFoundMessage::GetClassData() const { return &_class_data_; }

void TransactionNotFoundMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionNotFoundMessage *>(to)->MergeFrom(
      static_cast<const TransactionNotFoundMessage &>(from));
}


void TransactionNotFoundMessage::MergeFrom(const TransactionNotFoundMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.TransactionNotFoundMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::protowire::TransactionId::MergeFrom(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionNotFoundMessage::CopyFrom(const TransactionNotFoundMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.TransactionNotFoundMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionNotFoundMessage::IsInitialized() const {
  return true;
}

void TransactionNotFoundMessage::InternalSwap(TransactionNotFoundMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionNotFoundMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[21]);
}

// ===================================================================

class InvRelayBlockMessage::_Internal {
 public:
  static const ::protowire::Hash& hash(const InvRelayBlockMessage* msg);
};

const ::protowire::Hash&
InvRelayBlockMessage::_Internal::hash(const InvRelayBlockMessage* msg) {
  return *msg->hash_;
}
InvRelayBlockMessage::InvRelayBlockMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.InvRelayBlockMessage)
}
InvRelayBlockMessage::InvRelayBlockMessage(const InvRelayBlockMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hash()) {
    hash_ = new ::protowire::Hash(*from.hash_);
  } else {
    hash_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.InvRelayBlockMessage)
}

inline void InvRelayBlockMessage::SharedCtor() {
hash_ = nullptr;
}

InvRelayBlockMessage::~InvRelayBlockMessage() {
  // @@protoc_insertion_point(destructor:protowire.InvRelayBlockMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvRelayBlockMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hash_;
}

void InvRelayBlockMessage::ArenaDtor(void* object) {
  InvRelayBlockMessage* _this = reinterpret_cast< InvRelayBlockMessage* >(object);
  (void)_this;
}
void InvRelayBlockMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvRelayBlockMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvRelayBlockMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.InvRelayBlockMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hash_ != nullptr) {
    delete hash_;
  }
  hash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvRelayBlockMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.Hash hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvRelayBlockMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.InvRelayBlockMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.Hash hash = 1;
  if (this->_internal_has_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hash(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.InvRelayBlockMessage)
  return target;
}

size_t InvRelayBlockMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.InvRelayBlockMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.Hash hash = 1;
  if (this->_internal_has_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvRelayBlockMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvRelayBlockMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvRelayBlockMessage::GetClassData() const { return &_class_data_; }

void InvRelayBlockMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvRelayBlockMessage *>(to)->MergeFrom(
      static_cast<const InvRelayBlockMessage &>(from));
}


void InvRelayBlockMessage::MergeFrom(const InvRelayBlockMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.InvRelayBlockMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hash()) {
    _internal_mutable_hash()->::protowire::Hash::MergeFrom(from._internal_hash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvRelayBlockMessage::CopyFrom(const InvRelayBlockMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.InvRelayBlockMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvRelayBlockMessage::IsInitialized() const {
  return true;
}

void InvRelayBlockMessage::InternalSwap(InvRelayBlockMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(hash_, other->hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvRelayBlockMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[22]);
}

// ===================================================================

class InvTransactionsMessage::_Internal {
 public:
};

InvTransactionsMessage::InvTransactionsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.InvTransactionsMessage)
}
InvTransactionsMessage::InvTransactionsMessage(const InvTransactionsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.InvTransactionsMessage)
}

inline void InvTransactionsMessage::SharedCtor() {
}

InvTransactionsMessage::~InvTransactionsMessage() {
  // @@protoc_insertion_point(destructor:protowire.InvTransactionsMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InvTransactionsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InvTransactionsMessage::ArenaDtor(void* object) {
  InvTransactionsMessage* _this = reinterpret_cast< InvTransactionsMessage* >(object);
  (void)_this;
}
void InvTransactionsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvTransactionsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvTransactionsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.InvTransactionsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvTransactionsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.TransactionId ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvTransactionsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.InvTransactionsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.TransactionId ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.InvTransactionsMessage)
  return target;
}

size_t InvTransactionsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.InvTransactionsMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.TransactionId ids = 1;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvTransactionsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvTransactionsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvTransactionsMessage::GetClassData() const { return &_class_data_; }

void InvTransactionsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvTransactionsMessage *>(to)->MergeFrom(
      static_cast<const InvTransactionsMessage &>(from));
}


void InvTransactionsMessage::MergeFrom(const InvTransactionsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.InvTransactionsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvTransactionsMessage::CopyFrom(const InvTransactionsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.InvTransactionsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvTransactionsMessage::IsInitialized() const {
  return true;
}

void InvTransactionsMessage::InternalSwap(InvTransactionsMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvTransactionsMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[23]);
}

// ===================================================================

class PingMessage::_Internal {
 public:
};

PingMessage::PingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.PingMessage)
}
PingMessage::PingMessage(const PingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:protowire.PingMessage)
}

inline void PingMessage::SharedCtor() {
nonce_ = uint64_t{0u};
}

PingMessage::~PingMessage() {
  // @@protoc_insertion_point(destructor:protowire.PingMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PingMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PingMessage::ArenaDtor(void* object) {
  PingMessage* _this = reinterpret_cast< PingMessage* >(object);
  (void)_this;
}
void PingMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.PingMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PingMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.PingMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.PingMessage)
  return target;
}

size_t PingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.PingMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->_internal_nonce() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PingMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingMessage::GetClassData() const { return &_class_data_; }

void PingMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PingMessage *>(to)->MergeFrom(
      static_cast<const PingMessage &>(from));
}


void PingMessage::MergeFrom(const PingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.PingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PingMessage::CopyFrom(const PingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.PingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingMessage::IsInitialized() const {
  return true;
}

void PingMessage::InternalSwap(PingMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(nonce_, other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PingMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[24]);
}

// ===================================================================

class PongMessage::_Internal {
 public:
};

PongMessage::PongMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.PongMessage)
}
PongMessage::PongMessage(const PongMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:protowire.PongMessage)
}

inline void PongMessage::SharedCtor() {
nonce_ = uint64_t{0u};
}

PongMessage::~PongMessage() {
  // @@protoc_insertion_point(destructor:protowire.PongMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PongMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PongMessage::ArenaDtor(void* object) {
  PongMessage* _this = reinterpret_cast< PongMessage* >(object);
  (void)_this;
}
void PongMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PongMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PongMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.PongMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PongMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PongMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.PongMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.PongMessage)
  return target;
}

size_t PongMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.PongMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->_internal_nonce() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PongMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PongMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PongMessage::GetClassData() const { return &_class_data_; }

void PongMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PongMessage *>(to)->MergeFrom(
      static_cast<const PongMessage &>(from));
}


void PongMessage::MergeFrom(const PongMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.PongMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PongMessage::CopyFrom(const PongMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.PongMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PongMessage::IsInitialized() const {
  return true;
}

void PongMessage::InternalSwap(PongMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(nonce_, other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PongMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[25]);
}

// ===================================================================

class VerackMessage::_Internal {
 public:
};

VerackMessage::VerackMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protowire.VerackMessage)
}
VerackMessage::VerackMessage(const VerackMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.VerackMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerackMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerackMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata VerackMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[26]);
}

// ===================================================================

class VersionMessage::_Internal {
 public:
  static const ::protowire::NetAddress& address(const VersionMessage* msg);
  static const ::protowire::SubnetworkId& subnetworkid(const VersionMessage* msg);
};

const ::protowire::NetAddress&
VersionMessage::_Internal::address(const VersionMessage* msg) {
  return *msg->address_;
}
const ::protowire::SubnetworkId&
VersionMessage::_Internal::subnetworkid(const VersionMessage* msg) {
  return *msg->subnetworkid_;
}
VersionMessage::VersionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.VersionMessage)
}
VersionMessage::VersionMessage(const VersionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  useragent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    useragent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_useragent().empty()) {
    useragent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_useragent(), 
      GetArenaForAllocation());
  }
  network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    network_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_network().empty()) {
    network_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_network(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_address()) {
    address_ = new ::protowire::NetAddress(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_subnetworkid()) {
    subnetworkid_ = new ::protowire::SubnetworkId(*from.subnetworkid_);
  } else {
    subnetworkid_ = nullptr;
  }
  ::memcpy(&services_, &from.services_,
    static_cast<size_t>(reinterpret_cast<char*>(&disablerelaytx_) -
    reinterpret_cast<char*>(&services_)) + sizeof(disablerelaytx_));
  // @@protoc_insertion_point(copy_constructor:protowire.VersionMessage)
}

inline void VersionMessage::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
useragent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  useragent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  network_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disablerelaytx_) -
    reinterpret_cast<char*>(&address_)) + sizeof(disablerelaytx_));
}

VersionMessage::~VersionMessage() {
  // @@protoc_insertion_point(destructor:protowire.VersionMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VersionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  useragent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete subnetworkid_;
}

void VersionMessage::ArenaDtor(void* object) {
  VersionMessage* _this = reinterpret_cast< VersionMessage* >(object);
  (void)_this;
}
void VersionMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.VersionMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  useragent_.ClearToEmpty();
  network_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && subnetworkid_ != nullptr) {
    delete subnetworkid_;
  }
  subnetworkid_ = nullptr;
  ::memset(&services_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disablerelaytx_) -
      reinterpret_cast<char*>(&services_)) + sizeof(disablerelaytx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 protocolVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          protocolversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 services = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          services_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.NetAddress address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string userAgent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_useragent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protowire.VersionMessage.userAgent"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disableRelayTx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          disablerelaytx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.SubnetworkId subnetworkId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_subnetworkid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string network = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_network();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protowire.VersionMessage.network"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.VersionMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 protocolVersion = 1;
  if (this->_internal_protocolversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_protocolversion(), target);
  }

  // uint64 services = 2;
  if (this->_internal_services() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_services(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // .protowire.NetAddress address = 4;
  if (this->_internal_has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::address(this), target, stream);
  }

  // bytes id = 5;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_id(), target);
  }

  // string userAgent = 6;
  if (!this->_internal_useragent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_useragent().data(), static_cast<int>(this->_internal_useragent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protowire.VersionMessage.userAgent");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_useragent(), target);
  }

  // bool disableRelayTx = 8;
  if (this->_internal_disablerelaytx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_disablerelaytx(), target);
  }

  // .protowire.SubnetworkId subnetworkId = 9;
  if (this->_internal_has_subnetworkid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::subnetworkid(this), target, stream);
  }

  // string network = 10;
  if (!this->_internal_network().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protowire.VersionMessage.network");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_network(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.VersionMessage)
  return target;
}

size_t VersionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.VersionMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 5;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // string userAgent = 6;
  if (!this->_internal_useragent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_useragent());
  }

  // string network = 10;
  if (!this->_internal_network().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  // .protowire.NetAddress address = 4;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .protowire.SubnetworkId subnetworkId = 9;
  if (this->_internal_has_subnetworkid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subnetworkid_);
  }

  // uint64 services = 2;
  if (this->_internal_services() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_services());
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 protocolVersion = 1;
  if (this->_internal_protocolversion() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_protocolversion());
  }

  // bool disableRelayTx = 8;
  if (this->_internal_disablerelaytx() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VersionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionMessage::GetClassData() const { return &_class_data_; }

void VersionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VersionMessage *>(to)->MergeFrom(
      static_cast<const VersionMessage &>(from));
}


void VersionMessage::MergeFrom(const VersionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.VersionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_useragent().empty()) {
    _internal_set_useragent(from._internal_useragent());
  }
  if (!from._internal_network().empty()) {
    _internal_set_network(from._internal_network());
  }
  if (from._internal_has_address()) {
    _internal_mutable_address()->::protowire::NetAddress::MergeFrom(from._internal_address());
  }
  if (from._internal_has_subnetworkid()) {
    _internal_mutable_subnetworkid()->::protowire::SubnetworkId::MergeFrom(from._internal_subnetworkid());
  }
  if (from._internal_services() != 0) {
    _internal_set_services(from._internal_services());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_protocolversion() != 0) {
    _internal_set_protocolversion(from._internal_protocolversion());
  }
  if (from._internal_disablerelaytx() != 0) {
    _internal_set_disablerelaytx(from._internal_disablerelaytx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionMessage::CopyFrom(const VersionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.VersionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionMessage::IsInitialized() const {
  return true;
}

void VersionMessage::InternalSwap(VersionMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &useragent_, lhs_arena,
      &other->useragent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &network_, lhs_arena,
      &other->network_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersionMessage, disablerelaytx_)
      + sizeof(VersionMessage::disablerelaytx_)
      - PROTOBUF_FIELD_OFFSET(VersionMessage, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[27]);
}

// ===================================================================

class RejectMessage::_Internal {
 public:
};

RejectMessage::RejectMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.RejectMessage)
}
RejectMessage::RejectMessage(const RejectMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protowire.RejectMessage)
}

inline void RejectMessage::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RejectMessage::~RejectMessage() {
  // @@protoc_insertion_point(destructor:protowire.RejectMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RejectMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RejectMessage::ArenaDtor(void* object) {
  RejectMessage* _this = reinterpret_cast< RejectMessage* >(object);
  (void)_this;
}
void RejectMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RejectMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RejectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.RejectMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RejectMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protowire.RejectMessage.reason"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RejectMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.RejectMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string reason = 1;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protowire.RejectMessage.reason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.RejectMessage)
  return target;
}

size_t RejectMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.RejectMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 1;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RejectMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RejectMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RejectMessage::GetClassData() const { return &_class_data_; }

void RejectMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RejectMessage *>(to)->MergeFrom(
      static_cast<const RejectMessage &>(from));
}


void RejectMessage::MergeFrom(const RejectMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.RejectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _internal_set_reason(from._internal_reason());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RejectMessage::CopyFrom(const RejectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.RejectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectMessage::IsInitialized() const {
  return true;
}

void RejectMessage::InternalSwap(RejectMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reason_, lhs_arena,
      &other->reason_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RejectMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[28]);
}

// ===================================================================

class RequestPruningPointUTXOSetMessage::_Internal {
 public:
  static const ::protowire::Hash& pruningpointhash(const RequestPruningPointUTXOSetMessage* msg);
};

const ::protowire::Hash&
RequestPruningPointUTXOSetMessage::_Internal::pruningpointhash(const RequestPruningPointUTXOSetMessage* msg) {
  return *msg->pruningpointhash_;
}
RequestPruningPointUTXOSetMessage::RequestPruningPointUTXOSetMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.RequestPruningPointUTXOSetMessage)
}
RequestPruningPointUTXOSetMessage::RequestPruningPointUTXOSetMessage(const RequestPruningPointUTXOSetMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pruningpointhash()) {
    pruningpointhash_ = new ::protowire::Hash(*from.pruningpointhash_);
  } else {
    pruningpointhash_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.RequestPruningPointUTXOSetMessage)
}

inline void RequestPruningPointUTXOSetMessage::SharedCtor() {
pruningpointhash_ = nullptr;
}

RequestPruningPointUTXOSetMessage::~RequestPruningPointUTXOSetMessage() {
  // @@protoc_insertion_point(destructor:protowire.RequestPruningPointUTXOSetMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestPruningPointUTXOSetMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pruningpointhash_;
}

void RequestPruningPointUTXOSetMessage::ArenaDtor(void* object) {
  RequestPruningPointUTXOSetMessage* _this = reinterpret_cast< RequestPruningPointUTXOSetMessage* >(object);
  (void)_this;
}
void RequestPruningPointUTXOSetMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestPruningPointUTXOSetMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestPruningPointUTXOSetMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.RequestPruningPointUTXOSetMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pruningpointhash_ != nullptr) {
    delete pruningpointhash_;
  }
  pruningpointhash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestPruningPointUTXOSetMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.Hash pruningPointHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pruningpointhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestPruningPointUTXOSetMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.RequestPruningPointUTXOSetMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.Hash pruningPointHash = 1;
  if (this->_internal_has_pruningpointhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pruningpointhash(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.RequestPruningPointUTXOSetMessage)
  return target;
}

size_t RequestPruningPointUTXOSetMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.RequestPruningPointUTXOSetMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.Hash pruningPointHash = 1;
  if (this->_internal_has_pruningpointhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pruningpointhash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestPruningPointUTXOSetMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestPruningPointUTXOSetMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestPruningPointUTXOSetMessage::GetClassData() const { return &_class_data_; }

void RequestPruningPointUTXOSetMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestPruningPointUTXOSetMessage *>(to)->MergeFrom(
      static_cast<const RequestPruningPointUTXOSetMessage &>(from));
}


void RequestPruningPointUTXOSetMessage::MergeFrom(const RequestPruningPointUTXOSetMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.RequestPruningPointUTXOSetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pruningpointhash()) {
    _internal_mutable_pruningpointhash()->::protowire::Hash::MergeFrom(from._internal_pruningpointhash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestPruningPointUTXOSetMessage::CopyFrom(const RequestPruningPointUTXOSetMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.RequestPruningPointUTXOSetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPruningPointUTXOSetMessage::IsInitialized() const {
  return true;
}

void RequestPruningPointUTXOSetMessage::InternalSwap(RequestPruningPointUTXOSetMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pruningpointhash_, other->pruningpointhash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestPruningPointUTXOSetMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[29]);
}

// ===================================================================

class PruningPointUtxoSetChunkMessage::_Internal {
 public:
};

PruningPointUtxoSetChunkMessage::PruningPointUtxoSetChunkMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  outpointandutxoentrypairs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.PruningPointUtxoSetChunkMessage)
}
PruningPointUtxoSetChunkMessage::PruningPointUtxoSetChunkMessage(const PruningPointUtxoSetChunkMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      outpointandutxoentrypairs_(from.outpointandutxoentrypairs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.PruningPointUtxoSetChunkMessage)
}

inline void PruningPointUtxoSetChunkMessage::SharedCtor() {
}

PruningPointUtxoSetChunkMessage::~PruningPointUtxoSetChunkMessage() {
  // @@protoc_insertion_point(destructor:protowire.PruningPointUtxoSetChunkMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PruningPointUtxoSetChunkMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PruningPointUtxoSetChunkMessage::ArenaDtor(void* object) {
  PruningPointUtxoSetChunkMessage* _this = reinterpret_cast< PruningPointUtxoSetChunkMessage* >(object);
  (void)_this;
}
void PruningPointUtxoSetChunkMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PruningPointUtxoSetChunkMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PruningPointUtxoSetChunkMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.PruningPointUtxoSetChunkMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outpointandutxoentrypairs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PruningPointUtxoSetChunkMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.OutpointAndUtxoEntryPair outpointAndUtxoEntryPairs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outpointandutxoentrypairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PruningPointUtxoSetChunkMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.PruningPointUtxoSetChunkMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.OutpointAndUtxoEntryPair outpointAndUtxoEntryPairs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outpointandutxoentrypairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_outpointandutxoentrypairs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.PruningPointUtxoSetChunkMessage)
  return target;
}

size_t PruningPointUtxoSetChunkMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.PruningPointUtxoSetChunkMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.OutpointAndUtxoEntryPair outpointAndUtxoEntryPairs = 1;
  total_size += 1UL * this->_internal_outpointandutxoentrypairs_size();
  for (const auto& msg : this->outpointandutxoentrypairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PruningPointUtxoSetChunkMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PruningPointUtxoSetChunkMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PruningPointUtxoSetChunkMessage::GetClassData() const { return &_class_data_; }

void PruningPointUtxoSetChunkMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PruningPointUtxoSetChunkMessage *>(to)->MergeFrom(
      static_cast<const PruningPointUtxoSetChunkMessage &>(from));
}


void PruningPointUtxoSetChunkMessage::MergeFrom(const PruningPointUtxoSetChunkMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.PruningPointUtxoSetChunkMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  outpointandutxoentrypairs_.MergeFrom(from.outpointandutxoentrypairs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PruningPointUtxoSetChunkMessage::CopyFrom(const PruningPointUtxoSetChunkMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.PruningPointUtxoSetChunkMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PruningPointUtxoSetChunkMessage::IsInitialized() const {
  return true;
}

void PruningPointUtxoSetChunkMessage::InternalSwap(PruningPointUtxoSetChunkMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  outpointandutxoentrypairs_.InternalSwap(&other->outpointandutxoentrypairs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PruningPointUtxoSetChunkMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[30]);
}

// ===================================================================

class OutpointAndUtxoEntryPair::_Internal {
 public:
  static const ::protowire::Outpoint& outpoint(const OutpointAndUtxoEntryPair* msg);
  static const ::protowire::UtxoEntry& utxoentry(const OutpointAndUtxoEntryPair* msg);
};

const ::protowire::Outpoint&
OutpointAndUtxoEntryPair::_Internal::outpoint(const OutpointAndUtxoEntryPair* msg) {
  return *msg->outpoint_;
}
const ::protowire::UtxoEntry&
OutpointAndUtxoEntryPair::_Internal::utxoentry(const OutpointAndUtxoEntryPair* msg) {
  return *msg->utxoentry_;
}
OutpointAndUtxoEntryPair::OutpointAndUtxoEntryPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.OutpointAndUtxoEntryPair)
}
OutpointAndUtxoEntryPair::OutpointAndUtxoEntryPair(const OutpointAndUtxoEntryPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_outpoint()) {
    outpoint_ = new ::protowire::Outpoint(*from.outpoint_);
  } else {
    outpoint_ = nullptr;
  }
  if (from._internal_has_utxoentry()) {
    utxoentry_ = new ::protowire::UtxoEntry(*from.utxoentry_);
  } else {
    utxoentry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.OutpointAndUtxoEntryPair)
}

inline void OutpointAndUtxoEntryPair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&outpoint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&utxoentry_) -
    reinterpret_cast<char*>(&outpoint_)) + sizeof(utxoentry_));
}

OutpointAndUtxoEntryPair::~OutpointAndUtxoEntryPair() {
  // @@protoc_insertion_point(destructor:protowire.OutpointAndUtxoEntryPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutpointAndUtxoEntryPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete outpoint_;
  if (this != internal_default_instance()) delete utxoentry_;
}

void OutpointAndUtxoEntryPair::ArenaDtor(void* object) {
  OutpointAndUtxoEntryPair* _this = reinterpret_cast< OutpointAndUtxoEntryPair* >(object);
  (void)_this;
}
void OutpointAndUtxoEntryPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutpointAndUtxoEntryPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutpointAndUtxoEntryPair::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.OutpointAndUtxoEntryPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && utxoentry_ != nullptr) {
    delete utxoentry_;
  }
  utxoentry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutpointAndUtxoEntryPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.Outpoint outpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_outpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.UtxoEntry utxoEntry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_utxoentry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutpointAndUtxoEntryPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.OutpointAndUtxoEntryPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.Outpoint outpoint = 1;
  if (this->_internal_has_outpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::outpoint(this), target, stream);
  }

  // .protowire.UtxoEntry utxoEntry = 2;
  if (this->_internal_has_utxoentry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::utxoentry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.OutpointAndUtxoEntryPair)
  return target;
}

size_t OutpointAndUtxoEntryPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.OutpointAndUtxoEntryPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.Outpoint outpoint = 1;
  if (this->_internal_has_outpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outpoint_);
  }

  // .protowire.UtxoEntry utxoEntry = 2;
  if (this->_internal_has_utxoentry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *utxoentry_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutpointAndUtxoEntryPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutpointAndUtxoEntryPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutpointAndUtxoEntryPair::GetClassData() const { return &_class_data_; }

void OutpointAndUtxoEntryPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OutpointAndUtxoEntryPair *>(to)->MergeFrom(
      static_cast<const OutpointAndUtxoEntryPair &>(from));
}


void OutpointAndUtxoEntryPair::MergeFrom(const OutpointAndUtxoEntryPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.OutpointAndUtxoEntryPair)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_outpoint()) {
    _internal_mutable_outpoint()->::protowire::Outpoint::MergeFrom(from._internal_outpoint());
  }
  if (from._internal_has_utxoentry()) {
    _internal_mutable_utxoentry()->::protowire::UtxoEntry::MergeFrom(from._internal_utxoentry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutpointAndUtxoEntryPair::CopyFrom(const OutpointAndUtxoEntryPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.OutpointAndUtxoEntryPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutpointAndUtxoEntryPair::IsInitialized() const {
  return true;
}

void OutpointAndUtxoEntryPair::InternalSwap(OutpointAndUtxoEntryPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutpointAndUtxoEntryPair, utxoentry_)
      + sizeof(OutpointAndUtxoEntryPair::utxoentry_)
      - PROTOBUF_FIELD_OFFSET(OutpointAndUtxoEntryPair, outpoint_)>(
          reinterpret_cast<char*>(&outpoint_),
          reinterpret_cast<char*>(&other->outpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutpointAndUtxoEntryPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[31]);
}

// ===================================================================

class UtxoEntry::_Internal {
 public:
  static const ::protowire::ScriptPublicKey& scriptpublickey(const UtxoEntry* msg);
};

const ::protowire::ScriptPublicKey&
UtxoEntry::_Internal::scriptpublickey(const UtxoEntry* msg) {
  return *msg->scriptpublickey_;
}
UtxoEntry::UtxoEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.UtxoEntry)
}
UtxoEntry::UtxoEntry(const UtxoEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scriptpublickey()) {
    scriptpublickey_ = new ::protowire::ScriptPublicKey(*from.scriptpublickey_);
  } else {
    scriptpublickey_ = nullptr;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&iscoinbase_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(iscoinbase_));
  // @@protoc_insertion_point(copy_constructor:protowire.UtxoEntry)
}

inline void UtxoEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scriptpublickey_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iscoinbase_) -
    reinterpret_cast<char*>(&scriptpublickey_)) + sizeof(iscoinbase_));
}

UtxoEntry::~UtxoEntry() {
  // @@protoc_insertion_point(destructor:protowire.UtxoEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UtxoEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete scriptpublickey_;
}

void UtxoEntry::ArenaDtor(void* object) {
  UtxoEntry* _this = reinterpret_cast< UtxoEntry* >(object);
  (void)_this;
}
void UtxoEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UtxoEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UtxoEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.UtxoEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && scriptpublickey_ != nullptr) {
    delete scriptpublickey_;
  }
  scriptpublickey_ = nullptr;
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iscoinbase_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(iscoinbase_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtxoEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.ScriptPublicKey scriptPublicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scriptpublickey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 blockDaaScore = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          blockdaascore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isCoinbase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          iscoinbase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UtxoEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.UtxoEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  // .protowire.ScriptPublicKey scriptPublicKey = 2;
  if (this->_internal_has_scriptpublickey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scriptpublickey(this), target, stream);
  }

  // uint64 blockDaaScore = 3;
  if (this->_internal_blockdaascore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_blockdaascore(), target);
  }

  // bool isCoinbase = 4;
  if (this->_internal_iscoinbase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_iscoinbase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.UtxoEntry)
  return target;
}

size_t UtxoEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.UtxoEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.ScriptPublicKey scriptPublicKey = 2;
  if (this->_internal_has_scriptpublickey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scriptpublickey_);
  }

  // uint64 amount = 1;
  if (this->_internal_amount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  // uint64 blockDaaScore = 3;
  if (this->_internal_blockdaascore() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_blockdaascore());
  }

  // bool isCoinbase = 4;
  if (this->_internal_iscoinbase() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UtxoEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UtxoEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UtxoEntry::GetClassData() const { return &_class_data_; }

void UtxoEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UtxoEntry *>(to)->MergeFrom(
      static_cast<const UtxoEntry &>(from));
}


void UtxoEntry::MergeFrom(const UtxoEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.UtxoEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_scriptpublickey()) {
    _internal_mutable_scriptpublickey()->::protowire::ScriptPublicKey::MergeFrom(from._internal_scriptpublickey());
  }
  if (from._internal_amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_blockdaascore() != 0) {
    _internal_set_blockdaascore(from._internal_blockdaascore());
  }
  if (from._internal_iscoinbase() != 0) {
    _internal_set_iscoinbase(from._internal_iscoinbase());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UtxoEntry::CopyFrom(const UtxoEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.UtxoEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtxoEntry::IsInitialized() const {
  return true;
}

void UtxoEntry::InternalSwap(UtxoEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UtxoEntry, iscoinbase_)
      + sizeof(UtxoEntry::iscoinbase_)
      - PROTOBUF_FIELD_OFFSET(UtxoEntry, scriptpublickey_)>(
          reinterpret_cast<char*>(&scriptpublickey_),
          reinterpret_cast<char*>(&other->scriptpublickey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UtxoEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[32]);
}

// ===================================================================

class RequestNextPruningPointUtxoSetChunkMessage::_Internal {
 public:
};

RequestNextPruningPointUtxoSetChunkMessage::RequestNextPruningPointUtxoSetChunkMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protowire.RequestNextPruningPointUtxoSetChunkMessage)
}
RequestNextPruningPointUtxoSetChunkMessage::RequestNextPruningPointUtxoSetChunkMessage(const RequestNextPruningPointUtxoSetChunkMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.RequestNextPruningPointUtxoSetChunkMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestNextPruningPointUtxoSetChunkMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestNextPruningPointUtxoSetChunkMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestNextPruningPointUtxoSetChunkMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[33]);
}

// ===================================================================

class DonePruningPointUtxoSetChunksMessage::_Internal {
 public:
};

DonePruningPointUtxoSetChunksMessage::DonePruningPointUtxoSetChunksMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protowire.DonePruningPointUtxoSetChunksMessage)
}
DonePruningPointUtxoSetChunksMessage::DonePruningPointUtxoSetChunksMessage(const DonePruningPointUtxoSetChunksMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.DonePruningPointUtxoSetChunksMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DonePruningPointUtxoSetChunksMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DonePruningPointUtxoSetChunksMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DonePruningPointUtxoSetChunksMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[34]);
}

// ===================================================================

class RequestIBDBlocksMessage::_Internal {
 public:
};

RequestIBDBlocksMessage::RequestIBDBlocksMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hashes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.RequestIBDBlocksMessage)
}
RequestIBDBlocksMessage::RequestIBDBlocksMessage(const RequestIBDBlocksMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hashes_(from.hashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.RequestIBDBlocksMessage)
}

inline void RequestIBDBlocksMessage::SharedCtor() {
}

RequestIBDBlocksMessage::~RequestIBDBlocksMessage() {
  // @@protoc_insertion_point(destructor:protowire.RequestIBDBlocksMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestIBDBlocksMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestIBDBlocksMessage::ArenaDtor(void* object) {
  RequestIBDBlocksMessage* _this = reinterpret_cast< RequestIBDBlocksMessage* >(object);
  (void)_this;
}
void RequestIBDBlocksMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestIBDBlocksMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestIBDBlocksMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.RequestIBDBlocksMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestIBDBlocksMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.Hash hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestIBDBlocksMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.RequestIBDBlocksMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.Hash hashes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hashes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hashes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.RequestIBDBlocksMessage)
  return target;
}

size_t RequestIBDBlocksMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.RequestIBDBlocksMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.Hash hashes = 1;
  total_size += 1UL * this->_internal_hashes_size();
  for (const auto& msg : this->hashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestIBDBlocksMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestIBDBlocksMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestIBDBlocksMessage::GetClassData() const { return &_class_data_; }

void RequestIBDBlocksMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestIBDBlocksMessage *>(to)->MergeFrom(
      static_cast<const RequestIBDBlocksMessage &>(from));
}


void RequestIBDBlocksMessage::MergeFrom(const RequestIBDBlocksMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.RequestIBDBlocksMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestIBDBlocksMessage::CopyFrom(const RequestIBDBlocksMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.RequestIBDBlocksMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestIBDBlocksMessage::IsInitialized() const {
  return true;
}

void RequestIBDBlocksMessage::InternalSwap(RequestIBDBlocksMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hashes_.InternalSwap(&other->hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestIBDBlocksMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[35]);
}

// ===================================================================

class UnexpectedPruningPointMessage::_Internal {
 public:
};

UnexpectedPruningPointMessage::UnexpectedPruningPointMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protowire.UnexpectedPruningPointMessage)
}
UnexpectedPruningPointMessage::UnexpectedPruningPointMessage(const UnexpectedPruningPointMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.UnexpectedPruningPointMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnexpectedPruningPointMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnexpectedPruningPointMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UnexpectedPruningPointMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[36]);
}

// ===================================================================

class IbdBlockLocatorMessage::_Internal {
 public:
  static const ::protowire::Hash& targethash(const IbdBlockLocatorMessage* msg);
};

const ::protowire::Hash&
IbdBlockLocatorMessage::_Internal::targethash(const IbdBlockLocatorMessage* msg) {
  return *msg->targethash_;
}
IbdBlockLocatorMessage::IbdBlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  blocklocatorhashes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.IbdBlockLocatorMessage)
}
IbdBlockLocatorMessage::IbdBlockLocatorMessage(const IbdBlockLocatorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocklocatorhashes_(from.blocklocatorhashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_targethash()) {
    targethash_ = new ::protowire::Hash(*from.targethash_);
  } else {
    targethash_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.IbdBlockLocatorMessage)
}

inline void IbdBlockLocatorMessage::SharedCtor() {
targethash_ = nullptr;
}

IbdBlockLocatorMessage::~IbdBlockLocatorMessage() {
  // @@protoc_insertion_point(destructor:protowire.IbdBlockLocatorMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IbdBlockLocatorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete targethash_;
}

void IbdBlockLocatorMessage::ArenaDtor(void* object) {
  IbdBlockLocatorMessage* _this = reinterpret_cast< IbdBlockLocatorMessage* >(object);
  (void)_this;
}
void IbdBlockLocatorMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IbdBlockLocatorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IbdBlockLocatorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.IbdBlockLocatorMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocklocatorhashes_.Clear();
  if (GetArenaForAllocation() == nullptr && targethash_ != nullptr) {
    delete targethash_;
  }
  targethash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IbdBlockLocatorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.Hash targetHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_targethash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protowire.Hash blockLocatorHashes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocklocatorhashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IbdBlockLocatorMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.IbdBlockLocatorMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.Hash targetHash = 1;
  if (this->_internal_has_targethash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::targethash(this), target, stream);
  }

  // repeated .protowire.Hash blockLocatorHashes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocklocatorhashes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_blocklocatorhashes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.IbdBlockLocatorMessage)
  return target;
}

size_t IbdBlockLocatorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.IbdBlockLocatorMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.Hash blockLocatorHashes = 2;
  total_size += 1UL * this->_internal_blocklocatorhashes_size();
  for (const auto& msg : this->blocklocatorhashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protowire.Hash targetHash = 1;
  if (this->_internal_has_targethash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *targethash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IbdBlockLocatorMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IbdBlockLocatorMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IbdBlockLocatorMessage::GetClassData() const { return &_class_data_; }

void IbdBlockLocatorMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IbdBlockLocatorMessage *>(to)->MergeFrom(
      static_cast<const IbdBlockLocatorMessage &>(from));
}


void IbdBlockLocatorMessage::MergeFrom(const IbdBlockLocatorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.IbdBlockLocatorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  blocklocatorhashes_.MergeFrom(from.blocklocatorhashes_);
  if (from._internal_has_targethash()) {
    _internal_mutable_targethash()->::protowire::Hash::MergeFrom(from._internal_targethash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IbdBlockLocatorMessage::CopyFrom(const IbdBlockLocatorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.IbdBlockLocatorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IbdBlockLocatorMessage::IsInitialized() const {
  return true;
}

void IbdBlockLocatorMessage::InternalSwap(IbdBlockLocatorMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  blocklocatorhashes_.InternalSwap(&other->blocklocatorhashes_);
  swap(targethash_, other->targethash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IbdBlockLocatorMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[37]);
}

// ===================================================================

class RequestIBDChainBlockLocatorMessage::_Internal {
 public:
  static const ::protowire::Hash& lowhash(const RequestIBDChainBlockLocatorMessage* msg);
  static const ::protowire::Hash& highhash(const RequestIBDChainBlockLocatorMessage* msg);
};

const ::protowire::Hash&
RequestIBDChainBlockLocatorMessage::_Internal::lowhash(const RequestIBDChainBlockLocatorMessage* msg) {
  return *msg->lowhash_;
}
const ::protowire::Hash&
RequestIBDChainBlockLocatorMessage::_Internal::highhash(const RequestIBDChainBlockLocatorMessage* msg) {
  return *msg->highhash_;
}
RequestIBDChainBlockLocatorMessage::RequestIBDChainBlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.RequestIBDChainBlockLocatorMessage)
}
RequestIBDChainBlockLocatorMessage::RequestIBDChainBlockLocatorMessage(const RequestIBDChainBlockLocatorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lowhash()) {
    lowhash_ = new ::protowire::Hash(*from.lowhash_);
  } else {
    lowhash_ = nullptr;
  }
  if (from._internal_has_highhash()) {
    highhash_ = new ::protowire::Hash(*from.highhash_);
  } else {
    highhash_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.RequestIBDChainBlockLocatorMessage)
}

inline void RequestIBDChainBlockLocatorMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lowhash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&highhash_) -
    reinterpret_cast<char*>(&lowhash_)) + sizeof(highhash_));
}

RequestIBDChainBlockLocatorMessage::~RequestIBDChainBlockLocatorMessage() {
  // @@protoc_insertion_point(destructor:protowire.RequestIBDChainBlockLocatorMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestIBDChainBlockLocatorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lowhash_;
  if (this != internal_default_instance()) delete highhash_;
}

void RequestIBDChainBlockLocatorMessage::ArenaDtor(void* object) {
  RequestIBDChainBlockLocatorMessage* _this = reinterpret_cast< RequestIBDChainBlockLocatorMessage* >(object);
  (void)_this;
}
void RequestIBDChainBlockLocatorMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestIBDChainBlockLocatorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestIBDChainBlockLocatorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.RequestIBDChainBlockLocatorMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lowhash_ != nullptr) {
    delete lowhash_;
  }
  lowhash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && highhash_ != nullptr) {
    delete highhash_;
  }
  highhash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestIBDChainBlockLocatorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.Hash lowHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lowhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.Hash highHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_highhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestIBDChainBlockLocatorMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.RequestIBDChainBlockLocatorMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.Hash lowHash = 1;
  if (this->_internal_has_lowhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lowhash(this), target, stream);
  }

  // .protowire.Hash highHash = 2;
  if (this->_internal_has_highhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::highhash(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.RequestIBDChainBlockLocatorMessage)
  return target;
}

size_t RequestIBDChainBlockLocatorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.RequestIBDChainBlockLocatorMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.Hash lowHash = 1;
  if (this->_internal_has_lowhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lowhash_);
  }

  // .protowire.Hash highHash = 2;
  if (this->_internal_has_highhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *highhash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestIBDChainBlockLocatorMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestIBDChainBlockLocatorMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestIBDChainBlockLocatorMessage::GetClassData() const { return &_class_data_; }

void RequestIBDChainBlockLocatorMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestIBDChainBlockLocatorMessage *>(to)->MergeFrom(
      static_cast<const RequestIBDChainBlockLocatorMessage &>(from));
}


void RequestIBDChainBlockLocatorMessage::MergeFrom(const RequestIBDChainBlockLocatorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.RequestIBDChainBlockLocatorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lowhash()) {
    _internal_mutable_lowhash()->::protowire::Hash::MergeFrom(from._internal_lowhash());
  }
  if (from._internal_has_highhash()) {
    _internal_mutable_highhash()->::protowire::Hash::MergeFrom(from._internal_highhash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestIBDChainBlockLocatorMessage::CopyFrom(const RequestIBDChainBlockLocatorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.RequestIBDChainBlockLocatorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestIBDChainBlockLocatorMessage::IsInitialized() const {
  return true;
}

void RequestIBDChainBlockLocatorMessage::InternalSwap(RequestIBDChainBlockLocatorMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestIBDChainBlockLocatorMessage, highhash_)
      + sizeof(RequestIBDChainBlockLocatorMessage::highhash_)
      - PROTOBUF_FIELD_OFFSET(RequestIBDChainBlockLocatorMessage, lowhash_)>(
          reinterpret_cast<char*>(&lowhash_),
          reinterpret_cast<char*>(&other->lowhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestIBDChainBlockLocatorMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[38]);
}

// ===================================================================

class IbdChainBlockLocatorMessage::_Internal {
 public:
};

IbdChainBlockLocatorMessage::IbdChainBlockLocatorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  blocklocatorhashes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.IbdChainBlockLocatorMessage)
}
IbdChainBlockLocatorMessage::IbdChainBlockLocatorMessage(const IbdChainBlockLocatorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocklocatorhashes_(from.blocklocatorhashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.IbdChainBlockLocatorMessage)
}

inline void IbdChainBlockLocatorMessage::SharedCtor() {
}

IbdChainBlockLocatorMessage::~IbdChainBlockLocatorMessage() {
  // @@protoc_insertion_point(destructor:protowire.IbdChainBlockLocatorMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IbdChainBlockLocatorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IbdChainBlockLocatorMessage::ArenaDtor(void* object) {
  IbdChainBlockLocatorMessage* _this = reinterpret_cast< IbdChainBlockLocatorMessage* >(object);
  (void)_this;
}
void IbdChainBlockLocatorMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IbdChainBlockLocatorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IbdChainBlockLocatorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.IbdChainBlockLocatorMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocklocatorhashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IbdChainBlockLocatorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.Hash blockLocatorHashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocklocatorhashes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IbdChainBlockLocatorMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.IbdChainBlockLocatorMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.Hash blockLocatorHashes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocklocatorhashes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blocklocatorhashes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.IbdChainBlockLocatorMessage)
  return target;
}

size_t IbdChainBlockLocatorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.IbdChainBlockLocatorMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.Hash blockLocatorHashes = 1;
  total_size += 1UL * this->_internal_blocklocatorhashes_size();
  for (const auto& msg : this->blocklocatorhashes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IbdChainBlockLocatorMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IbdChainBlockLocatorMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IbdChainBlockLocatorMessage::GetClassData() const { return &_class_data_; }

void IbdChainBlockLocatorMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IbdChainBlockLocatorMessage *>(to)->MergeFrom(
      static_cast<const IbdChainBlockLocatorMessage &>(from));
}


void IbdChainBlockLocatorMessage::MergeFrom(const IbdChainBlockLocatorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.IbdChainBlockLocatorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  blocklocatorhashes_.MergeFrom(from.blocklocatorhashes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IbdChainBlockLocatorMessage::CopyFrom(const IbdChainBlockLocatorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.IbdChainBlockLocatorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IbdChainBlockLocatorMessage::IsInitialized() const {
  return true;
}

void IbdChainBlockLocatorMessage::InternalSwap(IbdChainBlockLocatorMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  blocklocatorhashes_.InternalSwap(&other->blocklocatorhashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IbdChainBlockLocatorMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[39]);
}

// ===================================================================

class RequestAnticoneMessage::_Internal {
 public:
  static const ::protowire::Hash& blockhash(const RequestAnticoneMessage* msg);
  static const ::protowire::Hash& contexthash(const RequestAnticoneMessage* msg);
};

const ::protowire::Hash&
RequestAnticoneMessage::_Internal::blockhash(const RequestAnticoneMessage* msg) {
  return *msg->blockhash_;
}
const ::protowire::Hash&
RequestAnticoneMessage::_Internal::contexthash(const RequestAnticoneMessage* msg) {
  return *msg->contexthash_;
}
RequestAnticoneMessage::RequestAnticoneMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.RequestAnticoneMessage)
}
RequestAnticoneMessage::RequestAnticoneMessage(const RequestAnticoneMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blockhash()) {
    blockhash_ = new ::protowire::Hash(*from.blockhash_);
  } else {
    blockhash_ = nullptr;
  }
  if (from._internal_has_contexthash()) {
    contexthash_ = new ::protowire::Hash(*from.contexthash_);
  } else {
    contexthash_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.RequestAnticoneMessage)
}

inline void RequestAnticoneMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blockhash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contexthash_) -
    reinterpret_cast<char*>(&blockhash_)) + sizeof(contexthash_));
}

RequestAnticoneMessage::~RequestAnticoneMessage() {
  // @@protoc_insertion_point(destructor:protowire.RequestAnticoneMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestAnticoneMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete blockhash_;
  if (this != internal_default_instance()) delete contexthash_;
}

void RequestAnticoneMessage::ArenaDtor(void* object) {
  RequestAnticoneMessage* _this = reinterpret_cast< RequestAnticoneMessage* >(object);
  (void)_this;
}
void RequestAnticoneMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestAnticoneMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestAnticoneMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.RequestAnticoneMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && blockhash_ != nullptr) {
    delete blockhash_;
  }
  blockhash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && contexthash_ != nullptr) {
    delete contexthash_;
  }
  contexthash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestAnticoneMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.Hash blockHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.Hash contextHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contexthash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestAnticoneMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.RequestAnticoneMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.Hash blockHash = 1;
  if (this->_internal_has_blockhash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::blockhash(this), target, stream);
  }

  // .protowire.Hash contextHash = 2;
  if (this->_internal_has_contexthash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::contexthash(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.RequestAnticoneMessage)
  return target;
}

size_t RequestAnticoneMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.RequestAnticoneMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.Hash blockHash = 1;
  if (this->_internal_has_blockhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blockhash_);
  }

  // .protowire.Hash contextHash = 2;
  if (this->_internal_has_contexthash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contexthash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestAnticoneMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestAnticoneMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestAnticoneMessage::GetClassData() const { return &_class_data_; }

void RequestAnticoneMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestAnticoneMessage *>(to)->MergeFrom(
      static_cast<const RequestAnticoneMessage &>(from));
}


void RequestAnticoneMessage::MergeFrom(const RequestAnticoneMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.RequestAnticoneMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_blockhash()) {
    _internal_mutable_blockhash()->::protowire::Hash::MergeFrom(from._internal_blockhash());
  }
  if (from._internal_has_contexthash()) {
    _internal_mutable_contexthash()->::protowire::Hash::MergeFrom(from._internal_contexthash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestAnticoneMessage::CopyFrom(const RequestAnticoneMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.RequestAnticoneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAnticoneMessage::IsInitialized() const {
  return true;
}

void RequestAnticoneMessage::InternalSwap(RequestAnticoneMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestAnticoneMessage, contexthash_)
      + sizeof(RequestAnticoneMessage::contexthash_)
      - PROTOBUF_FIELD_OFFSET(RequestAnticoneMessage, blockhash_)>(
          reinterpret_cast<char*>(&blockhash_),
          reinterpret_cast<char*>(&other->blockhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestAnticoneMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[40]);
}

// ===================================================================

class IbdBlockLocatorHighestHashMessage::_Internal {
 public:
  static const ::protowire::Hash& highesthash(const IbdBlockLocatorHighestHashMessage* msg);
};

const ::protowire::Hash&
IbdBlockLocatorHighestHashMessage::_Internal::highesthash(const IbdBlockLocatorHighestHashMessage* msg) {
  return *msg->highesthash_;
}
IbdBlockLocatorHighestHashMessage::IbdBlockLocatorHighestHashMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.IbdBlockLocatorHighestHashMessage)
}
IbdBlockLocatorHighestHashMessage::IbdBlockLocatorHighestHashMessage(const IbdBlockLocatorHighestHashMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_highesthash()) {
    highesthash_ = new ::protowire::Hash(*from.highesthash_);
  } else {
    highesthash_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.IbdBlockLocatorHighestHashMessage)
}

inline void IbdBlockLocatorHighestHashMessage::SharedCtor() {
highesthash_ = nullptr;
}

IbdBlockLocatorHighestHashMessage::~IbdBlockLocatorHighestHashMessage() {
  // @@protoc_insertion_point(destructor:protowire.IbdBlockLocatorHighestHashMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IbdBlockLocatorHighestHashMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete highesthash_;
}

void IbdBlockLocatorHighestHashMessage::ArenaDtor(void* object) {
  IbdBlockLocatorHighestHashMessage* _this = reinterpret_cast< IbdBlockLocatorHighestHashMessage* >(object);
  (void)_this;
}
void IbdBlockLocatorHighestHashMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IbdBlockLocatorHighestHashMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IbdBlockLocatorHighestHashMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.IbdBlockLocatorHighestHashMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && highesthash_ != nullptr) {
    delete highesthash_;
  }
  highesthash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IbdBlockLocatorHighestHashMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.Hash highestHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_highesthash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IbdBlockLocatorHighestHashMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.IbdBlockLocatorHighestHashMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.Hash highestHash = 1;
  if (this->_internal_has_highesthash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::highesthash(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.IbdBlockLocatorHighestHashMessage)
  return target;
}

size_t IbdBlockLocatorHighestHashMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.IbdBlockLocatorHighestHashMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.Hash highestHash = 1;
  if (this->_internal_has_highesthash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *highesthash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IbdBlockLocatorHighestHashMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IbdBlockLocatorHighestHashMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IbdBlockLocatorHighestHashMessage::GetClassData() const { return &_class_data_; }

void IbdBlockLocatorHighestHashMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IbdBlockLocatorHighestHashMessage *>(to)->MergeFrom(
      static_cast<const IbdBlockLocatorHighestHashMessage &>(from));
}


void IbdBlockLocatorHighestHashMessage::MergeFrom(const IbdBlockLocatorHighestHashMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.IbdBlockLocatorHighestHashMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_highesthash()) {
    _internal_mutable_highesthash()->::protowire::Hash::MergeFrom(from._internal_highesthash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IbdBlockLocatorHighestHashMessage::CopyFrom(const IbdBlockLocatorHighestHashMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.IbdBlockLocatorHighestHashMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IbdBlockLocatorHighestHashMessage::IsInitialized() const {
  return true;
}

void IbdBlockLocatorHighestHashMessage::InternalSwap(IbdBlockLocatorHighestHashMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(highesthash_, other->highesthash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IbdBlockLocatorHighestHashMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[41]);
}

// ===================================================================

class IbdBlockLocatorHighestHashNotFoundMessage::_Internal {
 public:
};

IbdBlockLocatorHighestHashNotFoundMessage::IbdBlockLocatorHighestHashNotFoundMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protowire.IbdBlockLocatorHighestHashNotFoundMessage)
}
IbdBlockLocatorHighestHashNotFoundMessage::IbdBlockLocatorHighestHashNotFoundMessage(const IbdBlockLocatorHighestHashNotFoundMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.IbdBlockLocatorHighestHashNotFoundMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IbdBlockLocatorHighestHashNotFoundMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IbdBlockLocatorHighestHashNotFoundMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata IbdBlockLocatorHighestHashNotFoundMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[42]);
}

// ===================================================================

class BlockHeadersMessage::_Internal {
 public:
};

BlockHeadersMessage::BlockHeadersMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  blockheaders_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.BlockHeadersMessage)
}
BlockHeadersMessage::BlockHeadersMessage(const BlockHeadersMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blockheaders_(from.blockheaders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.BlockHeadersMessage)
}

inline void BlockHeadersMessage::SharedCtor() {
}

BlockHeadersMessage::~BlockHeadersMessage() {
  // @@protoc_insertion_point(destructor:protowire.BlockHeadersMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockHeadersMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockHeadersMessage::ArenaDtor(void* object) {
  BlockHeadersMessage* _this = reinterpret_cast< BlockHeadersMessage* >(object);
  (void)_this;
}
void BlockHeadersMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeadersMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockHeadersMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.BlockHeadersMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockheaders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeadersMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.BlockHeader blockHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blockheaders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockHeadersMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.BlockHeadersMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.BlockHeader blockHeaders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blockheaders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blockheaders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.BlockHeadersMessage)
  return target;
}

size_t BlockHeadersMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.BlockHeadersMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.BlockHeader blockHeaders = 1;
  total_size += 1UL * this->_internal_blockheaders_size();
  for (const auto& msg : this->blockheaders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockHeadersMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockHeadersMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockHeadersMessage::GetClassData() const { return &_class_data_; }

void BlockHeadersMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockHeadersMessage *>(to)->MergeFrom(
      static_cast<const BlockHeadersMessage &>(from));
}


void BlockHeadersMessage::MergeFrom(const BlockHeadersMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.BlockHeadersMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  blockheaders_.MergeFrom(from.blockheaders_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockHeadersMessage::CopyFrom(const BlockHeadersMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.BlockHeadersMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeadersMessage::IsInitialized() const {
  return true;
}

void BlockHeadersMessage::InternalSwap(BlockHeadersMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  blockheaders_.InternalSwap(&other->blockheaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeadersMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[43]);
}

// ===================================================================

class RequestPruningPointAndItsAnticoneMessage::_Internal {
 public:
};

RequestPruningPointAndItsAnticoneMessage::RequestPruningPointAndItsAnticoneMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protowire.RequestPruningPointAndItsAnticoneMessage)
}
RequestPruningPointAndItsAnticoneMessage::RequestPruningPointAndItsAnticoneMessage(const RequestPruningPointAndItsAnticoneMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.RequestPruningPointAndItsAnticoneMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestPruningPointAndItsAnticoneMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestPruningPointAndItsAnticoneMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestPruningPointAndItsAnticoneMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[44]);
}

// ===================================================================

class RequestNextPruningPointAndItsAnticoneBlocksMessage::_Internal {
 public:
};

RequestNextPruningPointAndItsAnticoneBlocksMessage::RequestNextPruningPointAndItsAnticoneBlocksMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protowire.RequestNextPruningPointAndItsAnticoneBlocksMessage)
}
RequestNextPruningPointAndItsAnticoneBlocksMessage::RequestNextPruningPointAndItsAnticoneBlocksMessage(const RequestNextPruningPointAndItsAnticoneBlocksMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.RequestNextPruningPointAndItsAnticoneBlocksMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestNextPruningPointAndItsAnticoneBlocksMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestNextPruningPointAndItsAnticoneBlocksMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestNextPruningPointAndItsAnticoneBlocksMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[45]);
}

// ===================================================================

class BlockWithTrustedDataMessage::_Internal {
 public:
  static const ::protowire::BlockMessage& block(const BlockWithTrustedDataMessage* msg);
};

const ::protowire::BlockMessage&
BlockWithTrustedDataMessage::_Internal::block(const BlockWithTrustedDataMessage* msg) {
  return *msg->block_;
}
BlockWithTrustedDataMessage::BlockWithTrustedDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  daawindow_(arena),
  ghostdagdata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.BlockWithTrustedDataMessage)
}
BlockWithTrustedDataMessage::BlockWithTrustedDataMessage(const BlockWithTrustedDataMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      daawindow_(from.daawindow_),
      ghostdagdata_(from.ghostdagdata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::protowire::BlockMessage(*from.block_);
  } else {
    block_ = nullptr;
  }
  daascore_ = from.daascore_;
  // @@protoc_insertion_point(copy_constructor:protowire.BlockWithTrustedDataMessage)
}

inline void BlockWithTrustedDataMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&daascore_) -
    reinterpret_cast<char*>(&block_)) + sizeof(daascore_));
}

BlockWithTrustedDataMessage::~BlockWithTrustedDataMessage() {
  // @@protoc_insertion_point(destructor:protowire.BlockWithTrustedDataMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockWithTrustedDataMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void BlockWithTrustedDataMessage::ArenaDtor(void* object) {
  BlockWithTrustedDataMessage* _this = reinterpret_cast< BlockWithTrustedDataMessage* >(object);
  (void)_this;
}
void BlockWithTrustedDataMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockWithTrustedDataMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockWithTrustedDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.BlockWithTrustedDataMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  daawindow_.Clear();
  ghostdagdata_.Clear();
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  daascore_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockWithTrustedDataMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.BlockMessage block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 daaScore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          daascore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protowire.DaaBlock daaWindow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_daawindow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protowire.BlockGhostdagDataHashPair ghostdagData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ghostdagdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockWithTrustedDataMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.BlockWithTrustedDataMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.BlockMessage block = 1;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  // uint64 daaScore = 2;
  if (this->_internal_daascore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_daascore(), target);
  }

  // repeated .protowire.DaaBlock daaWindow = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_daawindow_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_daawindow(i), target, stream);
  }

  // repeated .protowire.BlockGhostdagDataHashPair ghostdagData = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ghostdagdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ghostdagdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.BlockWithTrustedDataMessage)
  return target;
}

size_t BlockWithTrustedDataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.BlockWithTrustedDataMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.DaaBlock daaWindow = 3;
  total_size += 1UL * this->_internal_daawindow_size();
  for (const auto& msg : this->daawindow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protowire.BlockGhostdagDataHashPair ghostdagData = 4;
  total_size += 1UL * this->_internal_ghostdagdata_size();
  for (const auto& msg : this->ghostdagdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protowire.BlockMessage block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // uint64 daaScore = 2;
  if (this->_internal_daascore() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_daascore());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockWithTrustedDataMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockWithTrustedDataMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockWithTrustedDataMessage::GetClassData() const { return &_class_data_; }

void BlockWithTrustedDataMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockWithTrustedDataMessage *>(to)->MergeFrom(
      static_cast<const BlockWithTrustedDataMessage &>(from));
}


void BlockWithTrustedDataMessage::MergeFrom(const BlockWithTrustedDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.BlockWithTrustedDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  daawindow_.MergeFrom(from.daawindow_);
  ghostdagdata_.MergeFrom(from.ghostdagdata_);
  if (from._internal_has_block()) {
    _internal_mutable_block()->::protowire::BlockMessage::MergeFrom(from._internal_block());
  }
  if (from._internal_daascore() != 0) {
    _internal_set_daascore(from._internal_daascore());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockWithTrustedDataMessage::CopyFrom(const BlockWithTrustedDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.BlockWithTrustedDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockWithTrustedDataMessage::IsInitialized() const {
  return true;
}

void BlockWithTrustedDataMessage::InternalSwap(BlockWithTrustedDataMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  daawindow_.InternalSwap(&other->daawindow_);
  ghostdagdata_.InternalSwap(&other->ghostdagdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockWithTrustedDataMessage, daascore_)
      + sizeof(BlockWithTrustedDataMessage::daascore_)
      - PROTOBUF_FIELD_OFFSET(BlockWithTrustedDataMessage, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockWithTrustedDataMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[46]);
}

// ===================================================================

class DaaBlock::_Internal {
 public:
  static const ::protowire::BlockMessage& block(const DaaBlock* msg);
  static const ::protowire::GhostdagData& ghostdagdata(const DaaBlock* msg);
};

const ::protowire::BlockMessage&
DaaBlock::_Internal::block(const DaaBlock* msg) {
  return *msg->block_;
}
const ::protowire::GhostdagData&
DaaBlock::_Internal::ghostdagdata(const DaaBlock* msg) {
  return *msg->ghostdagdata_;
}
DaaBlock::DaaBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.DaaBlock)
}
DaaBlock::DaaBlock(const DaaBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ghostdagdata()) {
    ghostdagdata_ = new ::protowire::GhostdagData(*from.ghostdagdata_);
  } else {
    ghostdagdata_ = nullptr;
  }
  if (from._internal_has_block()) {
    block_ = new ::protowire::BlockMessage(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.DaaBlock)
}

inline void DaaBlock::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ghostdagdata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_) -
    reinterpret_cast<char*>(&ghostdagdata_)) + sizeof(block_));
}

DaaBlock::~DaaBlock() {
  // @@protoc_insertion_point(destructor:protowire.DaaBlock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DaaBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ghostdagdata_;
  if (this != internal_default_instance()) delete block_;
}

void DaaBlock::ArenaDtor(void* object) {
  DaaBlock* _this = reinterpret_cast< DaaBlock* >(object);
  (void)_this;
}
void DaaBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DaaBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DaaBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.DaaBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ghostdagdata_ != nullptr) {
    delete ghostdagdata_;
  }
  ghostdagdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DaaBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.GhostdagData ghostdagData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ghostdagdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.BlockMessage block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DaaBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.DaaBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.GhostdagData ghostdagData = 2;
  if (this->_internal_has_ghostdagdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ghostdagdata(this), target, stream);
  }

  // .protowire.BlockMessage block = 3;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.DaaBlock)
  return target;
}

size_t DaaBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.DaaBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.GhostdagData ghostdagData = 2;
  if (this->_internal_has_ghostdagdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ghostdagdata_);
  }

  // .protowire.BlockMessage block = 3;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DaaBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DaaBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DaaBlock::GetClassData() const { return &_class_data_; }

void DaaBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DaaBlock *>(to)->MergeFrom(
      static_cast<const DaaBlock &>(from));
}


void DaaBlock::MergeFrom(const DaaBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.DaaBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ghostdagdata()) {
    _internal_mutable_ghostdagdata()->::protowire::GhostdagData::MergeFrom(from._internal_ghostdagdata());
  }
  if (from._internal_has_block()) {
    _internal_mutable_block()->::protowire::BlockMessage::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DaaBlock::CopyFrom(const DaaBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.DaaBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaaBlock::IsInitialized() const {
  return true;
}

void DaaBlock::InternalSwap(DaaBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DaaBlock, block_)
      + sizeof(DaaBlock::block_)
      - PROTOBUF_FIELD_OFFSET(DaaBlock, ghostdagdata_)>(
          reinterpret_cast<char*>(&ghostdagdata_),
          reinterpret_cast<char*>(&other->ghostdagdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DaaBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[47]);
}

// ===================================================================

class DaaBlockV4::_Internal {
 public:
  static const ::protowire::BlockHeader& header(const DaaBlockV4* msg);
  static const ::protowire::GhostdagData& ghostdagdata(const DaaBlockV4* msg);
};

const ::protowire::BlockHeader&
DaaBlockV4::_Internal::header(const DaaBlockV4* msg) {
  return *msg->header_;
}
const ::protowire::GhostdagData&
DaaBlockV4::_Internal::ghostdagdata(const DaaBlockV4* msg) {
  return *msg->ghostdagdata_;
}
DaaBlockV4::DaaBlockV4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.DaaBlockV4)
}
DaaBlockV4::DaaBlockV4(const DaaBlockV4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protowire::BlockHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_ghostdagdata()) {
    ghostdagdata_ = new ::protowire::GhostdagData(*from.ghostdagdata_);
  } else {
    ghostdagdata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.DaaBlockV4)
}

inline void DaaBlockV4::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ghostdagdata_) -
    reinterpret_cast<char*>(&header_)) + sizeof(ghostdagdata_));
}

DaaBlockV4::~DaaBlockV4() {
  // @@protoc_insertion_point(destructor:protowire.DaaBlockV4)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DaaBlockV4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete ghostdagdata_;
}

void DaaBlockV4::ArenaDtor(void* object) {
  DaaBlockV4* _this = reinterpret_cast< DaaBlockV4* >(object);
  (void)_this;
}
void DaaBlockV4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DaaBlockV4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DaaBlockV4::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.DaaBlockV4)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ghostdagdata_ != nullptr) {
    delete ghostdagdata_;
  }
  ghostdagdata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DaaBlockV4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.BlockHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.GhostdagData ghostdagData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ghostdagdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DaaBlockV4::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.DaaBlockV4)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.BlockHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .protowire.GhostdagData ghostdagData = 2;
  if (this->_internal_has_ghostdagdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ghostdagdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.DaaBlockV4)
  return target;
}

size_t DaaBlockV4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.DaaBlockV4)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.BlockHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .protowire.GhostdagData ghostdagData = 2;
  if (this->_internal_has_ghostdagdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ghostdagdata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DaaBlockV4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DaaBlockV4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DaaBlockV4::GetClassData() const { return &_class_data_; }

void DaaBlockV4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DaaBlockV4 *>(to)->MergeFrom(
      static_cast<const DaaBlockV4 &>(from));
}


void DaaBlockV4::MergeFrom(const DaaBlockV4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.DaaBlockV4)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::protowire::BlockHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_has_ghostdagdata()) {
    _internal_mutable_ghostdagdata()->::protowire::GhostdagData::MergeFrom(from._internal_ghostdagdata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DaaBlockV4::CopyFrom(const DaaBlockV4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.DaaBlockV4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaaBlockV4::IsInitialized() const {
  return true;
}

void DaaBlockV4::InternalSwap(DaaBlockV4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DaaBlockV4, ghostdagdata_)
      + sizeof(DaaBlockV4::ghostdagdata_)
      - PROTOBUF_FIELD_OFFSET(DaaBlockV4, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DaaBlockV4::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[48]);
}

// ===================================================================

class BlockGhostdagDataHashPair::_Internal {
 public:
  static const ::protowire::Hash& hash(const BlockGhostdagDataHashPair* msg);
  static const ::protowire::GhostdagData& ghostdagdata(const BlockGhostdagDataHashPair* msg);
};

const ::protowire::Hash&
BlockGhostdagDataHashPair::_Internal::hash(const BlockGhostdagDataHashPair* msg) {
  return *msg->hash_;
}
const ::protowire::GhostdagData&
BlockGhostdagDataHashPair::_Internal::ghostdagdata(const BlockGhostdagDataHashPair* msg) {
  return *msg->ghostdagdata_;
}
BlockGhostdagDataHashPair::BlockGhostdagDataHashPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.BlockGhostdagDataHashPair)
}
BlockGhostdagDataHashPair::BlockGhostdagDataHashPair(const BlockGhostdagDataHashPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hash()) {
    hash_ = new ::protowire::Hash(*from.hash_);
  } else {
    hash_ = nullptr;
  }
  if (from._internal_has_ghostdagdata()) {
    ghostdagdata_ = new ::protowire::GhostdagData(*from.ghostdagdata_);
  } else {
    ghostdagdata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.BlockGhostdagDataHashPair)
}

inline void BlockGhostdagDataHashPair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ghostdagdata_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(ghostdagdata_));
}

BlockGhostdagDataHashPair::~BlockGhostdagDataHashPair() {
  // @@protoc_insertion_point(destructor:protowire.BlockGhostdagDataHashPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockGhostdagDataHashPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hash_;
  if (this != internal_default_instance()) delete ghostdagdata_;
}

void BlockGhostdagDataHashPair::ArenaDtor(void* object) {
  BlockGhostdagDataHashPair* _this = reinterpret_cast< BlockGhostdagDataHashPair* >(object);
  (void)_this;
}
void BlockGhostdagDataHashPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockGhostdagDataHashPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockGhostdagDataHashPair::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.BlockGhostdagDataHashPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hash_ != nullptr) {
    delete hash_;
  }
  hash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ghostdagdata_ != nullptr) {
    delete ghostdagdata_;
  }
  ghostdagdata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockGhostdagDataHashPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.Hash hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.GhostdagData ghostdagData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ghostdagdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockGhostdagDataHashPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.BlockGhostdagDataHashPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.Hash hash = 1;
  if (this->_internal_has_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hash(this), target, stream);
  }

  // .protowire.GhostdagData ghostdagData = 2;
  if (this->_internal_has_ghostdagdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ghostdagdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.BlockGhostdagDataHashPair)
  return target;
}

size_t BlockGhostdagDataHashPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.BlockGhostdagDataHashPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.Hash hash = 1;
  if (this->_internal_has_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hash_);
  }

  // .protowire.GhostdagData ghostdagData = 2;
  if (this->_internal_has_ghostdagdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ghostdagdata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockGhostdagDataHashPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockGhostdagDataHashPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockGhostdagDataHashPair::GetClassData() const { return &_class_data_; }

void BlockGhostdagDataHashPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockGhostdagDataHashPair *>(to)->MergeFrom(
      static_cast<const BlockGhostdagDataHashPair &>(from));
}


void BlockGhostdagDataHashPair::MergeFrom(const BlockGhostdagDataHashPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.BlockGhostdagDataHashPair)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hash()) {
    _internal_mutable_hash()->::protowire::Hash::MergeFrom(from._internal_hash());
  }
  if (from._internal_has_ghostdagdata()) {
    _internal_mutable_ghostdagdata()->::protowire::GhostdagData::MergeFrom(from._internal_ghostdagdata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockGhostdagDataHashPair::CopyFrom(const BlockGhostdagDataHashPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.BlockGhostdagDataHashPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockGhostdagDataHashPair::IsInitialized() const {
  return true;
}

void BlockGhostdagDataHashPair::InternalSwap(BlockGhostdagDataHashPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockGhostdagDataHashPair, ghostdagdata_)
      + sizeof(BlockGhostdagDataHashPair::ghostdagdata_)
      - PROTOBUF_FIELD_OFFSET(BlockGhostdagDataHashPair, hash_)>(
          reinterpret_cast<char*>(&hash_),
          reinterpret_cast<char*>(&other->hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockGhostdagDataHashPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[49]);
}

// ===================================================================

class GhostdagData::_Internal {
 public:
  static const ::protowire::Hash& selectedparent(const GhostdagData* msg);
};

const ::protowire::Hash&
GhostdagData::_Internal::selectedparent(const GhostdagData* msg) {
  return *msg->selectedparent_;
}
GhostdagData::GhostdagData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mergesetblues_(arena),
  mergesetreds_(arena),
  bluesanticonesizes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.GhostdagData)
}
GhostdagData::GhostdagData(const GhostdagData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mergesetblues_(from.mergesetblues_),
      mergesetreds_(from.mergesetreds_),
      bluesanticonesizes_(from.bluesanticonesizes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bluework_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bluework_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bluework().empty()) {
    bluework_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bluework(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_selectedparent()) {
    selectedparent_ = new ::protowire::Hash(*from.selectedparent_);
  } else {
    selectedparent_ = nullptr;
  }
  bluescore_ = from.bluescore_;
  // @@protoc_insertion_point(copy_constructor:protowire.GhostdagData)
}

inline void GhostdagData::SharedCtor() {
bluework_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bluework_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&selectedparent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bluescore_) -
    reinterpret_cast<char*>(&selectedparent_)) + sizeof(bluescore_));
}

GhostdagData::~GhostdagData() {
  // @@protoc_insertion_point(destructor:protowire.GhostdagData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GhostdagData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bluework_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete selectedparent_;
}

void GhostdagData::ArenaDtor(void* object) {
  GhostdagData* _this = reinterpret_cast< GhostdagData* >(object);
  (void)_this;
}
void GhostdagData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GhostdagData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GhostdagData::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.GhostdagData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mergesetblues_.Clear();
  mergesetreds_.Clear();
  bluesanticonesizes_.Clear();
  bluework_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && selectedparent_ != nullptr) {
    delete selectedparent_;
  }
  selectedparent_ = nullptr;
  bluescore_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GhostdagData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 blueScore = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bluescore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes blueWork = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bluework();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protowire.Hash selectedParent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectedparent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protowire.Hash mergeSetBlues = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mergesetblues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protowire.Hash mergeSetReds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mergesetreds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protowire.BluesAnticoneSizes bluesAnticoneSizes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bluesanticonesizes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GhostdagData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.GhostdagData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blueScore = 1;
  if (this->_internal_bluescore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bluescore(), target);
  }

  // bytes blueWork = 2;
  if (!this->_internal_bluework().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bluework(), target);
  }

  // .protowire.Hash selectedParent = 3;
  if (this->_internal_has_selectedparent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::selectedparent(this), target, stream);
  }

  // repeated .protowire.Hash mergeSetBlues = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mergesetblues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_mergesetblues(i), target, stream);
  }

  // repeated .protowire.Hash mergeSetReds = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mergesetreds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_mergesetreds(i), target, stream);
  }

  // repeated .protowire.BluesAnticoneSizes bluesAnticoneSizes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bluesanticonesizes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_bluesanticonesizes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.GhostdagData)
  return target;
}

size_t GhostdagData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.GhostdagData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.Hash mergeSetBlues = 4;
  total_size += 1UL * this->_internal_mergesetblues_size();
  for (const auto& msg : this->mergesetblues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protowire.Hash mergeSetReds = 5;
  total_size += 1UL * this->_internal_mergesetreds_size();
  for (const auto& msg : this->mergesetreds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protowire.BluesAnticoneSizes bluesAnticoneSizes = 6;
  total_size += 1UL * this->_internal_bluesanticonesizes_size();
  for (const auto& msg : this->bluesanticonesizes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes blueWork = 2;
  if (!this->_internal_bluework().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bluework());
  }

  // .protowire.Hash selectedParent = 3;
  if (this->_internal_has_selectedparent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectedparent_);
  }

  // uint64 blueScore = 1;
  if (this->_internal_bluescore() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bluescore());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GhostdagData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GhostdagData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GhostdagData::GetClassData() const { return &_class_data_; }

void GhostdagData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GhostdagData *>(to)->MergeFrom(
      static_cast<const GhostdagData &>(from));
}


void GhostdagData::MergeFrom(const GhostdagData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.GhostdagData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mergesetblues_.MergeFrom(from.mergesetblues_);
  mergesetreds_.MergeFrom(from.mergesetreds_);
  bluesanticonesizes_.MergeFrom(from.bluesanticonesizes_);
  if (!from._internal_bluework().empty()) {
    _internal_set_bluework(from._internal_bluework());
  }
  if (from._internal_has_selectedparent()) {
    _internal_mutable_selectedparent()->::protowire::Hash::MergeFrom(from._internal_selectedparent());
  }
  if (from._internal_bluescore() != 0) {
    _internal_set_bluescore(from._internal_bluescore());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GhostdagData::CopyFrom(const GhostdagData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.GhostdagData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostdagData::IsInitialized() const {
  return true;
}

void GhostdagData::InternalSwap(GhostdagData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mergesetblues_.InternalSwap(&other->mergesetblues_);
  mergesetreds_.InternalSwap(&other->mergesetreds_);
  bluesanticonesizes_.InternalSwap(&other->bluesanticonesizes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bluework_, lhs_arena,
      &other->bluework_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GhostdagData, bluescore_)
      + sizeof(GhostdagData::bluescore_)
      - PROTOBUF_FIELD_OFFSET(GhostdagData, selectedparent_)>(
          reinterpret_cast<char*>(&selectedparent_),
          reinterpret_cast<char*>(&other->selectedparent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GhostdagData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[50]);
}

// ===================================================================

class BluesAnticoneSizes::_Internal {
 public:
  static const ::protowire::Hash& bluehash(const BluesAnticoneSizes* msg);
};

const ::protowire::Hash&
BluesAnticoneSizes::_Internal::bluehash(const BluesAnticoneSizes* msg) {
  return *msg->bluehash_;
}
BluesAnticoneSizes::BluesAnticoneSizes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.BluesAnticoneSizes)
}
BluesAnticoneSizes::BluesAnticoneSizes(const BluesAnticoneSizes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bluehash()) {
    bluehash_ = new ::protowire::Hash(*from.bluehash_);
  } else {
    bluehash_ = nullptr;
  }
  anticonesize_ = from.anticonesize_;
  // @@protoc_insertion_point(copy_constructor:protowire.BluesAnticoneSizes)
}

inline void BluesAnticoneSizes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bluehash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&anticonesize_) -
    reinterpret_cast<char*>(&bluehash_)) + sizeof(anticonesize_));
}

BluesAnticoneSizes::~BluesAnticoneSizes() {
  // @@protoc_insertion_point(destructor:protowire.BluesAnticoneSizes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BluesAnticoneSizes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bluehash_;
}

void BluesAnticoneSizes::ArenaDtor(void* object) {
  BluesAnticoneSizes* _this = reinterpret_cast< BluesAnticoneSizes* >(object);
  (void)_this;
}
void BluesAnticoneSizes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BluesAnticoneSizes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BluesAnticoneSizes::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.BluesAnticoneSizes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && bluehash_ != nullptr) {
    delete bluehash_;
  }
  bluehash_ = nullptr;
  anticonesize_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BluesAnticoneSizes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.Hash blueHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bluehash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 anticoneSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          anticonesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BluesAnticoneSizes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.BluesAnticoneSizes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.Hash blueHash = 1;
  if (this->_internal_has_bluehash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bluehash(this), target, stream);
  }

  // uint32 anticoneSize = 2;
  if (this->_internal_anticonesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_anticonesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.BluesAnticoneSizes)
  return target;
}

size_t BluesAnticoneSizes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.BluesAnticoneSizes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protowire.Hash blueHash = 1;
  if (this->_internal_has_bluehash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bluehash_);
  }

  // uint32 anticoneSize = 2;
  if (this->_internal_anticonesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_anticonesize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BluesAnticoneSizes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BluesAnticoneSizes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BluesAnticoneSizes::GetClassData() const { return &_class_data_; }

void BluesAnticoneSizes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BluesAnticoneSizes *>(to)->MergeFrom(
      static_cast<const BluesAnticoneSizes &>(from));
}


void BluesAnticoneSizes::MergeFrom(const BluesAnticoneSizes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.BluesAnticoneSizes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bluehash()) {
    _internal_mutable_bluehash()->::protowire::Hash::MergeFrom(from._internal_bluehash());
  }
  if (from._internal_anticonesize() != 0) {
    _internal_set_anticonesize(from._internal_anticonesize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BluesAnticoneSizes::CopyFrom(const BluesAnticoneSizes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.BluesAnticoneSizes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluesAnticoneSizes::IsInitialized() const {
  return true;
}

void BluesAnticoneSizes::InternalSwap(BluesAnticoneSizes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BluesAnticoneSizes, anticonesize_)
      + sizeof(BluesAnticoneSizes::anticonesize_)
      - PROTOBUF_FIELD_OFFSET(BluesAnticoneSizes, bluehash_)>(
          reinterpret_cast<char*>(&bluehash_),
          reinterpret_cast<char*>(&other->bluehash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BluesAnticoneSizes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[51]);
}

// ===================================================================

class DoneBlocksWithTrustedDataMessage::_Internal {
 public:
};

DoneBlocksWithTrustedDataMessage::DoneBlocksWithTrustedDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protowire.DoneBlocksWithTrustedDataMessage)
}
DoneBlocksWithTrustedDataMessage::DoneBlocksWithTrustedDataMessage(const DoneBlocksWithTrustedDataMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.DoneBlocksWithTrustedDataMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoneBlocksWithTrustedDataMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoneBlocksWithTrustedDataMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DoneBlocksWithTrustedDataMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[52]);
}

// ===================================================================

class PruningPointsMessage::_Internal {
 public:
};

PruningPointsMessage::PruningPointsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.PruningPointsMessage)
}
PruningPointsMessage::PruningPointsMessage(const PruningPointsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.PruningPointsMessage)
}

inline void PruningPointsMessage::SharedCtor() {
}

PruningPointsMessage::~PruningPointsMessage() {
  // @@protoc_insertion_point(destructor:protowire.PruningPointsMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PruningPointsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PruningPointsMessage::ArenaDtor(void* object) {
  PruningPointsMessage* _this = reinterpret_cast< PruningPointsMessage* >(object);
  (void)_this;
}
void PruningPointsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PruningPointsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PruningPointsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.PruningPointsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PruningPointsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.BlockHeader headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PruningPointsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.PruningPointsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.BlockHeader headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.PruningPointsMessage)
  return target;
}

size_t PruningPointsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.PruningPointsMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.BlockHeader headers = 1;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PruningPointsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PruningPointsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PruningPointsMessage::GetClassData() const { return &_class_data_; }

void PruningPointsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PruningPointsMessage *>(to)->MergeFrom(
      static_cast<const PruningPointsMessage &>(from));
}


void PruningPointsMessage::MergeFrom(const PruningPointsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.PruningPointsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PruningPointsMessage::CopyFrom(const PruningPointsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.PruningPointsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PruningPointsMessage::IsInitialized() const {
  return true;
}

void PruningPointsMessage::InternalSwap(PruningPointsMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  headers_.InternalSwap(&other->headers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PruningPointsMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[53]);
}

// ===================================================================

class RequestPruningPointProofMessage::_Internal {
 public:
};

RequestPruningPointProofMessage::RequestPruningPointProofMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protowire.RequestPruningPointProofMessage)
}
RequestPruningPointProofMessage::RequestPruningPointProofMessage(const RequestPruningPointProofMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.RequestPruningPointProofMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestPruningPointProofMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestPruningPointProofMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestPruningPointProofMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[54]);
}

// ===================================================================

class PruningPointProofMessage::_Internal {
 public:
};

PruningPointProofMessage::PruningPointProofMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.PruningPointProofMessage)
}
PruningPointProofMessage::PruningPointProofMessage(const PruningPointProofMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.PruningPointProofMessage)
}

inline void PruningPointProofMessage::SharedCtor() {
}

PruningPointProofMessage::~PruningPointProofMessage() {
  // @@protoc_insertion_point(destructor:protowire.PruningPointProofMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PruningPointProofMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PruningPointProofMessage::ArenaDtor(void* object) {
  PruningPointProofMessage* _this = reinterpret_cast< PruningPointProofMessage* >(object);
  (void)_this;
}
void PruningPointProofMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PruningPointProofMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PruningPointProofMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.PruningPointProofMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PruningPointProofMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.PruningPointProofHeaderArray headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PruningPointProofMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.PruningPointProofMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.PruningPointProofHeaderArray headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.PruningPointProofMessage)
  return target;
}

size_t PruningPointProofMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.PruningPointProofMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.PruningPointProofHeaderArray headers = 1;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PruningPointProofMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PruningPointProofMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PruningPointProofMessage::GetClassData() const { return &_class_data_; }

void PruningPointProofMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PruningPointProofMessage *>(to)->MergeFrom(
      static_cast<const PruningPointProofMessage &>(from));
}


void PruningPointProofMessage::MergeFrom(const PruningPointProofMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.PruningPointProofMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PruningPointProofMessage::CopyFrom(const PruningPointProofMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.PruningPointProofMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PruningPointProofMessage::IsInitialized() const {
  return true;
}

void PruningPointProofMessage::InternalSwap(PruningPointProofMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  headers_.InternalSwap(&other->headers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PruningPointProofMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[55]);
}

// ===================================================================

class PruningPointProofHeaderArray::_Internal {
 public:
};

PruningPointProofHeaderArray::PruningPointProofHeaderArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.PruningPointProofHeaderArray)
}
PruningPointProofHeaderArray::PruningPointProofHeaderArray(const PruningPointProofHeaderArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.PruningPointProofHeaderArray)
}

inline void PruningPointProofHeaderArray::SharedCtor() {
}

PruningPointProofHeaderArray::~PruningPointProofHeaderArray() {
  // @@protoc_insertion_point(destructor:protowire.PruningPointProofHeaderArray)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PruningPointProofHeaderArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PruningPointProofHeaderArray::ArenaDtor(void* object) {
  PruningPointProofHeaderArray* _this = reinterpret_cast< PruningPointProofHeaderArray* >(object);
  (void)_this;
}
void PruningPointProofHeaderArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PruningPointProofHeaderArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PruningPointProofHeaderArray::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.PruningPointProofHeaderArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PruningPointProofHeaderArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.BlockHeader headers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PruningPointProofHeaderArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.PruningPointProofHeaderArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.BlockHeader headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.PruningPointProofHeaderArray)
  return target;
}

size_t PruningPointProofHeaderArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.PruningPointProofHeaderArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.BlockHeader headers = 1;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PruningPointProofHeaderArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PruningPointProofHeaderArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PruningPointProofHeaderArray::GetClassData() const { return &_class_data_; }

void PruningPointProofHeaderArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PruningPointProofHeaderArray *>(to)->MergeFrom(
      static_cast<const PruningPointProofHeaderArray &>(from));
}


void PruningPointProofHeaderArray::MergeFrom(const PruningPointProofHeaderArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.PruningPointProofHeaderArray)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PruningPointProofHeaderArray::CopyFrom(const PruningPointProofHeaderArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.PruningPointProofHeaderArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PruningPointProofHeaderArray::IsInitialized() const {
  return true;
}

void PruningPointProofHeaderArray::InternalSwap(PruningPointProofHeaderArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  headers_.InternalSwap(&other->headers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PruningPointProofHeaderArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[56]);
}

// ===================================================================

class ReadyMessage::_Internal {
 public:
};

ReadyMessage::ReadyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protowire.ReadyMessage)
}
ReadyMessage::ReadyMessage(const ReadyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.ReadyMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadyMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadyMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[57]);
}

// ===================================================================

class BlockWithTrustedDataV4Message::_Internal {
 public:
  static const ::protowire::BlockMessage& block(const BlockWithTrustedDataV4Message* msg);
};

const ::protowire::BlockMessage&
BlockWithTrustedDataV4Message::_Internal::block(const BlockWithTrustedDataV4Message* msg) {
  return *msg->block_;
}
BlockWithTrustedDataV4Message::BlockWithTrustedDataV4Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  daawindowindices_(arena),
  ghostdagdataindices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.BlockWithTrustedDataV4Message)
}
BlockWithTrustedDataV4Message::BlockWithTrustedDataV4Message(const BlockWithTrustedDataV4Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      daawindowindices_(from.daawindowindices_),
      ghostdagdataindices_(from.ghostdagdataindices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::protowire::BlockMessage(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protowire.BlockWithTrustedDataV4Message)
}

inline void BlockWithTrustedDataV4Message::SharedCtor() {
block_ = nullptr;
}

BlockWithTrustedDataV4Message::~BlockWithTrustedDataV4Message() {
  // @@protoc_insertion_point(destructor:protowire.BlockWithTrustedDataV4Message)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockWithTrustedDataV4Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void BlockWithTrustedDataV4Message::ArenaDtor(void* object) {
  BlockWithTrustedDataV4Message* _this = reinterpret_cast< BlockWithTrustedDataV4Message* >(object);
  (void)_this;
}
void BlockWithTrustedDataV4Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockWithTrustedDataV4Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockWithTrustedDataV4Message::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.BlockWithTrustedDataV4Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  daawindowindices_.Clear();
  ghostdagdataindices_.Clear();
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockWithTrustedDataV4Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protowire.BlockMessage block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 daaWindowIndices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_daawindowindices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_daawindowindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 ghostdagDataIndices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_ghostdagdataindices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_ghostdagdataindices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockWithTrustedDataV4Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.BlockWithTrustedDataV4Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protowire.BlockMessage block = 1;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  // repeated uint64 daaWindowIndices = 2;
  {
    int byte_size = _daawindowindices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_daawindowindices(), byte_size, target);
    }
  }

  // repeated uint64 ghostdagDataIndices = 3;
  {
    int byte_size = _ghostdagdataindices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_ghostdagdataindices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.BlockWithTrustedDataV4Message)
  return target;
}

size_t BlockWithTrustedDataV4Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.BlockWithTrustedDataV4Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 daaWindowIndices = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->daawindowindices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _daawindowindices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 ghostdagDataIndices = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->ghostdagdataindices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ghostdagdataindices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .protowire.BlockMessage block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockWithTrustedDataV4Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockWithTrustedDataV4Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockWithTrustedDataV4Message::GetClassData() const { return &_class_data_; }

void BlockWithTrustedDataV4Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockWithTrustedDataV4Message *>(to)->MergeFrom(
      static_cast<const BlockWithTrustedDataV4Message &>(from));
}


void BlockWithTrustedDataV4Message::MergeFrom(const BlockWithTrustedDataV4Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.BlockWithTrustedDataV4Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  daawindowindices_.MergeFrom(from.daawindowindices_);
  ghostdagdataindices_.MergeFrom(from.ghostdagdataindices_);
  if (from._internal_has_block()) {
    _internal_mutable_block()->::protowire::BlockMessage::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockWithTrustedDataV4Message::CopyFrom(const BlockWithTrustedDataV4Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.BlockWithTrustedDataV4Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockWithTrustedDataV4Message::IsInitialized() const {
  return true;
}

void BlockWithTrustedDataV4Message::InternalSwap(BlockWithTrustedDataV4Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  daawindowindices_.InternalSwap(&other->daawindowindices_);
  ghostdagdataindices_.InternalSwap(&other->ghostdagdataindices_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockWithTrustedDataV4Message::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[58]);
}

// ===================================================================

class TrustedDataMessage::_Internal {
 public:
};

TrustedDataMessage::TrustedDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  daawindow_(arena),
  ghostdagdata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protowire.TrustedDataMessage)
}
TrustedDataMessage::TrustedDataMessage(const TrustedDataMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      daawindow_(from.daawindow_),
      ghostdagdata_(from.ghostdagdata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protowire.TrustedDataMessage)
}

inline void TrustedDataMessage::SharedCtor() {
}

TrustedDataMessage::~TrustedDataMessage() {
  // @@protoc_insertion_point(destructor:protowire.TrustedDataMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrustedDataMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustedDataMessage::ArenaDtor(void* object) {
  TrustedDataMessage* _this = reinterpret_cast< TrustedDataMessage* >(object);
  (void)_this;
}
void TrustedDataMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrustedDataMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrustedDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protowire.TrustedDataMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  daawindow_.Clear();
  ghostdagdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustedDataMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protowire.DaaBlockV4 daaWindow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_daawindow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protowire.BlockGhostdagDataHashPair ghostdagData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ghostdagdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrustedDataMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protowire.TrustedDataMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protowire.DaaBlockV4 daaWindow = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_daawindow_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_daawindow(i), target, stream);
  }

  // repeated .protowire.BlockGhostdagDataHashPair ghostdagData = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ghostdagdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ghostdagdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protowire.TrustedDataMessage)
  return target;
}

size_t TrustedDataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protowire.TrustedDataMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protowire.DaaBlockV4 daaWindow = 1;
  total_size += 1UL * this->_internal_daawindow_size();
  for (const auto& msg : this->daawindow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protowire.BlockGhostdagDataHashPair ghostdagData = 2;
  total_size += 1UL * this->_internal_ghostdagdata_size();
  for (const auto& msg : this->ghostdagdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustedDataMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrustedDataMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustedDataMessage::GetClassData() const { return &_class_data_; }

void TrustedDataMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrustedDataMessage *>(to)->MergeFrom(
      static_cast<const TrustedDataMessage &>(from));
}


void TrustedDataMessage::MergeFrom(const TrustedDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protowire.TrustedDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  daawindow_.MergeFrom(from.daawindow_);
  ghostdagdata_.MergeFrom(from.ghostdagdata_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustedDataMessage::CopyFrom(const TrustedDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protowire.TrustedDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustedDataMessage::IsInitialized() const {
  return true;
}

void TrustedDataMessage::InternalSwap(TrustedDataMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  daawindow_.InternalSwap(&other->daawindow_);
  ghostdagdata_.InternalSwap(&other->ghostdagdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustedDataMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_p2p_2eproto_getter, &descriptor_table_p2p_2eproto_once,
      file_level_metadata_p2p_2eproto[59]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protowire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protowire::RequestAddressesMessage* Arena::CreateMaybeMessage< ::protowire::RequestAddressesMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestAddressesMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::AddressesMessage* Arena::CreateMaybeMessage< ::protowire::AddressesMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::AddressesMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::NetAddress* Arena::CreateMaybeMessage< ::protowire::NetAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::NetAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::SubnetworkId* Arena::CreateMaybeMessage< ::protowire::SubnetworkId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::SubnetworkId >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::TransactionMessage* Arena::CreateMaybeMessage< ::protowire::TransactionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::TransactionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::TransactionInput* Arena::CreateMaybeMessage< ::protowire::TransactionInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::TransactionInput >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::Outpoint* Arena::CreateMaybeMessage< ::protowire::Outpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::Outpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::TransactionId* Arena::CreateMaybeMessage< ::protowire::TransactionId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::TransactionId >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::ScriptPublicKey* Arena::CreateMaybeMessage< ::protowire::ScriptPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::ScriptPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::TransactionOutput* Arena::CreateMaybeMessage< ::protowire::TransactionOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::TransactionOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::BlockMessage* Arena::CreateMaybeMessage< ::protowire::BlockMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::BlockMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::BlockHeader* Arena::CreateMaybeMessage< ::protowire::BlockHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::BlockHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::BlockLevelParents* Arena::CreateMaybeMessage< ::protowire::BlockLevelParents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::BlockLevelParents >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::Hash* Arena::CreateMaybeMessage< ::protowire::Hash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::Hash >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RequestBlockLocatorMessage* Arena::CreateMaybeMessage< ::protowire::RequestBlockLocatorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestBlockLocatorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::BlockLocatorMessage* Arena::CreateMaybeMessage< ::protowire::BlockLocatorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::BlockLocatorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RequestHeadersMessage* Arena::CreateMaybeMessage< ::protowire::RequestHeadersMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestHeadersMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RequestNextHeadersMessage* Arena::CreateMaybeMessage< ::protowire::RequestNextHeadersMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestNextHeadersMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::DoneHeadersMessage* Arena::CreateMaybeMessage< ::protowire::DoneHeadersMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::DoneHeadersMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RequestRelayBlocksMessage* Arena::CreateMaybeMessage< ::protowire::RequestRelayBlocksMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestRelayBlocksMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RequestTransactionsMessage* Arena::CreateMaybeMessage< ::protowire::RequestTransactionsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestTransactionsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::TransactionNotFoundMessage* Arena::CreateMaybeMessage< ::protowire::TransactionNotFoundMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::TransactionNotFoundMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::InvRelayBlockMessage* Arena::CreateMaybeMessage< ::protowire::InvRelayBlockMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::InvRelayBlockMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::InvTransactionsMessage* Arena::CreateMaybeMessage< ::protowire::InvTransactionsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::InvTransactionsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::PingMessage* Arena::CreateMaybeMessage< ::protowire::PingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::PingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::PongMessage* Arena::CreateMaybeMessage< ::protowire::PongMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::PongMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::VerackMessage* Arena::CreateMaybeMessage< ::protowire::VerackMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::VerackMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::VersionMessage* Arena::CreateMaybeMessage< ::protowire::VersionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::VersionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RejectMessage* Arena::CreateMaybeMessage< ::protowire::RejectMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RejectMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RequestPruningPointUTXOSetMessage* Arena::CreateMaybeMessage< ::protowire::RequestPruningPointUTXOSetMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestPruningPointUTXOSetMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::PruningPointUtxoSetChunkMessage* Arena::CreateMaybeMessage< ::protowire::PruningPointUtxoSetChunkMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::PruningPointUtxoSetChunkMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::OutpointAndUtxoEntryPair* Arena::CreateMaybeMessage< ::protowire::OutpointAndUtxoEntryPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::OutpointAndUtxoEntryPair >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::UtxoEntry* Arena::CreateMaybeMessage< ::protowire::UtxoEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::UtxoEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RequestNextPruningPointUtxoSetChunkMessage* Arena::CreateMaybeMessage< ::protowire::RequestNextPruningPointUtxoSetChunkMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestNextPruningPointUtxoSetChunkMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::DonePruningPointUtxoSetChunksMessage* Arena::CreateMaybeMessage< ::protowire::DonePruningPointUtxoSetChunksMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::DonePruningPointUtxoSetChunksMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RequestIBDBlocksMessage* Arena::CreateMaybeMessage< ::protowire::RequestIBDBlocksMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestIBDBlocksMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::UnexpectedPruningPointMessage* Arena::CreateMaybeMessage< ::protowire::UnexpectedPruningPointMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::UnexpectedPruningPointMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::IbdBlockLocatorMessage* Arena::CreateMaybeMessage< ::protowire::IbdBlockLocatorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::IbdBlockLocatorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RequestIBDChainBlockLocatorMessage* Arena::CreateMaybeMessage< ::protowire::RequestIBDChainBlockLocatorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestIBDChainBlockLocatorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::IbdChainBlockLocatorMessage* Arena::CreateMaybeMessage< ::protowire::IbdChainBlockLocatorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::IbdChainBlockLocatorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RequestAnticoneMessage* Arena::CreateMaybeMessage< ::protowire::RequestAnticoneMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestAnticoneMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::IbdBlockLocatorHighestHashMessage* Arena::CreateMaybeMessage< ::protowire::IbdBlockLocatorHighestHashMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::IbdBlockLocatorHighestHashMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::IbdBlockLocatorHighestHashNotFoundMessage* Arena::CreateMaybeMessage< ::protowire::IbdBlockLocatorHighestHashNotFoundMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::IbdBlockLocatorHighestHashNotFoundMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::BlockHeadersMessage* Arena::CreateMaybeMessage< ::protowire::BlockHeadersMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::BlockHeadersMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RequestPruningPointAndItsAnticoneMessage* Arena::CreateMaybeMessage< ::protowire::RequestPruningPointAndItsAnticoneMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestPruningPointAndItsAnticoneMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage* Arena::CreateMaybeMessage< ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestNextPruningPointAndItsAnticoneBlocksMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::BlockWithTrustedDataMessage* Arena::CreateMaybeMessage< ::protowire::BlockWithTrustedDataMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::BlockWithTrustedDataMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::DaaBlock* Arena::CreateMaybeMessage< ::protowire::DaaBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::DaaBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::DaaBlockV4* Arena::CreateMaybeMessage< ::protowire::DaaBlockV4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::DaaBlockV4 >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::BlockGhostdagDataHashPair* Arena::CreateMaybeMessage< ::protowire::BlockGhostdagDataHashPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::BlockGhostdagDataHashPair >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::GhostdagData* Arena::CreateMaybeMessage< ::protowire::GhostdagData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::GhostdagData >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::BluesAnticoneSizes* Arena::CreateMaybeMessage< ::protowire::BluesAnticoneSizes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::BluesAnticoneSizes >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::DoneBlocksWithTrustedDataMessage* Arena::CreateMaybeMessage< ::protowire::DoneBlocksWithTrustedDataMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::DoneBlocksWithTrustedDataMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::PruningPointsMessage* Arena::CreateMaybeMessage< ::protowire::PruningPointsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::PruningPointsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::RequestPruningPointProofMessage* Arena::CreateMaybeMessage< ::protowire::RequestPruningPointProofMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::RequestPruningPointProofMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::PruningPointProofMessage* Arena::CreateMaybeMessage< ::protowire::PruningPointProofMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::PruningPointProofMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::PruningPointProofHeaderArray* Arena::CreateMaybeMessage< ::protowire::PruningPointProofHeaderArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::PruningPointProofHeaderArray >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::ReadyMessage* Arena::CreateMaybeMessage< ::protowire::ReadyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::ReadyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::BlockWithTrustedDataV4Message* Arena::CreateMaybeMessage< ::protowire::BlockWithTrustedDataV4Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::BlockWithTrustedDataV4Message >(arena);
}
template<> PROTOBUF_NOINLINE ::protowire::TrustedDataMessage* Arena::CreateMaybeMessage< ::protowire::TrustedDataMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protowire::TrustedDataMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
